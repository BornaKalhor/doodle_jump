
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b05c  0800b05c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b05c  0800b05c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b05c  0800b05c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800b064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          000008c8  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000990  20000990  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ce5  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad6  00000000  00000000  00040ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001960  00000000  00000000  000448b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  00046218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228fc  00000000  00000000  00047a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020179  00000000  00000000  0006a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce974  00000000  00000000  0008a49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158e11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ac0  00000000  00000000  00158e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00160924  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00160948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad28 	.word	0x0800ad28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800ad28 	.word	0x0800ad28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	817b      	strh	r3, [r7, #10]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	813b      	strh	r3, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <LiquidCrystal+0x90>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bca:	8939      	ldrh	r1, [r7, #8]
 8000bcc:	897a      	ldrh	r2, [r7, #10]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9308      	str	r3, [sp, #32]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9307      	str	r3, [sp, #28]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9306      	str	r3, [sp, #24]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9305      	str	r3, [sp, #20]
 8000bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be0:	9304      	str	r3, [sp, #16]
 8000be2:	8c3b      	ldrh	r3, [r7, #32]
 8000be4:	9303      	str	r3, [sp, #12]
 8000be6:	8bbb      	ldrh	r3, [r7, #28]
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	8b3b      	ldrh	r3, [r7, #24]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 f820 	bl	8000c3c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bfc:	e018      	b.n	8000c30 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bfe:	8939      	ldrh	r1, [r7, #8]
 8000c00:	897a      	ldrh	r2, [r7, #10]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9308      	str	r3, [sp, #32]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9307      	str	r3, [sp, #28]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	8c3b      	ldrh	r3, [r7, #32]
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	460b      	mov	r3, r1
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f806 	bl	8000c3c <init>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000

08000c3c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	4611      	mov	r1, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <init+0x84>)
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <init+0x88>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <init+0x8c>)
 8000c62:	8b3b      	ldrh	r3, [r7, #24]
 8000c64:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <init+0x90>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <init+0x94>)
 8000c6e:	8bbb      	ldrh	r3, [r7, #28]
 8000c70:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <init+0x94>)
 8000c74:	8c3b      	ldrh	r3, [r7, #32]
 8000c76:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <init+0x94>)
 8000c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c7c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <init+0x94>)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <init+0x94>)
 8000c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c88:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <init+0x94>)
 8000c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c8e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <init+0x94>)
 8000c92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c94:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <init+0x94>)
 8000c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e002      	b.n	8000cb0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <init+0x98>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f000 f810 	bl	8000cd8 <begin>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	200000fc 	.word	0x200000fc
 8000cc8:	2000011a 	.word	0x2000011a
 8000ccc:	20000100 	.word	0x20000100
 8000cd0:	20000108 	.word	0x20000108
 8000cd4:	20000119 	.word	0x20000119

08000cd8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d906      	bls.n	8000cfc <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <begin+0x1f4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <begin+0x1f4>)
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cfc:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <begin+0x1f8>)
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f988 	bl	8001020 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <begin+0x1fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <begin+0x54>
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <begin+0x1f4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <begin+0x1f4>)
 8000d2a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d2c:	f000 f8e4 	bl	8000ef8 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <begin+0x200>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <begin+0x204>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <begin+0x208>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <begin+0x20c>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <begin+0x210>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <begin+0x210>)
 8000d5e:	885b      	ldrh	r3, [r3, #2]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <begin+0x210>)
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <begin+0x210>)
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e02a      	b.n	8000dce <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <begin+0x204>)
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <begin+0x208>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b57      	ldr	r3, [pc, #348]	; (8000ee4 <begin+0x20c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <begin+0x210>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <begin+0x210>)
 8000d96:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <begin+0x210>)
 8000d9e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <begin+0x210>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <begin+0x210>)
 8000dae:	891b      	ldrh	r3, [r3, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <begin+0x210>)
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <begin+0x210>)
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <begin+0x210>)
 8000dc6:	89db      	ldrh	r3, [r3, #14]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dcc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <begin+0x214>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fcaf 	bl	800573c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f003 f8ca 	bl	8003f78 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <begin+0x214>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <begin+0x204>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fe36 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <begin+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <begin+0x20c>)
 8000dfa:	8811      	ldrh	r1, [r2, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fe2e 	bl	8005a60 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <begin+0x208>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d007      	beq.n	8000e1c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <begin+0x214>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <begin+0x208>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 fe22 	bl	8005a60 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <begin+0x1f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d115      	bne.n	8000e54 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa45 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f003 f8a2 	bl	8003f78 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa3f 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e3a:	2005      	movs	r0, #5
 8000e3c:	f003 f89c 	bl	8003f78 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fa39 	bl	80012b8 <write4bits>
    HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f003 f896 	bl	8003f78 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fa33 	bl	80012b8 <write4bits>
 8000e52:	e01d      	b.n	8000e90 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <begin+0x1f4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9a4 	bl	80011ac <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e64:	2005      	movs	r0, #5
 8000e66:	f003 f887 	bl	8003f78 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <begin+0x1f4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f999 	bl	80011ac <command>
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f003 f87c 	bl	8003f78 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <begin+0x1f4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f98e 	bl	80011ac <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <begin+0x1f4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f986 	bl	80011ac <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <begin+0x218>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  display();
 8000ea6:	f000 f917 	bl	80010d8 <display>

  // clear it off
  clear();
 8000eaa:	f000 f8d9 	bl	8001060 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <begin+0x21c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <begin+0x21c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f974 	bl	80011ac <command>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000119 	.word	0x20000119
 8000ed0:	20000105 	.word	0x20000105
 8000ed4:	200000e4 	.word	0x200000e4
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	2000011c 	.word	0x2000011c
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	2000011a 	.word	0x2000011a
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	20000100 	.word	0x20000100
 8000ef0:	20000104 	.word	0x20000104
 8000ef4:	20000118 	.word	0x20000118

08000ef8 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <enableClock+0x10c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f06:	d10c      	bne.n	8000f22 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <enableClock+0x110>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <enableClock+0x110>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f20:	e06a      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <enableClock+0x10c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <enableClock+0x114>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10c      	bne.n	8000f46 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <enableClock+0x110>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <enableClock+0x110>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
}
 8000f44:	e058      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <enableClock+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a30      	ldr	r2, [pc, #192]	; (800100c <enableClock+0x114>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10c      	bne.n	8000f6a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <enableClock+0x110>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <enableClock+0x110>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
}
 8000f68:	e046      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOC)
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <enableClock+0x10c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <enableClock+0x118>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10c      	bne.n	8000f8e <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <enableClock+0x110>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	6153      	str	r3, [r2, #20]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <enableClock+0x110>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	e034      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOD)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <enableClock+0x10c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <enableClock+0x11c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10c      	bne.n	8000fb2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <enableClock+0x110>)
 8000f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa2:	6153      	str	r3, [r2, #20]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <enableClock+0x110>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	e022      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOE)
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <enableClock+0x10c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <enableClock+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d10c      	bne.n	8000fd6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <enableClock+0x110>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	6153      	str	r3, [r2, #20]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <enableClock+0x110>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
}
 8000fd4:	e010      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOF)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <enableClock+0x10c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <enableClock+0x124>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10b      	bne.n	8000ff8 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <enableClock+0x110>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6153      	str	r3, [r2, #20]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <enableClock+0x110>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000100 	.word	0x20000100
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48001000 	.word	0x48001000
 800101c:	48001400 	.word	0x48001400

08001020 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <setRowOffsets+0x3c>)
 8001034:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <setRowOffsets+0x3c>)
 800103c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <setRowOffsets+0x3c>)
 8001044:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <setRowOffsets+0x3c>)
 800104c:	70da      	strb	r2, [r3, #3]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000f8 	.word	0x200000f8

08001060 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f8a1 	bl	80011ac <command>
  HAL_Delay(2);  // this command takes a long time!
 800106a:	2002      	movs	r0, #2
 800106c:	f002 ff84 	bl	8003f78 <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d803      	bhi.n	8001098 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setCursor+0x5c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	79ba      	ldrb	r2, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d303      	bcc.n	80010aa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <setCursor+0x5c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <setCursor+0x60>)
 80010ae:	5cd2      	ldrb	r2, [r2, r3]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f873 	bl	80011ac <command>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000105 	.word	0x20000105
 80010d4:	200000f8 	.word	0x200000f8

080010d8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <display+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <display+0x28>)
 80010e8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <display+0x28>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f859 	bl	80011ac <command>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000104 	.word	0x20000104

08001104 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <print+0x12>
 8001112:	2300      	movs	r3, #0
 8001114:	e01d      	b.n	8001152 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strlen>
 8001120:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001126:	e00c      	b.n	8001142 <print+0x3e>
    if (write(*buffer++)) n++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f849 	bl	80011c8 <write>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <print+0x4a>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	613a      	str	r2, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ed      	bne.n	8001128 <print+0x24>
 800114c:	e000      	b.n	8001150 <print+0x4c>
    else break;
 800114e:	bf00      	nop
  }
  return n;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f815 	bl	80011ac <command>
  for (int i=0; i<8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e009      	b.n	800119c <createChar+0x42>
    write(charmap[i]);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f819 	bl	80011c8 <write>
  for (int i=0; i<8; i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	ddf2      	ble.n	8001188 <createChar+0x2e>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f814 	bl	80011e8 <send>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <write>:

inline size_t write(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f806 	bl	80011e8 <send>
  return 1; // assume sucess
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <send+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <send+0x70>)
 80011fe:	8811      	ldrh	r1, [r2, #0]
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fc2c 	bl	8005a60 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <send+0x74>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2bff      	cmp	r3, #255	; 0xff
 800120e:	d007      	beq.n	8001220 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <send+0x6c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <send+0x74>)
 8001216:	8811      	ldrh	r1, [r2, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fc20 	bl	8005a60 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <send+0x78>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <send+0x4e>
    write8bits(value);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f86c 	bl	800130c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001234:	e009      	b.n	800124a <send+0x62>
    write4bits(value>>4);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f83b 	bl	80012b8 <write4bits>
    write4bits(value);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f837 	bl	80012b8 <write4bits>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000100 	.word	0x20000100
 8001258:	2000011c 	.word	0x2000011c
 800125c:	200000fc 	.word	0x200000fc
 8001260:	20000119 	.word	0x20000119

08001264 <pulseEnable>:

void pulseEnable(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <pulseEnable+0x4c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <pulseEnable+0x50>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fbf4 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 fe7d 	bl	8003f78 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <pulseEnable+0x4c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <pulseEnable+0x50>)
 8001284:	8811      	ldrh	r1, [r2, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fbe9 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800128e:	2001      	movs	r0, #1
 8001290:	f002 fe72 	bl	8003f78 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <pulseEnable+0x4c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <pulseEnable+0x50>)
 800129a:	8811      	ldrh	r1, [r2, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fbde 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fe67 	bl	8003f78 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000100 	.word	0x20000100
 80012b4:	2000011a 	.word	0x2000011a

080012b8 <write4bits>:

void write4bits(uint8_t value) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e013      	b.n	80012f0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <write4bits+0x4c>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <write4bits+0x50>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f004 fbbb 	bl	8005a60 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	dde8      	ble.n	80012c8 <write4bits+0x10>
  }

  pulseEnable();
 80012f6:	f7ff ffb5 	bl	8001264 <pulseEnable>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000100 	.word	0x20000100
 8001308:	20000108 	.word	0x20000108

0800130c <write8bits>:

void write8bits(uint8_t value) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e013      	b.n	8001344 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <write8bits+0x4c>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <write8bits+0x50>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	fa42 f303 	asr.w	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f004 fb91 	bl	8005a60 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b07      	cmp	r3, #7
 8001348:	dde8      	ble.n	800131c <write8bits+0x10>
  }

  pulseEnable();
 800134a:	f7ff ff8b 	bl	8001264 <pulseEnable>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000100 	.word	0x20000100
 800135c:	20000108 	.word	0x20000108

08001360 <init_state_vars>:
  0x03,
  0x03,
  0x03
};

void init_state_vars() {
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
     * menusState:
     * 	'z' init page
     * 	'g' game page
     * 	'a' about us
     * */
	menuState = 'z';
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <init_state_vars+0x14>)
 8001366:	227a      	movs	r2, #122	; 0x7a
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	2000016c 	.word	0x2000016c

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b096      	sub	sp, #88	; 0x58
 800137c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f002 fd95 	bl	8003eac <HAL_Init>
  /* USER CODE BEGIN Init */




  init_state_vars();
 8001382:	f7ff ffed 	bl	8001360 <init_state_vars>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	2110      	movs	r1, #16
 800138a:	4877      	ldr	r0, [pc, #476]	; (8001568 <main+0x1f0>)
 800138c:	f004 fb68 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2120      	movs	r1, #32
 8001394:	4874      	ldr	r0, [pc, #464]	; (8001568 <main+0x1f0>)
 8001396:	f004 fb63 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4872      	ldr	r0, [pc, #456]	; (8001568 <main+0x1f0>)
 80013a0:	f004 fb5e 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	486f      	ldr	r0, [pc, #444]	; (8001568 <main+0x1f0>)
 80013aa:	f004 fb59 	bl	8005a60 <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80013ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4865      	ldr	r0, [pc, #404]	; (8001568 <main+0x1f0>)
 80013d4:	f7ff fbe8 	bl	8000ba8 <LiquidCrystal>
  begin(20, 4);
 80013d8:	2104      	movs	r1, #4
 80013da:	2014      	movs	r0, #20
 80013dc:	f7ff fc7c 	bl	8000cd8 <begin>

	createChar(0, doodler);
 80013e0:	4962      	ldr	r1, [pc, #392]	; (800156c <main+0x1f4>)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff feb9 	bl	800115a <createChar>
	createChar(1, step);
 80013e8:	4961      	ldr	r1, [pc, #388]	; (8001570 <main+0x1f8>)
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff feb5 	bl	800115a <createChar>
	createChar(2, enemy);
 80013f0:	4960      	ldr	r1, [pc, #384]	; (8001574 <main+0x1fc>)
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff feb1 	bl	800115a <createChar>
	createChar(3, spring_booster);
 80013f8:	495f      	ldr	r1, [pc, #380]	; (8001578 <main+0x200>)
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff fead 	bl	800115a <createChar>
	createChar(4, blackhole);
 8001400:	495e      	ldr	r1, [pc, #376]	; (800157c <main+0x204>)
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff fea9 	bl	800115a <createChar>
	createChar(5, broken_step);
 8001408:	495d      	ldr	r1, [pc, #372]	; (8001580 <main+0x208>)
 800140a:	2005      	movs	r0, #5
 800140c:	f7ff fea5 	bl	800115a <createChar>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f8cc 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 fb92 	bl	8001b3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001418:	f000 f992 	bl	8001740 <MX_I2C1_Init>
  MX_SPI1_Init();
 800141c:	f000 fa2a 	bl	8001874 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001420:	f000 fb6a 	bl	8001af8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001424:	f000 fa64 	bl	80018f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001428:	f000 fb36 	bl	8001a98 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800142c:	f000 fafe 	bl	8001a2c <MX_TIM7_Init>
  MX_ADC4_Init();
 8001430:	f000 f928 	bl	8001684 <MX_ADC4_Init>
  MX_TIM3_Init();
 8001434:	f000 faaa 	bl	800198c <MX_TIM3_Init>
  MX_RTC_Init();
 8001438:	f000 f9c2 	bl	80017c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc4);
 800143c:	4851      	ldr	r0, [pc, #324]	; (8001584 <main+0x20c>)
 800143e:	f002 ffbd 	bl	80043bc <HAL_ADC_Start_IT>


  unsigned char hello[8] = "hello \n";
 8001442:	4a51      	ldr	r2, [pc, #324]	; (8001588 <main+0x210>)
 8001444:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800144c:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
 8001450:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001454:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001458:	2208      	movs	r2, #8
 800145a:	484c      	ldr	r0, [pc, #304]	; (800158c <main+0x214>)
 800145c:	f007 f916 	bl	800868c <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001460:	484b      	ldr	r0, [pc, #300]	; (8001590 <main+0x218>)
 8001462:	f006 fc79 	bl	8007d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001466:	484b      	ldr	r0, [pc, #300]	; (8001594 <main+0x21c>)
 8001468:	f006 fc76 	bl	8007d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800146c:	484a      	ldr	r0, [pc, #296]	; (8001598 <main+0x220>)
 800146e:	f006 fc73 	bl	8007d58 <HAL_TIM_Base_Start_IT>


  RTC_TimeTypeDef mytime;
  mytime.Hours = 6;
 8001472:	2306      	movs	r3, #6
 8001474:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  mytime.Minutes = 23;
 8001478:	2317      	movs	r3, #23
 800147a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  mytime.Seconds = 20;
 800147e:	2314      	movs	r3, #20
 8001480:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	4843      	ldr	r0, [pc, #268]	; (800159c <main+0x224>)
 800148e:	f006 f8c0 	bl	8007612 <HAL_RTC_SetTime>


  RTC_DateTypeDef mydate;
  mydate.Year = 22;
 8001492:	2316      	movs	r3, #22
 8001494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  mydate.Month = 7;
 8001498:	2307      	movs	r3, #7
 800149a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  mydate.Date = 2;
 800149e:	2302      	movs	r3, #2
 80014a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80014a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	483b      	ldr	r0, [pc, #236]	; (800159c <main+0x224>)
 80014ae:	f006 f9cb 	bl	8007848 <HAL_RTC_SetDate>


  char timeStr[20];
  char dateStr[20];

  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4838      	ldr	r0, [pc, #224]	; (800159c <main+0x224>)
 80014bc:	f006 f966 	bl	800778c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80014c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4834      	ldr	r0, [pc, #208]	; (800159c <main+0x224>)
 80014ca:	f006 fa64 	bl	8007996 <HAL_RTC_GetDate>


  sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 80014ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014d2:	461a      	mov	r2, r3
 80014d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014d8:	4619      	mov	r1, r3
 80014da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014de:	f107 0014 	add.w	r0, r7, #20
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	460b      	mov	r3, r1
 80014e6:	492e      	ldr	r1, [pc, #184]	; (80015a0 <main+0x228>)
 80014e8:	f008 f96e 	bl	80097c8 <siprintf>
  sprintf(dateStr, "%d //%d // %d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 80014ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014f0:	461a      	mov	r2, r3
 80014f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014f6:	4619      	mov	r1, r3
 80014f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014fc:	4638      	mov	r0, r7
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	460b      	mov	r3, r1
 8001502:	4928      	ldr	r1, [pc, #160]	; (80015a4 <main+0x22c>)
 8001504:	f008 f960 	bl	80097c8 <siprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <main+0x224>)
 8001512:	f006 f93b 	bl	800778c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	481f      	ldr	r0, [pc, #124]	; (800159c <main+0x224>)
 8001520:	f006 fa39 	bl	8007996 <HAL_RTC_GetDate>


	  sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001524:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001528:	461a      	mov	r2, r3
 800152a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800152e:	4619      	mov	r1, r3
 8001530:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001534:	f107 0014 	add.w	r0, r7, #20
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	460b      	mov	r3, r1
 800153c:	4918      	ldr	r1, [pc, #96]	; (80015a0 <main+0x228>)
 800153e:	f008 f943 	bl	80097c8 <siprintf>
	  sprintf(dateStr, "%d//%d//%d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001542:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001546:	461a      	mov	r2, r3
 8001548:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800154c:	4619      	mov	r1, r3
 800154e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001552:	4638      	mov	r0, r7
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	460b      	mov	r3, r1
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <main+0x230>)
 800155a:	f008 f935 	bl	80097c8 <siprintf>


	  HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f002 fd0a 	bl	8003f78 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001564:	e7d0      	b.n	8001508 <main+0x190>
 8001566:	bf00      	nop
 8001568:	48000c00 	.word	0x48000c00
 800156c:	20000004 	.word	0x20000004
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000014 	.word	0x20000014
 8001578:	2000001c 	.word	0x2000001c
 800157c:	20000024 	.word	0x20000024
 8001580:	2000002c 	.word	0x2000002c
 8001584:	20000310 	.word	0x20000310
 8001588:	0800ad68 	.word	0x0800ad68
 800158c:	2000028c 	.word	0x2000028c
 8001590:	20000240 	.word	0x20000240
 8001594:	20000170 	.word	0x20000170
 8001598:	2000064c 	.word	0x2000064c
 800159c:	200001bc 	.word	0x200001bc
 80015a0:	0800ad40 	.word	0x0800ad40
 80015a4:	0800ad4c 	.word	0x0800ad4c
 80015a8:	0800ad5c 	.word	0x0800ad5c

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09e      	sub	sp, #120	; 0x78
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015b6:	2228      	movs	r2, #40	; 0x28
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f008 f88e 	bl	80096dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	223c      	movs	r2, #60	; 0x3c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 f880 	bl	80096dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80015dc:	230b      	movs	r3, #11
 80015de:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ea:	2301      	movs	r3, #1
 80015ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ee:	2310      	movs	r3, #16
 80015f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015f2:	2301      	movs	r3, #1
 80015f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f6:	2302      	movs	r3, #2
 80015f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001604:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fc82 	bl	8005f14 <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001616:	f000 fb7f 	bl	8001d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f005 fb74 	bl	8006d24 <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001642:	f000 fb69 	bl	8001d18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <SystemClock_Config+0xd4>)
 8001648:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800165e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4618      	mov	r0, r3
 8001668:	f005 fd92 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001672:	f000 fb51 	bl	8001d18 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3778      	adds	r7, #120	; 0x78
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00030122 	.word	0x00030122

08001684 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_ADC4_Init+0xb4>)
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <MX_ADC4_Init+0xb8>)
 800169e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <MX_ADC4_Init+0xb4>)
 80016f4:	f002 fc82 	bl	8003ffc <HAL_ADC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80016fe:	f000 fb0b 	bl	8001d18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001702:	2304      	movs	r3, #4
 8001704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001706:	2301      	movs	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_ADC4_Init+0xb4>)
 8001720:	f003 face 	bl	8004cc0 <HAL_ADC_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800172a:	f000 faf5 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000310 	.word	0x20000310
 800173c:	50000500 	.word	0x50000500

08001740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_I2C1_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_I2C1_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_I2C1_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001758:	2201      	movs	r2, #1
 800175a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_I2C1_Init+0x74>)
 800177c:	f004 f9c5 	bl	8005b0a <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001786:	f000 fac7 	bl	8001d18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <MX_I2C1_Init+0x74>)
 800178e:	f004 fa4b 	bl	8005c28 <HAL_I2CEx_ConfigAnalogFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 fabe 	bl	8001d18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_I2C1_Init+0x74>)
 80017a0:	f004 fa8d 	bl	8005cbe <HAL_I2CEx_ConfigDigitalFilter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 fab5 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000120 	.word	0x20000120
 80017b8:	40005400 	.word	0x40005400
 80017bc:	2000090e 	.word	0x2000090e

080017c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_RTC_Init+0xac>)
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <MX_RTC_Init+0xb0>)
 80017dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_RTC_Init+0xac>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_RTC_Init+0xac>)
 80017e6:	2227      	movs	r2, #39	; 0x27
 80017e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <MX_RTC_Init+0xac>)
 80017ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_RTC_Init+0xac>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_RTC_Init+0xac>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_RTC_Init+0xac>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <MX_RTC_Init+0xac>)
 8001806:	f005 fe73 	bl	80074f0 <HAL_RTC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001810:	f000 fa82 	bl	8001d18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001814:	2300      	movs	r3, #0
 8001816:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001818:	2300      	movs	r3, #0
 800181a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2201      	movs	r2, #1
 800182c:	4619      	mov	r1, r3
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <MX_RTC_Init+0xac>)
 8001830:	f005 feef 	bl	8007612 <HAL_RTC_SetTime>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800183a:	f000 fa6d 	bl	8001d18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800183e:	2301      	movs	r3, #1
 8001840:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001842:	2301      	movs	r3, #1
 8001844:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001846:	2301      	movs	r3, #1
 8001848:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	2201      	movs	r2, #1
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_RTC_Init+0xac>)
 8001856:	f005 fff7 	bl	8007848 <HAL_RTC_SetDate>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001860:	f000 fa5a 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200001bc 	.word	0x200001bc
 8001870:	40002800 	.word	0x40002800

08001874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_SPI1_Init+0x74>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <MX_SPI1_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_SPI1_Init+0x74>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_SPI1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_SPI1_Init+0x74>)
 800188e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_SPI1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_SPI1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018c2:	2207      	movs	r2, #7
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018ce:	2208      	movs	r2, #8
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_SPI1_Init+0x74>)
 80018d4:	f006 f93e 	bl	8007b54 <HAL_SPI_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 fa1b 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001dc 	.word	0x200001dc
 80018ec:	40013000 	.word	0x40013000

080018f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_TIM2_Init+0x98>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <MX_TIM2_Init+0x98>)
 8001918:	f640 125f 	movw	r2, #2399	; 0x95f
 800191c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_TIM2_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_TIM2_Init+0x98>)
 8001926:	f242 7210 	movw	r2, #10000	; 0x2710
 800192a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_TIM2_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM2_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <MX_TIM2_Init+0x98>)
 800193a:	f006 f9b6 	bl	8007caa <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001944:	f000 f9e8 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_TIM2_Init+0x98>)
 8001956:	f006 fb88 	bl	800806a <HAL_TIM_ConfigClockSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001960:	f000 f9da 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM2_Init+0x98>)
 8001972:	f006 fd9f 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800197c:	f000 f9cc 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000240 	.word	0x20000240

0800198c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <MX_TIM3_Init+0x9c>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019b2:	f640 125f 	movw	r2, #2399	; 0x95f
 80019b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019d4:	f006 f969 	bl	8007caa <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80019de:	f000 f99b 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_TIM3_Init+0x98>)
 80019f0:	f006 fb3b 	bl	800806a <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80019fa:	f000 f98d 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_TIM3_Init+0x98>)
 8001a0c:	f006 fd52 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a16:	f000 f97f 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000170 	.word	0x20000170
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <MX_TIM7_Init+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a44:	f640 125f 	movw	r2, #2399	; 0x95f
 8001a48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a52:	2214      	movs	r2, #20
 8001a54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a5e:	f006 f924 	bl	8007caa <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001a68:	f000 f956 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM7_Init+0x64>)
 8001a7a:	f006 fd1b 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001a84:	f000 f948 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000064c 	.word	0x2000064c
 8001a94:	40001400 	.word	0x40001400

08001a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_USART2_UART_Init+0x5c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001adc:	f006 fd88 	bl	80085f0 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f000 f917 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000028c 	.word	0x2000028c
 8001af4:	40004400 	.word	0x40004400

08001af8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <MX_USB_PCD_Init+0x40>)
 8001b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b04:	2208      	movs	r2, #8
 8001b06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_USB_PCD_Init+0x3c>)
 8001b22:	f004 f918 	bl	8005d56 <HAL_PCD_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001b2c:	f000 f8f4 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000360 	.word	0x20000360
 8001b38:	40005c00 	.word	0x40005c00

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a6b      	ldr	r2, [pc, #428]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b74:	6153      	str	r3, [r2, #20]
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a5f      	ldr	r2, [pc, #380]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	4a59      	ldr	r2, [pc, #356]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	6153      	str	r3, [r2, #20]
 8001ba6:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b54      	ldr	r3, [pc, #336]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6153      	str	r3, [r2, #20]
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <MX_GPIO_Init+0x1c8>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001be2:	2200      	movs	r2, #0
 8001be4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001be8:	4847      	ldr	r0, [pc, #284]	; (8001d08 <MX_GPIO_Init+0x1cc>)
 8001bea:	f003 ff39 	bl	8005a60 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	4846      	ldr	r0, [pc, #280]	; (8001d0c <MX_GPIO_Init+0x1d0>)
 8001bf4:	f003 ff34 	bl	8005a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001bfe:	4844      	ldr	r0, [pc, #272]	; (8001d10 <MX_GPIO_Init+0x1d4>)
 8001c00:	f003 ff2e 	bl	8005a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c04:	2200      	movs	r2, #0
 8001c06:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8001c0a:	4842      	ldr	r0, [pc, #264]	; (8001d14 <MX_GPIO_Init+0x1d8>)
 8001c0c:	f003 ff28 	bl	8005a60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001c10:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001c14:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4837      	ldr	r0, [pc, #220]	; (8001d08 <MX_GPIO_Init+0x1cc>)
 8001c2a:	f003 fd87 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c32:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4831      	ldr	r0, [pc, #196]	; (8001d08 <MX_GPIO_Init+0x1cc>)
 8001c44:	f003 fd7a 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c48:	230f      	movs	r3, #15
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	482b      	ldr	r0, [pc, #172]	; (8001d0c <MX_GPIO_Init+0x1d0>)
 8001c60:	f003 fd6c 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001c64:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4824      	ldr	r0, [pc, #144]	; (8001d10 <MX_GPIO_Init+0x1d4>)
 8001c7e:	f003 fd5d 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481e      	ldr	r0, [pc, #120]	; (8001d14 <MX_GPIO_Init+0x1d8>)
 8001c9c:	f003 fd4e 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001caa:	2302      	movs	r3, #2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <MX_GPIO_Init+0x1d8>)
 8001cb6:	f003 fd41 	bl	800573c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2006      	movs	r0, #6
 8001cc0:	f003 fc8f 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f003 fca8 	bl	800561a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2007      	movs	r0, #7
 8001cd0:	f003 fc87 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cd4:	2007      	movs	r0, #7
 8001cd6:	f003 fca0 	bl	800561a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2008      	movs	r0, #8
 8001ce0:	f003 fc7f 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f003 fc98 	bl	800561a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	2009      	movs	r0, #9
 8001cf0:	f003 fc77 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001cf4:	2009      	movs	r0, #9
 8001cf6:	f003 fc90 	bl	800561a <HAL_NVIC_EnableIRQ>

}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	; 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	48001000 	.word	0x48001000
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000c00 	.word	0x48000c00

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <Error_Handler+0x8>
	...

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_MspInit+0x54>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_MspInit+0x54>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6193      	str	r3, [r2, #24]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_MspInit+0x54>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_MspInit+0x54>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_MspInit+0x54>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x54>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001d5a:	2005      	movs	r0, #5
 8001d5c:	f003 fc36 	bl	80055cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2051      	movs	r0, #81	; 0x51
 8001d66:	f003 fc3c 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001d6a:	2051      	movs	r0, #81	; 0x51
 8001d6c:	f003 fc55 	bl	800561a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_ADC_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12c      	bne.n	8001df8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001da8:	6153      	str	r3, [r2, #20]
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6153      	str	r3, [r2, #20]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_ADC_MspInit+0x88>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB14     ------> ADC4_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <HAL_ADC_MspInit+0x8c>)
 8001de4:	f003 fcaa 	bl	800573c <HAL_GPIO_Init>

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	203d      	movs	r0, #61	; 0x3d
 8001dee:	f003 fbf8 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001df2:	203d      	movs	r0, #61	; 0x3d
 8001df4:	f003 fc11 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	50000500 	.word	0x50000500
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48000400 	.word	0x48000400

08001e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_I2C_MspInit+0x7c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d127      	bne.n	8001e7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6153      	str	r3, [r2, #20]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e56:	2304      	movs	r3, #4
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <HAL_I2C_MspInit+0x84>)
 8001e62:	f003 fc6b 	bl	800573c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_I2C_MspInit+0x80>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000400 	.word	0x48000400

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_RTC_MspInit+0x44>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d111      	bne.n	8001eca <HAL_RTC_MspInit+0x36>
 8001ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eaa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RTC_MspInit+0x48>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40002800 	.word	0x40002800
 8001edc:	10908100 	.word	0x10908100

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_SPI_MspInit+0x7c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d128      	bne.n	8001f54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6193      	str	r3, [r2, #24]
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6153      	str	r3, [r2, #20]
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_SPI_MspInit+0x80>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001f32:	23e0      	movs	r3, #224	; 0xe0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f42:	2305      	movs	r3, #5
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f003 fbf4 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	; 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d114      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2102      	movs	r1, #2
 8001f92:	201c      	movs	r0, #28
 8001f94:	f003 fb25 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f98:	201c      	movs	r0, #28
 8001f9a:	f003 fb3e 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f9e:	e032      	b.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d114      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	201d      	movs	r0, #29
 8001fc8:	f003 fb0b 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fcc:	201d      	movs	r0, #29
 8001fce:	f003 fb24 	bl	800561a <HAL_NVIC_EnableIRQ>
}
 8001fd2:	e018      	b.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_Base_MspInit+0xb4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	2037      	movs	r0, #55	; 0x37
 8001ffc:	f003 faf1 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002000:	2037      	movs	r0, #55	; 0x37
 8002002:	f003 fb0a 	bl	800561a <HAL_NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40000400 	.word	0x40000400
 8002018:	40001400 	.word	0x40001400

0800201c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_UART_MspInit+0x8c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d130      	bne.n	80020a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_UART_MspInit+0x90>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_UART_MspInit+0x90>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_UART_MspInit+0x90>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_UART_MspInit+0x90>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_UART_MspInit+0x90>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	6153      	str	r3, [r2, #20]
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_UART_MspInit+0x90>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800206e:	230c      	movs	r3, #12
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207e:	2307      	movs	r3, #7
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f003 fb56 	bl	800573c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2101      	movs	r1, #1
 8002094:	2026      	movs	r0, #38	; 0x26
 8002096:	f003 faa4 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800209a:	2026      	movs	r0, #38	; 0x26
 800209c:	f003 fabd 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40004400 	.word	0x40004400
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_PCD_MspInit+0x80>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d129      	bne.n	8002126 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_PCD_MspInit+0x84>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_PCD_MspInit+0x84>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	6153      	str	r3, [r2, #20]
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_PCD_MspInit+0x84>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80020ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80020fc:	230e      	movs	r3, #14
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f003 fb17 	bl	800573c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_PCD_MspInit+0x84>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_PCD_MspInit+0x84>)
 8002114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002118:	61d3      	str	r3, [r2, #28]
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_PCD_MspInit+0x84>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40005c00 	.word	0x40005c00
 8002134:	40021000 	.word	0x40021000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f001 fed8 	bl	8003f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 8002190:	2001      	movs	r0, #1
 8002192:	f003 fc97 	bl	8005ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  keypadCallback(3);
 8002196:	2003      	movs	r0, #3
 8002198:	f001 fad2 	bl	8003740 <keypadCallback>
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 800219c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <EXTI0_IRQHandler+0x20>)
 80021a2:	f003 fc75 	bl	8005a90 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	48001000 	.word	0x48001000

080021b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 80021b4:	2002      	movs	r0, #2
 80021b6:	f003 fc85 	bl	8005ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  keypadCallback(2);
 80021ba:	2002      	movs	r0, #2
 80021bc:	f001 fac0 	bl	8003740 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c6:	4802      	ldr	r0, [pc, #8]	; (80021d0 <EXTI1_IRQHandler+0x20>)
 80021c8:	f003 fc4a 	bl	8005a60 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI1_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	48001000 	.word	0x48001000

080021d4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021d8:	2004      	movs	r0, #4
 80021da:	f003 fc73 	bl	8005ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  keypadCallback(1);
 80021de:	2001      	movs	r0, #1
 80021e0:	f001 faae 	bl	8003740 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ea:	4802      	ldr	r0, [pc, #8]	; (80021f4 <EXTI2_TSC_IRQHandler+0x20>)
 80021ec:	f003 fc38 	bl	8005a60 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	48001000 	.word	0x48001000

080021f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS_I2C_SPI_Pin);
 80021fc:	2008      	movs	r0, #8
 80021fe:	f003 fc61 	bl	8005ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <EXTI3_IRQHandler+0x20>)
 800220a:	f003 fc29 	bl	8005a60 <HAL_GPIO_WritePin>
  keypadCallback(0);
 800220e:	2000      	movs	r0, #0
 8002210:	f001 fa96 	bl	8003740 <keypadCallback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	48001000 	.word	0x48001000

0800221c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8002222:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002224:	48a4      	ldr	r0, [pc, #656]	; (80024b8 <TIM2_IRQHandler+0x29c>)
 8002226:	f005 fe01 	bl	8007e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800222a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800222e:	48a3      	ldr	r0, [pc, #652]	; (80024bc <TIM2_IRQHandler+0x2a0>)
 8002230:	f003 fc2e 	bl	8005a90 <HAL_GPIO_TogglePin>
	unsigned char buff[512] = {' '};
 8002234:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002238:	2220      	movs	r2, #32
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	3304      	adds	r3, #4
 800223e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f007 fa49 	bl	80096dc <memset>
//  // Update State variables
//  print("test");
  if (menuState != 'g') { // this is game state
 800224a:	4b9d      	ldr	r3, [pc, #628]	; (80024c0 <TIM2_IRQHandler+0x2a4>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b67      	cmp	r3, #103	; 0x67
 8002250:	d004      	beq.n	800225c <TIM2_IRQHandler+0x40>
	  initGameState();
 8002252:	f001 f9a7 	bl	80035a4 <initGameState>
	  menuState = 'g';
 8002256:	4b9a      	ldr	r3, [pc, #616]	; (80024c0 <TIM2_IRQHandler+0x2a4>)
 8002258:	2267      	movs	r2, #103	; 0x67
 800225a:	701a      	strb	r2, [r3, #0]

  }

  // Upload on LCD
	unsigned char hello[64] = "\n\n\nTurn started \n";
 800225c:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8002260:	4b98      	ldr	r3, [pc, #608]	; (80024c4 <TIM2_IRQHandler+0x2a8>)
 8002262:	4634      	mov	r4, r6
 8002264:	461d      	mov	r5, r3
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	8023      	strh	r3, [r4, #0]
 800226e:	f106 0312 	add.w	r3, r6, #18
 8002272:	222e      	movs	r2, #46	; 0x2e
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fa30 	bl	80096dc <memset>
/*	HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);							*/
  switch (menuState) {
 800227c:	4b90      	ldr	r3, [pc, #576]	; (80024c0 <TIM2_IRQHandler+0x2a4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3b61      	subs	r3, #97	; 0x61
 8002282:	2b19      	cmp	r3, #25
 8002284:	f200 80e0 	bhi.w	8002448 <TIM2_IRQHandler+0x22c>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <TIM2_IRQHandler+0x74>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	08002433 	.word	0x08002433
 8002294:	08002449 	.word	0x08002449
 8002298:	08002449 	.word	0x08002449
 800229c:	0800230d 	.word	0x0800230d
 80022a0:	08002449 	.word	0x08002449
 80022a4:	08002449 	.word	0x08002449
 80022a8:	08002357 	.word	0x08002357
 80022ac:	08002449 	.word	0x08002449
 80022b0:	08002449 	.word	0x08002449
 80022b4:	08002449 	.word	0x08002449
 80022b8:	08002449 	.word	0x08002449
 80022bc:	08002449 	.word	0x08002449
 80022c0:	08002343 	.word	0x08002343
 80022c4:	08002449 	.word	0x08002449
 80022c8:	08002449 	.word	0x08002449
 80022cc:	08002449 	.word	0x08002449
 80022d0:	08002449 	.word	0x08002449
 80022d4:	08002449 	.word	0x08002449
 80022d8:	08002449 	.word	0x08002449
 80022dc:	08002449 	.word	0x08002449
 80022e0:	08002449 	.word	0x08002449
 80022e4:	08002449 	.word	0x08002449
 80022e8:	08002449 	.word	0x08002449
 80022ec:	08002449 	.word	0x08002449
 80022f0:	08002449 	.word	0x08002449
 80022f4:	080022f9 	.word	0x080022f9
  	  case 'z':
  		  clear();
 80022f8:	f7fe feb2 	bl	8001060 <clear>
  		  setCursor(0, 0);
 80022fc:	2100      	movs	r1, #0
 80022fe:	2000      	movs	r0, #0
 8002300:	f7fe feb8 	bl	8001074 <setCursor>
  		  print("Doodle Jump");
 8002304:	4870      	ldr	r0, [pc, #448]	; (80024c8 <TIM2_IRQHandler+0x2ac>)
 8002306:	f7fe fefd 	bl	8001104 <print>
  		  break;
 800230a:	e09d      	b.n	8002448 <TIM2_IRQHandler+0x22c>
	  case 'd':
	  	clear();
 800230c:	f7fe fea8 	bl	8001060 <clear>
		  setCursor(0, 0);
 8002310:	2100      	movs	r1, #0
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe feae 	bl	8001074 <setCursor>
		  print("You Lost ");
 8002318:	486c      	ldr	r0, [pc, #432]	; (80024cc <TIM2_IRQHandler+0x2b0>)
 800231a:	f7fe fef3 	bl	8001104 <print>
		  setCursor(0, 1);
 800231e:	2101      	movs	r1, #1
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fea7 	bl	8001074 <setCursor>
		  sprintf(buff, " %d ", score);
 8002326:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <TIM2_IRQHandler+0x2b4>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800232e:	4969      	ldr	r1, [pc, #420]	; (80024d4 <TIM2_IRQHandler+0x2b8>)
 8002330:	4618      	mov	r0, r3
 8002332:	f007 fa49 	bl	80097c8 <siprintf>
		  print(buff);
 8002336:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fee2 	bl	8001104 <print>
	   	break;
 8002340:	e082      	b.n	8002448 <TIM2_IRQHandler+0x22c>
  	  case 'm':
  		  clear();
 8002342:	f7fe fe8d 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8002346:	2100      	movs	r1, #0
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fe93 	bl	8001074 <setCursor>
  		  print("1 - Start   2 - About us");
 800234e:	4862      	ldr	r0, [pc, #392]	; (80024d8 <TIM2_IRQHandler+0x2bc>)
 8002350:	f7fe fed8 	bl	8001104 <print>
  		  break;
 8002354:	e078      	b.n	8002448 <TIM2_IRQHandler+0x22c>
  	  case 'g':

		sprintf(buff, "DEBUG: \n ph:%d, phscreen:%d sc:%d \n", playerHeight, playerHeightInScreen, score);
 8002356:	4b61      	ldr	r3, [pc, #388]	; (80024dc <TIM2_IRQHandler+0x2c0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <TIM2_IRQHandler+0x2c4>)
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <TIM2_IRQHandler+0x2b4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	495e      	ldr	r1, [pc, #376]	; (80024e4 <TIM2_IRQHandler+0x2c8>)
 800236c:	f007 fa2c 	bl	80097c8 <siprintf>
/*		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);							*/
		sprintf(buff, "DEBUG: \n bl:%d, ls:%d, vd:%d, ms:%d, bs:%d \n",
 8002370:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <TIM2_IRQHandler+0x2cc>)
 8002372:	681c      	ldr	r4, [r3, #0]
 8002374:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <TIM2_IRQHandler+0x2d0>)
 8002376:	681d      	ldr	r5, [r3, #0]
 8002378:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <TIM2_IRQHandler+0x2d4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <TIM2_IRQHandler+0x2d8>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	495d      	ldr	r1, [pc, #372]	; (80024f8 <TIM2_IRQHandler+0x2dc>)
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002388:	9102      	str	r1, [sp, #8]
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	462b      	mov	r3, r5
 8002390:	4622      	mov	r2, r4
 8002392:	495a      	ldr	r1, [pc, #360]	; (80024fc <TIM2_IRQHandler+0x2e0>)
 8002394:	f007 fa18 	bl	80097c8 <siprintf>
			blockCount, looseCount, voidCount, monsterCount, boosterCount);
/*		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);							*/
		if (!pauseGame)
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <TIM2_IRQHandler+0x2e4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <TIM2_IRQHandler+0x188>
			processTurn();
 80023a0:	f000 fa02 	bl	80027a8 <processTurn>
		printGame();
 80023a4:	f000 fe22 	bl	8002fec <printGame>
//  		  DEBUG scores
//  		  char buff[20];
//  		  sprintf(buff, "%d %d %d", score, playerHeight, playerHeightInScreen);
//  		  sprintf(buff, "%d", getRandom(0, 9));
//  		  print(buff);
  		  int pc = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  		  int i, j;
  		  for (i = 0; i < boardColumns; i ++) {
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80023b4:	e025      	b.n	8002402 <TIM2_IRQHandler+0x1e6>
  			  for (j = 0;j < boardRows; j ++ ) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80023bc:	e018      	b.n	80023f0 <TIM2_IRQHandler+0x1d4>
  				  if (board[i][j] == 'p')
 80023be:	4951      	ldr	r1, [pc, #324]	; (8002504 <TIM2_IRQHandler+0x2e8>)
 80023c0:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	00da      	lsls	r2, r3, #3
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	440a      	add	r2, r1
 80023d0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b70      	cmp	r3, #112	; 0x70
 80023da:	d104      	bne.n	80023e6 <TIM2_IRQHandler+0x1ca>
  					  pc ++;
 80023dc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023e0:	3301      	adds	r3, #1
 80023e2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  			  for (j = 0;j < boardRows; j ++ ) {
 80023e6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80023f0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80023f4:	2b13      	cmp	r3, #19
 80023f6:	dde2      	ble.n	80023be <TIM2_IRQHandler+0x1a2>
  		  for (i = 0; i < boardColumns; i ++) {
 80023f8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002402:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002406:	2b03      	cmp	r3, #3
 8002408:	ddd5      	ble.n	80023b6 <TIM2_IRQHandler+0x19a>
  			  }
  		  }
  		  if (pc > 1) {
 800240a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800240e:	2b01      	cmp	r3, #1
 8002410:	dd19      	ble.n	8002446 <TIM2_IRQHandler+0x22a>
				unsigned char hello[64] = "******* HOLY SHIT \n";
 8002412:	1d3e      	adds	r6, r7, #4
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <TIM2_IRQHandler+0x2ec>)
 8002416:	4634      	mov	r4, r6
 8002418:	461d      	mov	r5, r3
 800241a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	f106 0314 	add.w	r3, r6, #20
 8002426:	222c      	movs	r2, #44	; 0x2c
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f007 f956 	bl	80096dc <memset>
/*  			  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);					*/
  		  }
  		  break;
 8002430:	e009      	b.n	8002446 <TIM2_IRQHandler+0x22a>
  	  case 'a':
  		  clear();
 8002432:	f7fe fe15 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8002436:	2100      	movs	r1, #0
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe1b 	bl	8001074 <setCursor>
  		  print(" Yosef and Borna");
 800243e:	4833      	ldr	r0, [pc, #204]	; (800250c <TIM2_IRQHandler+0x2f0>)
 8002440:	f7fe fe60 	bl	8001104 <print>
  		  break;
 8002444:	e000      	b.n	8002448 <TIM2_IRQHandler+0x22c>
  		  break;
 8002446:	bf00      	nop
  }

  // Delay for better visual
  HAL_Delay(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f001 fd95 	bl	8003f78 <HAL_Delay>

  v=HAL_ADC_GetValue(&hadc4);
 800244e:	4830      	ldr	r0, [pc, #192]	; (8002510 <TIM2_IRQHandler+0x2f4>)
 8002450:	f002 f8f4 	bl	800463c <HAL_ADC_GetValue>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <TIM2_IRQHandler+0x2f8>)
 800245a:	601a      	str	r2, [r3, #0]
  degree = ((((((v)*200)/(4095))*50) +50) / 100) - 9;
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <TIM2_IRQHandler+0x2f8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	22c8      	movs	r2, #200	; 0xc8
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <TIM2_IRQHandler+0x2fc>)
 8002468:	fb82 1203 	smull	r1, r2, r2, r3
 800246c:	441a      	add	r2, r3
 800246e:	12d2      	asrs	r2, r2, #11
 8002470:	17db      	asrs	r3, r3, #31
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	3301      	adds	r3, #1
 8002476:	0fda      	lsrs	r2, r3, #31
 8002478:	4413      	add	r3, r2
 800247a:	105b      	asrs	r3, r3, #1
 800247c:	3b09      	subs	r3, #9
 800247e:	4a27      	ldr	r2, [pc, #156]	; (800251c <TIM2_IRQHandler+0x300>)
 8002480:	6013      	str	r3, [r2, #0]
//  degree = (((v)*30)/(4095))*50+500;
  //int step = degree / 50;

  if(degree < 0) degree = 0;
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <TIM2_IRQHandler+0x300>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da02      	bge.n	8002490 <TIM2_IRQHandler+0x274>
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <TIM2_IRQHandler+0x300>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
  if(degree > 9) degree = 9;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <TIM2_IRQHandler+0x300>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	dd02      	ble.n	800249e <TIM2_IRQHandler+0x282>
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <TIM2_IRQHandler+0x300>)
 800249a:	2209      	movs	r2, #9
 800249c:	601a      	str	r2, [r3, #0]
  show(degree);
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <TIM2_IRQHandler+0x300>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fbe0 	bl	8003c68 <show>

//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);

//  HAL_Delay(200);
  HAL_ADC_Start_IT(&hadc4);
 80024a8:	4819      	ldr	r0, [pc, #100]	; (8002510 <TIM2_IRQHandler+0x2f4>)
 80024aa:	f001 ff87 	bl	80043bc <HAL_ADC_Start_IT>


  /* USER CODE END TIM2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	f507 7725 	add.w	r7, r7, #660	; 0x294
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	20000240 	.word	0x20000240
 80024bc:	48001000 	.word	0x48001000
 80024c0:	2000016c 	.word	0x2000016c
 80024c4:	0800ae14 	.word	0x0800ae14
 80024c8:	0800ad70 	.word	0x0800ad70
 80024cc:	0800ad7c 	.word	0x0800ad7c
 80024d0:	2000070c 	.word	0x2000070c
 80024d4:	0800ad88 	.word	0x0800ad88
 80024d8:	0800ad90 	.word	0x0800ad90
 80024dc:	20000934 	.word	0x20000934
 80024e0:	20000910 	.word	0x20000910
 80024e4:	0800adac 	.word	0x0800adac
 80024e8:	20000978 	.word	0x20000978
 80024ec:	200008a8 	.word	0x200008a8
 80024f0:	20000974 	.word	0x20000974
 80024f4:	20000924 	.word	0x20000924
 80024f8:	200008a4 	.word	0x200008a4
 80024fc:	0800add0 	.word	0x0800add0
 8002500:	20000914 	.word	0x20000914
 8002504:	200006b4 	.word	0x200006b4
 8002508:	0800ae54 	.word	0x0800ae54
 800250c:	0800ae00 	.word	0x0800ae00
 8002510:	20000310 	.word	0x20000310
 8002514:	200008b0 	.word	0x200008b0
 8002518:	80080081 	.word	0x80080081
 800251c:	20000930 	.word	0x20000930

08002520 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM3_IRQHandler+0x10>)
 8002526:	f005 fc81 	bl	8007e2c <HAL_TIM_IRQHandler>
////  HAL_Delay(200);
//  HAL_ADC_Start_IT(&hadc4);
//

  /* USER CODE END TIM3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000170 	.word	0x20000170

08002534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <USART2_IRQHandler+0x10>)
 800253a:	f006 f93b 	bl	80087b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000028c 	.word	0x2000028c

08002548 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800254c:	4858      	ldr	r0, [pc, #352]	; (80026b0 <TIM7_IRQHandler+0x168>)
 800254e:	f005 fc6d 	bl	8007e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
//  turn = 2;
  setScoreSeven();
 8002552:	f001 fb3d 	bl	8003bd0 <setScoreSeven>

  if (turn % 4 == 0) {
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11d      	bne.n	800259e <TIM7_IRQHandler+0x56>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002568:	4853      	ldr	r0, [pc, #332]	; (80026b8 <TIM7_IRQHandler+0x170>)
 800256a:	f003 fa79 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002574:	4850      	ldr	r0, [pc, #320]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002576:	f003 fa73 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002580:	484d      	ldr	r0, [pc, #308]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002582:	f003 fa6d 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800258c:	484a      	ldr	r0, [pc, #296]	; (80026b8 <TIM7_IRQHandler+0x170>)
 800258e:	f003 fa67 	bl	8005a60 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D0);
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <TIM7_IRQHandler+0x174>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fa20 	bl	80039dc <set_seg_value>
 800259c:	e079      	b.n	8002692 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 1) {
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	425a      	negs	r2, r3
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	f002 0203 	and.w	r2, r2, #3
 80025ac:	bf58      	it	pl
 80025ae:	4253      	negpl	r3, r2
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d11d      	bne.n	80025f0 <TIM7_IRQHandler+0xa8>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ba:	483f      	ldr	r0, [pc, #252]	; (80026b8 <TIM7_IRQHandler+0x170>)
 80025bc:	f003 fa50 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c6:	483c      	ldr	r0, [pc, #240]	; (80026b8 <TIM7_IRQHandler+0x170>)
 80025c8:	f003 fa4a 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d2:	4839      	ldr	r0, [pc, #228]	; (80026b8 <TIM7_IRQHandler+0x170>)
 80025d4:	f003 fa44 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025de:	4836      	ldr	r0, [pc, #216]	; (80026b8 <TIM7_IRQHandler+0x170>)
 80025e0:	f003 fa3e 	bl	8005a60 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  set_seg_value(D1);
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <TIM7_IRQHandler+0x178>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 f9f7 	bl	80039dc <set_seg_value>
 80025ee:	e050      	b.n	8002692 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 2) {
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	425a      	negs	r2, r3
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	bf58      	it	pl
 8002600:	4253      	negpl	r3, r2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11d      	bne.n	8002642 <TIM7_IRQHandler+0xfa>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260c:	482a      	ldr	r0, [pc, #168]	; (80026b8 <TIM7_IRQHandler+0x170>)
 800260e:	f003 fa27 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002618:	4827      	ldr	r0, [pc, #156]	; (80026b8 <TIM7_IRQHandler+0x170>)
 800261a:	f003 fa21 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002624:	4824      	ldr	r0, [pc, #144]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002626:	f003 fa1b 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002630:	4821      	ldr	r0, [pc, #132]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002632:	f003 fa15 	bl	8005a60 <HAL_GPIO_WritePin>
//	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D2);
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <TIM7_IRQHandler+0x17c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f9ce 	bl	80039dc <set_seg_value>
 8002640:	e027      	b.n	8002692 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 3) {
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	425a      	negs	r2, r3
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	bf58      	it	pl
 8002652:	4253      	negpl	r3, r2
 8002654:	2b03      	cmp	r3, #3
 8002656:	d11c      	bne.n	8002692 <TIM7_IRQHandler+0x14a>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265e:	4816      	ldr	r0, [pc, #88]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002660:	f003 f9fe 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266a:	4813      	ldr	r0, [pc, #76]	; (80026b8 <TIM7_IRQHandler+0x170>)
 800266c:	f003 f9f8 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002676:	4810      	ldr	r0, [pc, #64]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002678:	f003 f9f2 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002682:	480d      	ldr	r0, [pc, #52]	; (80026b8 <TIM7_IRQHandler+0x170>)
 8002684:	f003 f9ec 	bl	8005a60 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D3);
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <TIM7_IRQHandler+0x180>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f001 f9a5 	bl	80039dc <set_seg_value>
  }

  turn = (turn + 1) % 4;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	425a      	negs	r2, r3
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	f002 0203 	and.w	r2, r2, #3
 80026a2:	bf58      	it	pl
 80026a4:	4253      	negpl	r3, r2
 80026a6:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <TIM7_IRQHandler+0x16c>)
 80026a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000064c 	.word	0x2000064c
 80026b4:	200000e8 	.word	0x200000e8
 80026b8:	48000400 	.word	0x48000400
 80026bc:	200006a8 	.word	0x200006a8
 80026c0:	20000938 	.word	0x20000938
 80026c4:	200008b4 	.word	0x200008b4
 80026c8:	20000698 	.word	0x20000698

080026cc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <ADC4_IRQHandler+0x10>)
 80026d2:	f001 ffc1 	bl	8004658 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */
//  HAL_ADC_Start_IT(&hadc4);
  /* USER CODE END ADC4_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000310 	.word	0x20000310

080026e0 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <getRandom>:

/* USER CODE BEGIN 1 */

int getRandom(int lower, int upper)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]

	int num = (rand() %
 80026f8:	f007 f826 	bl	8009748 <rand>
 80026fc:	4602      	mov	r2, r0
	   (upper - lower + 1)) + lower;
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1acb      	subs	r3, r1, r3
 8002704:	3301      	adds	r3, #1
	int num = (rand() %
 8002706:	fb92 f1f3 	sdiv	r1, r2, r3
 800270a:	fb03 f301 	mul.w	r3, r3, r1
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
    return num;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <fireBullet>:

void fireBullet() {
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
	if (playerFalling || board[playerCol][playerRow + 1] != 'e' || bulletCol != -1)
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <fireBullet+0x70>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12c      	bne.n	8002786 <fireBullet+0x66>
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <fireBullet+0x74>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <fireBullet+0x78>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	4819      	ldr	r0, [pc, #100]	; (800279c <fireBullet+0x7c>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	1ad2      	subs	r2, r2, r3
 8002742:	1883      	adds	r3, r0, r2
 8002744:	440b      	add	r3, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b65      	cmp	r3, #101	; 0x65
 800274a:	d11c      	bne.n	8002786 <fireBullet+0x66>
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <fireBullet+0x80>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d117      	bne.n	8002786 <fireBullet+0x66>
		return;
	bulletCol = playerCol;
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <fireBullet+0x74>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <fireBullet+0x80>)
 800275c:	6013      	str	r3, [r2, #0]
	bulletRow = playerRow + 1;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <fireBullet+0x78>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <fireBullet+0x84>)
 8002766:	6013      	str	r3, [r2, #0]
	board[bulletCol][bulletRow] = '^';
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <fireBullet+0x80>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <fireBullet+0x84>)
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	480a      	ldr	r0, [pc, #40]	; (800279c <fireBullet+0x7c>)
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	00da      	lsls	r2, r3, #3
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	1883      	adds	r3, r0, r2
 800277e:	440b      	add	r3, r1
 8002780:	225e      	movs	r2, #94	; 0x5e
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e000      	b.n	8002788 <fireBullet+0x68>
		return;
 8002786:	bf00      	nop
}
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	2000069c 	.word	0x2000069c
 8002794:	200006ac 	.word	0x200006ac
 8002798:	2000092c 	.word	0x2000092c
 800279c:	200006b4 	.word	0x200006b4
 80027a0:	200006b0 	.word	0x200006b0
 80027a4:	200006a4 	.word	0x200006a4

080027a8 <processTurn>:

void processTurn()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	// Shift screen to down
	if (playerHeightInScreen > 12) {
 80027ae:	4b77      	ldr	r3, [pc, #476]	; (800298c <processTurn+0x1e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	f340 8116 	ble.w	80029e4 <processTurn+0x23c>
	    // unsigned char hello[64] = "SHIFT DOWN \n";
		// HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
		playerHeightInScreen --;
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <processTurn+0x1e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	4a73      	ldr	r2, [pc, #460]	; (800298c <processTurn+0x1e4>)
 80027c0:	6013      	str	r3, [r2, #0]
		playerRow --;
 80027c2:	4b73      	ldr	r3, [pc, #460]	; (8002990 <processTurn+0x1e8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	4a71      	ldr	r2, [pc, #452]	; (8002990 <processTurn+0x1e8>)
 80027ca:	6013      	str	r3, [r2, #0]
		lastBlockHeightInScreen --;
 80027cc:	4b71      	ldr	r3, [pc, #452]	; (8002994 <processTurn+0x1ec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	4a70      	ldr	r2, [pc, #448]	; (8002994 <processTurn+0x1ec>)
 80027d4:	6013      	str	r3, [r2, #0]
		bulletRow --;
 80027d6:	4b70      	ldr	r3, [pc, #448]	; (8002998 <processTurn+0x1f0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <processTurn+0x1f0>)
 80027de:	6013      	str	r3, [r2, #0]

		// delete old monsters states
		// unsigned char hello3[64] = "SHIFTING MONSTERS \n";
		// HAL_UART_Transmit(&huart2, hello3, sizeof(hello3), 500);
		for (i = 0; i < boardColumns; i ++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	e08b      	b.n	80028fe <processTurn+0x156>
			if (board[i][0] == 'm') {
 80027e6:	496d      	ldr	r1, [pc, #436]	; (800299c <processTurn+0x1f4>)
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	00da      	lsls	r2, r3, #3
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	188b      	adds	r3, r1, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b6d      	cmp	r3, #109	; 0x6d
 80027fa:	d13a      	bne.n	8002872 <processTurn+0xca>
				// shift monster array to left
				// unsigned char hello5[64] = "SHIFTING MONSTERS \n";
				// HAL_UART_Transmit(&huart2, hello5, sizeof(hello5), 500);
				for (j = 0; j < monsterCount - 1; j ++ ) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	e016      	b.n	8002830 <processTurn+0x88>
					monsterLoc[j][0] = monsterLoc[j + 1][0];
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <processTurn+0x1f8>)
 8002808:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800280c:	4964      	ldr	r1, [pc, #400]	; (80029a0 <processTurn+0x1f8>)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					monsterLoc[j][1] = monsterLoc[j + 1][1];
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <processTurn+0x1f8>)
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	495f      	ldr	r1, [pc, #380]	; (80029a0 <processTurn+0x1f8>)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	605a      	str	r2, [r3, #4]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <processTurn+0x1fc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3b01      	subs	r3, #1
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbe2      	blt.n	8002802 <processTurn+0x5a>
				}
				for (j = 0; j < monsterCount - 1; j ++ ) {
 800283c:	2300      	movs	r3, #0
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	e00b      	b.n	800285a <processTurn+0xb2>
					monsterState[j] = monsterState[j + 1];
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <processTurn+0x200>)
 8002848:	5cd1      	ldrb	r1, [r2, r3]
 800284a:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <processTurn+0x200>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4413      	add	r3, r2
 8002850:	460a      	mov	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <processTurn+0x1fc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3b01      	subs	r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	dbed      	blt.n	8002842 <processTurn+0x9a>
				}
				monsterCount --;
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <processTurn+0x1fc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3b01      	subs	r3, #1
 800286c:	4a4d      	ldr	r2, [pc, #308]	; (80029a4 <processTurn+0x1fc>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e042      	b.n	80028f8 <processTurn+0x150>
			} else if (board[i][0] == 'v') {
 8002872:	494a      	ldr	r1, [pc, #296]	; (800299c <processTurn+0x1f4>)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	00da      	lsls	r2, r3, #3
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	188b      	adds	r3, r1, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b76      	cmp	r3, #118	; 0x76
 8002886:	d105      	bne.n	8002894 <processTurn+0xec>
				voidCount --;
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <processTurn+0x204>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a47      	ldr	r2, [pc, #284]	; (80029ac <processTurn+0x204>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e031      	b.n	80028f8 <processTurn+0x150>
			} else if (board[i][0] == 'b') {
 8002894:	4941      	ldr	r1, [pc, #260]	; (800299c <processTurn+0x1f4>)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	00da      	lsls	r2, r3, #3
 80028a0:	1ad2      	subs	r2, r2, r3
 80028a2:	188b      	adds	r3, r1, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b62      	cmp	r3, #98	; 0x62
 80028a8:	d105      	bne.n	80028b6 <processTurn+0x10e>
				blockCount --;
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <processTurn+0x208>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4a3f      	ldr	r2, [pc, #252]	; (80029b0 <processTurn+0x208>)
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e020      	b.n	80028f8 <processTurn+0x150>
			} else if (board[i][0] == 's') {
 80028b6:	4939      	ldr	r1, [pc, #228]	; (800299c <processTurn+0x1f4>)
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	188b      	adds	r3, r1, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b73      	cmp	r3, #115	; 0x73
 80028ca:	d105      	bne.n	80028d8 <processTurn+0x130>
				boosterCount --;
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <processTurn+0x20c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <processTurn+0x20c>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00f      	b.n	80028f8 <processTurn+0x150>
			} else if (board[i][0] == 'l') {
 80028d8:	4930      	ldr	r1, [pc, #192]	; (800299c <processTurn+0x1f4>)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	188b      	adds	r3, r1, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b6c      	cmp	r3, #108	; 0x6c
 80028ec:	d104      	bne.n	80028f8 <processTurn+0x150>
				looseCount --;
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <processTurn+0x210>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <processTurn+0x210>)
 80028f6:	6013      	str	r3, [r2, #0]
		for (i = 0; i < boardColumns; i ++) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3301      	adds	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b03      	cmp	r3, #3
 8002902:	f77f af70 	ble.w	80027e6 <processTurn+0x3e>
			}
		}
		for (i = 0; i < monsterCount; i ++ ) {
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	e00d      	b.n	8002928 <processTurn+0x180>
			monsterLoc[i][1] --;
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <processTurn+0x1f8>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	4921      	ldr	r1, [pc, #132]	; (80029a0 <processTurn+0x1f8>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	605a      	str	r2, [r3, #4]
		for (i = 0; i < monsterCount; i ++ ) {
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3301      	adds	r3, #1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <processTurn+0x1fc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbec      	blt.n	800290c <processTurn+0x164>
		}
		// 		unsigned char hello4[64] = "SHIFTING BOARD DOWN \n";
		// HAL_UART_Transmit(&huart2, hello4, sizeof(hello4), 500);
		for (j = 0; j < boardRows - 1; j ++ ) {
 8002932:	2300      	movs	r3, #0
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	e023      	b.n	8002980 <processTurn+0x1d8>
			// replace row[j] with row[j + 1]
			for (i = 0; i < boardColumns; i ++ ) {
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	e01a      	b.n	8002974 <processTurn+0x1cc>
				board[i][j] = board[i][j + 1];
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <processTurn+0x1f4>)
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00da      	lsls	r2, r3, #3
 800294e:	1ad2      	subs	r2, r2, r3
 8002950:	1883      	adds	r3, r0, r2
 8002952:	440b      	add	r3, r1
 8002954:	7818      	ldrb	r0, [r3, #0]
 8002956:	4911      	ldr	r1, [pc, #68]	; (800299c <processTurn+0x1f4>)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	00da      	lsls	r2, r3, #3
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	440a      	add	r2, r1
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	4602      	mov	r2, r0
 800296c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < boardColumns; i ++ ) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3301      	adds	r3, #1
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b03      	cmp	r3, #3
 8002978:	dde1      	ble.n	800293e <processTurn+0x196>
		for (j = 0; j < boardRows - 1; j ++ ) {
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b12      	cmp	r3, #18
 8002984:	ddd8      	ble.n	8002938 <processTurn+0x190>
			}
		}
		for (i = 0; i < boardColumns; i ++ ) {
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	e025      	b.n	80029d8 <processTurn+0x230>
 800298c:	20000910 	.word	0x20000910
 8002990:	2000092c 	.word	0x2000092c
 8002994:	200008ac 	.word	0x200008ac
 8002998:	200006a4 	.word	0x200006a4
 800299c:	200006b4 	.word	0x200006b4
 80029a0:	20000710 	.word	0x20000710
 80029a4:	20000924 	.word	0x20000924
 80029a8:	20000940 	.word	0x20000940
 80029ac:	20000974 	.word	0x20000974
 80029b0:	20000978 	.word	0x20000978
 80029b4:	200008a4 	.word	0x200008a4
 80029b8:	200008a8 	.word	0x200008a8
			board[i][boardRows - 1] = 'e';
 80029bc:	4997      	ldr	r1, [pc, #604]	; (8002c1c <processTurn+0x474>)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	00da      	lsls	r2, r3, #3
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	188b      	adds	r3, r1, r2
 80029cc:	3313      	adds	r3, #19
 80029ce:	2265      	movs	r2, #101	; 0x65
 80029d0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < boardColumns; i ++ ) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3301      	adds	r3, #1
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	ddee      	ble.n	80029bc <processTurn+0x214>
		}
		// unsigned char hello2[64] = "Selecting new objects \n";
		// HAL_UART_Transmit(&huart2, hello2, sizeof(hello2), 500);
		setRowObjects(boardRows - 1);
 80029de:	2013      	movs	r0, #19
 80029e0:	f000 fd54 	bl	800348c <setRowObjects>
		// unsigned char hello1[64] = "Selected objects for new row \n";
		// HAL_UART_Transmit(&huart2, hello1, sizeof(hello1), 500);
	}

	// Void
	if (playerRow > 0 && playerOn == 'v') {
 80029e4:	4b8e      	ldr	r3, [pc, #568]	; (8002c20 <processTurn+0x478>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	dd06      	ble.n	80029fa <processTurn+0x252>
 80029ec:	4b8d      	ldr	r3, [pc, #564]	; (8002c24 <processTurn+0x47c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b76      	cmp	r3, #118	; 0x76
 80029f2:	d102      	bne.n	80029fa <processTurn+0x252>
		playerFalling = 1;
 80029f4:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <processTurn+0x480>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
	}
	// Loose Block
	if (playerRow > 0 && board[playerCol][playerRow - 1] == 'l' && jumpCount < 1) {
 80029fa:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <processTurn+0x478>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dd22      	ble.n	8002a48 <processTurn+0x2a0>
 8002a02:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <processTurn+0x484>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b86      	ldr	r3, [pc, #536]	; (8002c20 <processTurn+0x478>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	4883      	ldr	r0, [pc, #524]	; (8002c1c <processTurn+0x474>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	1883      	adds	r3, r0, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b6c      	cmp	r3, #108	; 0x6c
 8002a20:	d112      	bne.n	8002a48 <processTurn+0x2a0>
 8002a22:	4b83      	ldr	r3, [pc, #524]	; (8002c30 <processTurn+0x488>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dc0e      	bgt.n	8002a48 <processTurn+0x2a0>
		board[playerCol][playerRow - 1] = 'e';
 8002a2a:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <processTurn+0x484>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	; (8002c20 <processTurn+0x478>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1e59      	subs	r1, r3, #1
 8002a34:	4879      	ldr	r0, [pc, #484]	; (8002c1c <processTurn+0x474>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00da      	lsls	r2, r3, #3
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	1883      	adds	r3, r0, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	2265      	movs	r2, #101	; 0x65
 8002a46:	701a      	strb	r2, [r3, #0]
	}

	// Monster
	if (playerRow > 0 && playerOn == 'm') {
 8002a48:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <processTurn+0x478>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	dd06      	ble.n	8002a5e <processTurn+0x2b6>
 8002a50:	4b74      	ldr	r3, [pc, #464]	; (8002c24 <processTurn+0x47c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b6d      	cmp	r3, #109	; 0x6d
 8002a56:	d102      	bne.n	8002a5e <processTurn+0x2b6>
		playerFalling = 1;
 8002a58:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <processTurn+0x480>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
	}

	// Move bullet
	if (bulletCol != -1 && board[bulletCol][bulletRow + 1] == 'e') {
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <processTurn+0x48c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d031      	beq.n	8002acc <processTurn+0x324>
 8002a68:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <processTurn+0x48c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <processTurn+0x490>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c59      	adds	r1, r3, #1
 8002a72:	486a      	ldr	r0, [pc, #424]	; (8002c1c <processTurn+0x474>)
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00da      	lsls	r2, r3, #3
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	1883      	adds	r3, r0, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b65      	cmp	r3, #101	; 0x65
 8002a86:	d121      	bne.n	8002acc <processTurn+0x324>
		board[bulletCol][bulletRow] = 'e';
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <processTurn+0x48c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <processTurn+0x490>)
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	4862      	ldr	r0, [pc, #392]	; (8002c1c <processTurn+0x474>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	00da      	lsls	r2, r3, #3
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	1883      	adds	r3, r0, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	2265      	movs	r2, #101	; 0x65
 8002aa2:	701a      	strb	r2, [r3, #0]
		bulletRow ++;
 8002aa4:	4b64      	ldr	r3, [pc, #400]	; (8002c38 <processTurn+0x490>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <processTurn+0x490>)
 8002aac:	6013      	str	r3, [r2, #0]
		board[bulletCol][bulletRow] = '*';
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <processTurn+0x48c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <processTurn+0x490>)
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	4859      	ldr	r0, [pc, #356]	; (8002c1c <processTurn+0x474>)
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	00da      	lsls	r2, r3, #3
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	1883      	adds	r3, r0, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	222a      	movs	r2, #42	; 0x2a
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e0a3      	b.n	8002c14 <processTurn+0x46c>
	} else if (bulletCol != -1 && board[bulletCol][bulletRow + 1] != 'e') {
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <processTurn+0x48c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	f000 809e 	beq.w	8002c14 <processTurn+0x46c>
 8002ad8:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <processTurn+0x48c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <processTurn+0x490>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	484e      	ldr	r0, [pc, #312]	; (8002c1c <processTurn+0x474>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	00da      	lsls	r2, r3, #3
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	1883      	adds	r3, r0, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b65      	cmp	r3, #101	; 0x65
 8002af6:	f000 808d 	beq.w	8002c14 <processTurn+0x46c>
		board[bulletCol][bulletRow] = 'e';
 8002afa:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <processTurn+0x48c>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <processTurn+0x490>)
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	4846      	ldr	r0, [pc, #280]	; (8002c1c <processTurn+0x474>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	00da      	lsls	r2, r3, #3
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	1883      	adds	r3, r0, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	2265      	movs	r2, #101	; 0x65
 8002b14:	701a      	strb	r2, [r3, #0]
		if (board[bulletCol][bulletRow + 1] == 'm') {
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <processTurn+0x48c>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <processTurn+0x490>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	483e      	ldr	r0, [pc, #248]	; (8002c1c <processTurn+0x474>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	00da      	lsls	r2, r3, #3
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	1883      	adds	r3, r0, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b6d      	cmp	r3, #109	; 0x6d
 8002b34:	d166      	bne.n	8002c04 <processTurn+0x45c>
			for (i = 0; i < monsterCount; i ++) {
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	e04f      	b.n	8002bdc <processTurn+0x434>
				if (monsterLoc[i][0] == bulletCol && monsterLoc[i][1] == bulletRow + 1) {
 8002b3c:	4a3f      	ldr	r2, [pc, #252]	; (8002c3c <processTurn+0x494>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <processTurn+0x48c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d144      	bne.n	8002bd6 <processTurn+0x42e>
 8002b4c:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <processTurn+0x494>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <processTurn+0x490>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d13a      	bne.n	8002bd6 <processTurn+0x42e>
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	e016      	b.n	8002b94 <processTurn+0x3ec>
						monsterLoc[j][0] = monsterLoc[j + 1][0];
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <processTurn+0x494>)
 8002b6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b70:	4932      	ldr	r1, [pc, #200]	; (8002c3c <processTurn+0x494>)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						monsterLoc[j][1] = monsterLoc[j + 1][1];
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <processTurn+0x494>)
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	492d      	ldr	r1, [pc, #180]	; (8002c3c <processTurn+0x494>)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	605a      	str	r2, [r3, #4]
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <processTurn+0x498>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbe2      	blt.n	8002b66 <processTurn+0x3be>
					}
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	e00b      	b.n	8002bbe <processTurn+0x416>
						monsterState[j] = monsterState[j + 1];
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <processTurn+0x49c>)
 8002bac:	5cd1      	ldrb	r1, [r2, r3]
 8002bae:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <processTurn+0x49c>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <processTurn+0x498>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dbed      	blt.n	8002ba6 <processTurn+0x3fe>
					}
					monsterCount --;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <processTurn+0x498>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <processTurn+0x498>)
 8002bd2:	6013      	str	r3, [r2, #0]
					break;
 8002bd4:	e007      	b.n	8002be6 <processTurn+0x43e>
			for (i = 0; i < monsterCount; i ++) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <processTurn+0x498>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbaa      	blt.n	8002b3c <processTurn+0x394>
				}
			}
			board[bulletCol][bulletRow + 1] = 'e';
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <processTurn+0x48c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <processTurn+0x490>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1c59      	adds	r1, r3, #1
 8002bf0:	480a      	ldr	r0, [pc, #40]	; (8002c1c <processTurn+0x474>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00da      	lsls	r2, r3, #3
 8002bfa:	1ad2      	subs	r2, r2, r3
 8002bfc:	1883      	adds	r3, r0, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	2265      	movs	r2, #101	; 0x65
 8002c02:	701a      	strb	r2, [r3, #0]
		}
		bulletCol = -1;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <processTurn+0x48c>)
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	601a      	str	r2, [r3, #0]
		bulletRow = -1;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <processTurn+0x490>)
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	601a      	str	r2, [r3, #0]
	}

	// Move monsters
	for (i = 0; i < monsterCount; i ++ ) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	e0c2      	b.n	8002da0 <processTurn+0x5f8>
 8002c1a:	bf00      	nop
 8002c1c:	200006b4 	.word	0x200006b4
 8002c20:	2000092c 	.word	0x2000092c
 8002c24:	2000093c 	.word	0x2000093c
 8002c28:	2000069c 	.word	0x2000069c
 8002c2c:	200006ac 	.word	0x200006ac
 8002c30:	2000090c 	.word	0x2000090c
 8002c34:	200006b0 	.word	0x200006b0
 8002c38:	200006a4 	.word	0x200006a4
 8002c3c:	20000710 	.word	0x20000710
 8002c40:	20000924 	.word	0x20000924
 8002c44:	20000940 	.word	0x20000940
		if (monsterState[i] == 'l') {
 8002c48:	4aa3      	ldr	r2, [pc, #652]	; (8002ed8 <processTurn+0x730>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b6c      	cmp	r3, #108	; 0x6c
 8002c52:	d151      	bne.n	8002cf8 <processTurn+0x550>
			if (monsterLoc[i][0] > 0 && board[monsterLoc[i][0] - 1][monsterLoc[i][1]] == 'e') {
 8002c54:	4aa1      	ldr	r2, [pc, #644]	; (8002edc <processTurn+0x734>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dd45      	ble.n	8002cec <processTurn+0x544>
 8002c60:	4a9e      	ldr	r2, [pc, #632]	; (8002edc <processTurn+0x734>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	499c      	ldr	r1, [pc, #624]	; (8002edc <processTurn+0x734>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	489a      	ldr	r0, [pc, #616]	; (8002ee0 <processTurn+0x738>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00da      	lsls	r2, r3, #3
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	1883      	adds	r3, r0, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b65      	cmp	r3, #101	; 0x65
 8002c88:	d130      	bne.n	8002cec <processTurn+0x544>
				board[monsterLoc[i][0] - 1][monsterLoc[i][1]] = 'm';
 8002c8a:	4a94      	ldr	r2, [pc, #592]	; (8002edc <processTurn+0x734>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	4991      	ldr	r1, [pc, #580]	; (8002edc <processTurn+0x734>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	4890      	ldr	r0, [pc, #576]	; (8002ee0 <processTurn+0x738>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00da      	lsls	r2, r3, #3
 8002ca8:	1ad2      	subs	r2, r2, r3
 8002caa:	1883      	adds	r3, r0, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	226d      	movs	r2, #109	; 0x6d
 8002cb0:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 8002cb2:	4a8a      	ldr	r2, [pc, #552]	; (8002edc <processTurn+0x734>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002cba:	4988      	ldr	r1, [pc, #544]	; (8002edc <processTurn+0x734>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	4886      	ldr	r0, [pc, #536]	; (8002ee0 <processTurn+0x738>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	00da      	lsls	r2, r3, #3
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	1883      	adds	r3, r0, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	2265      	movs	r2, #101	; 0x65
 8002cd6:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] --;
 8002cd8:	4a80      	ldr	r2, [pc, #512]	; (8002edc <processTurn+0x734>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	497e      	ldr	r1, [pc, #504]	; (8002edc <processTurn+0x734>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002cea:	e056      	b.n	8002d9a <processTurn+0x5f2>
			} else{
				monsterState[i] = 'r';
 8002cec:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <processTurn+0x730>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	2272      	movs	r2, #114	; 0x72
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e050      	b.n	8002d9a <processTurn+0x5f2>
			}
		} else {
			if (monsterLoc[i][0] < boardColumns - 1 && board[monsterLoc[i][0] + 1][monsterLoc[i][1]] == 'e') {
 8002cf8:	4a78      	ldr	r2, [pc, #480]	; (8002edc <processTurn+0x734>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	dc45      	bgt.n	8002d90 <processTurn+0x5e8>
 8002d04:	4a75      	ldr	r2, [pc, #468]	; (8002edc <processTurn+0x734>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4973      	ldr	r1, [pc, #460]	; (8002edc <processTurn+0x734>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	4871      	ldr	r0, [pc, #452]	; (8002ee0 <processTurn+0x738>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	00da      	lsls	r2, r3, #3
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	1883      	adds	r3, r0, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b65      	cmp	r3, #101	; 0x65
 8002d2c:	d130      	bne.n	8002d90 <processTurn+0x5e8>
				board[monsterLoc[i][0] + 1][monsterLoc[i][1]] = 'm';
 8002d2e:	4a6b      	ldr	r2, [pc, #428]	; (8002edc <processTurn+0x734>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	4968      	ldr	r1, [pc, #416]	; (8002edc <processTurn+0x734>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	4867      	ldr	r0, [pc, #412]	; (8002ee0 <processTurn+0x738>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	00da      	lsls	r2, r3, #3
 8002d4c:	1ad2      	subs	r2, r2, r3
 8002d4e:	1883      	adds	r3, r0, r2
 8002d50:	440b      	add	r3, r1
 8002d52:	226d      	movs	r2, #109	; 0x6d
 8002d54:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 8002d56:	4a61      	ldr	r2, [pc, #388]	; (8002edc <processTurn+0x734>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002d5e:	495f      	ldr	r1, [pc, #380]	; (8002edc <processTurn+0x734>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	485d      	ldr	r0, [pc, #372]	; (8002ee0 <processTurn+0x738>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00da      	lsls	r2, r3, #3
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	1883      	adds	r3, r0, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	2265      	movs	r2, #101	; 0x65
 8002d7a:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] ++;
 8002d7c:	4a57      	ldr	r2, [pc, #348]	; (8002edc <processTurn+0x734>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4955      	ldr	r1, [pc, #340]	; (8002edc <processTurn+0x734>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002d8e:	e004      	b.n	8002d9a <processTurn+0x5f2>
			} else {
				monsterState[i] = 'l';
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <processTurn+0x730>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	226c      	movs	r2, #108	; 0x6c
 8002d98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < monsterCount; i ++ ) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <processTurn+0x73c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	f6ff af4e 	blt.w	8002c48 <processTurn+0x4a0>

		}
	}

    //	Jump and Gravity
	if (playerRow == 0) {
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <processTurn+0x740>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d103      	bne.n	8002dbc <processTurn+0x614>
		// Die
		menuState = 'd';
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <processTurn+0x744>)
 8002db6:	2264      	movs	r2, #100	; 0x64
 8002db8:	701a      	strb	r2, [r3, #0]
		movePlayerTo(playerCol, playerRow + 1);
		jumpCount --;
	}


}
 8002dba:	e088      	b.n	8002ece <processTurn+0x726>
	} else if (playerFalling) {
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <processTurn+0x748>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <processTurn+0x630>
		movePlayerTo(playerCol, playerRow - 1);
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <processTurn+0x74c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <processTurn+0x740>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 f893 	bl	8002efc <movePlayerTo>
}
 8002dd6:	e07a      	b.n	8002ece <processTurn+0x726>
	} else if (jumpCount == 0 && playerRow > 0) { // Jump rule
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <processTurn+0x750>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d163      	bne.n	8002ea8 <processTurn+0x700>
 8002de0:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <processTurn+0x740>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	dd5f      	ble.n	8002ea8 <processTurn+0x700>
		if (board[playerCol][playerRow - 1] == 'e' ||
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <processTurn+0x74c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <processTurn+0x740>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1e59      	subs	r1, r3, #1
 8002df2:	483b      	ldr	r0, [pc, #236]	; (8002ee0 <processTurn+0x738>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00da      	lsls	r2, r3, #3
 8002dfc:	1ad2      	subs	r2, r2, r3
 8002dfe:	1883      	adds	r3, r0, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b65      	cmp	r3, #101	; 0x65
 8002e06:	d01f      	beq.n	8002e48 <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'm' ||
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <processTurn+0x74c>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <processTurn+0x740>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1e59      	subs	r1, r3, #1
 8002e12:	4833      	ldr	r0, [pc, #204]	; (8002ee0 <processTurn+0x738>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00da      	lsls	r2, r3, #3
 8002e1c:	1ad2      	subs	r2, r2, r3
 8002e1e:	1883      	adds	r3, r0, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	781b      	ldrb	r3, [r3, #0]
		if (board[playerCol][playerRow - 1] == 'e' ||
 8002e24:	2b6d      	cmp	r3, #109	; 0x6d
 8002e26:	d00f      	beq.n	8002e48 <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'v') {
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <processTurn+0x74c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <processTurn+0x740>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1e59      	subs	r1, r3, #1
 8002e32:	482b      	ldr	r0, [pc, #172]	; (8002ee0 <processTurn+0x738>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	00da      	lsls	r2, r3, #3
 8002e3c:	1ad2      	subs	r2, r2, r3
 8002e3e:	1883      	adds	r3, r0, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	781b      	ldrb	r3, [r3, #0]
			board[playerCol][playerRow - 1] == 'm' ||
 8002e44:	2b76      	cmp	r3, #118	; 0x76
 8002e46:	d108      	bne.n	8002e5a <processTurn+0x6b2>
			movePlayerTo(playerCol, playerRow - 1);
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <processTurn+0x74c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <processTurn+0x740>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 f851 	bl	8002efc <movePlayerTo>
		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <processTurn+0x74c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <processTurn+0x740>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1e59      	subs	r1, r3, #1
 8002e64:	481e      	ldr	r0, [pc, #120]	; (8002ee0 <processTurn+0x738>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00da      	lsls	r2, r3, #3
 8002e6e:	1ad2      	subs	r2, r2, r3
 8002e70:	1883      	adds	r3, r0, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b62      	cmp	r3, #98	; 0x62
 8002e78:	d102      	bne.n	8002e80 <processTurn+0x6d8>
			jumpCount = jumpOnBlock;
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <processTurn+0x750>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <processTurn+0x74c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <processTurn+0x740>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1e59      	subs	r1, r3, #1
 8002e8a:	4815      	ldr	r0, [pc, #84]	; (8002ee0 <processTurn+0x738>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	00da      	lsls	r2, r3, #3
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	1883      	adds	r3, r0, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b73      	cmp	r3, #115	; 0x73
 8002e9e:	d116      	bne.n	8002ece <processTurn+0x726>
			jumpCount = jumpOnCoil;
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <processTurn+0x750>)
 8002ea2:	2214      	movs	r2, #20
 8002ea4:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 8002ea6:	e012      	b.n	8002ece <processTurn+0x726>
	} else if (jumpCount > 0) { // Go up rule
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <processTurn+0x750>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	dd0e      	ble.n	8002ece <processTurn+0x726>
		movePlayerTo(playerCol, playerRow + 1);
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <processTurn+0x74c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <processTurn+0x740>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 f81d 	bl	8002efc <movePlayerTo>
		jumpCount --;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <processTurn+0x750>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <processTurn+0x750>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	e7ff      	b.n	8002ece <processTurn+0x726>
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000940 	.word	0x20000940
 8002edc:	20000710 	.word	0x20000710
 8002ee0:	200006b4 	.word	0x200006b4
 8002ee4:	20000924 	.word	0x20000924
 8002ee8:	2000092c 	.word	0x2000092c
 8002eec:	2000016c 	.word	0x2000016c
 8002ef0:	2000069c 	.word	0x2000069c
 8002ef4:	200006ac 	.word	0x200006ac
 8002ef8:	2000090c 	.word	0x2000090c

08002efc <movePlayerTo>:

void movePlayerTo(int toCol, int toRow)
{
 8002efc:	b490      	push	{r4, r7}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	if (playerRow < toRow) {
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <movePlayerTo+0xd4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dd14      	ble.n	8002f3a <movePlayerTo+0x3e>
		playerHeight ++;
 8002f10:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f18:	6013      	str	r3, [r2, #0]
		playerHeightInScreen ++;
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <movePlayerTo+0xdc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <movePlayerTo+0xdc>)
 8002f22:	6013      	str	r3, [r2, #0]
		if (playerHeight > score)
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <movePlayerTo+0xe0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	dd13      	ble.n	8002f58 <movePlayerTo+0x5c>
			score = playerHeight;
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <movePlayerTo+0xe0>)
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e00e      	b.n	8002f58 <movePlayerTo+0x5c>
	} else if (playerRow > toRow) {
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <movePlayerTo+0xd4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	da09      	bge.n	8002f58 <movePlayerTo+0x5c>
		playerHeight --;
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <movePlayerTo+0xd8>)
 8002f4c:	6013      	str	r3, [r2, #0]
		playerHeightInScreen --;
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <movePlayerTo+0xdc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <movePlayerTo+0xdc>)
 8002f56:	6013      	str	r3, [r2, #0]
	}
	if (playerOn != 'm')
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <movePlayerTo+0xe4>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b6d      	cmp	r3, #109	; 0x6d
 8002f5e:	d00f      	beq.n	8002f80 <movePlayerTo+0x84>
		board[playerCol][playerRow] = playerOn;
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <movePlayerTo+0xe8>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <movePlayerTo+0xd4>)
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <movePlayerTo+0xe4>)
 8002f6a:	781c      	ldrb	r4, [r3, #0]
 8002f6c:	481e      	ldr	r0, [pc, #120]	; (8002fe8 <movePlayerTo+0xec>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	00da      	lsls	r2, r3, #3
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	1883      	adds	r3, r0, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	701a      	strb	r2, [r3, #0]
	playerCol = toCol;
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <movePlayerTo+0xe8>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
	playerRow = toRow;
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <movePlayerTo+0xd4>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6013      	str	r3, [r2, #0]
	playerOn = board[playerCol][playerRow];
 8002f8c:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <movePlayerTo+0xe8>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <movePlayerTo+0xd4>)
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <movePlayerTo+0xec>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00da      	lsls	r2, r3, #3
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	1883      	adds	r3, r0, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <movePlayerTo+0xe4>)
 8002fa8:	701a      	strb	r2, [r3, #0]
	board[playerCol][playerRow] = 'p';
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <movePlayerTo+0xe8>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <movePlayerTo+0xd4>)
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <movePlayerTo+0xec>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	00da      	lsls	r2, r3, #3
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	1883      	adds	r3, r0, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	2270      	movs	r2, #112	; 0x70
 8002fc4:	701a      	strb	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc90      	pop	{r4, r7}
 8002fce:	4770      	bx	lr
 8002fd0:	2000092c 	.word	0x2000092c
 8002fd4:	20000934 	.word	0x20000934
 8002fd8:	20000910 	.word	0x20000910
 8002fdc:	2000070c 	.word	0x2000070c
 8002fe0:	2000093c 	.word	0x2000093c
 8002fe4:	200006ac 	.word	0x200006ac
 8002fe8:	200006b4 	.word	0x200006b4

08002fec <printGame>:

void printGame()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
	setCursor(0,  0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe f83d 	bl	8001074 <setCursor>
	char tmp[2];
	int c, i, j;
	for (c = 0; c < boardColumns; c ++ ) {
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e0bb      	b.n	8003178 <printGame+0x18c>

		i = c;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	60bb      	str	r3, [r7, #8]
		if (c == 1)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <printGame+0x24>
			i = 2;
 800300a:	2302      	movs	r3, #2
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	e004      	b.n	800301a <printGame+0x2e>
		else if (c == 2)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d101      	bne.n	800301a <printGame+0x2e>
			i = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < boardRows; j ++ ) {
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e0a4      	b.n	800316a <printGame+0x17e>
			if (board[i][j] != boardTemp[i][j]) {
 8003020:	495a      	ldr	r1, [pc, #360]	; (800318c <printGame+0x1a0>)
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	00da      	lsls	r2, r3, #3
 800302c:	1ad2      	subs	r2, r2, r3
 800302e:	440a      	add	r2, r1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	7819      	ldrb	r1, [r3, #0]
 8003036:	4856      	ldr	r0, [pc, #344]	; (8003190 <printGame+0x1a4>)
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	00da      	lsls	r2, r3, #3
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	4402      	add	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4299      	cmp	r1, r3
 800304e:	f000 8089 	beq.w	8003164 <printGame+0x178>
				setCursor(j, i);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe f809 	bl	8001074 <setCursor>
				tmp[0] = board[i][j];
 8003062:	494a      	ldr	r1, [pc, #296]	; (800318c <printGame+0x1a0>)
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	00da      	lsls	r2, r3, #3
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	440a      	add	r2, r1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	703b      	strb	r3, [r7, #0]
				tmp[1] = '\0';
 800307a:	2300      	movs	r3, #0
 800307c:	707b      	strb	r3, [r7, #1]
				  switch (board[i][j])
 800307e:	4943      	ldr	r1, [pc, #268]	; (800318c <printGame+0x1a0>)
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	00da      	lsls	r2, r3, #3
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	440a      	add	r2, r1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	3b62      	subs	r3, #98	; 0x62
 8003096:	2b14      	cmp	r3, #20
 8003098:	d848      	bhi.n	800312c <printGame+0x140>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <printGame+0xb4>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	08003105 	.word	0x08003105
 80030a4:	0800312d 	.word	0x0800312d
 80030a8:	0800312d 	.word	0x0800312d
 80030ac:	080030fd 	.word	0x080030fd
 80030b0:	0800312d 	.word	0x0800312d
 80030b4:	0800312d 	.word	0x0800312d
 80030b8:	0800312d 	.word	0x0800312d
 80030bc:	0800312d 	.word	0x0800312d
 80030c0:	0800312d 	.word	0x0800312d
 80030c4:	0800312d 	.word	0x0800312d
 80030c8:	08003125 	.word	0x08003125
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	0800312d 	.word	0x0800312d
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	080030f5 	.word	0x080030f5
 80030dc:	0800312d 	.word	0x0800312d
 80030e0:	0800312d 	.word	0x0800312d
 80030e4:	08003115 	.word	0x08003115
 80030e8:	0800312d 	.word	0x0800312d
 80030ec:	0800312d 	.word	0x0800312d
 80030f0:	0800311d 	.word	0x0800311d
					{
					case 'p':
						write(0);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fe f867 	bl	80011c8 <write>
						break;
 80030fa:	e01c      	b.n	8003136 <printGame+0x14a>
					case 'e':
						print(" ");
 80030fc:	4825      	ldr	r0, [pc, #148]	; (8003194 <printGame+0x1a8>)
 80030fe:	f7fe f801 	bl	8001104 <print>
				       	break;
 8003102:	e018      	b.n	8003136 <printGame+0x14a>
					case 'b':
						write(1);
 8003104:	2001      	movs	r0, #1
 8003106:	f7fe f85f 	bl	80011c8 <write>
						break;
 800310a:	e014      	b.n	8003136 <printGame+0x14a>
					case 'm':
						write(2);
 800310c:	2002      	movs	r0, #2
 800310e:	f7fe f85b 	bl	80011c8 <write>
						break;
 8003112:	e010      	b.n	8003136 <printGame+0x14a>
					case 's':
						write(3);
 8003114:	2003      	movs	r0, #3
 8003116:	f7fe f857 	bl	80011c8 <write>
						break;
 800311a:	e00c      	b.n	8003136 <printGame+0x14a>
					case 'v':
						write(4);
 800311c:	2004      	movs	r0, #4
 800311e:	f7fe f853 	bl	80011c8 <write>
						break;
 8003122:	e008      	b.n	8003136 <printGame+0x14a>
					case 'l':
						write(5);
 8003124:	2005      	movs	r0, #5
 8003126:	f7fe f84f 	bl	80011c8 <write>
						break;
 800312a:	e004      	b.n	8003136 <printGame+0x14a>
				     default:
				    	 print(tmp);
 800312c:	463b      	mov	r3, r7
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ffe8 	bl	8001104 <print>
				       break;
 8003134:	bf00      	nop
				     }
				boardTemp[i][j] = board[i][j];
 8003136:	4915      	ldr	r1, [pc, #84]	; (800318c <printGame+0x1a0>)
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	00da      	lsls	r2, r3, #3
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	440a      	add	r2, r1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	7818      	ldrb	r0, [r3, #0]
 800314c:	4910      	ldr	r1, [pc, #64]	; (8003190 <printGame+0x1a4>)
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00da      	lsls	r2, r3, #3
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	440a      	add	r2, r1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	4602      	mov	r2, r0
 8003162:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++ ) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b13      	cmp	r3, #19
 800316e:	f77f af57 	ble.w	8003020 <printGame+0x34>
	for (c = 0; c < boardColumns; c ++ ) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b03      	cmp	r3, #3
 800317c:	f77f af40 	ble.w	8003000 <printGame+0x14>
			}
		}
	}
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200006b4 	.word	0x200006b4
 8003190:	200008b8 	.word	0x200008b8
 8003194:	0800ae94 	.word	0x0800ae94

08003198 <chooseWhichObject>:

char chooseWhichObject(int j)
{
 8003198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800319c:	b088      	sub	sp, #32
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */

	if (j - lastBlockHeightInScreen > 4) {
 80031a2:	4bae      	ldr	r3, [pc, #696]	; (800345c <chooseWhichObject+0x2c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	dd04      	ble.n	80031b8 <chooseWhichObject+0x20>
		lastBlockHeightInScreen = j;
 80031ae:	4aab      	ldr	r2, [pc, #684]	; (800345c <chooseWhichObject+0x2c4>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6013      	str	r3, [r2, #0]
		return 'b';		
 80031b4:	2362      	movs	r3, #98	; 0x62
 80031b6:	e14c      	b.n	8003452 <chooseWhichObject+0x2ba>
	}

	if (blockCount + looseCount + voidCount + monsterCount + boosterCount > maxObjects)
 80031b8:	4ba9      	ldr	r3, [pc, #676]	; (8003460 <chooseWhichObject+0x2c8>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4ba9      	ldr	r3, [pc, #676]	; (8003464 <chooseWhichObject+0x2cc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	441a      	add	r2, r3
 80031c2:	4ba9      	ldr	r3, [pc, #676]	; (8003468 <chooseWhichObject+0x2d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	441a      	add	r2, r3
 80031c8:	4ba8      	ldr	r3, [pc, #672]	; (800346c <chooseWhichObject+0x2d4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	441a      	add	r2, r3
 80031ce:	4ba8      	ldr	r3, [pc, #672]	; (8003470 <chooseWhichObject+0x2d8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	dd01      	ble.n	80031dc <chooseWhichObject+0x44>
		return 'e';
 80031d8:	2365      	movs	r3, #101	; 0x65
 80031da:	e13a      	b.n	8003452 <chooseWhichObject+0x2ba>

	int BProb = BProbBase + BProbBase / (sqrt(score)); // as score goes high it will be so hard
 80031dc:	4ba5      	ldr	r3, [pc, #660]	; (8003474 <chooseWhichObject+0x2dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f99f 	bl	8000524 <__aeabi_i2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	4ba2      	ldr	r3, [pc, #648]	; (8003474 <chooseWhichObject+0x2dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f998 	bl	8000524 <__aeabi_i2d>
 80031f4:	4680      	mov	r8, r0
 80031f6:	4689      	mov	r9, r1
 80031f8:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <chooseWhichObject+0x2e0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f991 	bl	8000524 <__aeabi_i2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	ec43 2b10 	vmov	d0, r2, r3
 800320a:	f007 fc9d 	bl	800ab48 <sqrt>
 800320e:	ec53 2b10 	vmov	r2, r3, d0
 8003212:	4640      	mov	r0, r8
 8003214:	4649      	mov	r1, r9
 8003216:	f7fd fb19 	bl	800084c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fd f833 	bl	800028c <__adddf3>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fc93 	bl	8000b58 <__aeabi_d2iz>
 8003232:	4603      	mov	r3, r0
 8003234:	617b      	str	r3, [r7, #20]
	if (getRandom(0, 100) < BProb) {
 8003236:	2164      	movs	r1, #100	; 0x64
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff fa58 	bl	80026ee <getRandom>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4293      	cmp	r3, r2
 8003244:	dd04      	ble.n	8003250 <chooseWhichObject+0xb8>
		lastBlockHeightInScreen = j;
 8003246:	4a85      	ldr	r2, [pc, #532]	; (800345c <chooseWhichObject+0x2c4>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]
		return 'b';
 800324c:	2362      	movs	r3, #98	; 0x62
 800324e:	e100      	b.n	8003452 <chooseWhichObject+0x2ba>
	}

//	return 'e';

	int SProb = SProbBase + SProbBase / (sqrt(score)); // as score goes high it will be so hard
 8003250:	4b8a      	ldr	r3, [pc, #552]	; (800347c <chooseWhichObject+0x2e4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f965 	bl	8000524 <__aeabi_i2d>
 800325a:	4604      	mov	r4, r0
 800325c:	460d      	mov	r5, r1
 800325e:	4b87      	ldr	r3, [pc, #540]	; (800347c <chooseWhichObject+0x2e4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f95e 	bl	8000524 <__aeabi_i2d>
 8003268:	4680      	mov	r8, r0
 800326a:	4689      	mov	r9, r1
 800326c:	4b82      	ldr	r3, [pc, #520]	; (8003478 <chooseWhichObject+0x2e0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f957 	bl	8000524 <__aeabi_i2d>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	ec43 2b10 	vmov	d0, r2, r3
 800327e:	f007 fc63 	bl	800ab48 <sqrt>
 8003282:	ec53 2b10 	vmov	r2, r3, d0
 8003286:	4640      	mov	r0, r8
 8003288:	4649      	mov	r1, r9
 800328a:	f7fd fadf 	bl	800084c <__aeabi_ddiv>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	f7fc fff9 	bl	800028c <__adddf3>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	f7fd fc59 	bl	8000b58 <__aeabi_d2iz>
 80032a6:	4603      	mov	r3, r0
 80032a8:	613b      	str	r3, [r7, #16]
	if (getRandom(0, 100) < SProb) {
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fa1e 	bl	80026ee <getRandom>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	dd01      	ble.n	80032be <chooseWhichObject+0x126>
		return 's';
 80032ba:	2373      	movs	r3, #115	; 0x73
 80032bc:	e0c9      	b.n	8003452 <chooseWhichObject+0x2ba>
	}

	int LProb = LProbBase + LProbBase / (sqrt(score)); // as score goes high it will be so hard
 80032be:	4b70      	ldr	r3, [pc, #448]	; (8003480 <chooseWhichObject+0x2e8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f92e 	bl	8000524 <__aeabi_i2d>
 80032c8:	4604      	mov	r4, r0
 80032ca:	460d      	mov	r5, r1
 80032cc:	4b6c      	ldr	r3, [pc, #432]	; (8003480 <chooseWhichObject+0x2e8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f927 	bl	8000524 <__aeabi_i2d>
 80032d6:	4680      	mov	r8, r0
 80032d8:	4689      	mov	r9, r1
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <chooseWhichObject+0x2e0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f920 	bl	8000524 <__aeabi_i2d>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	ec43 2b10 	vmov	d0, r2, r3
 80032ec:	f007 fc2c 	bl	800ab48 <sqrt>
 80032f0:	ec53 2b10 	vmov	r2, r3, d0
 80032f4:	4640      	mov	r0, r8
 80032f6:	4649      	mov	r1, r9
 80032f8:	f7fd faa8 	bl	800084c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4620      	mov	r0, r4
 8003302:	4629      	mov	r1, r5
 8003304:	f7fc ffc2 	bl	800028c <__adddf3>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	f7fd fc22 	bl	8000b58 <__aeabi_d2iz>
 8003314:	4603      	mov	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]
	if (getRandom(0, 100) < LProb) {
 8003318:	2164      	movs	r1, #100	; 0x64
 800331a:	2000      	movs	r0, #0
 800331c:	f7ff f9e7 	bl	80026ee <getRandom>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4293      	cmp	r3, r2
 8003326:	dd01      	ble.n	800332c <chooseWhichObject+0x194>
		return 'l';
 8003328:	236c      	movs	r3, #108	; 0x6c
 800332a:	e092      	b.n	8003452 <chooseWhichObject+0x2ba>
	}

	if (score > 20 && monsterCount < 4) {
 800332c:	4b52      	ldr	r3, [pc, #328]	; (8003478 <chooseWhichObject+0x2e0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b14      	cmp	r3, #20
 8003332:	dd45      	ble.n	80033c0 <chooseWhichObject+0x228>
 8003334:	4b4d      	ldr	r3, [pc, #308]	; (800346c <chooseWhichObject+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	dc41      	bgt.n	80033c0 <chooseWhichObject+0x228>
		int MProb = MProbBase + MProbBase * (sqrt(score)); // as score goes high it will be so hard
 800333c:	4b51      	ldr	r3, [pc, #324]	; (8003484 <chooseWhichObject+0x2ec>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f8ef 	bl	8000524 <__aeabi_i2d>
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <chooseWhichObject+0x2ec>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8e8 	bl	8000524 <__aeabi_i2d>
 8003354:	4680      	mov	r8, r0
 8003356:	4689      	mov	r9, r1
 8003358:	4b47      	ldr	r3, [pc, #284]	; (8003478 <chooseWhichObject+0x2e0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8e1 	bl	8000524 <__aeabi_i2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	ec43 2b10 	vmov	d0, r2, r3
 800336a:	f007 fbed 	bl	800ab48 <sqrt>
 800336e:	ec53 2b10 	vmov	r2, r3, d0
 8003372:	4640      	mov	r0, r8
 8003374:	4649      	mov	r1, r9
 8003376:	f7fd f93f 	bl	80005f8 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fc ff83 	bl	800028c <__adddf3>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f7fd fbe3 	bl	8000b58 <__aeabi_d2iz>
 8003392:	4603      	mov	r3, r0
 8003394:	61fb      	str	r3, [r7, #28]
		if (MProb > 2 * MProbBase)
 8003396:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <chooseWhichObject+0x2ec>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	429a      	cmp	r2, r3
 80033a0:	dd03      	ble.n	80033aa <chooseWhichObject+0x212>
			MProb = 2 * MProbBase;
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <chooseWhichObject+0x2ec>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
		int t = getRandom(0, 100);
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff f99e 	bl	80026ee <getRandom>
 80033b2:	60b8      	str	r0, [r7, #8]

		if (t < MProb) {
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	da01      	bge.n	80033c0 <chooseWhichObject+0x228>
//			  char buff[20];
//			  sprintf(buff, "%d", t);
//			  print(buff);
			return 'm';
 80033bc:	236d      	movs	r3, #109	; 0x6d
 80033be:	e048      	b.n	8003452 <chooseWhichObject+0x2ba>
		}
	}


	if (score > 20 && voidCount < 4) {
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <chooseWhichObject+0x2e0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b14      	cmp	r3, #20
 80033c6:	dd43      	ble.n	8003450 <chooseWhichObject+0x2b8>
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <chooseWhichObject+0x2d0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	dc3f      	bgt.n	8003450 <chooseWhichObject+0x2b8>
		int VProb = VProbBase + VProbBase * (sqrt(score)); // as score goes high it will be so hard
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <chooseWhichObject+0x2f0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f8a5 	bl	8000524 <__aeabi_i2d>
 80033da:	4604      	mov	r4, r0
 80033dc:	460d      	mov	r5, r1
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <chooseWhichObject+0x2f0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f89e 	bl	8000524 <__aeabi_i2d>
 80033e8:	4680      	mov	r8, r0
 80033ea:	4689      	mov	r9, r1
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <chooseWhichObject+0x2e0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f897 	bl	8000524 <__aeabi_i2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	ec43 2b10 	vmov	d0, r2, r3
 80033fe:	f007 fba3 	bl	800ab48 <sqrt>
 8003402:	ec53 2b10 	vmov	r2, r3, d0
 8003406:	4640      	mov	r0, r8
 8003408:	4649      	mov	r1, r9
 800340a:	f7fd f8f5 	bl	80005f8 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4620      	mov	r0, r4
 8003414:	4629      	mov	r1, r5
 8003416:	f7fc ff39 	bl	800028c <__adddf3>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	f7fd fb99 	bl	8000b58 <__aeabi_d2iz>
 8003426:	4603      	mov	r3, r0
 8003428:	61bb      	str	r3, [r7, #24]
		if (VProb > 2 * VProbBase)
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <chooseWhichObject+0x2f0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	429a      	cmp	r2, r3
 8003434:	dd02      	ble.n	800343c <chooseWhichObject+0x2a4>
			VProb = 2 * VProb;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
		if (getRandom(0, 100) < VProb) {
 800343c:	2164      	movs	r1, #100	; 0x64
 800343e:	2000      	movs	r0, #0
 8003440:	f7ff f955 	bl	80026ee <getRandom>
 8003444:	4602      	mov	r2, r0
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4293      	cmp	r3, r2
 800344a:	dd01      	ble.n	8003450 <chooseWhichObject+0x2b8>
			return 'v';
 800344c:	2376      	movs	r3, #118	; 0x76
 800344e:	e000      	b.n	8003452 <chooseWhichObject+0x2ba>
		}
	}

	return 'e';
 8003450:	2365      	movs	r3, #101	; 0x65
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800345c:	200008ac 	.word	0x200008ac
 8003460:	20000978 	.word	0x20000978
 8003464:	200008a8 	.word	0x200008a8
 8003468:	20000974 	.word	0x20000974
 800346c:	20000924 	.word	0x20000924
 8003470:	200008a4 	.word	0x200008a4
 8003474:	20000708 	.word	0x20000708
 8003478:	2000070c 	.word	0x2000070c
 800347c:	200008a0 	.word	0x200008a0
 8003480:	20000920 	.word	0x20000920
 8003484:	200006a0 	.word	0x200006a0
 8003488:	2000091c 	.word	0x2000091c

0800348c <setRowObjects>:

void setRowObjects(int j)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	 * how to generage a row in this game?
	 * choose witch character should be choosed for this row
	 * choose witch col to place it
	 */
	int i;
	int maxObjectsOnRow = 2;
 8003494:	2302      	movs	r3, #2
 8003496:	613b      	str	r3, [r7, #16]
	for (i = 0; i < boardColumns; i ++ ) {
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e068      	b.n	8003570 <setRowObjects+0xe4>
		char chosen = chooseWhichObject(j);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fe7a 	bl	8003198 <chooseWhichObject>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
		if (chosen != 'e') {
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b65      	cmp	r3, #101	; 0x65
 80034ac:	d05a      	beq.n	8003564 <setRowObjects+0xd8>
			if (chosen == 'm') {
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b6d      	cmp	r3, #109	; 0x6d
 80034b2:	d125      	bne.n	8003500 <setRowObjects+0x74>
				monsterLoc[monsterCount][0] = i;
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <setRowObjects+0xf8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4933      	ldr	r1, [pc, #204]	; (8003588 <setRowObjects+0xfc>)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				monsterLoc[monsterCount][1] = j;
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <setRowObjects+0xf8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a30      	ldr	r2, [pc, #192]	; (8003588 <setRowObjects+0xfc>)
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
				int r = getRandom(0, 1);
 80034ce:	2101      	movs	r1, #1
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7ff f90c 	bl	80026ee <getRandom>
 80034d6:	60b8      	str	r0, [r7, #8]
				if (r == 0)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <setRowObjects+0x5e>
					monsterState[monsterCount] = 'l'; // go to left
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <setRowObjects+0xf8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <setRowObjects+0x100>)
 80034e4:	216c      	movs	r1, #108	; 0x6c
 80034e6:	54d1      	strb	r1, [r2, r3]
 80034e8:	e004      	b.n	80034f4 <setRowObjects+0x68>
				else
					monsterState[monsterCount] = 'r'; // go to right
 80034ea:	4b26      	ldr	r3, [pc, #152]	; (8003584 <setRowObjects+0xf8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <setRowObjects+0x100>)
 80034f0:	2172      	movs	r1, #114	; 0x72
 80034f2:	54d1      	strb	r1, [r2, r3]
				monsterCount ++;
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <setRowObjects+0xf8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <setRowObjects+0xf8>)
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e022      	b.n	8003546 <setRowObjects+0xba>
			} else if (chosen == 'v') {
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b76      	cmp	r3, #118	; 0x76
 8003504:	d105      	bne.n	8003512 <setRowObjects+0x86>
				voidCount ++;
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <setRowObjects+0x104>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <setRowObjects+0x104>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e019      	b.n	8003546 <setRowObjects+0xba>
			} else if (chosen == 'b') {
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b62      	cmp	r3, #98	; 0x62
 8003516:	d105      	bne.n	8003524 <setRowObjects+0x98>
				blockCount ++;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <setRowObjects+0x108>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <setRowObjects+0x108>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e010      	b.n	8003546 <setRowObjects+0xba>
			} else if (chosen == 's') {
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b73      	cmp	r3, #115	; 0x73
 8003528:	d105      	bne.n	8003536 <setRowObjects+0xaa>
				boosterCount ++;
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <setRowObjects+0x10c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <setRowObjects+0x10c>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e007      	b.n	8003546 <setRowObjects+0xba>
			} else if (chosen == 'l') {
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b6c      	cmp	r3, #108	; 0x6c
 800353a:	d104      	bne.n	8003546 <setRowObjects+0xba>
				looseCount ++;
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <setRowObjects+0x110>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <setRowObjects+0x110>)
 8003544:	6013      	str	r3, [r2, #0]
			}
			maxObjectsOnRow --;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3b01      	subs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
			board[i][j] = chosen;
 800354c:	4914      	ldr	r1, [pc, #80]	; (80035a0 <setRowObjects+0x114>)
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	00da      	lsls	r2, r3, #3
 8003558:	1ad2      	subs	r2, r2, r3
 800355a:	440a      	add	r2, r1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	701a      	strb	r2, [r3, #0]
		}
		if (maxObjectsOnRow < 1) break;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	dd06      	ble.n	8003578 <setRowObjects+0xec>
	for (i = 0; i < boardColumns; i ++ ) {
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b03      	cmp	r3, #3
 8003574:	dd93      	ble.n	800349e <setRowObjects+0x12>
	}
}
 8003576:	e000      	b.n	800357a <setRowObjects+0xee>
		if (maxObjectsOnRow < 1) break;
 8003578:	bf00      	nop
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000924 	.word	0x20000924
 8003588:	20000710 	.word	0x20000710
 800358c:	20000940 	.word	0x20000940
 8003590:	20000974 	.word	0x20000974
 8003594:	20000978 	.word	0x20000978
 8003598:	200008a4 	.word	0x200008a4
 800359c:	200008a8 	.word	0x200008a8
 80035a0:	200006b4 	.word	0x200006b4

080035a4 <initGameState>:

void initGameState()
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	int i, j;
	for (i = 0; i < boardColumns; i ++) {
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	e02e      	b.n	800360e <initGameState+0x6a>
		for (j = 0; j < boardRows; j ++) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	e01a      	b.n	80035ec <initGameState+0x48>
			board[i][j] = 'e';
 80035b6:	494a      	ldr	r1, [pc, #296]	; (80036e0 <initGameState+0x13c>)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	00da      	lsls	r2, r3, #3
 80035c2:	1ad2      	subs	r2, r2, r3
 80035c4:	440a      	add	r2, r1
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	2265      	movs	r2, #101	; 0x65
 80035cc:	701a      	strb	r2, [r3, #0]
			boardTemp[i][j] = '!'; // this means it is the first turn and no value is there
 80035ce:	4945      	ldr	r1, [pc, #276]	; (80036e4 <initGameState+0x140>)
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	00da      	lsls	r2, r3, #3
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	440a      	add	r2, r1
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	2221      	movs	r2, #33	; 0x21
 80035e4:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++) {
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b13      	cmp	r3, #19
 80035f0:	dde1      	ble.n	80035b6 <initGameState+0x12>
		}
		board[i][boardRows] = '\0';
 80035f2:	493b      	ldr	r1, [pc, #236]	; (80036e0 <initGameState+0x13c>)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	00da      	lsls	r2, r3, #3
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	188b      	adds	r3, r1, r2
 8003602:	3314      	adds	r3, #20
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < boardColumns; i ++) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	ddcd      	ble.n	80035b0 <initGameState+0xc>
	}
	board[1][0] = 'b';
 8003614:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <initGameState+0x13c>)
 8003616:	2262      	movs	r2, #98	; 0x62
 8003618:	755a      	strb	r2, [r3, #21]
	lastBlockHeightInScreen = 0;
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <initGameState+0x144>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
	board[1][1] = 'p';
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <initGameState+0x13c>)
 8003622:	2270      	movs	r2, #112	; 0x70
 8003624:	759a      	strb	r2, [r3, #22]
	playerRow = 1;
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <initGameState+0x148>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
	playerCol = 1;
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <initGameState+0x14c>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
	playerOn = 'e';
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <initGameState+0x150>)
 8003634:	2265      	movs	r2, #101	; 0x65
 8003636:	701a      	strb	r2, [r3, #0]
	jumpCount = 0;
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <initGameState+0x154>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

	bulletRow = -1;
 800363e:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <initGameState+0x158>)
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	601a      	str	r2, [r3, #0]
	bulletCol = -1;
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <initGameState+0x15c>)
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	601a      	str	r2, [r3, #0]

	pauseGame = 0;
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <initGameState+0x160>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

	BProbBase = 10;
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <initGameState+0x164>)
 8003656:	220a      	movs	r2, #10
 8003658:	601a      	str	r2, [r3, #0]
	SProbBase = 1;
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <initGameState+0x168>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
	VProbBase = 1;
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <initGameState+0x16c>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]
	LProbBase = 2;
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <initGameState+0x170>)
 8003668:	2202      	movs	r2, #2
 800366a:	601a      	str	r2, [r3, #0]
	MProbBase = 1;
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <initGameState+0x174>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

	monsterCount = 0;
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <initGameState+0x178>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
	voidCount = 0;
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <initGameState+0x17c>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
	blockCount = 1;
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <initGameState+0x180>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
	boosterCount = 0;
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <initGameState+0x184>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
	looseCount = 0;
 800368a:	4b28      	ldr	r3, [pc, #160]	; (800372c <initGameState+0x188>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

	playerFalling = 0;
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <initGameState+0x18c>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

	score = 1;
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <initGameState+0x190>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
	playerHeight = score;
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <initGameState+0x190>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a25      	ldr	r2, [pc, #148]	; (8003738 <initGameState+0x194>)
 80036a2:	6013      	str	r3, [r2, #0]
	playerHeightInScreen = playerHeight;
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <initGameState+0x194>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a24      	ldr	r2, [pc, #144]	; (800373c <initGameState+0x198>)
 80036aa:	6013      	str	r3, [r2, #0]

	srand(time(0));
 80036ac:	2000      	movs	r0, #0
 80036ae:	f006 f8ab 	bl	8009808 <time>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4613      	mov	r3, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 f817 	bl	80096ec <srand>

	for (j = 2; j < boardRows; j ++ ) {
 80036be:	2302      	movs	r3, #2
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	e005      	b.n	80036d0 <initGameState+0x12c>
		setRowObjects(j);
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f7ff fee1 	bl	800348c <setRowObjects>
	for (j = 2; j < boardRows; j ++ ) {
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b13      	cmp	r3, #19
 80036d4:	ddf6      	ble.n	80036c4 <initGameState+0x120>
	}
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200006b4 	.word	0x200006b4
 80036e4:	200008b8 	.word	0x200008b8
 80036e8:	200008ac 	.word	0x200008ac
 80036ec:	2000092c 	.word	0x2000092c
 80036f0:	200006ac 	.word	0x200006ac
 80036f4:	2000093c 	.word	0x2000093c
 80036f8:	2000090c 	.word	0x2000090c
 80036fc:	200006a4 	.word	0x200006a4
 8003700:	200006b0 	.word	0x200006b0
 8003704:	20000914 	.word	0x20000914
 8003708:	20000708 	.word	0x20000708
 800370c:	200008a0 	.word	0x200008a0
 8003710:	2000091c 	.word	0x2000091c
 8003714:	20000920 	.word	0x20000920
 8003718:	200006a0 	.word	0x200006a0
 800371c:	20000924 	.word	0x20000924
 8003720:	20000974 	.word	0x20000974
 8003724:	20000978 	.word	0x20000978
 8003728:	200008a4 	.word	0x200008a4
 800372c:	200008a8 	.word	0x200008a8
 8003730:	2000069c 	.word	0x2000069c
 8003734:	2000070c 	.word	0x2000070c
 8003738:	20000934 	.word	0x20000934
 800373c:	20000910 	.word	0x20000910

08003740 <keypadCallback>:

void keypadCallback(int8_t column_number)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if (last_gpio_exti + 250 > HAL_GetTick()) // Simple button debouncing
 800374a:	4b99      	ldr	r3, [pc, #612]	; (80039b0 <keypadCallback+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 8003752:	f000 fc05 	bl	8003f60 <HAL_GetTick>
 8003756:	4603      	mov	r3, r0
 8003758:	429c      	cmp	r4, r3
 800375a:	f200 8118 	bhi.w	800398e <keypadCallback+0x24e>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 800375e:	f000 fbff 	bl	8003f60 <HAL_GetTick>
 8003762:	4603      	mov	r3, r0
 8003764:	4a92      	ldr	r2, [pc, #584]	; (80039b0 <keypadCallback+0x270>)
 8003766:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8003768:	23ff      	movs	r3, #255	; 0xff
 800376a:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 0);
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <keypadCallback+0x274>)
 800376e:	2110      	movs	r1, #16
 8003770:	2200      	movs	r2, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f002 f974 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 0);
 8003778:	4b8e      	ldr	r3, [pc, #568]	; (80039b4 <keypadCallback+0x274>)
 800377a:	2120      	movs	r1, #32
 800377c:	2200      	movs	r2, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f96e 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 0);
 8003784:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <keypadCallback+0x274>)
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	2200      	movs	r2, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f002 f968 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 0);
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <keypadCallback+0x274>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	2200      	movs	r2, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f002 f962 	bl	8005a60 <HAL_GPIO_WritePin>

  for (uint8_t row = 0; row < 4; row++)
 800379c:	2300      	movs	r3, #0
 800379e:	73bb      	strb	r3, [r7, #14]
 80037a0:	e02e      	b.n	8003800 <keypadCallback+0xc0>
  {
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 1);
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	4a84      	ldr	r2, [pc, #528]	; (80039b8 <keypadCallback+0x278>)
 80037a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037aa:	7bbb      	ldrb	r3, [r7, #14]
 80037ac:	4a83      	ldr	r2, [pc, #524]	; (80039bc <keypadCallback+0x27c>)
 80037ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b2:	2201      	movs	r2, #1
 80037b4:	4619      	mov	r1, r3
 80037b6:	f002 f953 	bl	8005a60 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Column_ports[column_number], Column_pins[column_number]))
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	4a80      	ldr	r2, [pc, #512]	; (80039c0 <keypadCallback+0x280>)
 80037c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	497e      	ldr	r1, [pc, #504]	; (80039c4 <keypadCallback+0x284>)
 80037ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f002 f92d 	bl	8005a30 <HAL_GPIO_ReadPin>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <keypadCallback+0xa2>
    {
      row_number = row;
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e011      	b.n	8003806 <keypadCallback+0xc6>
    }
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 0);
 80037e2:	7bbb      	ldrb	r3, [r7, #14]
 80037e4:	4a74      	ldr	r2, [pc, #464]	; (80039b8 <keypadCallback+0x278>)
 80037e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037ea:	7bbb      	ldrb	r3, [r7, #14]
 80037ec:	4a73      	ldr	r2, [pc, #460]	; (80039bc <keypadCallback+0x27c>)
 80037ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	f002 f933 	bl	8005a60 <HAL_GPIO_WritePin>
  for (uint8_t row = 0; row < 4; row++)
 80037fa:	7bbb      	ldrb	r3, [r7, #14]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73bb      	strb	r3, [r7, #14]
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d9cd      	bls.n	80037a2 <keypadCallback+0x62>
  }

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 1);
 8003806:	4b6b      	ldr	r3, [pc, #428]	; (80039b4 <keypadCallback+0x274>)
 8003808:	2110      	movs	r1, #16
 800380a:	2201      	movs	r2, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f002 f927 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 1);
 8003812:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <keypadCallback+0x274>)
 8003814:	2120      	movs	r1, #32
 8003816:	2201      	movs	r2, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f002 f921 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 1);
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <keypadCallback+0x274>)
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	2201      	movs	r2, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f002 f91b 	bl	8005a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 1);
 800382a:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <keypadCallback+0x274>)
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	2201      	movs	r2, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f002 f915 	bl	8005a60 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8003836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	f000 80a8 	beq.w	8003992 <keypadCallback+0x252>
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	f000 80a2 	beq.w	8003992 <keypadCallback+0x252>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	b2da      	uxtb	r2, r3
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4413      	add	r3, r2
 8003858:	b2db      	uxtb	r3, r3
 800385a:	3301      	adds	r3, #1
 800385c:	737b      	strb	r3, [r7, #13]

//  setCursor(curser_column, 0);
  switch (button_number)
 800385e:	7b7b      	ldrb	r3, [r7, #13]
 8003860:	3b01      	subs	r3, #1
 8003862:	2b0f      	cmp	r3, #15
 8003864:	f200 8097 	bhi.w	8003996 <keypadCallback+0x256>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <keypadCallback+0x130>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003997 	.word	0x08003997
 8003874:	08003997 	.word	0x08003997
 8003878:	08003997 	.word	0x08003997
 800387c:	08003997 	.word	0x08003997
 8003880:	08003997 	.word	0x08003997
 8003884:	08003997 	.word	0x08003997
 8003888:	08003997 	.word	0x08003997
 800388c:	08003997 	.word	0x08003997
 8003890:	080038b1 	.word	0x080038b1
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080038d9 	.word	0x080038d9
 800389c:	08003997 	.word	0x08003997
 80038a0:	08003997 	.word	0x08003997
 80038a4:	080038df 	.word	0x080038df
 80038a8:	08003921 	.word	0x08003921
 80038ac:	0800396f 	.word	0x0800396f
       break;
     case 8:
//    	  print("8");
       break;
     case 9:
	 	if (pauseGame) 
 80038b0:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <keypadCallback+0x288>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <keypadCallback+0x180>
		 	pauseGame = 0;
 80038b8:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <keypadCallback+0x288>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
		else 
			pauseGame = 1;
//    	  print("9");
       break;
 80038be:	e073      	b.n	80039a8 <keypadCallback+0x268>
			pauseGame = 1;
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <keypadCallback+0x288>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
       break;
 80038c6:	e06f      	b.n	80039a8 <keypadCallback+0x268>
     case 10:
     	 if (menuState == 'z')
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <keypadCallback+0x28c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b7a      	cmp	r3, #122	; 0x7a
 80038ce:	d164      	bne.n	800399a <keypadCallback+0x25a>
     		 menuState = 'm';
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <keypadCallback+0x28c>)
 80038d2:	226d      	movs	r2, #109	; 0x6d
 80038d4:	701a      	strb	r2, [r3, #0]
       break;
 80038d6:	e060      	b.n	800399a <keypadCallback+0x25a>
     case 11:
//    	  print("11");
		fireBullet();
 80038d8:	f7fe ff22 	bl	8002720 <fireBullet>
       break;
 80038dc:	e064      	b.n	80039a8 <keypadCallback+0x268>
       break;
     case 13:
//    	 print("13");
       break;
     case 14:
    	 if (menuState == 'm')
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <keypadCallback+0x28c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b6d      	cmp	r3, #109	; 0x6d
 80038e4:	d103      	bne.n	80038ee <keypadCallback+0x1ae>
    		 menuState = 'a';
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <keypadCallback+0x28c>)
 80038e8:	2261      	movs	r2, #97	; 0x61
 80038ea:	701a      	strb	r2, [r3, #0]
    	 else if (menuState == 'g' && !playerFalling) {
    		 //    		 Player move right
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
    	 }
       break;
 80038ec:	e057      	b.n	800399e <keypadCallback+0x25e>
    	 else if (menuState == 'g' && !playerFalling) {
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <keypadCallback+0x28c>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b67      	cmp	r3, #103	; 0x67
 80038f4:	d153      	bne.n	800399e <keypadCallback+0x25e>
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <keypadCallback+0x290>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d14f      	bne.n	800399e <keypadCallback+0x25e>
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
 80038fe:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <keypadCallback+0x294>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	425a      	negs	r2, r3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	bf58      	it	pl
 8003910:	4253      	negpl	r3, r2
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <keypadCallback+0x298>)
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff faef 	bl	8002efc <movePlayerTo>
       break;
 800391e:	e03e      	b.n	800399e <keypadCallback+0x25e>
     case 15:
    	 if (menuState == 'm') {
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <keypadCallback+0x28c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b6d      	cmp	r3, #109	; 0x6d
 8003926:	d105      	bne.n	8003934 <keypadCallback+0x1f4>
    		 initGameState();
 8003928:	f7ff fe3c 	bl	80035a4 <initGameState>
    		 menuState = 'g';
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <keypadCallback+0x28c>)
 800392e:	2267      	movs	r2, #103	; 0x67
 8003930:	701a      	strb	r2, [r3, #0]
				 movePlayerTo(boardColumns - 1, playerRow);
			 } else {
				 movePlayerTo(playerCol - 1, playerRow);
			 }
    	 }
       break;
 8003932:	e036      	b.n	80039a2 <keypadCallback+0x262>
    	 } else if (menuState == 'g' && !playerFalling) {
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <keypadCallback+0x28c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b67      	cmp	r3, #103	; 0x67
 800393a:	d132      	bne.n	80039a2 <keypadCallback+0x262>
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <keypadCallback+0x290>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d12e      	bne.n	80039a2 <keypadCallback+0x262>
			 if (playerCol == 0) {
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <keypadCallback+0x294>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <keypadCallback+0x21a>
				 movePlayerTo(boardColumns - 1, playerRow);
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <keypadCallback+0x298>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	2003      	movs	r0, #3
 8003954:	f7ff fad2 	bl	8002efc <movePlayerTo>
       break;
 8003958:	e023      	b.n	80039a2 <keypadCallback+0x262>
				 movePlayerTo(playerCol - 1, playerRow);
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <keypadCallback+0x294>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <keypadCallback+0x298>)
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fac8 	bl	8002efc <movePlayerTo>
       break;
 800396c:	e019      	b.n	80039a2 <keypadCallback+0x262>
     case 16:
    	  if (menuState == 'a')
 800396e:	4b17      	ldr	r3, [pc, #92]	; (80039cc <keypadCallback+0x28c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b61      	cmp	r3, #97	; 0x61
 8003974:	d103      	bne.n	800397e <keypadCallback+0x23e>
    		  menuState = 'm';
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <keypadCallback+0x28c>)
 8003978:	226d      	movs	r2, #109	; 0x6d
 800397a:	701a      	strb	r2, [r3, #0]
			else if (menuState == 'd')
				menuState = 'm';
       break;
 800397c:	e013      	b.n	80039a6 <keypadCallback+0x266>
			else if (menuState == 'd')
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <keypadCallback+0x28c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d10f      	bne.n	80039a6 <keypadCallback+0x266>
				menuState = 'm';
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <keypadCallback+0x28c>)
 8003988:	226d      	movs	r2, #109	; 0x6d
 800398a:	701a      	strb	r2, [r3, #0]
       break;
 800398c:	e00b      	b.n	80039a6 <keypadCallback+0x266>
    return;
 800398e:	bf00      	nop
 8003990:	e00a      	b.n	80039a8 <keypadCallback+0x268>
    return; // Reject invalid scan
 8003992:	bf00      	nop
 8003994:	e008      	b.n	80039a8 <keypadCallback+0x268>

     default:
       break;
 8003996:	bf00      	nop
 8003998:	e006      	b.n	80039a8 <keypadCallback+0x268>
       break;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <keypadCallback+0x268>
       break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <keypadCallback+0x268>
       break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <keypadCallback+0x268>
       break;
 80039a6:	bf00      	nop
     }
}
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000928 	.word	0x20000928
 80039b4:	48000c00 	.word	0x48000c00
 80039b8:	0800aea8 	.word	0x0800aea8
 80039bc:	0800aeb8 	.word	0x0800aeb8
 80039c0:	0800aec0 	.word	0x0800aec0
 80039c4:	0800aed0 	.word	0x0800aed0
 80039c8:	20000914 	.word	0x20000914
 80039cc:	2000016c 	.word	0x2000016c
 80039d0:	2000069c 	.word	0x2000069c
 80039d4:	200006ac 	.word	0x200006ac
 80039d8:	2000092c 	.word	0x2000092c

080039dc <set_seg_value>:


void set_seg_value(int D) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	if (D == 0) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d114      	bne.n	8003a14 <set_seg_value+0x38>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2101      	movs	r1, #1
 80039ee:	4877      	ldr	r0, [pc, #476]	; (8003bcc <set_seg_value+0x1f0>)
 80039f0:	f002 f836 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2102      	movs	r1, #2
 80039f8:	4874      	ldr	r0, [pc, #464]	; (8003bcc <set_seg_value+0x1f0>)
 80039fa:	f002 f831 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2104      	movs	r1, #4
 8003a02:	4872      	ldr	r0, [pc, #456]	; (8003bcc <set_seg_value+0x1f0>)
 8003a04:	f002 f82c 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2108      	movs	r1, #8
 8003a0c:	486f      	ldr	r0, [pc, #444]	; (8003bcc <set_seg_value+0x1f0>)
 8003a0e:	f002 f827 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
	}
}
 8003a12:	e0d6      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if (D == 1) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d114      	bne.n	8003a44 <set_seg_value+0x68>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	486b      	ldr	r0, [pc, #428]	; (8003bcc <set_seg_value+0x1f0>)
 8003a20:	f002 f81e 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2102      	movs	r1, #2
 8003a28:	4868      	ldr	r0, [pc, #416]	; (8003bcc <set_seg_value+0x1f0>)
 8003a2a:	f002 f819 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2104      	movs	r1, #4
 8003a32:	4866      	ldr	r0, [pc, #408]	; (8003bcc <set_seg_value+0x1f0>)
 8003a34:	f002 f814 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2108      	movs	r1, #8
 8003a3c:	4863      	ldr	r0, [pc, #396]	; (8003bcc <set_seg_value+0x1f0>)
 8003a3e:	f002 f80f 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003a42:	e0be      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if (D == 2) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d114      	bne.n	8003a74 <set_seg_value+0x98>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	485f      	ldr	r0, [pc, #380]	; (8003bcc <set_seg_value+0x1f0>)
 8003a50:	f002 f806 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003a54:	2201      	movs	r2, #1
 8003a56:	2102      	movs	r1, #2
 8003a58:	485c      	ldr	r0, [pc, #368]	; (8003bcc <set_seg_value+0x1f0>)
 8003a5a:	f002 f801 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2104      	movs	r1, #4
 8003a62:	485a      	ldr	r0, [pc, #360]	; (8003bcc <set_seg_value+0x1f0>)
 8003a64:	f001 fffc 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2108      	movs	r1, #8
 8003a6c:	4857      	ldr	r0, [pc, #348]	; (8003bcc <set_seg_value+0x1f0>)
 8003a6e:	f001 fff7 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003a72:	e0a6      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if (D == 3) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d114      	bne.n	8003aa4 <set_seg_value+0xc8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4853      	ldr	r0, [pc, #332]	; (8003bcc <set_seg_value+0x1f0>)
 8003a80:	f001 ffee 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003a84:	2201      	movs	r2, #1
 8003a86:	2102      	movs	r1, #2
 8003a88:	4850      	ldr	r0, [pc, #320]	; (8003bcc <set_seg_value+0x1f0>)
 8003a8a:	f001 ffe9 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2104      	movs	r1, #4
 8003a92:	484e      	ldr	r0, [pc, #312]	; (8003bcc <set_seg_value+0x1f0>)
 8003a94:	f001 ffe4 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	484b      	ldr	r0, [pc, #300]	; (8003bcc <set_seg_value+0x1f0>)
 8003a9e:	f001 ffdf 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003aa2:	e08e      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 4) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d114      	bne.n	8003ad4 <set_seg_value+0xf8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	4847      	ldr	r0, [pc, #284]	; (8003bcc <set_seg_value+0x1f0>)
 8003ab0:	f001 ffd6 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4844      	ldr	r0, [pc, #272]	; (8003bcc <set_seg_value+0x1f0>)
 8003aba:	f001 ffd1 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	4842      	ldr	r0, [pc, #264]	; (8003bcc <set_seg_value+0x1f0>)
 8003ac4:	f001 ffcc 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2108      	movs	r1, #8
 8003acc:	483f      	ldr	r0, [pc, #252]	; (8003bcc <set_seg_value+0x1f0>)
 8003ace:	f001 ffc7 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003ad2:	e076      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 5) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d114      	bne.n	8003b04 <set_seg_value+0x128>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003ada:	2201      	movs	r2, #1
 8003adc:	2101      	movs	r1, #1
 8003ade:	483b      	ldr	r0, [pc, #236]	; (8003bcc <set_seg_value+0x1f0>)
 8003ae0:	f001 ffbe 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4838      	ldr	r0, [pc, #224]	; (8003bcc <set_seg_value+0x1f0>)
 8003aea:	f001 ffb9 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003aee:	2201      	movs	r2, #1
 8003af0:	2104      	movs	r1, #4
 8003af2:	4836      	ldr	r0, [pc, #216]	; (8003bcc <set_seg_value+0x1f0>)
 8003af4:	f001 ffb4 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2108      	movs	r1, #8
 8003afc:	4833      	ldr	r0, [pc, #204]	; (8003bcc <set_seg_value+0x1f0>)
 8003afe:	f001 ffaf 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003b02:	e05e      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 6) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d114      	bne.n	8003b34 <set_seg_value+0x158>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	482f      	ldr	r0, [pc, #188]	; (8003bcc <set_seg_value+0x1f0>)
 8003b10:	f001 ffa6 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003b14:	2201      	movs	r2, #1
 8003b16:	2102      	movs	r1, #2
 8003b18:	482c      	ldr	r0, [pc, #176]	; (8003bcc <set_seg_value+0x1f0>)
 8003b1a:	f001 ffa1 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003b1e:	2201      	movs	r2, #1
 8003b20:	2104      	movs	r1, #4
 8003b22:	482a      	ldr	r0, [pc, #168]	; (8003bcc <set_seg_value+0x1f0>)
 8003b24:	f001 ff9c 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2108      	movs	r1, #8
 8003b2c:	4827      	ldr	r0, [pc, #156]	; (8003bcc <set_seg_value+0x1f0>)
 8003b2e:	f001 ff97 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003b32:	e046      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 7) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b07      	cmp	r3, #7
 8003b38:	d114      	bne.n	8003b64 <set_seg_value+0x188>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4823      	ldr	r0, [pc, #140]	; (8003bcc <set_seg_value+0x1f0>)
 8003b40:	f001 ff8e 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003b44:	2201      	movs	r2, #1
 8003b46:	2102      	movs	r1, #2
 8003b48:	4820      	ldr	r0, [pc, #128]	; (8003bcc <set_seg_value+0x1f0>)
 8003b4a:	f001 ff89 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2104      	movs	r1, #4
 8003b52:	481e      	ldr	r0, [pc, #120]	; (8003bcc <set_seg_value+0x1f0>)
 8003b54:	f001 ff84 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2108      	movs	r1, #8
 8003b5c:	481b      	ldr	r0, [pc, #108]	; (8003bcc <set_seg_value+0x1f0>)
 8003b5e:	f001 ff7f 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003b62:	e02e      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 8) {
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d114      	bne.n	8003b94 <set_seg_value+0x1b8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4817      	ldr	r0, [pc, #92]	; (8003bcc <set_seg_value+0x1f0>)
 8003b70:	f001 ff76 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2102      	movs	r1, #2
 8003b78:	4814      	ldr	r0, [pc, #80]	; (8003bcc <set_seg_value+0x1f0>)
 8003b7a:	f001 ff71 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2104      	movs	r1, #4
 8003b82:	4812      	ldr	r0, [pc, #72]	; (8003bcc <set_seg_value+0x1f0>)
 8003b84:	f001 ff6c 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2108      	movs	r1, #8
 8003b8c:	480f      	ldr	r0, [pc, #60]	; (8003bcc <set_seg_value+0x1f0>)
 8003b8e:	f001 ff67 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003b92:	e016      	b.n	8003bc2 <set_seg_value+0x1e6>
	} else if(D == 9) {
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b09      	cmp	r3, #9
 8003b98:	d113      	bne.n	8003bc2 <set_seg_value+0x1e6>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <set_seg_value+0x1f0>)
 8003ba0:	f001 ff5e 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <set_seg_value+0x1f0>)
 8003baa:	f001 ff59 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2104      	movs	r1, #4
 8003bb2:	4806      	ldr	r0, [pc, #24]	; (8003bcc <set_seg_value+0x1f0>)
 8003bb4:	f001 ff54 	bl	8005a60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2108      	movs	r1, #8
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <set_seg_value+0x1f0>)
 8003bbe:	f001 ff4f 	bl	8005a60 <HAL_GPIO_WritePin>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	48000800 	.word	0x48000800

08003bd0 <setScoreSeven>:

void setScoreSeven() {
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	D3 = score % 10;
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <setScoreSeven+0x80>)
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <setScoreSeven+0x84>)
 8003bda:	fb83 2301 	smull	r2, r3, r3, r1
 8003bde:	109a      	asrs	r2, r3, #2
 8003be0:	17cb      	asrs	r3, r1, #31
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	1aca      	subs	r2, r1, r3
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <setScoreSeven+0x88>)
 8003bf0:	601a      	str	r2, [r3, #0]
	D2 = (score / 10) % 10;
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <setScoreSeven+0x80>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <setScoreSeven+0x84>)
 8003bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8003bfc:	1092      	asrs	r2, r2, #2
 8003bfe:	17db      	asrs	r3, r3, #31
 8003c00:	1ad1      	subs	r1, r2, r3
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <setScoreSeven+0x84>)
 8003c04:	fb83 2301 	smull	r2, r3, r3, r1
 8003c08:	109a      	asrs	r2, r3, #2
 8003c0a:	17cb      	asrs	r3, r1, #31
 8003c0c:	1ad2      	subs	r2, r2, r3
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	1aca      	subs	r2, r1, r3
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <setScoreSeven+0x8c>)
 8003c1a:	601a      	str	r2, [r3, #0]
	D1 = (score / 100) % 10;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <setScoreSeven+0x80>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <setScoreSeven+0x90>)
 8003c22:	fb82 1203 	smull	r1, r2, r2, r3
 8003c26:	1152      	asrs	r2, r2, #5
 8003c28:	17db      	asrs	r3, r3, #31
 8003c2a:	1ad1      	subs	r1, r2, r3
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <setScoreSeven+0x84>)
 8003c2e:	fb83 2301 	smull	r2, r3, r3, r1
 8003c32:	109a      	asrs	r2, r3, #2
 8003c34:	17cb      	asrs	r3, r1, #31
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	1aca      	subs	r2, r1, r3
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <setScoreSeven+0x94>)
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	2000070c 	.word	0x2000070c
 8003c54:	66666667 	.word	0x66666667
 8003c58:	20000698 	.word	0x20000698
 8003c5c:	200008b4 	.word	0x200008b4
 8003c60:	51eb851f 	.word	0x51eb851f
 8003c64:	20000938 	.word	0x20000938

08003c68 <show>:


void show(int i){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	int show = sprintf(showarr, "difficulty %d \n", i);
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4909      	ldr	r1, [pc, #36]	; (8003c98 <show+0x30>)
 8003c74:	4809      	ldr	r0, [pc, #36]	; (8003c9c <show+0x34>)
 8003c76:	f005 fda7 	bl	80097c8 <siprintf>
 8003c7a:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, showarr, sizeof(showarr), 1000);
 8003c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c80:	221e      	movs	r2, #30
 8003c82:	4906      	ldr	r1, [pc, #24]	; (8003c9c <show+0x34>)
 8003c84:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <show+0x38>)
 8003c86:	f004 fd01 	bl	800868c <HAL_UART_Transmit>
	D0 = i;
 8003c8a:	4a06      	ldr	r2, [pc, #24]	; (8003ca4 <show+0x3c>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]


}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800ae98 	.word	0x0800ae98
 8003c9c:	20000034 	.word	0x20000034
 8003ca0:	2000028c 	.word	0x2000028c
 8003ca4:	200006a8 	.word	0x200006a8

08003ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	return 1;
 8003cac:	2301      	movs	r3, #1
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <_kill>:

int _kill(int pid, int sig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cc2:	f005 fce1 	bl	8009688 <__errno>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2216      	movs	r2, #22
 8003cca:	601a      	str	r2, [r3, #0]
	return -1;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_exit>:

void _exit (int status)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ffe7 	bl	8003cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cea:	e7fe      	b.n	8003cea <_exit+0x12>

08003cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e00a      	b.n	8003d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cfe:	f3af 8000 	nop.w
 8003d02:	4601      	mov	r1, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	60ba      	str	r2, [r7, #8]
 8003d0a:	b2ca      	uxtb	r2, r1
 8003d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf0      	blt.n	8003cfe <_read+0x12>
	}

return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e009      	b.n	8003d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbf1      	blt.n	8003d38 <_write+0x12>
	}
	return len;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_close>:

int _close(int file)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	return -1;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d86:	605a      	str	r2, [r3, #4]
	return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_isatty>:

int _isatty(int file)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
	return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <_sbrk+0x5c>)
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <_sbrk+0x60>)
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <_sbrk+0x64>)
 8003de6:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <_sbrk+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d207      	bcs.n	8003e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df8:	f005 fc46 	bl	8009688 <__errno>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	220c      	movs	r2, #12
 8003e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	e009      	b.n	8003e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <_sbrk+0x64>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <_sbrk+0x64>)
 8003e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000a000 	.word	0x2000a000
 8003e28:	00000400 	.word	0x00000400
 8003e2c:	200000ec 	.word	0x200000ec
 8003e30:	20000990 	.word	0x20000990

08003e34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <SystemInit+0x20>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <SystemInit+0x20>)
 8003e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e5e:	490e      	ldr	r1, [pc, #56]	; (8003e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <LoopForever+0xe>)
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e64:	e002      	b.n	8003e6c <LoopCopyDataInit>

08003e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6a:	3304      	adds	r3, #4

08003e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e70:	d3f9      	bcc.n	8003e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e72:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e74:	4c0b      	ldr	r4, [pc, #44]	; (8003ea4 <LoopForever+0x16>)
  movs r3, #0
 8003e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e78:	e001      	b.n	8003e7e <LoopFillZerobss>

08003e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e7c:	3204      	adds	r2, #4

08003e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e80:	d3fb      	bcc.n	8003e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e82:	f7ff ffd7 	bl	8003e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e86:	f005 fc05 	bl	8009694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e8a:	f7fd fa75 	bl	8001378 <main>

08003e8e <LoopForever>:

LoopForever:
    b LoopForever
 8003e8e:	e7fe      	b.n	8003e8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e98:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8003e9c:	0800b064 	.word	0x0800b064
  ldr r2, =_sbss
 8003ea0:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003ea4:	20000990 	.word	0x20000990

08003ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ea8:	e7fe      	b.n	8003ea8 <ADC1_2_IRQHandler>
	...

08003eac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_Init+0x28>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <HAL_Init+0x28>)
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	f001 fb85 	bl	80055cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f000 f808 	bl	8003ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ec8:	f7fd ff2c 	bl	8001d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40022000 	.word	0x40022000

08003ed8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ee0:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_InitTick+0x54>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_InitTick+0x58>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fb9d 	bl	8005636 <HAL_SYSTICK_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00e      	b.n	8003f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d80a      	bhi.n	8003f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f001 fb65 	bl	80055e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f18:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <HAL_InitTick+0x5c>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000054 	.word	0x20000054
 8003f30:	2000005c 	.word	0x2000005c
 8003f34:	20000058 	.word	0x20000058

08003f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_IncTick+0x20>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_IncTick+0x24>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_IncTick+0x24>)
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	2000005c 	.word	0x2000005c
 8003f5c:	2000097c 	.word	0x2000097c

08003f60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return uwTick;  
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_GetTick+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000097c 	.word	0x2000097c

08003f78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7ff ffee 	bl	8003f60 <HAL_GetTick>
 8003f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d005      	beq.n	8003f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_Delay+0x44>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f9e:	bf00      	nop
 8003fa0:	f7ff ffde 	bl	8003f60 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d8f7      	bhi.n	8003fa0 <HAL_Delay+0x28>
  {
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000005c 	.word	0x2000005c

08003fc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b09a      	sub	sp, #104	; 0x68
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e1c9      	b.n	80043b0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d176      	bne.n	800411c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d152      	bne.n	80040dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd fe93 	bl	8001d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13b      	bne.n	80040dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f001 f97b 	bl	8005360 <ADC_Disable>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d12f      	bne.n	80040dc <HAL_ADC_Init+0xe0>
 800407c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004080:	2b00      	cmp	r3, #0
 8004082:	d12b      	bne.n	80040dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800408c:	f023 0302 	bic.w	r3, r3, #2
 8004090:	f043 0202 	orr.w	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040b8:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <HAL_ADC_Init+0x2d8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a86      	ldr	r2, [pc, #536]	; (80042d8 <HAL_ADC_Init+0x2dc>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9a      	lsrs	r2, r3, #18
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040ce:	e002      	b.n	80040d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f9      	bne.n	80040d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f8:	d110      	bne.n	800411c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f023 0312 	bic.w	r3, r3, #18
 8004102:	f043 0210 	orr.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 8136 	bne.w	8004396 <HAL_ADC_Init+0x39a>
 800412a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 8131 	bne.w	8004396 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8129 	bne.w	8004396 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800414c:	f043 0202 	orr.w	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415c:	d004      	beq.n	8004168 <HAL_ADC_Init+0x16c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5e      	ldr	r2, [pc, #376]	; (80042dc <HAL_ADC_Init+0x2e0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_ADC_Init+0x170>
 8004168:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_ADC_Init+0x2e4>)
 800416a:	e000      	b.n	800416e <HAL_ADC_Init+0x172>
 800416c:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_ADC_Init+0x2e8>)
 800416e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d102      	bne.n	8004180 <HAL_ADC_Init+0x184>
 800417a:	4b58      	ldr	r3, [pc, #352]	; (80042dc <HAL_ADC_Init+0x2e0>)
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e01a      	b.n	80041b6 <HAL_ADC_Init+0x1ba>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a55      	ldr	r2, [pc, #340]	; (80042dc <HAL_ADC_Init+0x2e0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d103      	bne.n	8004192 <HAL_ADC_Init+0x196>
 800418a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e011      	b.n	80041b6 <HAL_ADC_Init+0x1ba>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a54      	ldr	r2, [pc, #336]	; (80042e8 <HAL_ADC_Init+0x2ec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d102      	bne.n	80041a2 <HAL_ADC_Init+0x1a6>
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_ADC_Init+0x2f0>)
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e009      	b.n	80041b6 <HAL_ADC_Init+0x1ba>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_ADC_Init+0x2f0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d102      	bne.n	80041b2 <HAL_ADC_Init+0x1b6>
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <HAL_ADC_Init+0x2ec>)
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <HAL_ADC_Init+0x1ba>
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d108      	bne.n	80041d6 <HAL_ADC_Init+0x1da>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_Init+0x1da>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_ADC_Init+0x1dc>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11c      	bne.n	8004216 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_ADC_Init+0x202>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_Init+0x202>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_ADC_Init+0x204>
 80041fe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004200:	2b00      	cmp	r3, #0
 8004202:	d108      	bne.n	8004216 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	431a      	orrs	r2, r3
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7e5b      	ldrb	r3, [r3, #25]
 800421a:	035b      	lsls	r3, r3, #13
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004220:	2a01      	cmp	r2, #1
 8004222:	d002      	beq.n	800422a <HAL_ADC_Init+0x22e>
 8004224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004228:	e000      	b.n	800422c <HAL_ADC_Init+0x230>
 800422a:	2200      	movs	r2, #0
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800423c:	4313      	orrs	r3, r2
 800423e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d11b      	bne.n	8004282 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7e5b      	ldrb	r3, [r3, #25]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	3b01      	subs	r3, #1
 8004258:	045a      	lsls	r2, r3, #17
 800425a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425c:	4313      	orrs	r3, r2
 800425e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004262:	663b      	str	r3, [r7, #96]	; 0x60
 8004264:	e00d      	b.n	8004282 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	2b01      	cmp	r3, #1
 8004288:	d03a      	beq.n	8004300 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_ADC_Init+0x2ec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_ADC_Init+0x2a2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <HAL_ADC_Init+0x2f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d128      	bne.n	80042f0 <HAL_ADC_Init+0x2f4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80042a6:	d012      	beq.n	80042ce <HAL_ADC_Init+0x2d2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b0:	d00a      	beq.n	80042c8 <HAL_ADC_Init+0x2cc>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80042ba:	d002      	beq.n	80042c2 <HAL_ADC_Init+0x2c6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	e018      	b.n	80042f4 <HAL_ADC_Init+0x2f8>
 80042c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c6:	e015      	b.n	80042f4 <HAL_ADC_Init+0x2f8>
 80042c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80042cc:	e012      	b.n	80042f4 <HAL_ADC_Init+0x2f8>
 80042ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80042d2:	e00f      	b.n	80042f4 <HAL_ADC_Init+0x2f8>
 80042d4:	20000054 	.word	0x20000054
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	50000100 	.word	0x50000100
 80042e0:	50000300 	.word	0x50000300
 80042e4:	50000700 	.word	0x50000700
 80042e8:	50000400 	.word	0x50000400
 80042ec:	50000500 	.word	0x50000500
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042f8:	4313      	orrs	r3, r2
 80042fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042fc:	4313      	orrs	r3, r2
 80042fe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800431c:	f023 0302 	bic.w	r3, r3, #2
 8004320:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	039a      	lsls	r2, r3, #14
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4313      	orrs	r3, r2
 8004332:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004334:	4313      	orrs	r3, r2
 8004336:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <HAL_ADC_Init+0x3bc>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004348:	430b      	orrs	r3, r1
 800434a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10c      	bne.n	800436e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f023 010f 	bic.w	r1, r3, #15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	1e5a      	subs	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
 800436c:	e007      	b.n	800437e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020f 	bic.w	r2, r2, #15
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
 8004394:	e00a      	b.n	80043ac <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f023 0312 	bic.w	r3, r3, #18
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80043ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3768      	adds	r7, #104	; 0x68
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	fff0c007 	.word	0xfff0c007

080043bc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 8123 	bne.w	800461e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Start_IT+0x2a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e11e      	b.n	8004624 <HAL_ADC_Start_IT+0x268>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ff52 	bl	8005298 <ADC_Enable>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 810a 	bne.w	8004614 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800441c:	d004      	beq.n	8004428 <HAL_ADC_Start_IT+0x6c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a82      	ldr	r2, [pc, #520]	; (800462c <HAL_ADC_Start_IT+0x270>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d106      	bne.n	8004436 <HAL_ADC_Start_IT+0x7a>
 8004428:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_ADC_Start_IT+0x274>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_ADC_Start_IT+0x9a>
 8004434:	e005      	b.n	8004442 <HAL_ADC_Start_IT+0x86>
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_ADC_Start_IT+0x278>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_ADC_Start_IT+0x9a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800444a:	d004      	beq.n	8004456 <HAL_ADC_Start_IT+0x9a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a79      	ldr	r2, [pc, #484]	; (8004638 <HAL_ADC_Start_IT+0x27c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d115      	bne.n	8004482 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d036      	beq.n	80044de <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004480:	e02d      	b.n	80044de <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004496:	d004      	beq.n	80044a2 <HAL_ADC_Start_IT+0xe6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a63      	ldr	r2, [pc, #396]	; (800462c <HAL_ADC_Start_IT+0x270>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10a      	bne.n	80044b8 <HAL_ADC_Start_IT+0xfc>
 80044a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e008      	b.n	80044ca <HAL_ADC_Start_IT+0x10e>
 80044b8:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <HAL_ADC_Start_IT+0x27c>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d106      	bne.n	80044fa <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f023 0206 	bic.w	r2, r3, #6
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
 80044f8:	e002      	b.n	8004500 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	221c      	movs	r2, #28
 800450e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d110      	bne.n	800453a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0204 	bic.w	r2, r2, #4
 8004526:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	605a      	str	r2, [r3, #4]
          break;
 8004538:	e008      	b.n	800454c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 020c 	orr.w	r2, r2, #12
 8004548:	605a      	str	r2, [r3, #4]
          break;
 800454a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0210 	bic.w	r2, r2, #16
 8004562:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800456c:	d004      	beq.n	8004578 <HAL_ADC_Start_IT+0x1bc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <HAL_ADC_Start_IT+0x270>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d106      	bne.n	8004586 <HAL_ADC_Start_IT+0x1ca>
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <HAL_ADC_Start_IT+0x274>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03e      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 8004584:	e005      	b.n	8004592 <HAL_ADC_Start_IT+0x1d6>
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_ADC_Start_IT+0x278>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2b00      	cmp	r3, #0
 8004590:	d037      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800459a:	d004      	beq.n	80045a6 <HAL_ADC_Start_IT+0x1ea>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_ADC_Start_IT+0x270>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d106      	bne.n	80045b4 <HAL_ADC_Start_IT+0x1f8>
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_ADC_Start_IT+0x274>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d027      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 80045b2:	e005      	b.n	80045c0 <HAL_ADC_Start_IT+0x204>
 80045b4:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_ADC_Start_IT+0x278>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d020      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c8:	d004      	beq.n	80045d4 <HAL_ADC_Start_IT+0x218>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <HAL_ADC_Start_IT+0x270>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d106      	bne.n	80045e2 <HAL_ADC_Start_IT+0x226>
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_ADC_Start_IT+0x274>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2b09      	cmp	r3, #9
 80045de:	d010      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 80045e0:	e005      	b.n	80045ee <HAL_ADC_Start_IT+0x232>
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_ADC_Start_IT+0x278>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d009      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f6:	d004      	beq.n	8004602 <HAL_ADC_Start_IT+0x246>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0e      	ldr	r2, [pc, #56]	; (8004638 <HAL_ADC_Start_IT+0x27c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10f      	bne.n	8004622 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0204 	orr.w	r2, r2, #4
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	e006      	b.n	8004622 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800461c:	e001      	b.n	8004622 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	50000100 	.word	0x50000100
 8004630:	50000300 	.word	0x50000300
 8004634:	50000700 	.word	0x50000700
 8004638:	50000400 	.word	0x50000400

0800463c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d106      	bne.n	8004688 <HAL_ADC_IRQHandler+0x30>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d00f      	beq.n	80046a8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004692:	2b08      	cmp	r3, #8
 8004694:	f040 80c0 	bne.w	8004818 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	f040 80b8 	bne.w	8004818 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c8:	d004      	beq.n	80046d4 <HAL_ADC_IRQHandler+0x7c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a95      	ldr	r2, [pc, #596]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d106      	bne.n	80046e2 <HAL_ADC_IRQHandler+0x8a>
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03e      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 80046e0:	e005      	b.n	80046ee <HAL_ADC_IRQHandler+0x96>
 80046e2:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d037      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f6:	d004      	beq.n	8004702 <HAL_ADC_IRQHandler+0xaa>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a89      	ldr	r2, [pc, #548]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d106      	bne.n	8004710 <HAL_ADC_IRQHandler+0xb8>
 8004702:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2b05      	cmp	r3, #5
 800470c:	d027      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 800470e:	e005      	b.n	800471c <HAL_ADC_IRQHandler+0xc4>
 8004710:	4b86      	ldr	r3, [pc, #536]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2b05      	cmp	r3, #5
 800471a:	d020      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004724:	d004      	beq.n	8004730 <HAL_ADC_IRQHandler+0xd8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d106      	bne.n	800473e <HAL_ADC_IRQHandler+0xe6>
 8004730:	4b7d      	ldr	r3, [pc, #500]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2b09      	cmp	r3, #9
 800473a:	d010      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 800473c:	e005      	b.n	800474a <HAL_ADC_IRQHandler+0xf2>
 800473e:	4b7b      	ldr	r3, [pc, #492]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2b09      	cmp	r3, #9
 8004748:	d009      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004752:	d004      	beq.n	800475e <HAL_ADC_IRQHandler+0x106>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a75      	ldr	r2, [pc, #468]	; (8004930 <HAL_ADC_IRQHandler+0x2d8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d104      	bne.n	8004768 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e00f      	b.n	8004788 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004770:	d004      	beq.n	800477c <HAL_ADC_IRQHandler+0x124>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d102      	bne.n	8004782 <HAL_ADC_IRQHandler+0x12a>
 800477c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004780:	e000      	b.n	8004784 <HAL_ADC_IRQHandler+0x12c>
 8004782:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_ADC_IRQHandler+0x2d8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004792:	2b00      	cmp	r3, #0
 8004794:	d139      	bne.n	800480a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800479c:	2b00      	cmp	r3, #0
 800479e:	d134      	bne.n	800480a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d12d      	bne.n	800480a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11a      	bne.n	80047f2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 020c 	bic.w	r2, r2, #12
 80047ca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d112      	bne.n	800480a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
 80047f0:	e00b      	b.n	800480a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0210 	orr.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fbd8 	bl	8003fc0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	220c      	movs	r2, #12
 8004816:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b20      	cmp	r3, #32
 8004824:	d106      	bne.n	8004834 <HAL_ADC_IRQHandler+0x1dc>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d00f      	beq.n	8004854 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	f040 813c 	bne.w	8004abc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	f040 8134 	bne.w	8004abc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004868:	d004      	beq.n	8004874 <HAL_ADC_IRQHandler+0x21c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d106      	bne.n	8004882 <HAL_ADC_IRQHandler+0x22a>
 8004874:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2b00      	cmp	r3, #0
 800487e:	d03e      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 8004880:	e005      	b.n	800488e <HAL_ADC_IRQHandler+0x236>
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2b00      	cmp	r3, #0
 800488c:	d037      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004896:	d004      	beq.n	80048a2 <HAL_ADC_IRQHandler+0x24a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a21      	ldr	r2, [pc, #132]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d106      	bne.n	80048b0 <HAL_ADC_IRQHandler+0x258>
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d027      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 80048ae:	e005      	b.n	80048bc <HAL_ADC_IRQHandler+0x264>
 80048b0:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d020      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c4:	d004      	beq.n	80048d0 <HAL_ADC_IRQHandler+0x278>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d106      	bne.n	80048de <HAL_ADC_IRQHandler+0x286>
 80048d0:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_ADC_IRQHandler+0x2d0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d010      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 80048dc:	e005      	b.n	80048ea <HAL_ADC_IRQHandler+0x292>
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_ADC_IRQHandler+0x2d4>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d009      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f2:	d004      	beq.n	80048fe <HAL_ADC_IRQHandler+0x2a6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <HAL_ADC_IRQHandler+0x2d8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d104      	bne.n	8004908 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e018      	b.n	800493a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004910:	d004      	beq.n	800491c <HAL_ADC_IRQHandler+0x2c4>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a03      	ldr	r2, [pc, #12]	; (8004924 <HAL_ADC_IRQHandler+0x2cc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10b      	bne.n	8004934 <HAL_ADC_IRQHandler+0x2dc>
 800491c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004920:	e009      	b.n	8004936 <HAL_ADC_IRQHandler+0x2de>
 8004922:	bf00      	nop
 8004924:	50000100 	.word	0x50000100
 8004928:	50000300 	.word	0x50000300
 800492c:	50000700 	.word	0x50000700
 8004930:	50000400 	.word	0x50000400
 8004934:	4b9d      	ldr	r3, [pc, #628]	; (8004bac <HAL_ADC_IRQHandler+0x554>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 80b2 	bne.w	8004aae <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 80a5 	bne.w	8004aae <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 809f 	bne.w	8004aae <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	f040 8097 	bne.w	8004aae <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004988:	d004      	beq.n	8004994 <HAL_ADC_IRQHandler+0x33c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a88      	ldr	r2, [pc, #544]	; (8004bb0 <HAL_ADC_IRQHandler+0x558>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d106      	bne.n	80049a2 <HAL_ADC_IRQHandler+0x34a>
 8004994:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_ADC_IRQHandler+0x55c>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03e      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 80049a0:	e005      	b.n	80049ae <HAL_ADC_IRQHandler+0x356>
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_ADC_IRQHandler+0x560>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d037      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b6:	d004      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x36a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7c      	ldr	r2, [pc, #496]	; (8004bb0 <HAL_ADC_IRQHandler+0x558>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d106      	bne.n	80049d0 <HAL_ADC_IRQHandler+0x378>
 80049c2:	4b7c      	ldr	r3, [pc, #496]	; (8004bb4 <HAL_ADC_IRQHandler+0x55c>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d027      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 80049ce:	e005      	b.n	80049dc <HAL_ADC_IRQHandler+0x384>
 80049d0:	4b79      	ldr	r3, [pc, #484]	; (8004bb8 <HAL_ADC_IRQHandler+0x560>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d020      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e4:	d004      	beq.n	80049f0 <HAL_ADC_IRQHandler+0x398>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a71      	ldr	r2, [pc, #452]	; (8004bb0 <HAL_ADC_IRQHandler+0x558>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d106      	bne.n	80049fe <HAL_ADC_IRQHandler+0x3a6>
 80049f0:	4b70      	ldr	r3, [pc, #448]	; (8004bb4 <HAL_ADC_IRQHandler+0x55c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2b07      	cmp	r3, #7
 80049fa:	d010      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 80049fc:	e005      	b.n	8004a0a <HAL_ADC_IRQHandler+0x3b2>
 80049fe:	4b6e      	ldr	r3, [pc, #440]	; (8004bb8 <HAL_ADC_IRQHandler+0x560>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b07      	cmp	r3, #7
 8004a08:	d009      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a12:	d004      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x3c6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a64      	ldr	r2, [pc, #400]	; (8004bac <HAL_ADC_IRQHandler+0x554>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d104      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e00f      	b.n	8004a48 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a30:	d004      	beq.n	8004a3c <HAL_ADC_IRQHandler+0x3e4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <HAL_ADC_IRQHandler+0x558>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_ADC_IRQHandler+0x3ea>
 8004a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a40:	e000      	b.n	8004a44 <HAL_ADC_IRQHandler+0x3ec>
 8004a42:	4b5a      	ldr	r3, [pc, #360]	; (8004bac <HAL_ADC_IRQHandler+0x554>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d12d      	bne.n	8004aae <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11a      	bne.n	8004a96 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a6e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d112      	bne.n	8004aae <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
 8004a94:	e00b      	b.n	8004aae <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8de 	bl	8004c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2260      	movs	r2, #96	; 0x60
 8004aba:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d113      	bne.n	8004af2 <HAL_ADC_IRQHandler+0x49a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d10c      	bne.n	8004af2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fa75 	bl	8003fd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b00:	d115      	bne.n	8004b2e <HAL_ADC_IRQHandler+0x4d6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b10:	d10d      	bne.n	8004b2e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8ba 	bl	8004c98 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b2c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d115      	bne.n	8004b6a <HAL_ADC_IRQHandler+0x512>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	d10d      	bne.n	8004b6a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8a6 	bl	8004cac <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b68:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d151      	bne.n	8004c1c <HAL_ADC_IRQHandler+0x5c4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d14a      	bne.n	8004c1c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e02d      	b.n	8004bf0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9c:	d004      	beq.n	8004ba8 <HAL_ADC_IRQHandler+0x550>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <HAL_ADC_IRQHandler+0x558>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d109      	bne.n	8004bbc <HAL_ADC_IRQHandler+0x564>
 8004ba8:	4b02      	ldr	r3, [pc, #8]	; (8004bb4 <HAL_ADC_IRQHandler+0x55c>)
 8004baa:	e008      	b.n	8004bbe <HAL_ADC_IRQHandler+0x566>
 8004bac:	50000400 	.word	0x50000400
 8004bb0:	50000100 	.word	0x50000100
 8004bb4:	50000300 	.word	0x50000300
 8004bb8:	50000700 	.word	0x50000700
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_ADC_IRQHandler+0x614>)
 8004bbe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10a      	bne.n	8004bf0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004bda:	2301      	movs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e007      	b.n	8004bf0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10e      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f043 0202 	orr.w	r2, r3, #2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff f9ea 	bl	8003fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2210      	movs	r2, #16
 8004c1a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d11b      	bne.n	8004c64 <HAL_ADC_IRQHandler+0x60c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d113      	bne.n	8004c64 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0208 	orr.w	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f810 	bl	8004c84 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004c64:	bf00      	nop
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	50000700 	.word	0x50000700

08004c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b09b      	sub	sp, #108	; 0x6c
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x22>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e2cb      	b.n	800527a <HAL_ADC_ConfigChannel+0x5ba>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 82af 	bne.w	8005258 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d81c      	bhi.n	8004d3c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	461a      	mov	r2, r3
 8004d16:	231f      	movs	r3, #31
 8004d18:	4093      	lsls	r3, r2
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	4019      	ands	r1, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3a:	e063      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d81e      	bhi.n	8004d82 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	3b1e      	subs	r3, #30
 8004d58:	221f      	movs	r2, #31
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	4019      	ands	r1, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	3b1e      	subs	r3, #30
 8004d74:	fa00 f203 	lsl.w	r2, r0, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d80:	e040      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b0e      	cmp	r3, #14
 8004d88:	d81e      	bhi.n	8004dc8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	3b3c      	subs	r3, #60	; 0x3c
 8004d9e:	221f      	movs	r2, #31
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	4019      	ands	r1, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	3b3c      	subs	r3, #60	; 0x3c
 8004dba:	fa00 f203 	lsl.w	r2, r0, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8004dc6:	e01d      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	3b5a      	subs	r3, #90	; 0x5a
 8004ddc:	221f      	movs	r2, #31
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	4019      	ands	r1, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	3b5a      	subs	r3, #90	; 0x5a
 8004df8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 80e5 	bne.w	8004fde <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d91c      	bls.n	8004e56 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b1e      	subs	r3, #30
 8004e2e:	2207      	movs	r2, #7
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	4019      	ands	r1, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6898      	ldr	r0, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	3b1e      	subs	r3, #30
 8004e48:	fa00 f203 	lsl.w	r2, r0, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
 8004e54:	e019      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6959      	ldr	r1, [r3, #20]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	2207      	movs	r2, #7
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	4019      	ands	r1, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6898      	ldr	r0, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d84f      	bhi.n	8004f4c <HAL_ADC_ConfigChannel+0x28c>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_ADC_ConfigChannel+0x1f4>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004f09 	.word	0x08004f09
 8004ec0:	08004f2b 	.word	0x08004f2b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eca:	4b9f      	ldr	r3, [pc, #636]	; (8005148 <HAL_ADC_ConfigChannel+0x488>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	0691      	lsls	r1, r2, #26
 8004ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004ee4:	e07e      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004eec:	4b96      	ldr	r3, [pc, #600]	; (8005148 <HAL_ADC_ConfigChannel+0x488>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	0691      	lsls	r1, r2, #26
 8004ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f06:	e06d      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f0e:	4b8e      	ldr	r3, [pc, #568]	; (8005148 <HAL_ADC_ConfigChannel+0x488>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	0691      	lsls	r1, r2, #26
 8004f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f26:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f28:	e05c      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f30:	4b85      	ldr	r3, [pc, #532]	; (8005148 <HAL_ADC_ConfigChannel+0x488>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	0691      	lsls	r1, r2, #26
 8004f3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f48:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f4a:	e04b      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	069b      	lsls	r3, r3, #26
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d107      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	069b      	lsls	r3, r3, #26
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d107      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f92:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	069b      	lsls	r3, r3, #26
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d107      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fb6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	069b      	lsls	r3, r3, #26
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10a      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004fdc:	e001      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004fe2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x344>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x344>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_ADC_ConfigChannel+0x346>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 8131 	bne.w	800526e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d00f      	beq.n	8005034 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	400a      	ands	r2, r1
 800502e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005032:	e049      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b09      	cmp	r3, #9
 8005054:	d91c      	bls.n	8005090 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6999      	ldr	r1, [r3, #24]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	3b1b      	subs	r3, #27
 8005068:	2207      	movs	r2, #7
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	4019      	ands	r1, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6898      	ldr	r0, [r3, #8]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	4413      	add	r3, r2
 8005080:	3b1b      	subs	r3, #27
 8005082:	fa00 f203 	lsl.w	r2, r0, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
 800508e:	e01b      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6959      	ldr	r1, [r3, #20]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	2207      	movs	r2, #7
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	4019      	ands	r1, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6898      	ldr	r0, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	fa00 f203 	lsl.w	r2, r0, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d0:	d004      	beq.n	80050dc <HAL_ADC_ConfigChannel+0x41c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	; (800514c <HAL_ADC_ConfigChannel+0x48c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x420>
 80050dc:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <HAL_ADC_ConfigChannel+0x490>)
 80050de:	e000      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x422>
 80050e0:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <HAL_ADC_ConfigChannel+0x494>)
 80050e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d105      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80050ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80050fc:	2b11      	cmp	r3, #17
 80050fe:	d105      	bne.n	800510c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005110:	2b12      	cmp	r3, #18
 8005112:	f040 80ac 	bne.w	800526e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 80a5 	bne.w	800526e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512c:	d102      	bne.n	8005134 <HAL_ADC_ConfigChannel+0x474>
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <HAL_ADC_ConfigChannel+0x48c>)
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e023      	b.n	800517c <HAL_ADC_ConfigChannel+0x4bc>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a04      	ldr	r2, [pc, #16]	; (800514c <HAL_ADC_ConfigChannel+0x48c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x498>
 800513e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e01a      	b.n	800517c <HAL_ADC_ConfigChannel+0x4bc>
 8005146:	bf00      	nop
 8005148:	83fff000 	.word	0x83fff000
 800514c:	50000100 	.word	0x50000100
 8005150:	50000300 	.word	0x50000300
 8005154:	50000700 	.word	0x50000700
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <HAL_ADC_ConfigChannel+0x5c8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d102      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x4a8>
 8005162:	4b4a      	ldr	r3, [pc, #296]	; (800528c <HAL_ADC_ConfigChannel+0x5cc>)
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e009      	b.n	800517c <HAL_ADC_ConfigChannel+0x4bc>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a47      	ldr	r2, [pc, #284]	; (800528c <HAL_ADC_ConfigChannel+0x5cc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d102      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x4b8>
 8005172:	4b45      	ldr	r3, [pc, #276]	; (8005288 <HAL_ADC_ConfigChannel+0x5c8>)
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e001      	b.n	800517c <HAL_ADC_ConfigChannel+0x4bc>
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d108      	bne.n	800519c <HAL_ADC_ConfigChannel+0x4dc>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_ADC_ConfigChannel+0x4dc>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_ADC_ConfigChannel+0x4de>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d150      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d107      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x504>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x504>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x506>
 80051c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d13c      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d11d      	bne.n	800520e <HAL_ADC_ConfigChannel+0x54e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051da:	d118      	bne.n	800520e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051e8:	4b29      	ldr	r3, [pc, #164]	; (8005290 <HAL_ADC_ConfigChannel+0x5d0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a29      	ldr	r2, [pc, #164]	; (8005294 <HAL_ADC_ConfigChannel+0x5d4>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0c9a      	lsrs	r2, r3, #18
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051fe:	e002      	b.n	8005206 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	3b01      	subs	r3, #1
 8005204:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f9      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800520c:	e02e      	b.n	800526c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b11      	cmp	r3, #17
 8005214:	d10b      	bne.n	800522e <HAL_ADC_ConfigChannel+0x56e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800521e:	d106      	bne.n	800522e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800522c:	e01e      	b.n	800526c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b12      	cmp	r3, #18
 8005234:	d11a      	bne.n	800526c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800523e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005240:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005242:	e013      	b.n	800526c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005256:	e00a      	b.n	800526e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800526a:	e000      	b.n	800526e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800526c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800527a:	4618      	mov	r0, r3
 800527c:	376c      	adds	r7, #108	; 0x6c
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	50000400 	.word	0x50000400
 800528c:	50000500 	.word	0x50000500
 8005290:	20000054 	.word	0x20000054
 8005294:	431bde83 	.word	0x431bde83

08005298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d108      	bne.n	80052c4 <ADC_Enable+0x2c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <ADC_Enable+0x2c>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <ADC_Enable+0x2e>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d143      	bne.n	8005352 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <ADC_Enable+0xc4>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0210 	orr.w	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02f      	b.n	8005354 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005304:	f7fe fe2c 	bl	8003f60 <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800530a:	e01b      	b.n	8005344 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800530c:	f7fe fe28 	bl	8003f60 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d914      	bls.n	8005344 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d00d      	beq.n	8005344 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f043 0210 	orr.w	r2, r3, #16
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d1dc      	bne.n	800530c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	8000003f 	.word	0x8000003f

08005360 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d108      	bne.n	800538c <ADC_Disable+0x2c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <ADC_Disable+0x2c>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <ADC_Disable+0x2e>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d047      	beq.n	8005422 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 030d 	and.w	r3, r3, #13
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10f      	bne.n	80053c0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0202 	orr.w	r2, r2, #2
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2203      	movs	r2, #3
 80053b6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80053b8:	f7fe fdd2 	bl	8003f60 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053be:	e029      	b.n	8005414 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f043 0210 	orr.w	r2, r3, #16
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e023      	b.n	8005424 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053dc:	f7fe fdc0 	bl	8003f60 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d914      	bls.n	8005414 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10d      	bne.n	8005414 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0210 	orr.w	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d0dc      	beq.n	80053dc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545e:	4a04      	ldr	r2, [pc, #16]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	60d3      	str	r3, [r2, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <__NVIC_GetPriorityGrouping+0x18>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 0307 	and.w	r3, r3, #7
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db0b      	blt.n	80054ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f003 021f 	and.w	r2, r3, #31
 80054a8:	4907      	ldr	r1, [pc, #28]	; (80054c8 <__NVIC_EnableIRQ+0x38>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2001      	movs	r0, #1
 80054b2:	fa00 f202 	lsl.w	r2, r0, r2
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100

080054cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	490c      	ldr	r1, [pc, #48]	; (8005518 <__NVIC_SetPriority+0x4c>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	440b      	add	r3, r1
 80054f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f4:	e00a      	b.n	800550c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4908      	ldr	r1, [pc, #32]	; (800551c <__NVIC_SetPriority+0x50>)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3b04      	subs	r3, #4
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	440b      	add	r3, r1
 800550a:	761a      	strb	r2, [r3, #24]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000e100 	.word	0xe000e100
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3304      	adds	r3, #4
 8005546:	2b06      	cmp	r3, #6
 8005548:	d902      	bls.n	8005550 <NVIC_EncodePriority+0x30>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3b03      	subs	r3, #3
 800554e:	e000      	b.n	8005552 <NVIC_EncodePriority+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	401a      	ands	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43d9      	mvns	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005578:	4313      	orrs	r3, r2
         );
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005598:	d301      	bcc.n	800559e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559a:	2301      	movs	r3, #1
 800559c:	e00f      	b.n	80055be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <SysTick_Config+0x40>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055a6:	210f      	movs	r1, #15
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	f7ff ff8e 	bl	80054cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <SysTick_Config+0x40>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <SysTick_Config+0x40>)
 80055b8:	2207      	movs	r2, #7
 80055ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000e010 	.word	0xe000e010

080055cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff29 	bl	800542c <__NVIC_SetPriorityGrouping>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	4603      	mov	r3, r0
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055f4:	f7ff ff3e 	bl	8005474 <__NVIC_GetPriorityGrouping>
 80055f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7ff ff8e 	bl	8005520 <NVIC_EncodePriority>
 8005604:	4602      	mov	r2, r0
 8005606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff5d 	bl	80054cc <__NVIC_SetPriority>
}
 8005612:	bf00      	nop
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	4603      	mov	r3, r0
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff31 	bl	8005490 <__NVIC_EnableIRQ>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffa2 	bl	8005588 <SysTick_Config>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800565c:	2b02      	cmp	r3, #2
 800565e:	d008      	beq.n	8005672 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e020      	b.n	80056b4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020e 	bic.w	r2, r2, #14
 8005680:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2101      	movs	r1, #1
 800569c:	fa01 f202 	lsl.w	r2, r1, r2
 80056a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d005      	beq.n	80056e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2204      	movs	r2, #4
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	e027      	b.n	8005732 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 020e 	bic.w	r2, r2, #14
 80056f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f202 	lsl.w	r2, r1, r2
 8005710:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
    } 
  }
  return status;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800574a:	e154      	b.n	80059f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	2101      	movs	r1, #1
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8146 	beq.w	80059f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d005      	beq.n	800577c <HAL_GPIO_Init+0x40>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d130      	bne.n	80057de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2203      	movs	r2, #3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b2:	2201      	movs	r2, #1
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4013      	ands	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 0201 	and.w	r2, r3, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d017      	beq.n	800581a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	2203      	movs	r2, #3
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d123      	bne.n	800586e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	08da      	lsrs	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3208      	adds	r2, #8
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	220f      	movs	r2, #15
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	6939      	ldr	r1, [r7, #16]
 800586a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	2203      	movs	r2, #3
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a0 	beq.w	80059f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b0:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <HAL_GPIO_Init+0x2d8>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4a57      	ldr	r2, [pc, #348]	; (8005a14 <HAL_GPIO_Init+0x2d8>)
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	6193      	str	r3, [r2, #24]
 80058bc:	4b55      	ldr	r3, [pc, #340]	; (8005a14 <HAL_GPIO_Init+0x2d8>)
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058c8:	4a53      	ldr	r2, [pc, #332]	; (8005a18 <HAL_GPIO_Init+0x2dc>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	3302      	adds	r3, #2
 80058d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	220f      	movs	r2, #15
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058f2:	d019      	beq.n	8005928 <HAL_GPIO_Init+0x1ec>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a49      	ldr	r2, [pc, #292]	; (8005a1c <HAL_GPIO_Init+0x2e0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_GPIO_Init+0x1e8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a48      	ldr	r2, [pc, #288]	; (8005a20 <HAL_GPIO_Init+0x2e4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00d      	beq.n	8005920 <HAL_GPIO_Init+0x1e4>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a47      	ldr	r2, [pc, #284]	; (8005a24 <HAL_GPIO_Init+0x2e8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <HAL_GPIO_Init+0x1e0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a46      	ldr	r2, [pc, #280]	; (8005a28 <HAL_GPIO_Init+0x2ec>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_GPIO_Init+0x1dc>
 8005914:	2304      	movs	r3, #4
 8005916:	e008      	b.n	800592a <HAL_GPIO_Init+0x1ee>
 8005918:	2305      	movs	r3, #5
 800591a:	e006      	b.n	800592a <HAL_GPIO_Init+0x1ee>
 800591c:	2303      	movs	r3, #3
 800591e:	e004      	b.n	800592a <HAL_GPIO_Init+0x1ee>
 8005920:	2302      	movs	r3, #2
 8005922:	e002      	b.n	800592a <HAL_GPIO_Init+0x1ee>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_GPIO_Init+0x1ee>
 8005928:	2300      	movs	r3, #0
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	f002 0203 	and.w	r2, r2, #3
 8005930:	0092      	lsls	r2, r2, #2
 8005932:	4093      	lsls	r3, r2
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800593a:	4937      	ldr	r1, [pc, #220]	; (8005a18 <HAL_GPIO_Init+0x2dc>)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	3302      	adds	r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005948:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43db      	mvns	r3, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800596c:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	43db      	mvns	r3, r3
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4013      	ands	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005996:	4a25      	ldr	r2, [pc, #148]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800599c:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059c0:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c6:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4013      	ands	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <HAL_GPIO_Init+0x2f0>)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3301      	adds	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f47f aea3 	bne.w	800574c <HAL_GPIO_Init+0x10>
  }
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	48000400 	.word	0x48000400
 8005a20:	48000800 	.word	0x48000800
 8005a24:	48000c00 	.word	0x48000c00
 8005a28:	48001000 	.word	0x48001000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	887b      	ldrh	r3, [r7, #2]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
 8005a4c:	e001      	b.n	8005a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	807b      	strh	r3, [r7, #2]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a70:	787b      	ldrb	r3, [r7, #1]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a76:	887a      	ldrh	r2, [r7, #2]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a7c:	e002      	b.n	8005a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	041a      	lsls	r2, r3, #16
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	43d9      	mvns	r1, r3
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	400b      	ands	r3, r1
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d006      	beq.n	8005ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ada:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f806 	bl	8005af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010400 	.word	0x40010400

08005af4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e081      	b.n	8005c20 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fc f96b 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2224      	movs	r2, #36	; 0x24
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b80:	609a      	str	r2, [r3, #8]
 8005b82:	e006      	b.n	8005b92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d104      	bne.n	8005ba4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69d9      	ldr	r1, [r3, #28]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1a      	ldr	r2, [r3, #32]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d138      	bne.n	8005cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e032      	b.n	8005cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d139      	bne.n	8005d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e033      	b.n	8005d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	; 0x24
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d58:	b08b      	sub	sp, #44	; 0x2c
 8005d5a:	af06      	add	r7, sp, #24
 8005d5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0d0      	b.n	8005f0a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fc f997 	bl	80020b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2203      	movs	r2, #3
 8005d86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f003 fc3e 	bl	8009610 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
 8005d98:	e04c      	b.n	8005e34 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3301      	adds	r3, #1
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	7bfa      	ldrb	r2, [r7, #15]
 8005dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dc4:	7bfa      	ldrb	r2, [r7, #15]
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	b298      	uxth	r0, r3
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3336      	adds	r3, #54	; 0x36
 8005dd8:	4602      	mov	r2, r0
 8005dda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	3303      	adds	r3, #3
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	440b      	add	r3, r1
 8005e00:	3338      	adds	r3, #56	; 0x38
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	333c      	adds	r3, #60	; 0x3c
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	3340      	adds	r3, #64	; 0x40
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	3301      	adds	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3ad      	bcc.n	8005d9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e044      	b.n	8005ece <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e44:	7bfa      	ldrb	r2, [r7, #15]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	440b      	add	r3, r1
 8005e52:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e70:	7bfa      	ldrb	r2, [r7, #15]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	7bfa      	ldrb	r2, [r7, #15]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d3b5      	bcc.n	8005e44 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	687e      	ldr	r6, [r7, #4]
 8005ee0:	466d      	mov	r5, sp
 8005ee2:	f106 0410 	add.w	r4, r6, #16
 8005ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	1d33      	adds	r3, r6, #4
 8005ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef2:	6838      	ldr	r0, [r7, #0]
 8005ef4:	f003 fba7 	bl	8009646 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f000 bef4 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 816a 	beq.w	8006212 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f3e:	4bb3      	ldr	r3, [pc, #716]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d00c      	beq.n	8005f64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f4a:	4bb0      	ldr	r3, [pc, #704]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d159      	bne.n	800600a <HAL_RCC_OscConfig+0xf6>
 8005f56:	4bad      	ldr	r3, [pc, #692]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f62:	d152      	bne.n	800600a <HAL_RCC_OscConfig+0xf6>
 8005f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005f70:	fa93 f3a3 	rbit	r3, r3
 8005f74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8005f78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7c:	fab3 f383 	clz	r3, r3
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <HAL_RCC_OscConfig+0x82>
 8005f90:	4b9e      	ldr	r3, [pc, #632]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	e015      	b.n	8005fc2 <HAL_RCC_OscConfig+0xae>
 8005f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f9a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005fb2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005fb6:	fa93 f3a3 	rbit	r3, r3
 8005fba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005fbe:	4b93      	ldr	r3, [pc, #588]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fc6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005fca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005fce:	fa92 f2a2 	rbit	r2, r2
 8005fd2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005fd6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005fda:	fab2 f282 	clz	r2, r2
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	f042 0220 	orr.w	r2, r2, #32
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	f002 021f 	and.w	r2, r2, #31
 8005fea:	2101      	movs	r1, #1
 8005fec:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 810c 	beq.w	8006210 <HAL_RCC_OscConfig+0x2fc>
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 8106 	bne.w	8006210 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f000 be86 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d106      	bne.n	8006024 <HAL_RCC_OscConfig+0x110>
 8006016:	4b7d      	ldr	r3, [pc, #500]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a7c      	ldr	r2, [pc, #496]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 800601c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e030      	b.n	8006086 <HAL_RCC_OscConfig+0x172>
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0x134>
 800602e:	4b77      	ldr	r3, [pc, #476]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a76      	ldr	r2, [pc, #472]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b74      	ldr	r3, [pc, #464]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a73      	ldr	r2, [pc, #460]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e01e      	b.n	8006086 <HAL_RCC_OscConfig+0x172>
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006052:	d10c      	bne.n	800606e <HAL_RCC_OscConfig+0x15a>
 8006054:	4b6d      	ldr	r3, [pc, #436]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6c      	ldr	r2, [pc, #432]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 800605a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4b6a      	ldr	r3, [pc, #424]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a69      	ldr	r2, [pc, #420]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e00b      	b.n	8006086 <HAL_RCC_OscConfig+0x172>
 800606e:	4b67      	ldr	r3, [pc, #412]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a66      	ldr	r2, [pc, #408]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4b64      	ldr	r3, [pc, #400]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a63      	ldr	r2, [pc, #396]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006084:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006086:	4b61      	ldr	r3, [pc, #388]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f023 020f 	bic.w	r2, r3, #15
 800608e:	1d3b      	adds	r3, r7, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	495d      	ldr	r1, [pc, #372]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006096:	4313      	orrs	r3, r2
 8006098:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d059      	beq.n	8006158 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fd ff5c 	bl	8003f60 <HAL_GetTick>
 80060a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ac:	e00a      	b.n	80060c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060ae:	f7fd ff57 	bl	8003f60 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d902      	bls.n	80060c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	f000 be29 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
 80060c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80060d0:	fa93 f3a3 	rbit	r3, r3
 80060d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80060d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060dc:	fab3 f383 	clz	r3, r3
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d102      	bne.n	80060f6 <HAL_RCC_OscConfig+0x1e2>
 80060f0:	4b46      	ldr	r3, [pc, #280]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x20e>
 80060f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800610a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800610e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006112:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006116:	fa93 f3a3 	rbit	r3, r3
 800611a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800611e:	4b3b      	ldr	r3, [pc, #236]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006126:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800612a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800612e:	fa92 f2a2 	rbit	r2, r2
 8006132:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006136:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800613a:	fab2 f282 	clz	r2, r2
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	f042 0220 	orr.w	r2, r2, #32
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	f002 021f 	and.w	r2, r2, #31
 800614a:	2101      	movs	r1, #1
 800614c:	fa01 f202 	lsl.w	r2, r1, r2
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0ab      	beq.n	80060ae <HAL_RCC_OscConfig+0x19a>
 8006156:	e05c      	b.n	8006212 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fd ff02 	bl	8003f60 <HAL_GetTick>
 800615c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006160:	e00a      	b.n	8006178 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006162:	f7fd fefd 	bl	8003f60 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b64      	cmp	r3, #100	; 0x64
 8006170:	d902      	bls.n	8006178 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	f000 bdcf 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
 8006178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800617c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006180:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006184:	fa93 f3a3 	rbit	r3, r3
 8006188:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800618c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006190:	fab3 f383 	clz	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d102      	bne.n	80061aa <HAL_RCC_OscConfig+0x296>
 80061a4:	4b19      	ldr	r3, [pc, #100]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x2c2>
 80061aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80061b6:	fa93 f3a3 	rbit	r3, r3
 80061ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80061be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80061c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80061d2:	4b0e      	ldr	r3, [pc, #56]	; (800620c <HAL_RCC_OscConfig+0x2f8>)
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80061de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80061e2:	fa92 f2a2 	rbit	r2, r2
 80061e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80061ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80061ee:	fab2 f282 	clz	r2, r2
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	f042 0220 	orr.w	r2, r2, #32
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	f002 021f 	and.w	r2, r2, #31
 80061fe:	2101      	movs	r1, #1
 8006200:	fa01 f202 	lsl.w	r2, r1, r2
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1ab      	bne.n	8006162 <HAL_RCC_OscConfig+0x24e>
 800620a:	e002      	b.n	8006212 <HAL_RCC_OscConfig+0x2fe>
 800620c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 816f 	beq.w	8006500 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006222:	4bd0      	ldr	r3, [pc, #832]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800622e:	4bcd      	ldr	r3, [pc, #820]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b08      	cmp	r3, #8
 8006238:	d16c      	bne.n	8006314 <HAL_RCC_OscConfig+0x400>
 800623a:	4bca      	ldr	r3, [pc, #808]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d166      	bne.n	8006314 <HAL_RCC_OscConfig+0x400>
 8006246:	2302      	movs	r3, #2
 8006248:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006258:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625c:	fab3 f383 	clz	r3, r3
 8006260:	b2db      	uxtb	r3, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d102      	bne.n	8006276 <HAL_RCC_OscConfig+0x362>
 8006270:	4bbc      	ldr	r3, [pc, #752]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	e013      	b.n	800629e <HAL_RCC_OscConfig+0x38a>
 8006276:	2302      	movs	r3, #2
 8006278:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006280:	fa93 f3a3 	rbit	r3, r3
 8006284:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006288:	2302      	movs	r3, #2
 800628a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800628e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006292:	fa93 f3a3 	rbit	r3, r3
 8006296:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800629a:	4bb2      	ldr	r3, [pc, #712]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2202      	movs	r2, #2
 80062a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80062a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80062a8:	fa92 f2a2 	rbit	r2, r2
 80062ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80062b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80062b4:	fab2 f282 	clz	r2, r2
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	f042 0220 	orr.w	r2, r2, #32
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	f002 021f 	and.w	r2, r2, #31
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_RCC_OscConfig+0x3cc>
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d002      	beq.n	80062e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f000 bd1b 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e0:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	21f8      	movs	r1, #248	; 0xf8
 80062f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80062f8:	fa91 f1a1 	rbit	r1, r1
 80062fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006300:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006304:	fab1 f181 	clz	r1, r1
 8006308:	b2c9      	uxtb	r1, r1
 800630a:	408b      	lsls	r3, r1
 800630c:	4995      	ldr	r1, [pc, #596]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	e0f5      	b.n	8006500 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8085 	beq.w	800642a <HAL_RCC_OscConfig+0x516>
 8006320:	2301      	movs	r3, #1
 8006322:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006326:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800632a:	fa93 f3a3 	rbit	r3, r3
 800632e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006332:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	461a      	mov	r2, r3
 8006348:	2301      	movs	r3, #1
 800634a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fd fe08 	bl	8003f60 <HAL_GetTick>
 8006350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	e00a      	b.n	800636c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006356:	f7fd fe03 	bl	8003f60 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d902      	bls.n	800636c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	f000 bcd5 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
 800636c:	2302      	movs	r3, #2
 800636e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800637e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006382:	fab3 f383 	clz	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d102      	bne.n	800639c <HAL_RCC_OscConfig+0x488>
 8006396:	4b73      	ldr	r3, [pc, #460]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	e013      	b.n	80063c4 <HAL_RCC_OscConfig+0x4b0>
 800639c:	2302      	movs	r3, #2
 800639e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80063ae:	2302      	movs	r3, #2
 80063b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80063b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80063b8:	fa93 f3a3 	rbit	r3, r3
 80063bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80063c0:	4b68      	ldr	r3, [pc, #416]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2202      	movs	r2, #2
 80063c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80063ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80063ce:	fa92 f2a2 	rbit	r2, r2
 80063d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80063d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80063da:	fab2 f282 	clz	r2, r2
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	f042 0220 	orr.w	r2, r2, #32
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	f002 021f 	and.w	r2, r2, #31
 80063ea:	2101      	movs	r1, #1
 80063ec:	fa01 f202 	lsl.w	r2, r1, r2
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0af      	beq.n	8006356 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b5b      	ldr	r3, [pc, #364]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	21f8      	movs	r1, #248	; 0xf8
 8006406:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800640e:	fa91 f1a1 	rbit	r1, r1
 8006412:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006416:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800641a:	fab1 f181 	clz	r1, r1
 800641e:	b2c9      	uxtb	r1, r1
 8006420:	408b      	lsls	r3, r1
 8006422:	4950      	ldr	r1, [pc, #320]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	e06a      	b.n	8006500 <HAL_RCC_OscConfig+0x5ec>
 800642a:	2301      	movs	r3, #1
 800642c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006430:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006434:	fa93 f3a3 	rbit	r3, r3
 8006438:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800643c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006440:	fab3 f383 	clz	r3, r3
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800644a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	461a      	mov	r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006456:	f7fd fd83 	bl	8003f60 <HAL_GetTick>
 800645a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	e00a      	b.n	8006476 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006460:	f7fd fd7e 	bl	8003f60 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d902      	bls.n	8006476 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	f000 bc50 	b.w	8006d16 <HAL_RCC_OscConfig+0xe02>
 8006476:	2302      	movs	r3, #2
 8006478:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648c:	fab3 f383 	clz	r3, r3
 8006490:	b2db      	uxtb	r3, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_OscConfig+0x592>
 80064a0:	4b30      	ldr	r3, [pc, #192]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	e013      	b.n	80064ce <HAL_RCC_OscConfig+0x5ba>
 80064a6:	2302      	movs	r3, #2
 80064a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064b0:	fa93 f3a3 	rbit	r3, r3
 80064b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064b8:	2302      	movs	r3, #2
 80064ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80064be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064c2:	fa93 f3a3 	rbit	r3, r3
 80064c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x650>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2202      	movs	r2, #2
 80064d0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80064d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80064d8:	fa92 f2a2 	rbit	r2, r2
 80064dc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80064e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80064e4:	fab2 f282 	clz	r2, r2
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	f042 0220 	orr.w	r2, r2, #32
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	f002 021f 	and.w	r2, r2, #31
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f202 	lsl.w	r2, r1, r2
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1af      	bne.n	8006460 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80da 	beq.w	80066c4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d069      	beq.n	80065ee <HAL_RCC_OscConfig+0x6da>
 800651a:	2301      	movs	r3, #1
 800651c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800652c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_OscConfig+0x654>)
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	461a      	mov	r2, r3
 8006540:	2301      	movs	r3, #1
 8006542:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006544:	f7fd fd0c 	bl	8003f60 <HAL_GetTick>
 8006548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654c:	e00e      	b.n	800656c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654e:	f7fd fd07 	bl	8003f60 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d906      	bls.n	800656c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e3d9      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 8006562:	bf00      	nop
 8006564:	40021000 	.word	0x40021000
 8006568:	10908120 	.word	0x10908120
 800656c:	2302      	movs	r3, #2
 800656e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006576:	fa93 f3a3 	rbit	r3, r3
 800657a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800657e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006582:	2202      	movs	r2, #2
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	fa93 f2a3 	rbit	r2, r3
 8006590:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800659a:	2202      	movs	r2, #2
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	fa93 f2a3 	rbit	r2, r3
 80065a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80065ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ae:	4ba5      	ldr	r3, [pc, #660]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80065b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80065b6:	2102      	movs	r1, #2
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	fa93 f1a3 	rbit	r1, r3
 80065c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80065c8:	6019      	str	r1, [r3, #0]
  return result;
 80065ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0b0      	beq.n	800654e <HAL_RCC_OscConfig+0x63a>
 80065ec:	e06a      	b.n	80066c4 <HAL_RCC_OscConfig+0x7b0>
 80065ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	fa93 f2a3 	rbit	r2, r3
 8006600:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006604:	601a      	str	r2, [r3, #0]
  return result;
 8006606:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800660a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800660c:	fab3 f383 	clz	r3, r3
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	4b8c      	ldr	r3, [pc, #560]	; (8006848 <HAL_RCC_OscConfig+0x934>)
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006620:	f7fd fc9e 	bl	8003f60 <HAL_GetTick>
 8006624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	e009      	b.n	800663e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800662a:	f7fd fc99 	bl	8003f60 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e36b      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 800663e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006642:	2202      	movs	r2, #2
 8006644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	fa93 f2a3 	rbit	r2, r3
 8006650:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800665a:	2202      	movs	r2, #2
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	fa93 f2a3 	rbit	r2, r3
 8006668:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006672:	2202      	movs	r2, #2
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fa93 f2a3 	rbit	r2, r3
 8006680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006684:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006686:	4b6f      	ldr	r3, [pc, #444]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 8006688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800668e:	2102      	movs	r1, #2
 8006690:	6019      	str	r1, [r3, #0]
 8006692:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	fa93 f1a3 	rbit	r1, r3
 800669c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80066a0:	6019      	str	r1, [r3, #0]
  return result;
 80066a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	fab3 f383 	clz	r3, r3
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1b2      	bne.n	800662a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8158 	beq.w	8006984 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066da:	4b5a      	ldr	r3, [pc, #360]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d112      	bne.n	800670c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e6:	4b57      	ldr	r3, [pc, #348]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4a56      	ldr	r2, [pc, #344]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f0:	61d3      	str	r3, [r2, #28]
 80066f2:	4b54      	ldr	r3, [pc, #336]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670c:	4b4f      	ldr	r3, [pc, #316]	; (800684c <HAL_RCC_OscConfig+0x938>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11a      	bne.n	800674e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006718:	4b4c      	ldr	r3, [pc, #304]	; (800684c <HAL_RCC_OscConfig+0x938>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a4b      	ldr	r2, [pc, #300]	; (800684c <HAL_RCC_OscConfig+0x938>)
 800671e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006722:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006724:	f7fd fc1c 	bl	8003f60 <HAL_GetTick>
 8006728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672c:	e009      	b.n	8006742 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672e:	f7fd fc17 	bl	8003f60 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b64      	cmp	r3, #100	; 0x64
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e2e9      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006742:	4b42      	ldr	r3, [pc, #264]	; (800684c <HAL_RCC_OscConfig+0x938>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d106      	bne.n	8006766 <HAL_RCC_OscConfig+0x852>
 8006758:	4b3a      	ldr	r3, [pc, #232]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	4a39      	ldr	r2, [pc, #228]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	6213      	str	r3, [r2, #32]
 8006764:	e02f      	b.n	80067c6 <HAL_RCC_OscConfig+0x8b2>
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10c      	bne.n	800678a <HAL_RCC_OscConfig+0x876>
 8006770:	4b34      	ldr	r3, [pc, #208]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	4a33      	ldr	r2, [pc, #204]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	6213      	str	r3, [r2, #32]
 800677c:	4b31      	ldr	r3, [pc, #196]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	4a30      	ldr	r2, [pc, #192]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 8006782:	f023 0304 	bic.w	r3, r3, #4
 8006786:	6213      	str	r3, [r2, #32]
 8006788:	e01d      	b.n	80067c6 <HAL_RCC_OscConfig+0x8b2>
 800678a:	1d3b      	adds	r3, r7, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b05      	cmp	r3, #5
 8006792:	d10c      	bne.n	80067ae <HAL_RCC_OscConfig+0x89a>
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	6213      	str	r3, [r2, #32]
 80067a0:	4b28      	ldr	r3, [pc, #160]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	4a27      	ldr	r2, [pc, #156]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6213      	str	r3, [r2, #32]
 80067ac:	e00b      	b.n	80067c6 <HAL_RCC_OscConfig+0x8b2>
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	4a24      	ldr	r2, [pc, #144]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6213      	str	r3, [r2, #32]
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	4a21      	ldr	r2, [pc, #132]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d06b      	beq.n	80068a8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d0:	f7fd fbc6 	bl	8003f60 <HAL_GetTick>
 80067d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d8:	e00b      	b.n	80067f2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fd fbc1 	bl	8003f60 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e291      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 80067f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80067f6:	2202      	movs	r2, #2
 80067f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	fa93 f2a3 	rbit	r2, r3
 8006804:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800680e:	2202      	movs	r2, #2
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	fa93 f2a3 	rbit	r2, r3
 800681c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006820:	601a      	str	r2, [r3, #0]
  return result;
 8006822:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f043 0302 	orr.w	r3, r3, #2
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d109      	bne.n	8006850 <HAL_RCC_OscConfig+0x93c>
 800683c:	4b01      	ldr	r3, [pc, #4]	; (8006844 <HAL_RCC_OscConfig+0x930>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	e014      	b.n	800686c <HAL_RCC_OscConfig+0x958>
 8006842:	bf00      	nop
 8006844:	40021000 	.word	0x40021000
 8006848:	10908120 	.word	0x10908120
 800684c:	40007000 	.word	0x40007000
 8006850:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006854:	2202      	movs	r2, #2
 8006856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006858:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	fa93 f2a3 	rbit	r2, r3
 8006862:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	4bbb      	ldr	r3, [pc, #748]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006870:	2102      	movs	r1, #2
 8006872:	6011      	str	r1, [r2, #0]
 8006874:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	fa92 f1a2 	rbit	r1, r2
 800687e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006882:	6011      	str	r1, [r2, #0]
  return result;
 8006884:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	fab2 f282 	clz	r2, r2
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	f002 021f 	and.w	r2, r2, #31
 800689a:	2101      	movs	r1, #1
 800689c:	fa01 f202 	lsl.w	r2, r1, r2
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d099      	beq.n	80067da <HAL_RCC_OscConfig+0x8c6>
 80068a6:	e063      	b.n	8006970 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a8:	f7fd fb5a 	bl	8003f60 <HAL_GetTick>
 80068ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b0:	e00b      	b.n	80068ca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fd fb55 	bl	8003f60 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e225      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 80068ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80068ce:	2202      	movs	r2, #2
 80068d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	fa93 f2a3 	rbit	r2, r3
 80068dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80068e6:	2202      	movs	r2, #2
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	fa93 f2a3 	rbit	r2, r3
 80068f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068f8:	601a      	str	r2, [r3, #0]
  return result;
 80068fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006900:	fab3 f383 	clz	r3, r3
 8006904:	b2db      	uxtb	r3, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f043 0302 	orr.w	r3, r3, #2
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d102      	bne.n	800691a <HAL_RCC_OscConfig+0xa06>
 8006914:	4b90      	ldr	r3, [pc, #576]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	e00d      	b.n	8006936 <HAL_RCC_OscConfig+0xa22>
 800691a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800691e:	2202      	movs	r2, #2
 8006920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006922:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	fa93 f2a3 	rbit	r2, r3
 800692c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	4b89      	ldr	r3, [pc, #548]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800693a:	2102      	movs	r1, #2
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	fa92 f1a2 	rbit	r1, r2
 8006948:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800694c:	6011      	str	r1, [r2, #0]
  return result;
 800694e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	fab2 f282 	clz	r2, r2
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f002 021f 	and.w	r2, r2, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1a0      	bne.n	80068b2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006970:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006974:	2b01      	cmp	r3, #1
 8006976:	d105      	bne.n	8006984 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006978:	4b77      	ldr	r3, [pc, #476]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4a76      	ldr	r2, [pc, #472]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 800697e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006982:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 81c2 	beq.w	8006d14 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006990:	4b71      	ldr	r3, [pc, #452]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b08      	cmp	r3, #8
 800699a:	f000 819c 	beq.w	8006cd6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699e:	1d3b      	adds	r3, r7, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	f040 8114 	bne.w	8006bd2 <HAL_RCC_OscConfig+0xcbe>
 80069aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	fa93 f2a3 	rbit	r2, r3
 80069be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80069c2:	601a      	str	r2, [r3, #0]
  return result;
 80069c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80069c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ca:	fab3 f383 	clz	r3, r3
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	461a      	mov	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e0:	f7fd fabe 	bl	8003f60 <HAL_GetTick>
 80069e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069e8:	e009      	b.n	80069fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ea:	f7fd fab9 	bl	8003f60 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e18b      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 80069fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	fa93 f2a3 	rbit	r2, r3
 8006a12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a16:	601a      	str	r2, [r3, #0]
  return result;
 8006a18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a1e:	fab3 f383 	clz	r3, r3
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d102      	bne.n	8006a38 <HAL_RCC_OscConfig+0xb24>
 8006a32:	4b49      	ldr	r3, [pc, #292]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	e01b      	b.n	8006a70 <HAL_RCC_OscConfig+0xb5c>
 8006a38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	fa93 f2a3 	rbit	r2, r3
 8006a4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	fa93 f2a3 	rbit	r2, r3
 8006a66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	fa92 f1a2 	rbit	r1, r2
 8006a84:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006a88:	6011      	str	r1, [r2, #0]
  return result;
 8006a8a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	fab2 f282 	clz	r2, r2
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	f042 0220 	orr.w	r2, r2, #32
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	f002 021f 	and.w	r2, r2, #31
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d19e      	bne.n	80069ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	4925      	ldr	r1, [pc, #148]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	604b      	str	r3, [r1, #4]
 8006ac8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f2a3 	rbit	r2, r3
 8006adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ae0:	601a      	str	r2, [r3, #0]
  return result;
 8006ae2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ae6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae8:	fab3 f383 	clz	r3, r3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006af2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	461a      	mov	r2, r3
 8006afa:	2301      	movs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7fd fa2f 	bl	8003f60 <HAL_GetTick>
 8006b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b06:	e009      	b.n	8006b1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b08:	f7fd fa2a 	bl	8003f60 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e0fc      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 8006b1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	fa93 f2a3 	rbit	r2, r3
 8006b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b34:	601a      	str	r2, [r3, #0]
  return result;
 8006b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b3c:	fab3 f383 	clz	r3, r3
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <HAL_RCC_OscConfig+0xc48>
 8006b50:	4b01      	ldr	r3, [pc, #4]	; (8006b58 <HAL_RCC_OscConfig+0xc44>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	e01e      	b.n	8006b94 <HAL_RCC_OscConfig+0xc80>
 8006b56:	bf00      	nop
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	fa93 f2a3 	rbit	r2, r3
 8006b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	fa93 f2a3 	rbit	r2, r3
 8006b8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <HAL_RCC_OscConfig+0xe0c>)
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	fa92 f1a2 	rbit	r1, r2
 8006ba8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006bac:	6011      	str	r1, [r2, #0]
  return result;
 8006bae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	fab2 f282 	clz	r2, r2
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	f042 0220 	orr.w	r2, r2, #32
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	f002 021f 	and.w	r2, r2, #31
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d09b      	beq.n	8006b08 <HAL_RCC_OscConfig+0xbf4>
 8006bd0:	e0a0      	b.n	8006d14 <HAL_RCC_OscConfig+0xe00>
 8006bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	fa93 f2a3 	rbit	r2, r3
 8006be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bea:	601a      	str	r2, [r3, #0]
  return result;
 8006bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006bfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	461a      	mov	r2, r3
 8006c04:	2300      	movs	r3, #0
 8006c06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7fd f9aa 	bl	8003f60 <HAL_GetTick>
 8006c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c10:	e009      	b.n	8006c26 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fd f9a5 	bl	8003f60 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e077      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
 8006c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	fa93 f2a3 	rbit	r2, r3
 8006c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3e:	601a      	str	r2, [r3, #0]
  return result;
 8006c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c46:	fab3 f383 	clz	r3, r3
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d102      	bne.n	8006c60 <HAL_RCC_OscConfig+0xd4c>
 8006c5a:	4b31      	ldr	r3, [pc, #196]	; (8006d20 <HAL_RCC_OscConfig+0xe0c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	e01b      	b.n	8006c98 <HAL_RCC_OscConfig+0xd84>
 8006c60:	f107 0320 	add.w	r3, r7, #32
 8006c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6a:	f107 0320 	add.w	r3, r7, #32
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	fa93 f2a3 	rbit	r2, r3
 8006c74:	f107 031c 	add.w	r3, r7, #28
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	f107 0318 	add.w	r3, r7, #24
 8006c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f107 0318 	add.w	r3, r7, #24
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	fa93 f2a3 	rbit	r2, r3
 8006c8e:	f107 0314 	add.w	r3, r7, #20
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCC_OscConfig+0xe0c>)
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	f107 0210 	add.w	r2, r7, #16
 8006c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ca0:	6011      	str	r1, [r2, #0]
 8006ca2:	f107 0210 	add.w	r2, r7, #16
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	fa92 f1a2 	rbit	r1, r2
 8006cac:	f107 020c 	add.w	r2, r7, #12
 8006cb0:	6011      	str	r1, [r2, #0]
  return result;
 8006cb2:	f107 020c 	add.w	r2, r7, #12
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	fab2 f282 	clz	r2, r2
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	f042 0220 	orr.w	r2, r2, #32
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	f002 021f 	and.w	r2, r2, #31
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f202 	lsl.w	r2, r1, r2
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d19e      	bne.n	8006c12 <HAL_RCC_OscConfig+0xcfe>
 8006cd4:	e01e      	b.n	8006d14 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e018      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HAL_RCC_OscConfig+0xe0c>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d108      	bne.n	8006d10 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40021000 	.word	0x40021000

08006d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b09e      	sub	sp, #120	; 0x78
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e162      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d3c:	4b90      	ldr	r3, [pc, #576]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d910      	bls.n	8006d6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 0207 	bic.w	r2, r3, #7
 8006d52:	498b      	ldr	r1, [pc, #556]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b89      	ldr	r3, [pc, #548]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e14a      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d78:	4b82      	ldr	r3, [pc, #520]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	497f      	ldr	r1, [pc, #508]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80dc 	beq.w	8006f50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d13c      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xf6>
 8006da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da8:	fa93 f3a3 	rbit	r3, r3
 8006dac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db0:	fab3 f383 	clz	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <HAL_RCC_ClockConfig+0xa6>
 8006dc4:	4b6f      	ldr	r3, [pc, #444]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	e00f      	b.n	8006dea <HAL_RCC_ClockConfig+0xc6>
 8006dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dd2:	fa93 f3a3 	rbit	r3, r3
 8006dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de6:	4b67      	ldr	r3, [pc, #412]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dee:	65ba      	str	r2, [r7, #88]	; 0x58
 8006df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df2:	fa92 f2a2 	rbit	r2, r2
 8006df6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dfa:	fab2 f282 	clz	r2, r2
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	f042 0220 	orr.w	r2, r2, #32
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	f002 021f 	and.w	r2, r2, #31
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d17b      	bne.n	8006f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e0f3      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d13c      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x178>
 8006e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	fa93 f3a3 	rbit	r3, r3
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e32:	fab3 f383 	clz	r3, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x128>
 8006e46:	4b4f      	ldr	r3, [pc, #316]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	e00f      	b.n	8006e6c <HAL_RCC_ClockConfig+0x148>
 8006e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e54:	fa93 f3a3 	rbit	r3, r3
 8006e58:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	fa93 f3a3 	rbit	r3, r3
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e68:	4b46      	ldr	r3, [pc, #280]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e70:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e74:	fa92 f2a2 	rbit	r2, r2
 8006e78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e7c:	fab2 f282 	clz	r2, r2
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	f042 0220 	orr.w	r2, r2, #32
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	f002 021f 	and.w	r2, r2, #31
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d13a      	bne.n	8006f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b2      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	fa93 f3a3 	rbit	r3, r3
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eaa:	fab3 f383 	clz	r3, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d102      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x1a0>
 8006ebe:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	e00d      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x1bc>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	fa93 f3a3 	rbit	r3, r3
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	fa93 f3a3 	rbit	r3, r3
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	61ba      	str	r2, [r7, #24]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	fa92 f2a2 	rbit	r2, r2
 8006eea:	617a      	str	r2, [r7, #20]
  return result;
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	fab2 f282 	clz	r2, r2
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	f042 0220 	orr.w	r2, r2, #32
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	f002 021f 	and.w	r2, r2, #31
 8006efe:	2101      	movs	r1, #1
 8006f00:	fa01 f202 	lsl.w	r2, r1, r2
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e079      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f0e:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f023 0203 	bic.w	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	491a      	ldr	r1, [pc, #104]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f20:	f7fd f81e 	bl	8003f60 <HAL_GetTick>
 8006f24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f26:	e00a      	b.n	8006f3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f28:	f7fd f81a 	bl	8003f60 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e061      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <HAL_RCC_ClockConfig+0x260>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f003 020c 	and.w	r2, r3, #12
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d1eb      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d214      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5e:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f023 0207 	bic.w	r2, r3, #7
 8006f66:	4906      	ldr	r1, [pc, #24]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <HAL_RCC_ClockConfig+0x25c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d005      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e040      	b.n	8007002 <HAL_RCC_ClockConfig+0x2de>
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f94:	4b1d      	ldr	r3, [pc, #116]	; (800700c <HAL_RCC_ClockConfig+0x2e8>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	491a      	ldr	r1, [pc, #104]	; (800700c <HAL_RCC_ClockConfig+0x2e8>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb2:	4b16      	ldr	r3, [pc, #88]	; (800700c <HAL_RCC_ClockConfig+0x2e8>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4912      	ldr	r1, [pc, #72]	; (800700c <HAL_RCC_ClockConfig+0x2e8>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006fc6:	f000 f829 	bl	800701c <HAL_RCC_GetSysClockFreq>
 8006fca:	4601      	mov	r1, r0
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <HAL_RCC_ClockConfig+0x2e8>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd4:	22f0      	movs	r2, #240	; 0xf0
 8006fd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	fa92 f2a2 	rbit	r2, r2
 8006fde:	60fa      	str	r2, [r7, #12]
  return result;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	fab2 f282 	clz	r2, r2
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	40d3      	lsrs	r3, r2
 8006fea:	4a09      	ldr	r2, [pc, #36]	; (8007010 <HAL_RCC_ClockConfig+0x2ec>)
 8006fec:	5cd3      	ldrb	r3, [r2, r3]
 8006fee:	fa21 f303 	lsr.w	r3, r1, r3
 8006ff2:	4a08      	ldr	r2, [pc, #32]	; (8007014 <HAL_RCC_ClockConfig+0x2f0>)
 8006ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <HAL_RCC_ClockConfig+0x2f4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fc ff6c 	bl	8003ed8 <HAL_InitTick>
  
  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3778      	adds	r7, #120	; 0x78
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	0800aed8 	.word	0x0800aed8
 8007014:	20000054 	.word	0x20000054
 8007018:	20000058 	.word	0x20000058

0800701c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800701c:	b480      	push	{r7}
 800701e:	b08b      	sub	sp, #44	; 0x2c
 8007020:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	2300      	movs	r3, #0
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007036:	4b29      	ldr	r3, [pc, #164]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	2b04      	cmp	r3, #4
 8007044:	d002      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0x30>
 8007046:	2b08      	cmp	r3, #8
 8007048:	d003      	beq.n	8007052 <HAL_RCC_GetSysClockFreq+0x36>
 800704a:	e03c      	b.n	80070c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800704c:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800704e:	623b      	str	r3, [r7, #32]
      break;
 8007050:	e03c      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007058:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800705c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	fa92 f2a2 	rbit	r2, r2
 8007064:	607a      	str	r2, [r7, #4]
  return result;
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	fab2 f282 	clz	r2, r2
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	40d3      	lsrs	r3, r2
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007072:	5cd3      	ldrb	r3, [r2, r3]
 8007074:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007076:	4b19      	ldr	r3, [pc, #100]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	220f      	movs	r2, #15
 8007080:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	fa92 f2a2 	rbit	r2, r2
 8007088:	60fa      	str	r2, [r7, #12]
  return result;
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	fab2 f282 	clz	r2, r2
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	40d3      	lsrs	r3, r2
 8007094:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070a4:	4a0e      	ldr	r2, [pc, #56]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
 80070b4:	e004      	b.n	80070c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	623b      	str	r3, [r7, #32]
      break;
 80070c4:	e002      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80070c8:	623b      	str	r3, [r7, #32]
      break;
 80070ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	372c      	adds	r7, #44	; 0x2c
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40021000 	.word	0x40021000
 80070e0:	007a1200 	.word	0x007a1200
 80070e4:	0800aef0 	.word	0x0800aef0
 80070e8:	0800af00 	.word	0x0800af00
 80070ec:	003d0900 	.word	0x003d0900

080070f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f4:	4b03      	ldr	r3, [pc, #12]	; (8007104 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f6:	681b      	ldr	r3, [r3, #0]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000054 	.word	0x20000054

08007108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800710e:	f7ff ffef 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007112:	4601      	mov	r1, r0
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800711c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007120:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	fa92 f2a2 	rbit	r2, r2
 8007128:	603a      	str	r2, [r7, #0]
  return result;
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	fab2 f282 	clz	r2, r2
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	40d3      	lsrs	r3, r2
 8007134:	4a04      	ldr	r2, [pc, #16]	; (8007148 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007136:	5cd3      	ldrb	r3, [r2, r3]
 8007138:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40021000 	.word	0x40021000
 8007148:	0800aee8 	.word	0x0800aee8

0800714c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007152:	f7ff ffcd 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007156:	4601      	mov	r1, r0
 8007158:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007160:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007164:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	fa92 f2a2 	rbit	r2, r2
 800716c:	603a      	str	r2, [r7, #0]
  return result;
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	fab2 f282 	clz	r2, r2
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	40d3      	lsrs	r3, r2
 8007178:	4a04      	ldr	r2, [pc, #16]	; (800718c <HAL_RCC_GetPCLK2Freq+0x40>)
 800717a:	5cd3      	ldrb	r3, [r2, r3]
 800717c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40021000 	.word	0x40021000
 800718c:	0800aee8 	.word	0x0800aee8

08007190 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b092      	sub	sp, #72	; 0x48
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80d4 	beq.w	800735c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b4:	4b4e      	ldr	r3, [pc, #312]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10e      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c0:	4b4b      	ldr	r3, [pc, #300]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ca:	61d3      	str	r3, [r2, #28]
 80071cc:	4b48      	ldr	r3, [pc, #288]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071de:	4b45      	ldr	r3, [pc, #276]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d118      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ea:	4b42      	ldr	r3, [pc, #264]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a41      	ldr	r2, [pc, #260]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f6:	f7fc feb3 	bl	8003f60 <HAL_GetTick>
 80071fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fe:	f7fc feaf 	bl	8003f60 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b64      	cmp	r3, #100	; 0x64
 800720a:	d901      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e169      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	4b38      	ldr	r3, [pc, #224]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800721c:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8084 	beq.w	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007238:	429a      	cmp	r2, r3
 800723a:	d07c      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800723c:	4b2c      	ldr	r3, [pc, #176]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800724a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	fa93 f3a3 	rbit	r3, r3
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007256:	fab3 f383 	clz	r3, r3
 800725a:	b2db      	uxtb	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	461a      	mov	r2, r3
 8007266:	2301      	movs	r3, #1
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	fa93 f3a3 	rbit	r3, r3
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007292:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d04b      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729e:	f7fc fe5f 	bl	8003f60 <HAL_GetTick>
 80072a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a4:	e00a      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fc fe5b 	bl	8003f60 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e113      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80072bc:	2302      	movs	r3, #2
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	fa93 f3a3 	rbit	r3, r3
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	2302      	movs	r3, #2
 80072ca:	623b      	str	r3, [r7, #32]
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	61fb      	str	r3, [r7, #28]
  return result;
 80072d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d108      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80072ea:	4b01      	ldr	r3, [pc, #4]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	e00d      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40007000 	.word	0x40007000
 80072f8:	10908100 	.word	0x10908100
 80072fc:	2302      	movs	r3, #2
 80072fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	4b78      	ldr	r3, [pc, #480]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	2202      	movs	r2, #2
 800730e:	613a      	str	r2, [r7, #16]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	fa92 f2a2 	rbit	r2, r2
 8007316:	60fa      	str	r2, [r7, #12]
  return result;
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	fab2 f282 	clz	r2, r2
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	f002 021f 	and.w	r2, r2, #31
 800732a:	2101      	movs	r1, #1
 800732c:	fa01 f202 	lsl.w	r2, r1, r2
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0b7      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007336:	4b6d      	ldr	r3, [pc, #436]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	496a      	ldr	r1, [pc, #424]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007344:	4313      	orrs	r3, r2
 8007346:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007348:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4a65      	ldr	r2, [pc, #404]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800735a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007368:	4b60      	ldr	r3, [pc, #384]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	f023 0203 	bic.w	r2, r3, #3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	495d      	ldr	r1, [pc, #372]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007386:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	4956      	ldr	r1, [pc, #344]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073a4:	4b51      	ldr	r3, [pc, #324]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	494e      	ldr	r1, [pc, #312]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d008      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073c2:	4b4a      	ldr	r3, [pc, #296]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	f023 0210 	bic.w	r2, r3, #16
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	4947      	ldr	r1, [pc, #284]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80073e0:	4b42      	ldr	r3, [pc, #264]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	493f      	ldr	r1, [pc, #252]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073fe:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	f023 0220 	bic.w	r2, r3, #32
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	4938      	ldr	r1, [pc, #224]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800741c:	4b33      	ldr	r3, [pc, #204]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	4930      	ldr	r1, [pc, #192]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800743a:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	4929      	ldr	r1, [pc, #164]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007448:	4313      	orrs	r3, r2
 800744a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007458:	4b24      	ldr	r3, [pc, #144]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4921      	ldr	r1, [pc, #132]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	491a      	ldr	r1, [pc, #104]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007494:	4b15      	ldr	r3, [pc, #84]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	4912      	ldr	r1, [pc, #72]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	490b      	ldr	r1, [pc, #44]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80074d0:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	4903      	ldr	r1, [pc, #12]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3748      	adds	r7, #72	; 0x48
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000

080074f0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e083      	b.n	800760a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7f5b      	ldrb	r3, [r3, #29]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fa fcbe 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	22ca      	movs	r2, #202	; 0xca
 8007524:	625a      	str	r2, [r3, #36]	; 0x24
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2253      	movs	r2, #83	; 0x53
 800752c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 faa8 	bl	8007a84 <RTC_EnterInitMode>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	22ff      	movs	r2, #255	; 0xff
 8007540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e05e      	b.n	800760a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800755a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6899      	ldr	r1, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68d2      	ldr	r2, [r2, #12]
 8007586:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6919      	ldr	r1, [r3, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	041a      	lsls	r2, r3, #16
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10e      	bne.n	80075d8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa3a 	bl	8007a34 <HAL_RTC_WaitForSynchro>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	22ff      	movs	r2, #255	; 0xff
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2204      	movs	r2, #4
 80075d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e018      	b.n	800760a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	22ff      	movs	r2, #255	; 0xff
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007608:	2300      	movs	r3, #0
  }
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007612:	b590      	push	{r4, r7, lr}
 8007614:	b087      	sub	sp, #28
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	7f1b      	ldrb	r3, [r3, #28]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_RTC_SetTime+0x1c>
 800762a:	2302      	movs	r3, #2
 800762c:	e0aa      	b.n	8007784 <HAL_RTC_SetTime+0x172>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2202      	movs	r2, #2
 8007638:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d126      	bne.n	800768e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fa3f 	bl	8007adc <RTC_ByteToBcd2>
 800765e:	4603      	mov	r3, r0
 8007660:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fa38 	bl	8007adc <RTC_ByteToBcd2>
 800766c:	4603      	mov	r3, r0
 800766e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007670:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	789b      	ldrb	r3, [r3, #2]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa30 	bl	8007adc <RTC_ByteToBcd2>
 800767c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800767e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	78db      	ldrb	r3, [r3, #3]
 8007686:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e018      	b.n	80076c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80076ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80076b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	22ca      	movs	r2, #202	; 0xca
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2253      	movs	r2, #83	; 0x53
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f9d7 	bl	8007a84 <RTC_EnterInitMode>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	22ff      	movs	r2, #255	; 0xff
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2204      	movs	r2, #4
 80076e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e047      	b.n	8007784 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80076fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007712:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6899      	ldr	r1, [r3, #8]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	431a      	orrs	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800773a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d111      	bne.n	800776e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f972 	bl	8007a34 <HAL_RTC_WaitForSynchro>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	22ff      	movs	r2, #255	; 0xff
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2204      	movs	r2, #4
 8007762:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e00a      	b.n	8007784 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	22ff      	movs	r2, #255	; 0xff
 8007774:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd90      	pop	{r4, r7, pc}

0800778c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11a      	bne.n	800783e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f983 	bl	8007b18 <RTC_Bcd2ToByte>
 8007812:	4603      	mov	r3, r0
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f97a 	bl	8007b18 <RTC_Bcd2ToByte>
 8007824:	4603      	mov	r3, r0
 8007826:	461a      	mov	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	789b      	ldrb	r3, [r3, #2]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 f971 	bl	8007b18 <RTC_Bcd2ToByte>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007848:	b590      	push	{r4, r7, lr}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	7f1b      	ldrb	r3, [r3, #28]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_RTC_SetDate+0x1c>
 8007860:	2302      	movs	r3, #2
 8007862:	e094      	b.n	800798e <HAL_RTC_SetDate+0x146>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2202      	movs	r2, #2
 800786e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10e      	bne.n	8007894 <HAL_RTC_SetDate+0x4c>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	b2db      	uxtb	r3, r3
 800788c:	330a      	adds	r3, #10
 800788e:	b2da      	uxtb	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d11c      	bne.n	80078d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	78db      	ldrb	r3, [r3, #3]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f91c 	bl	8007adc <RTC_ByteToBcd2>
 80078a4:	4603      	mov	r3, r0
 80078a6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f915 	bl	8007adc <RTC_ByteToBcd2>
 80078b2:	4603      	mov	r3, r0
 80078b4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80078b6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	789b      	ldrb	r3, [r3, #2]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f90d 	bl	8007adc <RTC_ByteToBcd2>
 80078c2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80078c4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e00e      	b.n	80078f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	78db      	ldrb	r3, [r3, #3]
 80078d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80078e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80078e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	22ca      	movs	r2, #202	; 0xca
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2253      	movs	r2, #83	; 0x53
 8007900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8be 	bl	8007a84 <RTC_EnterInitMode>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	22ff      	movs	r2, #255	; 0xff
 8007914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2204      	movs	r2, #4
 800791a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e033      	b.n	800798e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007930:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007934:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007944:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d111      	bne.n	8007978 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f86d 	bl	8007a34 <HAL_RTC_WaitForSynchro>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2204      	movs	r2, #4
 800796c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e00a      	b.n	800798e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800798c:	2300      	movs	r3, #0
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}

08007996 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b086      	sub	sp, #24
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	0b5b      	lsrs	r3, r3, #13
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11a      	bne.n	8007a2a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f88d 	bl	8007b18 <RTC_Bcd2ToByte>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f884 	bl	8007b18 <RTC_Bcd2ToByte>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	789b      	ldrb	r3, [r3, #2]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 f87b 	bl	8007b18 <RTC_Bcd2ToByte>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007a50:	f7fc fa86 	bl	8003f60 <HAL_GetTick>
 8007a54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a56:	e009      	b.n	8007a6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a58:	f7fc fa82 	bl	8003f60 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a66:	d901      	bls.n	8007a6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e007      	b.n	8007a7c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ee      	beq.n	8007a58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d119      	bne.n	8007ad2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007aa8:	f7fc fa5a 	bl	8003f60 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007aae:	e009      	b.n	8007ac4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ab0:	f7fc fa56 	bl	8003f60 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abe:	d901      	bls.n	8007ac4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e007      	b.n	8007ad4 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0ee      	beq.n	8007ab0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007aea:	e005      	b.n	8007af8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	3b0a      	subs	r3, #10
 8007af6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	d8f6      	bhi.n	8007aec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	b2db      	uxtb	r3, r3
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	091b      	lsrs	r3, r3, #4
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	4413      	add	r3, r2
 8007b46:	b2db      	uxtb	r3, r3
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e09d      	b.n	8007ca2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d108      	bne.n	8007b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b76:	d009      	beq.n	8007b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	61da      	str	r2, [r3, #28]
 8007b7e:	e005      	b.n	8007b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa f99a 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bcc:	d902      	bls.n	8007bd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e002      	b.n	8007bda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007be2:	d007      	beq.n	8007bf4 <HAL_SPI_Init+0xa0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bec:	d002      	beq.n	8007bf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	ea42 0103 	orr.w	r1, r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	0c1b      	lsrs	r3, r3, #16
 8007c50:	f003 0204 	and.w	r2, r3, #4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c70:	ea42 0103 	orr.w	r1, r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e049      	b.n	8007d50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fa f947 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f000 fab9 	bl	8008260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d001      	beq.n	8007d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e04a      	b.n	8007e06 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <HAL_TIM_Base_Start_IT+0xbc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d018      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9a:	d013      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1d      	ldr	r2, [pc, #116]	; (8007e18 <HAL_TIM_Base_Start_IT+0xc0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00e      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <HAL_TIM_Base_Start_IT+0xc4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <HAL_TIM_Base_Start_IT+0xc8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <HAL_TIM_Base_Start_IT+0xcc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d115      	bne.n	8007df0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	4b17      	ldr	r3, [pc, #92]	; (8007e28 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b06      	cmp	r3, #6
 8007dd4:	d015      	beq.n	8007e02 <HAL_TIM_Base_Start_IT+0xaa>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ddc:	d011      	beq.n	8007e02 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dee:	e008      	b.n	8007e02 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e000      	b.n	8007e04 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40012c00 	.word	0x40012c00
 8007e18:	40000400 	.word	0x40000400
 8007e1c:	40000800 	.word	0x40000800
 8007e20:	40013400 	.word	0x40013400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	00010007 	.word	0x00010007

08007e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d122      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d11b      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0202 	mvn.w	r2, #2
 8007e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f9d8 	bl	8008224 <HAL_TIM_IC_CaptureCallback>
 8007e74:	e005      	b.n	8007e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9ca 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f9db 	bl	8008238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d122      	bne.n	8007edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d11b      	bne.n	8007edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0204 	mvn.w	r2, #4
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f9ae 	bl	8008224 <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9a0 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f9b1 	bl	8008238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d122      	bne.n	8007f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d11b      	bne.n	8007f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0208 	mvn.w	r2, #8
 8007f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2204      	movs	r2, #4
 8007f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f984 	bl	8008224 <HAL_TIM_IC_CaptureCallback>
 8007f1c:	e005      	b.n	8007f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f976 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f987 	bl	8008238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d122      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d11b      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0210 	mvn.w	r2, #16
 8007f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2208      	movs	r2, #8
 8007f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f95a 	bl	8008224 <HAL_TIM_IC_CaptureCallback>
 8007f70:	e005      	b.n	8007f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f94c 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f95d 	bl	8008238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d10e      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d107      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0201 	mvn.w	r2, #1
 8007fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f926 	bl	80081fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d10e      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc8:	2b80      	cmp	r3, #128	; 0x80
 8007fca:	d107      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 faf6 	bl	80085c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fea:	d10e      	bne.n	800800a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff6:	2b80      	cmp	r3, #128	; 0x80
 8007ff8:	d107      	bne.n	800800a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fae9 	bl	80085dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d10e      	bne.n	8008036 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d107      	bne.n	8008036 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800802e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f90b 	bl	800824c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b20      	cmp	r3, #32
 8008042:	d10e      	bne.n	8008062 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b20      	cmp	r3, #32
 8008050:	d107      	bne.n	8008062 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f06f 0220 	mvn.w	r2, #32
 800805a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 faa9 	bl	80085b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_TIM_ConfigClockSource+0x1c>
 8008082:	2302      	movs	r3, #2
 8008084:	e0b6      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x18a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c2:	d03e      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xd8>
 80080c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c8:	f200 8087 	bhi.w	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	f000 8086 	beq.w	80081e0 <HAL_TIM_ConfigClockSource+0x176>
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d87f      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080da:	2b70      	cmp	r3, #112	; 0x70
 80080dc:	d01a      	beq.n	8008114 <HAL_TIM_ConfigClockSource+0xaa>
 80080de:	2b70      	cmp	r3, #112	; 0x70
 80080e0:	d87b      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080e2:	2b60      	cmp	r3, #96	; 0x60
 80080e4:	d050      	beq.n	8008188 <HAL_TIM_ConfigClockSource+0x11e>
 80080e6:	2b60      	cmp	r3, #96	; 0x60
 80080e8:	d877      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080ea:	2b50      	cmp	r3, #80	; 0x50
 80080ec:	d03c      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0xfe>
 80080ee:	2b50      	cmp	r3, #80	; 0x50
 80080f0:	d873      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d058      	beq.n	80081a8 <HAL_TIM_ConfigClockSource+0x13e>
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d86f      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 80080fa:	2b30      	cmp	r3, #48	; 0x30
 80080fc:	d064      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x15e>
 80080fe:	2b30      	cmp	r3, #48	; 0x30
 8008100:	d86b      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d060      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x15e>
 8008106:	2b20      	cmp	r3, #32
 8008108:	d867      	bhi.n	80081da <HAL_TIM_ConfigClockSource+0x170>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d05c      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x15e>
 800810e:	2b10      	cmp	r3, #16
 8008110:	d05a      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x15e>
 8008112:	e062      	b.n	80081da <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	6899      	ldr	r1, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f000 f9a6 	bl	8008474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008136:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	609a      	str	r2, [r3, #8]
      break;
 8008140:	e04f      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6899      	ldr	r1, [r3, #8]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f000 f98f 	bl	8008474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008164:	609a      	str	r2, [r3, #8]
      break;
 8008166:	e03c      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	6859      	ldr	r1, [r3, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	461a      	mov	r2, r3
 8008176:	f000 f903 	bl	8008380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2150      	movs	r1, #80	; 0x50
 8008180:	4618      	mov	r0, r3
 8008182:	f000 f95c 	bl	800843e <TIM_ITRx_SetConfig>
      break;
 8008186:	e02c      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	461a      	mov	r2, r3
 8008196:	f000 f922 	bl	80083de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2160      	movs	r1, #96	; 0x60
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f94c 	bl	800843e <TIM_ITRx_SetConfig>
      break;
 80081a6:	e01c      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f000 f8e3 	bl	8008380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2140      	movs	r1, #64	; 0x40
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f93c 	bl	800843e <TIM_ITRx_SetConfig>
      break;
 80081c6:	e00c      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f000 f933 	bl	800843e <TIM_ITRx_SetConfig>
      break;
 80081d8:	e003      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e000      	b.n	80081e2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80081e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a3c      	ldr	r2, [pc, #240]	; (8008364 <TIM_Base_SetConfig+0x104>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827e:	d00b      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a39      	ldr	r2, [pc, #228]	; (8008368 <TIM_Base_SetConfig+0x108>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a38      	ldr	r2, [pc, #224]	; (800836c <TIM_Base_SetConfig+0x10c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_Base_SetConfig+0x38>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a37      	ldr	r2, [pc, #220]	; (8008370 <TIM_Base_SetConfig+0x110>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d108      	bne.n	80082aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a2d      	ldr	r2, [pc, #180]	; (8008364 <TIM_Base_SetConfig+0x104>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01b      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b8:	d017      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <TIM_Base_SetConfig+0x108>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d013      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a29      	ldr	r2, [pc, #164]	; (800836c <TIM_Base_SetConfig+0x10c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00f      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a28      	ldr	r2, [pc, #160]	; (8008370 <TIM_Base_SetConfig+0x110>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00b      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a27      	ldr	r2, [pc, #156]	; (8008374 <TIM_Base_SetConfig+0x114>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d007      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a26      	ldr	r2, [pc, #152]	; (8008378 <TIM_Base_SetConfig+0x118>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d003      	beq.n	80082ea <TIM_Base_SetConfig+0x8a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a25      	ldr	r2, [pc, #148]	; (800837c <TIM_Base_SetConfig+0x11c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d108      	bne.n	80082fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a10      	ldr	r2, [pc, #64]	; (8008364 <TIM_Base_SetConfig+0x104>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00f      	beq.n	8008348 <TIM_Base_SetConfig+0xe8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a11      	ldr	r2, [pc, #68]	; (8008370 <TIM_Base_SetConfig+0x110>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00b      	beq.n	8008348 <TIM_Base_SetConfig+0xe8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a10      	ldr	r2, [pc, #64]	; (8008374 <TIM_Base_SetConfig+0x114>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d007      	beq.n	8008348 <TIM_Base_SetConfig+0xe8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a0f      	ldr	r2, [pc, #60]	; (8008378 <TIM_Base_SetConfig+0x118>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_Base_SetConfig+0xe8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a0e      	ldr	r2, [pc, #56]	; (800837c <TIM_Base_SetConfig+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d103      	bne.n	8008350 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	615a      	str	r2, [r3, #20]
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40013400 	.word	0x40013400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800

08008380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 030a 	bic.w	r3, r3, #10
 80083bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	f023 0210 	bic.w	r2, r3, #16
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	031b      	lsls	r3, r3, #12
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800841a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	621a      	str	r2, [r3, #32]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	f043 0307 	orr.w	r3, r3, #7
 8008460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	609a      	str	r2, [r3, #8]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800848e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	021a      	lsls	r2, r3, #8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	431a      	orrs	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4313      	orrs	r3, r2
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	609a      	str	r2, [r3, #8]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e063      	b.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008506:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008518:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d018      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853e:	d013      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00e      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a17      	ldr	r2, [pc, #92]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d009      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a12      	ldr	r2, [pc, #72]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d10c      	bne.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	4313      	orrs	r3, r2
 8008578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40000400 	.word	0x40000400
 80085ac:	40000800 	.word	0x40000800
 80085b0:	40014000 	.word	0x40014000

080085b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e040      	b.n	8008684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f9 fd02 	bl	800201c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	; 0x24
 800861c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbbe 	bl	8008db0 <UART_SetConfig>
 8008634:	4603      	mov	r3, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e022      	b.n	8008684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fd86 	bl	8009158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800865a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800866a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fe0d 	bl	800929c <UART_CheckIdleState>
 8008682:	4603      	mov	r3, r0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	; 0x28
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	f040 8082 	bne.w	80087aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <HAL_UART_Transmit+0x26>
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e07a      	b.n	80087ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_UART_Transmit+0x38>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e073      	b.n	80087ac <HAL_UART_Transmit+0x120>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2221      	movs	r2, #33	; 0x21
 80086d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086da:	f7fb fc41 	bl	8003f60 <HAL_GetTick>
 80086de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	88fa      	ldrh	r2, [r7, #6]
 80086e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f8:	d108      	bne.n	800870c <HAL_UART_Transmit+0x80>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	e003      	b.n	8008714 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800871c:	e02d      	b.n	800877a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2200      	movs	r2, #0
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fe00 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e039      	b.n	80087ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800874a:	b292      	uxth	r2, r2
 800874c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	3302      	adds	r3, #2
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	e008      	b.n	8008768 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	b292      	uxth	r2, r2
 8008760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800876e:	b29b      	uxth	r3, r3
 8008770:	3b01      	subs	r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1cb      	bne.n	800871e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2140      	movs	r1, #64	; 0x40
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fdcc 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e005      	b.n	80087ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b0ba      	sub	sp, #232	; 0xe8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80087de:	f640 030f 	movw	r3, #2063	; 0x80f
 80087e2:	4013      	ands	r3, r2
 80087e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80087e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d115      	bne.n	800881c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00f      	beq.n	800881c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 82a3 	beq.w	8008d58 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
      }
      return;
 800881a:	e29d      	b.n	8008d58 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800881c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8117 	beq.w	8008a54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008836:	4b85      	ldr	r3, [pc, #532]	; (8008a4c <HAL_UART_IRQHandler+0x298>)
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 810a 	beq.w	8008a54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d011      	beq.n	8008870 <HAL_UART_IRQHandler+0xbc>
 800884c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2201      	movs	r2, #1
 800885e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008866:	f043 0201 	orr.w	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d011      	beq.n	80088a0 <HAL_UART_IRQHandler+0xec>
 800887c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2202      	movs	r2, #2
 800888e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008896:	f043 0204 	orr.w	r2, r3, #4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d011      	beq.n	80088d0 <HAL_UART_IRQHandler+0x11c>
 80088ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2204      	movs	r2, #4
 80088be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088c6:	f043 0202 	orr.w	r2, r3, #2
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d017      	beq.n	800890c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2208      	movs	r2, #8
 80088fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008902:	f043 0208 	orr.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008914:	2b00      	cmp	r3, #0
 8008916:	d012      	beq.n	800893e <HAL_UART_IRQHandler+0x18a>
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00c      	beq.n	800893e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800892c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008934:	f043 0220 	orr.w	r2, r3, #32
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8209 	beq.w	8008d5c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800894a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d005      	beq.n	8008996 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800898a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800898e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008992:	2b00      	cmp	r3, #0
 8008994:	d04f      	beq.n	8008a36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fd8d 	bl	80094b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d141      	bne.n	8008a2e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1d9      	bne.n	80089aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d013      	beq.n	8008a26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <HAL_UART_IRQHandler+0x29c>)
 8008a04:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fc fe58 	bl	80056c0 <HAL_DMA_Abort_IT>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d017      	beq.n	8008a46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a24:	e00f      	b.n	8008a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f9ac 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2c:	e00b      	b.n	8008a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9a8 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	e007      	b.n	8008a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9a4 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008a44:	e18a      	b.n	8008d5c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a46:	bf00      	nop
    return;
 8008a48:	e188      	b.n	8008d5c <HAL_UART_IRQHandler+0x5a8>
 8008a4a:	bf00      	nop
 8008a4c:	04000120 	.word	0x04000120
 8008a50:	0800957d 	.word	0x0800957d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	f040 8143 	bne.w	8008ce4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a62:	f003 0310 	and.w	r3, r3, #16
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 813c 	beq.w	8008ce4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8135 	beq.w	8008ce4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2210      	movs	r2, #16
 8008a80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	f040 80b1 	bne.w	8008bf4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 815c 	beq.w	8008d60 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	f080 8154 	bcs.w	8008d60 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008abe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	f000 8085 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008afc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1da      	bne.n	8008ace <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b2a:	f023 0301 	bic.w	r3, r3, #1
 8008b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e1      	bne.n	8008b18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e3      	bne.n	8008b54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	f023 0310 	bic.w	r3, r3, #16
 8008bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e4      	bne.n	8008b98 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fc fd3b 	bl	800564e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f8d3 	bl	8008d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bf2:	e0b5      	b.n	8008d60 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80a7 	beq.w	8008d64 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008c16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80a2 	beq.w	8008d64 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c42:	647b      	str	r3, [r7, #68]	; 0x44
 8008c44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e4      	bne.n	8008c20 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	623b      	str	r3, [r7, #32]
   return(result);
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e3      	bne.n	8008c56 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f023 0310 	bic.w	r3, r3, #16
 8008cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	69b9      	ldr	r1, [r7, #24]
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	617b      	str	r3, [r7, #20]
   return(result);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e4      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f85b 	bl	8008d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ce2:	e03f      	b.n	8008d64 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00e      	beq.n	8008d0e <HAL_UART_IRQHandler+0x55a>
 8008cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fc78 	bl	80095fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d0c:	e02d      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00e      	beq.n	8008d38 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d008      	beq.n	8008d38 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01c      	beq.n	8008d68 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
    }
    return;
 8008d36:	e017      	b.n	8008d68 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d012      	beq.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00c      	beq.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc29 	bl	80095a8 <UART_EndTransmit_IT>
    return;
 8008d56:	e008      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008d58:	bf00      	nop
 8008d5a:	e006      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8008d5c:	bf00      	nop
 8008d5e:	e004      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008d60:	bf00      	nop
 8008d62:	e002      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8008d68:	bf00      	nop
  }

}
 8008d6a:	37e8      	adds	r7, #232	; 0xe8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008dde:	f023 030c 	bic.w	r3, r3, #12
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	6979      	ldr	r1, [r7, #20]
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4aae      	ldr	r2, [pc, #696]	; (80090e4 <UART_SetConfig+0x334>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d120      	bne.n	8008e72 <UART_SetConfig+0xc2>
 8008e30:	4bad      	ldr	r3, [pc, #692]	; (80090e8 <UART_SetConfig+0x338>)
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	f003 0303 	and.w	r3, r3, #3
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d817      	bhi.n	8008e6c <UART_SetConfig+0xbc>
 8008e3c:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <UART_SetConfig+0x94>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e67 	.word	0x08008e67
 8008e50:	08008e5b 	.word	0x08008e5b
 8008e54:	2301      	movs	r3, #1
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e0b5      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	77fb      	strb	r3, [r7, #31]
 8008e5e:	e0b2      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008e60:	2304      	movs	r3, #4
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e0af      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008e66:	2308      	movs	r3, #8
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e0ac      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e0a9      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a9d      	ldr	r2, [pc, #628]	; (80090ec <UART_SetConfig+0x33c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d124      	bne.n	8008ec6 <UART_SetConfig+0x116>
 8008e7c:	4b9a      	ldr	r3, [pc, #616]	; (80090e8 <UART_SetConfig+0x338>)
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e88:	d011      	beq.n	8008eae <UART_SetConfig+0xfe>
 8008e8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e8e:	d817      	bhi.n	8008ec0 <UART_SetConfig+0x110>
 8008e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e94:	d011      	beq.n	8008eba <UART_SetConfig+0x10a>
 8008e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e9a:	d811      	bhi.n	8008ec0 <UART_SetConfig+0x110>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <UART_SetConfig+0xf8>
 8008ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea4:	d006      	beq.n	8008eb4 <UART_SetConfig+0x104>
 8008ea6:	e00b      	b.n	8008ec0 <UART_SetConfig+0x110>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	77fb      	strb	r3, [r7, #31]
 8008eac:	e08b      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	77fb      	strb	r3, [r7, #31]
 8008eb2:	e088      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	77fb      	strb	r3, [r7, #31]
 8008eb8:	e085      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008eba:	2308      	movs	r3, #8
 8008ebc:	77fb      	strb	r3, [r7, #31]
 8008ebe:	e082      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	77fb      	strb	r3, [r7, #31]
 8008ec4:	e07f      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a89      	ldr	r2, [pc, #548]	; (80090f0 <UART_SetConfig+0x340>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d124      	bne.n	8008f1a <UART_SetConfig+0x16a>
 8008ed0:	4b85      	ldr	r3, [pc, #532]	; (80090e8 <UART_SetConfig+0x338>)
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008ed8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008edc:	d011      	beq.n	8008f02 <UART_SetConfig+0x152>
 8008ede:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ee2:	d817      	bhi.n	8008f14 <UART_SetConfig+0x164>
 8008ee4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ee8:	d011      	beq.n	8008f0e <UART_SetConfig+0x15e>
 8008eea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008eee:	d811      	bhi.n	8008f14 <UART_SetConfig+0x164>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <UART_SetConfig+0x14c>
 8008ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ef8:	d006      	beq.n	8008f08 <UART_SetConfig+0x158>
 8008efa:	e00b      	b.n	8008f14 <UART_SetConfig+0x164>
 8008efc:	2300      	movs	r3, #0
 8008efe:	77fb      	strb	r3, [r7, #31]
 8008f00:	e061      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f02:	2302      	movs	r3, #2
 8008f04:	77fb      	strb	r3, [r7, #31]
 8008f06:	e05e      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	77fb      	strb	r3, [r7, #31]
 8008f0c:	e05b      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f0e:	2308      	movs	r3, #8
 8008f10:	77fb      	strb	r3, [r7, #31]
 8008f12:	e058      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f14:	2310      	movs	r3, #16
 8008f16:	77fb      	strb	r3, [r7, #31]
 8008f18:	e055      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a75      	ldr	r2, [pc, #468]	; (80090f4 <UART_SetConfig+0x344>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d124      	bne.n	8008f6e <UART_SetConfig+0x1be>
 8008f24:	4b70      	ldr	r3, [pc, #448]	; (80090e8 <UART_SetConfig+0x338>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f30:	d011      	beq.n	8008f56 <UART_SetConfig+0x1a6>
 8008f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f36:	d817      	bhi.n	8008f68 <UART_SetConfig+0x1b8>
 8008f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f3c:	d011      	beq.n	8008f62 <UART_SetConfig+0x1b2>
 8008f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f42:	d811      	bhi.n	8008f68 <UART_SetConfig+0x1b8>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <UART_SetConfig+0x1a0>
 8008f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f4c:	d006      	beq.n	8008f5c <UART_SetConfig+0x1ac>
 8008f4e:	e00b      	b.n	8008f68 <UART_SetConfig+0x1b8>
 8008f50:	2300      	movs	r3, #0
 8008f52:	77fb      	strb	r3, [r7, #31]
 8008f54:	e037      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f56:	2302      	movs	r3, #2
 8008f58:	77fb      	strb	r3, [r7, #31]
 8008f5a:	e034      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	77fb      	strb	r3, [r7, #31]
 8008f60:	e031      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f62:	2308      	movs	r3, #8
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e02e      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e02b      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a61      	ldr	r2, [pc, #388]	; (80090f8 <UART_SetConfig+0x348>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d124      	bne.n	8008fc2 <UART_SetConfig+0x212>
 8008f78:	4b5b      	ldr	r3, [pc, #364]	; (80090e8 <UART_SetConfig+0x338>)
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f84:	d011      	beq.n	8008faa <UART_SetConfig+0x1fa>
 8008f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f8a:	d817      	bhi.n	8008fbc <UART_SetConfig+0x20c>
 8008f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f90:	d011      	beq.n	8008fb6 <UART_SetConfig+0x206>
 8008f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f96:	d811      	bhi.n	8008fbc <UART_SetConfig+0x20c>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <UART_SetConfig+0x1f4>
 8008f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa0:	d006      	beq.n	8008fb0 <UART_SetConfig+0x200>
 8008fa2:	e00b      	b.n	8008fbc <UART_SetConfig+0x20c>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e00d      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008faa:	2302      	movs	r3, #2
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e00a      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e007      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008fb6:	2308      	movs	r3, #8
 8008fb8:	77fb      	strb	r3, [r7, #31]
 8008fba:	e004      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	77fb      	strb	r3, [r7, #31]
 8008fc0:	e001      	b.n	8008fc6 <UART_SetConfig+0x216>
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fce:	d15c      	bne.n	800908a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008fd0:	7ffb      	ldrb	r3, [r7, #31]
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	d827      	bhi.n	8009026 <UART_SetConfig+0x276>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x22c>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	08009027 	.word	0x08009027
 8008fec:	08009017 	.word	0x08009017
 8008ff0:	08009027 	.word	0x08009027
 8008ff4:	08009027 	.word	0x08009027
 8008ff8:	08009027 	.word	0x08009027
 8008ffc:	0800901f 	.word	0x0800901f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009000:	f7fe f882 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 8009004:	61b8      	str	r0, [r7, #24]
        break;
 8009006:	e013      	b.n	8009030 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009008:	f7fe f8a0 	bl	800714c <HAL_RCC_GetPCLK2Freq>
 800900c:	61b8      	str	r0, [r7, #24]
        break;
 800900e:	e00f      	b.n	8009030 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009010:	4b3a      	ldr	r3, [pc, #232]	; (80090fc <UART_SetConfig+0x34c>)
 8009012:	61bb      	str	r3, [r7, #24]
        break;
 8009014:	e00c      	b.n	8009030 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009016:	f7fe f801 	bl	800701c <HAL_RCC_GetSysClockFreq>
 800901a:	61b8      	str	r0, [r7, #24]
        break;
 800901c:	e008      	b.n	8009030 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009022:	61bb      	str	r3, [r7, #24]
        break;
 8009024:	e004      	b.n	8009030 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	77bb      	strb	r3, [r7, #30]
        break;
 800902e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8085 	beq.w	8009142 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	005a      	lsls	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	b29b      	uxth	r3, r3
 800904e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d916      	bls.n	8009084 <UART_SetConfig+0x2d4>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d212      	bcs.n	8009084 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	b29b      	uxth	r3, r3
 8009062:	f023 030f 	bic.w	r3, r3, #15
 8009066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	b29b      	uxth	r3, r3
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	b29a      	uxth	r2, r3
 8009074:	89fb      	ldrh	r3, [r7, #14]
 8009076:	4313      	orrs	r3, r2
 8009078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	89fa      	ldrh	r2, [r7, #14]
 8009080:	60da      	str	r2, [r3, #12]
 8009082:	e05e      	b.n	8009142 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	77bb      	strb	r3, [r7, #30]
 8009088:	e05b      	b.n	8009142 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800908a:	7ffb      	ldrb	r3, [r7, #31]
 800908c:	2b08      	cmp	r3, #8
 800908e:	d837      	bhi.n	8009100 <UART_SetConfig+0x350>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <UART_SetConfig+0x2e8>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090bd 	.word	0x080090bd
 800909c:	080090c5 	.word	0x080090c5
 80090a0:	080090cd 	.word	0x080090cd
 80090a4:	08009101 	.word	0x08009101
 80090a8:	080090d3 	.word	0x080090d3
 80090ac:	08009101 	.word	0x08009101
 80090b0:	08009101 	.word	0x08009101
 80090b4:	08009101 	.word	0x08009101
 80090b8:	080090db 	.word	0x080090db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090bc:	f7fe f824 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 80090c0:	61b8      	str	r0, [r7, #24]
        break;
 80090c2:	e022      	b.n	800910a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090c4:	f7fe f842 	bl	800714c <HAL_RCC_GetPCLK2Freq>
 80090c8:	61b8      	str	r0, [r7, #24]
        break;
 80090ca:	e01e      	b.n	800910a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090cc:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <UART_SetConfig+0x34c>)
 80090ce:	61bb      	str	r3, [r7, #24]
        break;
 80090d0:	e01b      	b.n	800910a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090d2:	f7fd ffa3 	bl	800701c <HAL_RCC_GetSysClockFreq>
 80090d6:	61b8      	str	r0, [r7, #24]
        break;
 80090d8:	e017      	b.n	800910a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090de:	61bb      	str	r3, [r7, #24]
        break;
 80090e0:	e013      	b.n	800910a <UART_SetConfig+0x35a>
 80090e2:	bf00      	nop
 80090e4:	40013800 	.word	0x40013800
 80090e8:	40021000 	.word	0x40021000
 80090ec:	40004400 	.word	0x40004400
 80090f0:	40004800 	.word	0x40004800
 80090f4:	40004c00 	.word	0x40004c00
 80090f8:	40005000 	.word	0x40005000
 80090fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	77bb      	strb	r3, [r7, #30]
        break;
 8009108:	bf00      	nop
    }

    if (pclk != 0U)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d018      	beq.n	8009142 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	085a      	lsrs	r2, r3, #1
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	441a      	add	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009122:	b29b      	uxth	r3, r3
 8009124:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b0f      	cmp	r3, #15
 800912a:	d908      	bls.n	800913e <UART_SetConfig+0x38e>
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009132:	d204      	bcs.n	800913e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	60da      	str	r2, [r3, #12]
 800913c:	e001      	b.n	8009142 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800914e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3720      	adds	r7, #32
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	f003 0308 	and.w	r3, r3, #8
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	f003 0310 	and.w	r3, r3, #16
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01a      	beq.n	800926e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009256:	d10a      	bne.n	800926e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092ac:	f7fa fe58 	bl	8003f60 <HAL_GetTick>
 80092b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d10e      	bne.n	80092de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f82d 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e023      	b.n	8009326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d10e      	bne.n	800930a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f817 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e00d      	b.n	8009326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b09c      	sub	sp, #112	; 0x70
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	4613      	mov	r3, r2
 800933c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933e:	e0a5      	b.n	800948c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	f000 80a1 	beq.w	800948c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800934a:	f7fa fe09 	bl	8003f60 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009356:	429a      	cmp	r2, r3
 8009358:	d302      	bcc.n	8009360 <UART_WaitOnFlagUntilTimeout+0x32>
 800935a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800935c:	2b00      	cmp	r3, #0
 800935e:	d13e      	bne.n	80093de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800936e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009374:	667b      	str	r3, [r7, #100]	; 0x64
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800937e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009380:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800938c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e6      	bne.n	8009360 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	f023 0301 	bic.w	r3, r3, #1
 80093a8:	663b      	str	r3, [r7, #96]	; 0x60
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3308      	adds	r3, #8
 80093b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80093b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e5      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e067      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d04f      	beq.n	800948c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093fa:	d147      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	e853 3f00 	ldrex	r3, [r3]
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800941a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
 8009426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800942a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e6      	bne.n	8009406 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	613b      	str	r3, [r7, #16]
   return(result);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f023 0301 	bic.w	r3, r3, #1
 800944e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009458:	623a      	str	r2, [r7, #32]
 800945a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	69f9      	ldr	r1, [r7, #28]
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	61bb      	str	r3, [r7, #24]
   return(result);
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e5      	bne.n	8009438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e010      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	bf0c      	ite	eq
 800949c:	2301      	moveq	r3, #1
 800949e:	2300      	movne	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	f43f af4a 	beq.w	8009340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3770      	adds	r7, #112	; 0x70
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b095      	sub	sp, #84	; 0x54
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094dc:	643b      	str	r3, [r7, #64]	; 0x40
 80094de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e6      	bne.n	80094be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	64bb      	str	r3, [r7, #72]	; 0x48
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009528:	2b01      	cmp	r3, #1
 800952a:	d118      	bne.n	800955e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	60bb      	str	r3, [r7, #8]
   return(result);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f023 0310 	bic.w	r3, r3, #16
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6979      	ldr	r1, [r7, #20]
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	613b      	str	r3, [r7, #16]
   return(result);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e6      	bne.n	800952c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009570:	bf00      	nop
 8009572:	3754      	adds	r7, #84	; 0x54
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fbf2 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c4:	61fb      	str	r3, [r7, #28]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	61bb      	str	r3, [r7, #24]
 80095d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6979      	ldr	r1, [r7, #20]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	613b      	str	r3, [r7, #16]
   return(result);
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e6      	bne.n	80095b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fbbe 	bl	8008d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095f4:	bf00      	nop
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009618:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800961c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	b29b      	uxth	r3, r3
 800962a:	43db      	mvns	r3, r3
 800962c:	b29b      	uxth	r3, r3
 800962e:	4013      	ands	r3, r2
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009646:	b084      	sub	sp, #16
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	f107 0014 	add.w	r0, r7, #20
 8009654:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	b004      	add	sp, #16
 8009686:	4770      	bx	lr

08009688 <__errno>:
 8009688:	4b01      	ldr	r3, [pc, #4]	; (8009690 <__errno+0x8>)
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000060 	.word	0x20000060

08009694 <__libc_init_array>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	4d0d      	ldr	r5, [pc, #52]	; (80096cc <__libc_init_array+0x38>)
 8009698:	4c0d      	ldr	r4, [pc, #52]	; (80096d0 <__libc_init_array+0x3c>)
 800969a:	1b64      	subs	r4, r4, r5
 800969c:	10a4      	asrs	r4, r4, #2
 800969e:	2600      	movs	r6, #0
 80096a0:	42a6      	cmp	r6, r4
 80096a2:	d109      	bne.n	80096b8 <__libc_init_array+0x24>
 80096a4:	4d0b      	ldr	r5, [pc, #44]	; (80096d4 <__libc_init_array+0x40>)
 80096a6:	4c0c      	ldr	r4, [pc, #48]	; (80096d8 <__libc_init_array+0x44>)
 80096a8:	f001 fb3e 	bl	800ad28 <_init>
 80096ac:	1b64      	subs	r4, r4, r5
 80096ae:	10a4      	asrs	r4, r4, #2
 80096b0:	2600      	movs	r6, #0
 80096b2:	42a6      	cmp	r6, r4
 80096b4:	d105      	bne.n	80096c2 <__libc_init_array+0x2e>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096bc:	4798      	blx	r3
 80096be:	3601      	adds	r6, #1
 80096c0:	e7ee      	b.n	80096a0 <__libc_init_array+0xc>
 80096c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c6:	4798      	blx	r3
 80096c8:	3601      	adds	r6, #1
 80096ca:	e7f2      	b.n	80096b2 <__libc_init_array+0x1e>
 80096cc:	0800b05c 	.word	0x0800b05c
 80096d0:	0800b05c 	.word	0x0800b05c
 80096d4:	0800b05c 	.word	0x0800b05c
 80096d8:	0800b060 	.word	0x0800b060

080096dc <memset>:
 80096dc:	4402      	add	r2, r0
 80096de:	4603      	mov	r3, r0
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d100      	bne.n	80096e6 <memset+0xa>
 80096e4:	4770      	bx	lr
 80096e6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ea:	e7f9      	b.n	80096e0 <memset+0x4>

080096ec <srand>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4b10      	ldr	r3, [pc, #64]	; (8009730 <srand+0x44>)
 80096f0:	681d      	ldr	r5, [r3, #0]
 80096f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096f4:	4604      	mov	r4, r0
 80096f6:	b9b3      	cbnz	r3, 8009726 <srand+0x3a>
 80096f8:	2018      	movs	r0, #24
 80096fa:	f000 f8e1 	bl	80098c0 <malloc>
 80096fe:	4602      	mov	r2, r0
 8009700:	63a8      	str	r0, [r5, #56]	; 0x38
 8009702:	b920      	cbnz	r0, 800970e <srand+0x22>
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <srand+0x48>)
 8009706:	480c      	ldr	r0, [pc, #48]	; (8009738 <srand+0x4c>)
 8009708:	2142      	movs	r1, #66	; 0x42
 800970a:	f000 f897 	bl	800983c <__assert_func>
 800970e:	490b      	ldr	r1, [pc, #44]	; (800973c <srand+0x50>)
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <srand+0x54>)
 8009712:	e9c0 1300 	strd	r1, r3, [r0]
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <srand+0x58>)
 8009718:	6083      	str	r3, [r0, #8]
 800971a:	230b      	movs	r3, #11
 800971c:	8183      	strh	r3, [r0, #12]
 800971e:	2100      	movs	r1, #0
 8009720:	2001      	movs	r0, #1
 8009722:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009726:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009728:	2200      	movs	r2, #0
 800972a:	611c      	str	r4, [r3, #16]
 800972c:	615a      	str	r2, [r3, #20]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20000060 	.word	0x20000060
 8009734:	0800af14 	.word	0x0800af14
 8009738:	0800af2b 	.word	0x0800af2b
 800973c:	abcd330e 	.word	0xabcd330e
 8009740:	e66d1234 	.word	0xe66d1234
 8009744:	0005deec 	.word	0x0005deec

08009748 <rand>:
 8009748:	4b17      	ldr	r3, [pc, #92]	; (80097a8 <rand+0x60>)
 800974a:	b510      	push	{r4, lr}
 800974c:	681c      	ldr	r4, [r3, #0]
 800974e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009750:	b9b3      	cbnz	r3, 8009780 <rand+0x38>
 8009752:	2018      	movs	r0, #24
 8009754:	f000 f8b4 	bl	80098c0 <malloc>
 8009758:	63a0      	str	r0, [r4, #56]	; 0x38
 800975a:	b928      	cbnz	r0, 8009768 <rand+0x20>
 800975c:	4602      	mov	r2, r0
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <rand+0x64>)
 8009760:	4813      	ldr	r0, [pc, #76]	; (80097b0 <rand+0x68>)
 8009762:	214e      	movs	r1, #78	; 0x4e
 8009764:	f000 f86a 	bl	800983c <__assert_func>
 8009768:	4a12      	ldr	r2, [pc, #72]	; (80097b4 <rand+0x6c>)
 800976a:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <rand+0x70>)
 800976c:	e9c0 2300 	strd	r2, r3, [r0]
 8009770:	4b12      	ldr	r3, [pc, #72]	; (80097bc <rand+0x74>)
 8009772:	6083      	str	r3, [r0, #8]
 8009774:	230b      	movs	r3, #11
 8009776:	8183      	strh	r3, [r0, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	2300      	movs	r3, #0
 800977c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009782:	480f      	ldr	r0, [pc, #60]	; (80097c0 <rand+0x78>)
 8009784:	690a      	ldr	r2, [r1, #16]
 8009786:	694b      	ldr	r3, [r1, #20]
 8009788:	4c0e      	ldr	r4, [pc, #56]	; (80097c4 <rand+0x7c>)
 800978a:	4350      	muls	r0, r2
 800978c:	fb04 0003 	mla	r0, r4, r3, r0
 8009790:	fba2 3404 	umull	r3, r4, r2, r4
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	4404      	add	r4, r0
 8009798:	f144 0000 	adc.w	r0, r4, #0
 800979c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80097a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	20000060 	.word	0x20000060
 80097ac:	0800af14 	.word	0x0800af14
 80097b0:	0800af2b 	.word	0x0800af2b
 80097b4:	abcd330e 	.word	0xabcd330e
 80097b8:	e66d1234 	.word	0xe66d1234
 80097bc:	0005deec 	.word	0x0005deec
 80097c0:	5851f42d 	.word	0x5851f42d
 80097c4:	4c957f2d 	.word	0x4c957f2d

080097c8 <siprintf>:
 80097c8:	b40e      	push	{r1, r2, r3}
 80097ca:	b500      	push	{lr}
 80097cc:	b09c      	sub	sp, #112	; 0x70
 80097ce:	ab1d      	add	r3, sp, #116	; 0x74
 80097d0:	9002      	str	r0, [sp, #8]
 80097d2:	9006      	str	r0, [sp, #24]
 80097d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097d8:	4809      	ldr	r0, [pc, #36]	; (8009800 <siprintf+0x38>)
 80097da:	9107      	str	r1, [sp, #28]
 80097dc:	9104      	str	r1, [sp, #16]
 80097de:	4909      	ldr	r1, [pc, #36]	; (8009804 <siprintf+0x3c>)
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	9105      	str	r1, [sp, #20]
 80097e6:	6800      	ldr	r0, [r0, #0]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	a902      	add	r1, sp, #8
 80097ec:	f000 f976 	bl	8009adc <_svfiprintf_r>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	b01c      	add	sp, #112	; 0x70
 80097f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097fc:	b003      	add	sp, #12
 80097fe:	4770      	bx	lr
 8009800:	20000060 	.word	0x20000060
 8009804:	ffff0208 	.word	0xffff0208

08009808 <time>:
 8009808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <time+0x30>)
 800980c:	2200      	movs	r2, #0
 800980e:	4669      	mov	r1, sp
 8009810:	4604      	mov	r4, r0
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	f000 f842 	bl	800989c <_gettimeofday_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	bfbe      	ittt	lt
 800981c:	f04f 32ff 	movlt.w	r2, #4294967295
 8009820:	f04f 33ff 	movlt.w	r3, #4294967295
 8009824:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800982c:	b10c      	cbz	r4, 8009832 <time+0x2a>
 800982e:	e9c4 0100 	strd	r0, r1, [r4]
 8009832:	b004      	add	sp, #16
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	20000060 	.word	0x20000060

0800983c <__assert_func>:
 800983c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800983e:	4614      	mov	r4, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <__assert_func+0x2c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4605      	mov	r5, r0
 8009848:	68d8      	ldr	r0, [r3, #12]
 800984a:	b14c      	cbz	r4, 8009860 <__assert_func+0x24>
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <__assert_func+0x30>)
 800984e:	9100      	str	r1, [sp, #0]
 8009850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009854:	4906      	ldr	r1, [pc, #24]	; (8009870 <__assert_func+0x34>)
 8009856:	462b      	mov	r3, r5
 8009858:	f000 f80e 	bl	8009878 <fiprintf>
 800985c:	f000 fdfc 	bl	800a458 <abort>
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <__assert_func+0x38>)
 8009862:	461c      	mov	r4, r3
 8009864:	e7f3      	b.n	800984e <__assert_func+0x12>
 8009866:	bf00      	nop
 8009868:	20000060 	.word	0x20000060
 800986c:	0800af8a 	.word	0x0800af8a
 8009870:	0800af97 	.word	0x0800af97
 8009874:	0800afc5 	.word	0x0800afc5

08009878 <fiprintf>:
 8009878:	b40e      	push	{r1, r2, r3}
 800987a:	b503      	push	{r0, r1, lr}
 800987c:	4601      	mov	r1, r0
 800987e:	ab03      	add	r3, sp, #12
 8009880:	4805      	ldr	r0, [pc, #20]	; (8009898 <fiprintf+0x20>)
 8009882:	f853 2b04 	ldr.w	r2, [r3], #4
 8009886:	6800      	ldr	r0, [r0, #0]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	f000 fa51 	bl	8009d30 <_vfiprintf_r>
 800988e:	b002      	add	sp, #8
 8009890:	f85d eb04 	ldr.w	lr, [sp], #4
 8009894:	b003      	add	sp, #12
 8009896:	4770      	bx	lr
 8009898:	20000060 	.word	0x20000060

0800989c <_gettimeofday_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d07      	ldr	r5, [pc, #28]	; (80098bc <_gettimeofday_r+0x20>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	f001 fa35 	bl	800ad18 <_gettimeofday>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d102      	bne.n	80098b8 <_gettimeofday_r+0x1c>
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	b103      	cbz	r3, 80098b8 <_gettimeofday_r+0x1c>
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	bf00      	nop
 80098bc:	20000980 	.word	0x20000980

080098c0 <malloc>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <malloc+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f000 b853 	b.w	8009970 <_malloc_r>
 80098ca:	bf00      	nop
 80098cc:	20000060 	.word	0x20000060

080098d0 <_free_r>:
 80098d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098d2:	2900      	cmp	r1, #0
 80098d4:	d048      	beq.n	8009968 <_free_r+0x98>
 80098d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098da:	9001      	str	r0, [sp, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f1a1 0404 	sub.w	r4, r1, #4
 80098e2:	bfb8      	it	lt
 80098e4:	18e4      	addlt	r4, r4, r3
 80098e6:	f001 f805 	bl	800a8f4 <__malloc_lock>
 80098ea:	4a20      	ldr	r2, [pc, #128]	; (800996c <_free_r+0x9c>)
 80098ec:	9801      	ldr	r0, [sp, #4]
 80098ee:	6813      	ldr	r3, [r2, #0]
 80098f0:	4615      	mov	r5, r2
 80098f2:	b933      	cbnz	r3, 8009902 <_free_r+0x32>
 80098f4:	6063      	str	r3, [r4, #4]
 80098f6:	6014      	str	r4, [r2, #0]
 80098f8:	b003      	add	sp, #12
 80098fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098fe:	f000 bfff 	b.w	800a900 <__malloc_unlock>
 8009902:	42a3      	cmp	r3, r4
 8009904:	d90b      	bls.n	800991e <_free_r+0x4e>
 8009906:	6821      	ldr	r1, [r4, #0]
 8009908:	1862      	adds	r2, r4, r1
 800990a:	4293      	cmp	r3, r2
 800990c:	bf04      	itt	eq
 800990e:	681a      	ldreq	r2, [r3, #0]
 8009910:	685b      	ldreq	r3, [r3, #4]
 8009912:	6063      	str	r3, [r4, #4]
 8009914:	bf04      	itt	eq
 8009916:	1852      	addeq	r2, r2, r1
 8009918:	6022      	streq	r2, [r4, #0]
 800991a:	602c      	str	r4, [r5, #0]
 800991c:	e7ec      	b.n	80098f8 <_free_r+0x28>
 800991e:	461a      	mov	r2, r3
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	b10b      	cbz	r3, 8009928 <_free_r+0x58>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d9fa      	bls.n	800991e <_free_r+0x4e>
 8009928:	6811      	ldr	r1, [r2, #0]
 800992a:	1855      	adds	r5, r2, r1
 800992c:	42a5      	cmp	r5, r4
 800992e:	d10b      	bne.n	8009948 <_free_r+0x78>
 8009930:	6824      	ldr	r4, [r4, #0]
 8009932:	4421      	add	r1, r4
 8009934:	1854      	adds	r4, r2, r1
 8009936:	42a3      	cmp	r3, r4
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	d1dd      	bne.n	80098f8 <_free_r+0x28>
 800993c:	681c      	ldr	r4, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	6053      	str	r3, [r2, #4]
 8009942:	4421      	add	r1, r4
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	e7d7      	b.n	80098f8 <_free_r+0x28>
 8009948:	d902      	bls.n	8009950 <_free_r+0x80>
 800994a:	230c      	movs	r3, #12
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	e7d3      	b.n	80098f8 <_free_r+0x28>
 8009950:	6825      	ldr	r5, [r4, #0]
 8009952:	1961      	adds	r1, r4, r5
 8009954:	428b      	cmp	r3, r1
 8009956:	bf04      	itt	eq
 8009958:	6819      	ldreq	r1, [r3, #0]
 800995a:	685b      	ldreq	r3, [r3, #4]
 800995c:	6063      	str	r3, [r4, #4]
 800995e:	bf04      	itt	eq
 8009960:	1949      	addeq	r1, r1, r5
 8009962:	6021      	streq	r1, [r4, #0]
 8009964:	6054      	str	r4, [r2, #4]
 8009966:	e7c7      	b.n	80098f8 <_free_r+0x28>
 8009968:	b003      	add	sp, #12
 800996a:	bd30      	pop	{r4, r5, pc}
 800996c:	200000f0 	.word	0x200000f0

08009970 <_malloc_r>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	1ccd      	adds	r5, r1, #3
 8009974:	f025 0503 	bic.w	r5, r5, #3
 8009978:	3508      	adds	r5, #8
 800997a:	2d0c      	cmp	r5, #12
 800997c:	bf38      	it	cc
 800997e:	250c      	movcc	r5, #12
 8009980:	2d00      	cmp	r5, #0
 8009982:	4606      	mov	r6, r0
 8009984:	db01      	blt.n	800998a <_malloc_r+0x1a>
 8009986:	42a9      	cmp	r1, r5
 8009988:	d903      	bls.n	8009992 <_malloc_r+0x22>
 800998a:	230c      	movs	r3, #12
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	2000      	movs	r0, #0
 8009990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009992:	f000 ffaf 	bl	800a8f4 <__malloc_lock>
 8009996:	4921      	ldr	r1, [pc, #132]	; (8009a1c <_malloc_r+0xac>)
 8009998:	680a      	ldr	r2, [r1, #0]
 800999a:	4614      	mov	r4, r2
 800999c:	b99c      	cbnz	r4, 80099c6 <_malloc_r+0x56>
 800999e:	4f20      	ldr	r7, [pc, #128]	; (8009a20 <_malloc_r+0xb0>)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	b923      	cbnz	r3, 80099ae <_malloc_r+0x3e>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 fc86 	bl	800a2b8 <_sbrk_r>
 80099ac:	6038      	str	r0, [r7, #0]
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 fc81 	bl	800a2b8 <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d123      	bne.n	8009a02 <_malloc_r+0x92>
 80099ba:	230c      	movs	r3, #12
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	4630      	mov	r0, r6
 80099c0:	f000 ff9e 	bl	800a900 <__malloc_unlock>
 80099c4:	e7e3      	b.n	800998e <_malloc_r+0x1e>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	1b5b      	subs	r3, r3, r5
 80099ca:	d417      	bmi.n	80099fc <_malloc_r+0x8c>
 80099cc:	2b0b      	cmp	r3, #11
 80099ce:	d903      	bls.n	80099d8 <_malloc_r+0x68>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	441c      	add	r4, r3
 80099d4:	6025      	str	r5, [r4, #0]
 80099d6:	e004      	b.n	80099e2 <_malloc_r+0x72>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	42a2      	cmp	r2, r4
 80099dc:	bf0c      	ite	eq
 80099de:	600b      	streq	r3, [r1, #0]
 80099e0:	6053      	strne	r3, [r2, #4]
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 ff8c 	bl	800a900 <__malloc_unlock>
 80099e8:	f104 000b 	add.w	r0, r4, #11
 80099ec:	1d23      	adds	r3, r4, #4
 80099ee:	f020 0007 	bic.w	r0, r0, #7
 80099f2:	1ac2      	subs	r2, r0, r3
 80099f4:	d0cc      	beq.n	8009990 <_malloc_r+0x20>
 80099f6:	1a1b      	subs	r3, r3, r0
 80099f8:	50a3      	str	r3, [r4, r2]
 80099fa:	e7c9      	b.n	8009990 <_malloc_r+0x20>
 80099fc:	4622      	mov	r2, r4
 80099fe:	6864      	ldr	r4, [r4, #4]
 8009a00:	e7cc      	b.n	800999c <_malloc_r+0x2c>
 8009a02:	1cc4      	adds	r4, r0, #3
 8009a04:	f024 0403 	bic.w	r4, r4, #3
 8009a08:	42a0      	cmp	r0, r4
 8009a0a:	d0e3      	beq.n	80099d4 <_malloc_r+0x64>
 8009a0c:	1a21      	subs	r1, r4, r0
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 fc52 	bl	800a2b8 <_sbrk_r>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d1dd      	bne.n	80099d4 <_malloc_r+0x64>
 8009a18:	e7cf      	b.n	80099ba <_malloc_r+0x4a>
 8009a1a:	bf00      	nop
 8009a1c:	200000f0 	.word	0x200000f0
 8009a20:	200000f4 	.word	0x200000f4

08009a24 <__ssputs_r>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	688e      	ldr	r6, [r1, #8]
 8009a2a:	429e      	cmp	r6, r3
 8009a2c:	4682      	mov	sl, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	4690      	mov	r8, r2
 8009a32:	461f      	mov	r7, r3
 8009a34:	d838      	bhi.n	8009aa8 <__ssputs_r+0x84>
 8009a36:	898a      	ldrh	r2, [r1, #12]
 8009a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a3c:	d032      	beq.n	8009aa4 <__ssputs_r+0x80>
 8009a3e:	6825      	ldr	r5, [r4, #0]
 8009a40:	6909      	ldr	r1, [r1, #16]
 8009a42:	eba5 0901 	sub.w	r9, r5, r1
 8009a46:	6965      	ldr	r5, [r4, #20]
 8009a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a50:	3301      	adds	r3, #1
 8009a52:	444b      	add	r3, r9
 8009a54:	106d      	asrs	r5, r5, #1
 8009a56:	429d      	cmp	r5, r3
 8009a58:	bf38      	it	cc
 8009a5a:	461d      	movcc	r5, r3
 8009a5c:	0553      	lsls	r3, r2, #21
 8009a5e:	d531      	bpl.n	8009ac4 <__ssputs_r+0xa0>
 8009a60:	4629      	mov	r1, r5
 8009a62:	f7ff ff85 	bl	8009970 <_malloc_r>
 8009a66:	4606      	mov	r6, r0
 8009a68:	b950      	cbnz	r0, 8009a80 <__ssputs_r+0x5c>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	f8ca 3000 	str.w	r3, [sl]
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a80:	6921      	ldr	r1, [r4, #16]
 8009a82:	464a      	mov	r2, r9
 8009a84:	f000 ff0e 	bl	800a8a4 <memcpy>
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	6126      	str	r6, [r4, #16]
 8009a96:	6165      	str	r5, [r4, #20]
 8009a98:	444e      	add	r6, r9
 8009a9a:	eba5 0509 	sub.w	r5, r5, r9
 8009a9e:	6026      	str	r6, [r4, #0]
 8009aa0:	60a5      	str	r5, [r4, #8]
 8009aa2:	463e      	mov	r6, r7
 8009aa4:	42be      	cmp	r6, r7
 8009aa6:	d900      	bls.n	8009aaa <__ssputs_r+0x86>
 8009aa8:	463e      	mov	r6, r7
 8009aaa:	4632      	mov	r2, r6
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	4641      	mov	r1, r8
 8009ab0:	f000 ff06 	bl	800a8c0 <memmove>
 8009ab4:	68a3      	ldr	r3, [r4, #8]
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	1b9b      	subs	r3, r3, r6
 8009aba:	4432      	add	r2, r6
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e7db      	b.n	8009a7c <__ssputs_r+0x58>
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	f000 ff21 	bl	800a90c <_realloc_r>
 8009aca:	4606      	mov	r6, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1e1      	bne.n	8009a94 <__ssputs_r+0x70>
 8009ad0:	6921      	ldr	r1, [r4, #16]
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	f7ff fefc 	bl	80098d0 <_free_r>
 8009ad8:	e7c7      	b.n	8009a6a <__ssputs_r+0x46>
	...

08009adc <_svfiprintf_r>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	4698      	mov	r8, r3
 8009ae2:	898b      	ldrh	r3, [r1, #12]
 8009ae4:	061b      	lsls	r3, r3, #24
 8009ae6:	b09d      	sub	sp, #116	; 0x74
 8009ae8:	4607      	mov	r7, r0
 8009aea:	460d      	mov	r5, r1
 8009aec:	4614      	mov	r4, r2
 8009aee:	d50e      	bpl.n	8009b0e <_svfiprintf_r+0x32>
 8009af0:	690b      	ldr	r3, [r1, #16]
 8009af2:	b963      	cbnz	r3, 8009b0e <_svfiprintf_r+0x32>
 8009af4:	2140      	movs	r1, #64	; 0x40
 8009af6:	f7ff ff3b 	bl	8009970 <_malloc_r>
 8009afa:	6028      	str	r0, [r5, #0]
 8009afc:	6128      	str	r0, [r5, #16]
 8009afe:	b920      	cbnz	r0, 8009b0a <_svfiprintf_r+0x2e>
 8009b00:	230c      	movs	r3, #12
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	e0d1      	b.n	8009cae <_svfiprintf_r+0x1d2>
 8009b0a:	2340      	movs	r3, #64	; 0x40
 8009b0c:	616b      	str	r3, [r5, #20]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	2320      	movs	r3, #32
 8009b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b1c:	2330      	movs	r3, #48	; 0x30
 8009b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cc8 <_svfiprintf_r+0x1ec>
 8009b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b26:	f04f 0901 	mov.w	r9, #1
 8009b2a:	4623      	mov	r3, r4
 8009b2c:	469a      	mov	sl, r3
 8009b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b32:	b10a      	cbz	r2, 8009b38 <_svfiprintf_r+0x5c>
 8009b34:	2a25      	cmp	r2, #37	; 0x25
 8009b36:	d1f9      	bne.n	8009b2c <_svfiprintf_r+0x50>
 8009b38:	ebba 0b04 	subs.w	fp, sl, r4
 8009b3c:	d00b      	beq.n	8009b56 <_svfiprintf_r+0x7a>
 8009b3e:	465b      	mov	r3, fp
 8009b40:	4622      	mov	r2, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff ff6d 	bl	8009a24 <__ssputs_r>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f000 80aa 	beq.w	8009ca4 <_svfiprintf_r+0x1c8>
 8009b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b52:	445a      	add	r2, fp
 8009b54:	9209      	str	r2, [sp, #36]	; 0x24
 8009b56:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 80a2 	beq.w	8009ca4 <_svfiprintf_r+0x1c8>
 8009b60:	2300      	movs	r3, #0
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b6a:	f10a 0a01 	add.w	sl, sl, #1
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	9307      	str	r3, [sp, #28]
 8009b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b76:	931a      	str	r3, [sp, #104]	; 0x68
 8009b78:	4654      	mov	r4, sl
 8009b7a:	2205      	movs	r2, #5
 8009b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b80:	4851      	ldr	r0, [pc, #324]	; (8009cc8 <_svfiprintf_r+0x1ec>)
 8009b82:	f7f6 fb2d 	bl	80001e0 <memchr>
 8009b86:	9a04      	ldr	r2, [sp, #16]
 8009b88:	b9d8      	cbnz	r0, 8009bc2 <_svfiprintf_r+0xe6>
 8009b8a:	06d0      	lsls	r0, r2, #27
 8009b8c:	bf44      	itt	mi
 8009b8e:	2320      	movmi	r3, #32
 8009b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b94:	0711      	lsls	r1, r2, #28
 8009b96:	bf44      	itt	mi
 8009b98:	232b      	movmi	r3, #43	; 0x2b
 8009b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba4:	d015      	beq.n	8009bd2 <_svfiprintf_r+0xf6>
 8009ba6:	9a07      	ldr	r2, [sp, #28]
 8009ba8:	4654      	mov	r4, sl
 8009baa:	2000      	movs	r0, #0
 8009bac:	f04f 0c0a 	mov.w	ip, #10
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bb6:	3b30      	subs	r3, #48	; 0x30
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d94e      	bls.n	8009c5a <_svfiprintf_r+0x17e>
 8009bbc:	b1b0      	cbz	r0, 8009bec <_svfiprintf_r+0x110>
 8009bbe:	9207      	str	r2, [sp, #28]
 8009bc0:	e014      	b.n	8009bec <_svfiprintf_r+0x110>
 8009bc2:	eba0 0308 	sub.w	r3, r0, r8
 8009bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	46a2      	mov	sl, r4
 8009bd0:	e7d2      	b.n	8009b78 <_svfiprintf_r+0x9c>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	1d19      	adds	r1, r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	9103      	str	r1, [sp, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	bfbb      	ittet	lt
 8009bde:	425b      	neglt	r3, r3
 8009be0:	f042 0202 	orrlt.w	r2, r2, #2
 8009be4:	9307      	strge	r3, [sp, #28]
 8009be6:	9307      	strlt	r3, [sp, #28]
 8009be8:	bfb8      	it	lt
 8009bea:	9204      	strlt	r2, [sp, #16]
 8009bec:	7823      	ldrb	r3, [r4, #0]
 8009bee:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf0:	d10c      	bne.n	8009c0c <_svfiprintf_r+0x130>
 8009bf2:	7863      	ldrb	r3, [r4, #1]
 8009bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf6:	d135      	bne.n	8009c64 <_svfiprintf_r+0x188>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	1d1a      	adds	r2, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	9203      	str	r2, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfb8      	it	lt
 8009c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c08:	3402      	adds	r4, #2
 8009c0a:	9305      	str	r3, [sp, #20]
 8009c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cd8 <_svfiprintf_r+0x1fc>
 8009c10:	7821      	ldrb	r1, [r4, #0]
 8009c12:	2203      	movs	r2, #3
 8009c14:	4650      	mov	r0, sl
 8009c16:	f7f6 fae3 	bl	80001e0 <memchr>
 8009c1a:	b140      	cbz	r0, 8009c2e <_svfiprintf_r+0x152>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	eba0 000a 	sub.w	r0, r0, sl
 8009c22:	fa03 f000 	lsl.w	r0, r3, r0
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	4303      	orrs	r3, r0
 8009c2a:	3401      	adds	r4, #1
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c32:	4826      	ldr	r0, [pc, #152]	; (8009ccc <_svfiprintf_r+0x1f0>)
 8009c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c38:	2206      	movs	r2, #6
 8009c3a:	f7f6 fad1 	bl	80001e0 <memchr>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d038      	beq.n	8009cb4 <_svfiprintf_r+0x1d8>
 8009c42:	4b23      	ldr	r3, [pc, #140]	; (8009cd0 <_svfiprintf_r+0x1f4>)
 8009c44:	bb1b      	cbnz	r3, 8009c8e <_svfiprintf_r+0x1b2>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	3307      	adds	r3, #7
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	3308      	adds	r3, #8
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c54:	4433      	add	r3, r6
 8009c56:	9309      	str	r3, [sp, #36]	; 0x24
 8009c58:	e767      	b.n	8009b2a <_svfiprintf_r+0x4e>
 8009c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c5e:	460c      	mov	r4, r1
 8009c60:	2001      	movs	r0, #1
 8009c62:	e7a5      	b.n	8009bb0 <_svfiprintf_r+0xd4>
 8009c64:	2300      	movs	r3, #0
 8009c66:	3401      	adds	r4, #1
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	f04f 0c0a 	mov.w	ip, #10
 8009c70:	4620      	mov	r0, r4
 8009c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c76:	3a30      	subs	r2, #48	; 0x30
 8009c78:	2a09      	cmp	r2, #9
 8009c7a:	d903      	bls.n	8009c84 <_svfiprintf_r+0x1a8>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0c5      	beq.n	8009c0c <_svfiprintf_r+0x130>
 8009c80:	9105      	str	r1, [sp, #20]
 8009c82:	e7c3      	b.n	8009c0c <_svfiprintf_r+0x130>
 8009c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c88:	4604      	mov	r4, r0
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e7f0      	b.n	8009c70 <_svfiprintf_r+0x194>
 8009c8e:	ab03      	add	r3, sp, #12
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	462a      	mov	r2, r5
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <_svfiprintf_r+0x1f8>)
 8009c96:	a904      	add	r1, sp, #16
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f3af 8000 	nop.w
 8009c9e:	1c42      	adds	r2, r0, #1
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	d1d6      	bne.n	8009c52 <_svfiprintf_r+0x176>
 8009ca4:	89ab      	ldrh	r3, [r5, #12]
 8009ca6:	065b      	lsls	r3, r3, #25
 8009ca8:	f53f af2c 	bmi.w	8009b04 <_svfiprintf_r+0x28>
 8009cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cae:	b01d      	add	sp, #116	; 0x74
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	462a      	mov	r2, r5
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <_svfiprintf_r+0x1f8>)
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f000 f9d4 	bl	800a06c <_printf_i>
 8009cc4:	e7eb      	b.n	8009c9e <_svfiprintf_r+0x1c2>
 8009cc6:	bf00      	nop
 8009cc8:	0800afc6 	.word	0x0800afc6
 8009ccc:	0800afd0 	.word	0x0800afd0
 8009cd0:	00000000 	.word	0x00000000
 8009cd4:	08009a25 	.word	0x08009a25
 8009cd8:	0800afcc 	.word	0x0800afcc

08009cdc <__sfputc_r>:
 8009cdc:	6893      	ldr	r3, [r2, #8]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	b410      	push	{r4}
 8009ce4:	6093      	str	r3, [r2, #8]
 8009ce6:	da08      	bge.n	8009cfa <__sfputc_r+0x1e>
 8009ce8:	6994      	ldr	r4, [r2, #24]
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	db01      	blt.n	8009cf2 <__sfputc_r+0x16>
 8009cee:	290a      	cmp	r1, #10
 8009cf0:	d103      	bne.n	8009cfa <__sfputc_r+0x1e>
 8009cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cf6:	f000 baef 	b.w	800a2d8 <__swbuf_r>
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	1c58      	adds	r0, r3, #1
 8009cfe:	6010      	str	r0, [r2, #0]
 8009d00:	7019      	strb	r1, [r3, #0]
 8009d02:	4608      	mov	r0, r1
 8009d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <__sfputs_r>:
 8009d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	18d5      	adds	r5, r2, r3
 8009d14:	42ac      	cmp	r4, r5
 8009d16:	d101      	bne.n	8009d1c <__sfputs_r+0x12>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e007      	b.n	8009d2c <__sfputs_r+0x22>
 8009d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d20:	463a      	mov	r2, r7
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ffda 	bl	8009cdc <__sfputc_r>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d1f3      	bne.n	8009d14 <__sfputs_r+0xa>
 8009d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d30 <_vfiprintf_r>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	460d      	mov	r5, r1
 8009d36:	b09d      	sub	sp, #116	; 0x74
 8009d38:	4614      	mov	r4, r2
 8009d3a:	4698      	mov	r8, r3
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	b118      	cbz	r0, 8009d48 <_vfiprintf_r+0x18>
 8009d40:	6983      	ldr	r3, [r0, #24]
 8009d42:	b90b      	cbnz	r3, 8009d48 <_vfiprintf_r+0x18>
 8009d44:	f000 fcaa 	bl	800a69c <__sinit>
 8009d48:	4b89      	ldr	r3, [pc, #548]	; (8009f70 <_vfiprintf_r+0x240>)
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	d11b      	bne.n	8009d86 <_vfiprintf_r+0x56>
 8009d4e:	6875      	ldr	r5, [r6, #4]
 8009d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d52:	07d9      	lsls	r1, r3, #31
 8009d54:	d405      	bmi.n	8009d62 <_vfiprintf_r+0x32>
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	059a      	lsls	r2, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_vfiprintf_r+0x32>
 8009d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5e:	f000 fd3b 	bl	800a7d8 <__retarget_lock_acquire_recursive>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	071b      	lsls	r3, r3, #28
 8009d66:	d501      	bpl.n	8009d6c <_vfiprintf_r+0x3c>
 8009d68:	692b      	ldr	r3, [r5, #16]
 8009d6a:	b9eb      	cbnz	r3, 8009da8 <_vfiprintf_r+0x78>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f000 fb04 	bl	800a37c <__swsetup_r>
 8009d74:	b1c0      	cbz	r0, 8009da8 <_vfiprintf_r+0x78>
 8009d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d78:	07dc      	lsls	r4, r3, #31
 8009d7a:	d50e      	bpl.n	8009d9a <_vfiprintf_r+0x6a>
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	b01d      	add	sp, #116	; 0x74
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d86:	4b7b      	ldr	r3, [pc, #492]	; (8009f74 <_vfiprintf_r+0x244>)
 8009d88:	429d      	cmp	r5, r3
 8009d8a:	d101      	bne.n	8009d90 <_vfiprintf_r+0x60>
 8009d8c:	68b5      	ldr	r5, [r6, #8]
 8009d8e:	e7df      	b.n	8009d50 <_vfiprintf_r+0x20>
 8009d90:	4b79      	ldr	r3, [pc, #484]	; (8009f78 <_vfiprintf_r+0x248>)
 8009d92:	429d      	cmp	r5, r3
 8009d94:	bf08      	it	eq
 8009d96:	68f5      	ldreq	r5, [r6, #12]
 8009d98:	e7da      	b.n	8009d50 <_vfiprintf_r+0x20>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	0598      	lsls	r0, r3, #22
 8009d9e:	d4ed      	bmi.n	8009d7c <_vfiprintf_r+0x4c>
 8009da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da2:	f000 fd1a 	bl	800a7da <__retarget_lock_release_recursive>
 8009da6:	e7e9      	b.n	8009d7c <_vfiprintf_r+0x4c>
 8009da8:	2300      	movs	r3, #0
 8009daa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dac:	2320      	movs	r3, #32
 8009dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db6:	2330      	movs	r3, #48	; 0x30
 8009db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f7c <_vfiprintf_r+0x24c>
 8009dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc0:	f04f 0901 	mov.w	r9, #1
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	469a      	mov	sl, r3
 8009dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dcc:	b10a      	cbz	r2, 8009dd2 <_vfiprintf_r+0xa2>
 8009dce:	2a25      	cmp	r2, #37	; 0x25
 8009dd0:	d1f9      	bne.n	8009dc6 <_vfiprintf_r+0x96>
 8009dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd6:	d00b      	beq.n	8009df0 <_vfiprintf_r+0xc0>
 8009dd8:	465b      	mov	r3, fp
 8009dda:	4622      	mov	r2, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7ff ff93 	bl	8009d0a <__sfputs_r>
 8009de4:	3001      	adds	r0, #1
 8009de6:	f000 80aa 	beq.w	8009f3e <_vfiprintf_r+0x20e>
 8009dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dec:	445a      	add	r2, fp
 8009dee:	9209      	str	r2, [sp, #36]	; 0x24
 8009df0:	f89a 3000 	ldrb.w	r3, [sl]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 80a2 	beq.w	8009f3e <_vfiprintf_r+0x20e>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e04:	f10a 0a01 	add.w	sl, sl, #1
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	9307      	str	r3, [sp, #28]
 8009e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e10:	931a      	str	r3, [sp, #104]	; 0x68
 8009e12:	4654      	mov	r4, sl
 8009e14:	2205      	movs	r2, #5
 8009e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1a:	4858      	ldr	r0, [pc, #352]	; (8009f7c <_vfiprintf_r+0x24c>)
 8009e1c:	f7f6 f9e0 	bl	80001e0 <memchr>
 8009e20:	9a04      	ldr	r2, [sp, #16]
 8009e22:	b9d8      	cbnz	r0, 8009e5c <_vfiprintf_r+0x12c>
 8009e24:	06d1      	lsls	r1, r2, #27
 8009e26:	bf44      	itt	mi
 8009e28:	2320      	movmi	r3, #32
 8009e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2e:	0713      	lsls	r3, r2, #28
 8009e30:	bf44      	itt	mi
 8009e32:	232b      	movmi	r3, #43	; 0x2b
 8009e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e38:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3e:	d015      	beq.n	8009e6c <_vfiprintf_r+0x13c>
 8009e40:	9a07      	ldr	r2, [sp, #28]
 8009e42:	4654      	mov	r4, sl
 8009e44:	2000      	movs	r0, #0
 8009e46:	f04f 0c0a 	mov.w	ip, #10
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e50:	3b30      	subs	r3, #48	; 0x30
 8009e52:	2b09      	cmp	r3, #9
 8009e54:	d94e      	bls.n	8009ef4 <_vfiprintf_r+0x1c4>
 8009e56:	b1b0      	cbz	r0, 8009e86 <_vfiprintf_r+0x156>
 8009e58:	9207      	str	r2, [sp, #28]
 8009e5a:	e014      	b.n	8009e86 <_vfiprintf_r+0x156>
 8009e5c:	eba0 0308 	sub.w	r3, r0, r8
 8009e60:	fa09 f303 	lsl.w	r3, r9, r3
 8009e64:	4313      	orrs	r3, r2
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	46a2      	mov	sl, r4
 8009e6a:	e7d2      	b.n	8009e12 <_vfiprintf_r+0xe2>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	1d19      	adds	r1, r3, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	9103      	str	r1, [sp, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfbb      	ittet	lt
 8009e78:	425b      	neglt	r3, r3
 8009e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e7e:	9307      	strge	r3, [sp, #28]
 8009e80:	9307      	strlt	r3, [sp, #28]
 8009e82:	bfb8      	it	lt
 8009e84:	9204      	strlt	r2, [sp, #16]
 8009e86:	7823      	ldrb	r3, [r4, #0]
 8009e88:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8a:	d10c      	bne.n	8009ea6 <_vfiprintf_r+0x176>
 8009e8c:	7863      	ldrb	r3, [r4, #1]
 8009e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e90:	d135      	bne.n	8009efe <_vfiprintf_r+0x1ce>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	9203      	str	r2, [sp, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bfb8      	it	lt
 8009e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea2:	3402      	adds	r4, #2
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f8c <_vfiprintf_r+0x25c>
 8009eaa:	7821      	ldrb	r1, [r4, #0]
 8009eac:	2203      	movs	r2, #3
 8009eae:	4650      	mov	r0, sl
 8009eb0:	f7f6 f996 	bl	80001e0 <memchr>
 8009eb4:	b140      	cbz	r0, 8009ec8 <_vfiprintf_r+0x198>
 8009eb6:	2340      	movs	r3, #64	; 0x40
 8009eb8:	eba0 000a 	sub.w	r0, r0, sl
 8009ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	4303      	orrs	r3, r0
 8009ec4:	3401      	adds	r4, #1
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ecc:	482c      	ldr	r0, [pc, #176]	; (8009f80 <_vfiprintf_r+0x250>)
 8009ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	f7f6 f984 	bl	80001e0 <memchr>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d03f      	beq.n	8009f5c <_vfiprintf_r+0x22c>
 8009edc:	4b29      	ldr	r3, [pc, #164]	; (8009f84 <_vfiprintf_r+0x254>)
 8009ede:	bb1b      	cbnz	r3, 8009f28 <_vfiprintf_r+0x1f8>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	f023 0307 	bic.w	r3, r3, #7
 8009ee8:	3308      	adds	r3, #8
 8009eea:	9303      	str	r3, [sp, #12]
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	443b      	add	r3, r7
 8009ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef2:	e767      	b.n	8009dc4 <_vfiprintf_r+0x94>
 8009ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	e7a5      	b.n	8009e4a <_vfiprintf_r+0x11a>
 8009efe:	2300      	movs	r3, #0
 8009f00:	3401      	adds	r4, #1
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	4619      	mov	r1, r3
 8009f06:	f04f 0c0a 	mov.w	ip, #10
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f10:	3a30      	subs	r2, #48	; 0x30
 8009f12:	2a09      	cmp	r2, #9
 8009f14:	d903      	bls.n	8009f1e <_vfiprintf_r+0x1ee>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0c5      	beq.n	8009ea6 <_vfiprintf_r+0x176>
 8009f1a:	9105      	str	r1, [sp, #20]
 8009f1c:	e7c3      	b.n	8009ea6 <_vfiprintf_r+0x176>
 8009f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	e7f0      	b.n	8009f0a <_vfiprintf_r+0x1da>
 8009f28:	ab03      	add	r3, sp, #12
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	4b16      	ldr	r3, [pc, #88]	; (8009f88 <_vfiprintf_r+0x258>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	4630      	mov	r0, r6
 8009f34:	f3af 8000 	nop.w
 8009f38:	4607      	mov	r7, r0
 8009f3a:	1c78      	adds	r0, r7, #1
 8009f3c:	d1d6      	bne.n	8009eec <_vfiprintf_r+0x1bc>
 8009f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f40:	07d9      	lsls	r1, r3, #31
 8009f42:	d405      	bmi.n	8009f50 <_vfiprintf_r+0x220>
 8009f44:	89ab      	ldrh	r3, [r5, #12]
 8009f46:	059a      	lsls	r2, r3, #22
 8009f48:	d402      	bmi.n	8009f50 <_vfiprintf_r+0x220>
 8009f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4c:	f000 fc45 	bl	800a7da <__retarget_lock_release_recursive>
 8009f50:	89ab      	ldrh	r3, [r5, #12]
 8009f52:	065b      	lsls	r3, r3, #25
 8009f54:	f53f af12 	bmi.w	8009d7c <_vfiprintf_r+0x4c>
 8009f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5a:	e711      	b.n	8009d80 <_vfiprintf_r+0x50>
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	462a      	mov	r2, r5
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <_vfiprintf_r+0x258>)
 8009f64:	a904      	add	r1, sp, #16
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f880 	bl	800a06c <_printf_i>
 8009f6c:	e7e4      	b.n	8009f38 <_vfiprintf_r+0x208>
 8009f6e:	bf00      	nop
 8009f70:	0800b01c 	.word	0x0800b01c
 8009f74:	0800b03c 	.word	0x0800b03c
 8009f78:	0800affc 	.word	0x0800affc
 8009f7c:	0800afc6 	.word	0x0800afc6
 8009f80:	0800afd0 	.word	0x0800afd0
 8009f84:	00000000 	.word	0x00000000
 8009f88:	08009d0b 	.word	0x08009d0b
 8009f8c:	0800afcc 	.word	0x0800afcc

08009f90 <_printf_common>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	4616      	mov	r6, r2
 8009f96:	4699      	mov	r9, r3
 8009f98:	688a      	ldr	r2, [r1, #8]
 8009f9a:	690b      	ldr	r3, [r1, #16]
 8009f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	bfb8      	it	lt
 8009fa4:	4613      	movlt	r3, r2
 8009fa6:	6033      	str	r3, [r6, #0]
 8009fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fac:	4607      	mov	r7, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	b10a      	cbz	r2, 8009fb6 <_printf_common+0x26>
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	6033      	str	r3, [r6, #0]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	0699      	lsls	r1, r3, #26
 8009fba:	bf42      	ittt	mi
 8009fbc:	6833      	ldrmi	r3, [r6, #0]
 8009fbe:	3302      	addmi	r3, #2
 8009fc0:	6033      	strmi	r3, [r6, #0]
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	f015 0506 	ands.w	r5, r5, #6
 8009fc8:	d106      	bne.n	8009fd8 <_printf_common+0x48>
 8009fca:	f104 0a19 	add.w	sl, r4, #25
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	6832      	ldr	r2, [r6, #0]
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dc26      	bgt.n	800a026 <_printf_common+0x96>
 8009fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fdc:	1e13      	subs	r3, r2, #0
 8009fde:	6822      	ldr	r2, [r4, #0]
 8009fe0:	bf18      	it	ne
 8009fe2:	2301      	movne	r3, #1
 8009fe4:	0692      	lsls	r2, r2, #26
 8009fe6:	d42b      	bmi.n	800a040 <_printf_common+0xb0>
 8009fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fec:	4649      	mov	r1, r9
 8009fee:	4638      	mov	r0, r7
 8009ff0:	47c0      	blx	r8
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d01e      	beq.n	800a034 <_printf_common+0xa4>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	68e5      	ldr	r5, [r4, #12]
 8009ffa:	6832      	ldr	r2, [r6, #0]
 8009ffc:	f003 0306 	and.w	r3, r3, #6
 800a000:	2b04      	cmp	r3, #4
 800a002:	bf08      	it	eq
 800a004:	1aad      	subeq	r5, r5, r2
 800a006:	68a3      	ldr	r3, [r4, #8]
 800a008:	6922      	ldr	r2, [r4, #16]
 800a00a:	bf0c      	ite	eq
 800a00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a010:	2500      	movne	r5, #0
 800a012:	4293      	cmp	r3, r2
 800a014:	bfc4      	itt	gt
 800a016:	1a9b      	subgt	r3, r3, r2
 800a018:	18ed      	addgt	r5, r5, r3
 800a01a:	2600      	movs	r6, #0
 800a01c:	341a      	adds	r4, #26
 800a01e:	42b5      	cmp	r5, r6
 800a020:	d11a      	bne.n	800a058 <_printf_common+0xc8>
 800a022:	2000      	movs	r0, #0
 800a024:	e008      	b.n	800a038 <_printf_common+0xa8>
 800a026:	2301      	movs	r3, #1
 800a028:	4652      	mov	r2, sl
 800a02a:	4649      	mov	r1, r9
 800a02c:	4638      	mov	r0, r7
 800a02e:	47c0      	blx	r8
 800a030:	3001      	adds	r0, #1
 800a032:	d103      	bne.n	800a03c <_printf_common+0xac>
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03c:	3501      	adds	r5, #1
 800a03e:	e7c6      	b.n	8009fce <_printf_common+0x3e>
 800a040:	18e1      	adds	r1, r4, r3
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	2030      	movs	r0, #48	; 0x30
 800a046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a04a:	4422      	add	r2, r4
 800a04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a054:	3302      	adds	r3, #2
 800a056:	e7c7      	b.n	8009fe8 <_printf_common+0x58>
 800a058:	2301      	movs	r3, #1
 800a05a:	4622      	mov	r2, r4
 800a05c:	4649      	mov	r1, r9
 800a05e:	4638      	mov	r0, r7
 800a060:	47c0      	blx	r8
 800a062:	3001      	adds	r0, #1
 800a064:	d0e6      	beq.n	800a034 <_printf_common+0xa4>
 800a066:	3601      	adds	r6, #1
 800a068:	e7d9      	b.n	800a01e <_printf_common+0x8e>
	...

0800a06c <_printf_i>:
 800a06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	460c      	mov	r4, r1
 800a072:	4691      	mov	r9, r2
 800a074:	7e27      	ldrb	r7, [r4, #24]
 800a076:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a078:	2f78      	cmp	r7, #120	; 0x78
 800a07a:	4680      	mov	r8, r0
 800a07c:	469a      	mov	sl, r3
 800a07e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a082:	d807      	bhi.n	800a094 <_printf_i+0x28>
 800a084:	2f62      	cmp	r7, #98	; 0x62
 800a086:	d80a      	bhi.n	800a09e <_printf_i+0x32>
 800a088:	2f00      	cmp	r7, #0
 800a08a:	f000 80d8 	beq.w	800a23e <_printf_i+0x1d2>
 800a08e:	2f58      	cmp	r7, #88	; 0x58
 800a090:	f000 80a3 	beq.w	800a1da <_printf_i+0x16e>
 800a094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a09c:	e03a      	b.n	800a114 <_printf_i+0xa8>
 800a09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0a2:	2b15      	cmp	r3, #21
 800a0a4:	d8f6      	bhi.n	800a094 <_printf_i+0x28>
 800a0a6:	a001      	add	r0, pc, #4	; (adr r0, 800a0ac <_printf_i+0x40>)
 800a0a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0ac:	0800a105 	.word	0x0800a105
 800a0b0:	0800a119 	.word	0x0800a119
 800a0b4:	0800a095 	.word	0x0800a095
 800a0b8:	0800a095 	.word	0x0800a095
 800a0bc:	0800a095 	.word	0x0800a095
 800a0c0:	0800a095 	.word	0x0800a095
 800a0c4:	0800a119 	.word	0x0800a119
 800a0c8:	0800a095 	.word	0x0800a095
 800a0cc:	0800a095 	.word	0x0800a095
 800a0d0:	0800a095 	.word	0x0800a095
 800a0d4:	0800a095 	.word	0x0800a095
 800a0d8:	0800a225 	.word	0x0800a225
 800a0dc:	0800a149 	.word	0x0800a149
 800a0e0:	0800a207 	.word	0x0800a207
 800a0e4:	0800a095 	.word	0x0800a095
 800a0e8:	0800a095 	.word	0x0800a095
 800a0ec:	0800a247 	.word	0x0800a247
 800a0f0:	0800a095 	.word	0x0800a095
 800a0f4:	0800a149 	.word	0x0800a149
 800a0f8:	0800a095 	.word	0x0800a095
 800a0fc:	0800a095 	.word	0x0800a095
 800a100:	0800a20f 	.word	0x0800a20f
 800a104:	680b      	ldr	r3, [r1, #0]
 800a106:	1d1a      	adds	r2, r3, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	600a      	str	r2, [r1, #0]
 800a10c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a114:	2301      	movs	r3, #1
 800a116:	e0a3      	b.n	800a260 <_printf_i+0x1f4>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	6808      	ldr	r0, [r1, #0]
 800a11c:	062e      	lsls	r6, r5, #24
 800a11e:	f100 0304 	add.w	r3, r0, #4
 800a122:	d50a      	bpl.n	800a13a <_printf_i+0xce>
 800a124:	6805      	ldr	r5, [r0, #0]
 800a126:	600b      	str	r3, [r1, #0]
 800a128:	2d00      	cmp	r5, #0
 800a12a:	da03      	bge.n	800a134 <_printf_i+0xc8>
 800a12c:	232d      	movs	r3, #45	; 0x2d
 800a12e:	426d      	negs	r5, r5
 800a130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a134:	485e      	ldr	r0, [pc, #376]	; (800a2b0 <_printf_i+0x244>)
 800a136:	230a      	movs	r3, #10
 800a138:	e019      	b.n	800a16e <_printf_i+0x102>
 800a13a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a13e:	6805      	ldr	r5, [r0, #0]
 800a140:	600b      	str	r3, [r1, #0]
 800a142:	bf18      	it	ne
 800a144:	b22d      	sxthne	r5, r5
 800a146:	e7ef      	b.n	800a128 <_printf_i+0xbc>
 800a148:	680b      	ldr	r3, [r1, #0]
 800a14a:	6825      	ldr	r5, [r4, #0]
 800a14c:	1d18      	adds	r0, r3, #4
 800a14e:	6008      	str	r0, [r1, #0]
 800a150:	0628      	lsls	r0, r5, #24
 800a152:	d501      	bpl.n	800a158 <_printf_i+0xec>
 800a154:	681d      	ldr	r5, [r3, #0]
 800a156:	e002      	b.n	800a15e <_printf_i+0xf2>
 800a158:	0669      	lsls	r1, r5, #25
 800a15a:	d5fb      	bpl.n	800a154 <_printf_i+0xe8>
 800a15c:	881d      	ldrh	r5, [r3, #0]
 800a15e:	4854      	ldr	r0, [pc, #336]	; (800a2b0 <_printf_i+0x244>)
 800a160:	2f6f      	cmp	r7, #111	; 0x6f
 800a162:	bf0c      	ite	eq
 800a164:	2308      	moveq	r3, #8
 800a166:	230a      	movne	r3, #10
 800a168:	2100      	movs	r1, #0
 800a16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a16e:	6866      	ldr	r6, [r4, #4]
 800a170:	60a6      	str	r6, [r4, #8]
 800a172:	2e00      	cmp	r6, #0
 800a174:	bfa2      	ittt	ge
 800a176:	6821      	ldrge	r1, [r4, #0]
 800a178:	f021 0104 	bicge.w	r1, r1, #4
 800a17c:	6021      	strge	r1, [r4, #0]
 800a17e:	b90d      	cbnz	r5, 800a184 <_printf_i+0x118>
 800a180:	2e00      	cmp	r6, #0
 800a182:	d04d      	beq.n	800a220 <_printf_i+0x1b4>
 800a184:	4616      	mov	r6, r2
 800a186:	fbb5 f1f3 	udiv	r1, r5, r3
 800a18a:	fb03 5711 	mls	r7, r3, r1, r5
 800a18e:	5dc7      	ldrb	r7, [r0, r7]
 800a190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a194:	462f      	mov	r7, r5
 800a196:	42bb      	cmp	r3, r7
 800a198:	460d      	mov	r5, r1
 800a19a:	d9f4      	bls.n	800a186 <_printf_i+0x11a>
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d10b      	bne.n	800a1b8 <_printf_i+0x14c>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	07df      	lsls	r7, r3, #31
 800a1a4:	d508      	bpl.n	800a1b8 <_printf_i+0x14c>
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	6861      	ldr	r1, [r4, #4]
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	bfde      	ittt	le
 800a1ae:	2330      	movle	r3, #48	; 0x30
 800a1b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1b8:	1b92      	subs	r2, r2, r6
 800a1ba:	6122      	str	r2, [r4, #16]
 800a1bc:	f8cd a000 	str.w	sl, [sp]
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	aa03      	add	r2, sp, #12
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f7ff fee2 	bl	8009f90 <_printf_common>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d14c      	bne.n	800a26a <_printf_i+0x1fe>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	b004      	add	sp, #16
 800a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1da:	4835      	ldr	r0, [pc, #212]	; (800a2b0 <_printf_i+0x244>)
 800a1dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	680e      	ldr	r6, [r1, #0]
 800a1e4:	061f      	lsls	r7, r3, #24
 800a1e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1ea:	600e      	str	r6, [r1, #0]
 800a1ec:	d514      	bpl.n	800a218 <_printf_i+0x1ac>
 800a1ee:	07d9      	lsls	r1, r3, #31
 800a1f0:	bf44      	itt	mi
 800a1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800a1f6:	6023      	strmi	r3, [r4, #0]
 800a1f8:	b91d      	cbnz	r5, 800a202 <_printf_i+0x196>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	f023 0320 	bic.w	r3, r3, #32
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	2310      	movs	r3, #16
 800a204:	e7b0      	b.n	800a168 <_printf_i+0xfc>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	f043 0320 	orr.w	r3, r3, #32
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	2378      	movs	r3, #120	; 0x78
 800a210:	4828      	ldr	r0, [pc, #160]	; (800a2b4 <_printf_i+0x248>)
 800a212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a216:	e7e3      	b.n	800a1e0 <_printf_i+0x174>
 800a218:	065e      	lsls	r6, r3, #25
 800a21a:	bf48      	it	mi
 800a21c:	b2ad      	uxthmi	r5, r5
 800a21e:	e7e6      	b.n	800a1ee <_printf_i+0x182>
 800a220:	4616      	mov	r6, r2
 800a222:	e7bb      	b.n	800a19c <_printf_i+0x130>
 800a224:	680b      	ldr	r3, [r1, #0]
 800a226:	6826      	ldr	r6, [r4, #0]
 800a228:	6960      	ldr	r0, [r4, #20]
 800a22a:	1d1d      	adds	r5, r3, #4
 800a22c:	600d      	str	r5, [r1, #0]
 800a22e:	0635      	lsls	r5, r6, #24
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	d501      	bpl.n	800a238 <_printf_i+0x1cc>
 800a234:	6018      	str	r0, [r3, #0]
 800a236:	e002      	b.n	800a23e <_printf_i+0x1d2>
 800a238:	0671      	lsls	r1, r6, #25
 800a23a:	d5fb      	bpl.n	800a234 <_printf_i+0x1c8>
 800a23c:	8018      	strh	r0, [r3, #0]
 800a23e:	2300      	movs	r3, #0
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	4616      	mov	r6, r2
 800a244:	e7ba      	b.n	800a1bc <_printf_i+0x150>
 800a246:	680b      	ldr	r3, [r1, #0]
 800a248:	1d1a      	adds	r2, r3, #4
 800a24a:	600a      	str	r2, [r1, #0]
 800a24c:	681e      	ldr	r6, [r3, #0]
 800a24e:	6862      	ldr	r2, [r4, #4]
 800a250:	2100      	movs	r1, #0
 800a252:	4630      	mov	r0, r6
 800a254:	f7f5 ffc4 	bl	80001e0 <memchr>
 800a258:	b108      	cbz	r0, 800a25e <_printf_i+0x1f2>
 800a25a:	1b80      	subs	r0, r0, r6
 800a25c:	6060      	str	r0, [r4, #4]
 800a25e:	6863      	ldr	r3, [r4, #4]
 800a260:	6123      	str	r3, [r4, #16]
 800a262:	2300      	movs	r3, #0
 800a264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a268:	e7a8      	b.n	800a1bc <_printf_i+0x150>
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	4632      	mov	r2, r6
 800a26e:	4649      	mov	r1, r9
 800a270:	4640      	mov	r0, r8
 800a272:	47d0      	blx	sl
 800a274:	3001      	adds	r0, #1
 800a276:	d0ab      	beq.n	800a1d0 <_printf_i+0x164>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	079b      	lsls	r3, r3, #30
 800a27c:	d413      	bmi.n	800a2a6 <_printf_i+0x23a>
 800a27e:	68e0      	ldr	r0, [r4, #12]
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	4298      	cmp	r0, r3
 800a284:	bfb8      	it	lt
 800a286:	4618      	movlt	r0, r3
 800a288:	e7a4      	b.n	800a1d4 <_printf_i+0x168>
 800a28a:	2301      	movs	r3, #1
 800a28c:	4632      	mov	r2, r6
 800a28e:	4649      	mov	r1, r9
 800a290:	4640      	mov	r0, r8
 800a292:	47d0      	blx	sl
 800a294:	3001      	adds	r0, #1
 800a296:	d09b      	beq.n	800a1d0 <_printf_i+0x164>
 800a298:	3501      	adds	r5, #1
 800a29a:	68e3      	ldr	r3, [r4, #12]
 800a29c:	9903      	ldr	r1, [sp, #12]
 800a29e:	1a5b      	subs	r3, r3, r1
 800a2a0:	42ab      	cmp	r3, r5
 800a2a2:	dcf2      	bgt.n	800a28a <_printf_i+0x21e>
 800a2a4:	e7eb      	b.n	800a27e <_printf_i+0x212>
 800a2a6:	2500      	movs	r5, #0
 800a2a8:	f104 0619 	add.w	r6, r4, #25
 800a2ac:	e7f5      	b.n	800a29a <_printf_i+0x22e>
 800a2ae:	bf00      	nop
 800a2b0:	0800afd7 	.word	0x0800afd7
 800a2b4:	0800afe8 	.word	0x0800afe8

0800a2b8 <_sbrk_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d06      	ldr	r5, [pc, #24]	; (800a2d4 <_sbrk_r+0x1c>)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	f7f9 fd80 	bl	8003dc8 <_sbrk>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_sbrk_r+0x1a>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_sbrk_r+0x1a>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	20000980 	.word	0x20000980

0800a2d8 <__swbuf_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	460e      	mov	r6, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b118      	cbz	r0, 800a2ea <__swbuf_r+0x12>
 800a2e2:	6983      	ldr	r3, [r0, #24]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <__swbuf_r+0x12>
 800a2e6:	f000 f9d9 	bl	800a69c <__sinit>
 800a2ea:	4b21      	ldr	r3, [pc, #132]	; (800a370 <__swbuf_r+0x98>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d12b      	bne.n	800a348 <__swbuf_r+0x70>
 800a2f0:	686c      	ldr	r4, [r5, #4]
 800a2f2:	69a3      	ldr	r3, [r4, #24]
 800a2f4:	60a3      	str	r3, [r4, #8]
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	071a      	lsls	r2, r3, #28
 800a2fa:	d52f      	bpl.n	800a35c <__swbuf_r+0x84>
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	b36b      	cbz	r3, 800a35c <__swbuf_r+0x84>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	1ac0      	subs	r0, r0, r3
 800a306:	6963      	ldr	r3, [r4, #20]
 800a308:	b2f6      	uxtb	r6, r6
 800a30a:	4283      	cmp	r3, r0
 800a30c:	4637      	mov	r7, r6
 800a30e:	dc04      	bgt.n	800a31a <__swbuf_r+0x42>
 800a310:	4621      	mov	r1, r4
 800a312:	4628      	mov	r0, r5
 800a314:	f000 f92e 	bl	800a574 <_fflush_r>
 800a318:	bb30      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	60a3      	str	r3, [r4, #8]
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	6022      	str	r2, [r4, #0]
 800a326:	701e      	strb	r6, [r3, #0]
 800a328:	6963      	ldr	r3, [r4, #20]
 800a32a:	3001      	adds	r0, #1
 800a32c:	4283      	cmp	r3, r0
 800a32e:	d004      	beq.n	800a33a <__swbuf_r+0x62>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	07db      	lsls	r3, r3, #31
 800a334:	d506      	bpl.n	800a344 <__swbuf_r+0x6c>
 800a336:	2e0a      	cmp	r6, #10
 800a338:	d104      	bne.n	800a344 <__swbuf_r+0x6c>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 f919 	bl	800a574 <_fflush_r>
 800a342:	b988      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a344:	4638      	mov	r0, r7
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <__swbuf_r+0x9c>)
 800a34a:	429c      	cmp	r4, r3
 800a34c:	d101      	bne.n	800a352 <__swbuf_r+0x7a>
 800a34e:	68ac      	ldr	r4, [r5, #8]
 800a350:	e7cf      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a352:	4b09      	ldr	r3, [pc, #36]	; (800a378 <__swbuf_r+0xa0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	bf08      	it	eq
 800a358:	68ec      	ldreq	r4, [r5, #12]
 800a35a:	e7ca      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f80c 	bl	800a37c <__swsetup_r>
 800a364:	2800      	cmp	r0, #0
 800a366:	d0cb      	beq.n	800a300 <__swbuf_r+0x28>
 800a368:	f04f 37ff 	mov.w	r7, #4294967295
 800a36c:	e7ea      	b.n	800a344 <__swbuf_r+0x6c>
 800a36e:	bf00      	nop
 800a370:	0800b01c 	.word	0x0800b01c
 800a374:	0800b03c 	.word	0x0800b03c
 800a378:	0800affc 	.word	0x0800affc

0800a37c <__swsetup_r>:
 800a37c:	4b32      	ldr	r3, [pc, #200]	; (800a448 <__swsetup_r+0xcc>)
 800a37e:	b570      	push	{r4, r5, r6, lr}
 800a380:	681d      	ldr	r5, [r3, #0]
 800a382:	4606      	mov	r6, r0
 800a384:	460c      	mov	r4, r1
 800a386:	b125      	cbz	r5, 800a392 <__swsetup_r+0x16>
 800a388:	69ab      	ldr	r3, [r5, #24]
 800a38a:	b913      	cbnz	r3, 800a392 <__swsetup_r+0x16>
 800a38c:	4628      	mov	r0, r5
 800a38e:	f000 f985 	bl	800a69c <__sinit>
 800a392:	4b2e      	ldr	r3, [pc, #184]	; (800a44c <__swsetup_r+0xd0>)
 800a394:	429c      	cmp	r4, r3
 800a396:	d10f      	bne.n	800a3b8 <__swsetup_r+0x3c>
 800a398:	686c      	ldr	r4, [r5, #4]
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a0:	0719      	lsls	r1, r3, #28
 800a3a2:	d42c      	bmi.n	800a3fe <__swsetup_r+0x82>
 800a3a4:	06dd      	lsls	r5, r3, #27
 800a3a6:	d411      	bmi.n	800a3cc <__swsetup_r+0x50>
 800a3a8:	2309      	movs	r3, #9
 800a3aa:	6033      	str	r3, [r6, #0]
 800a3ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	e03e      	b.n	800a436 <__swsetup_r+0xba>
 800a3b8:	4b25      	ldr	r3, [pc, #148]	; (800a450 <__swsetup_r+0xd4>)
 800a3ba:	429c      	cmp	r4, r3
 800a3bc:	d101      	bne.n	800a3c2 <__swsetup_r+0x46>
 800a3be:	68ac      	ldr	r4, [r5, #8]
 800a3c0:	e7eb      	b.n	800a39a <__swsetup_r+0x1e>
 800a3c2:	4b24      	ldr	r3, [pc, #144]	; (800a454 <__swsetup_r+0xd8>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	bf08      	it	eq
 800a3c8:	68ec      	ldreq	r4, [r5, #12]
 800a3ca:	e7e6      	b.n	800a39a <__swsetup_r+0x1e>
 800a3cc:	0758      	lsls	r0, r3, #29
 800a3ce:	d512      	bpl.n	800a3f6 <__swsetup_r+0x7a>
 800a3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d2:	b141      	cbz	r1, 800a3e6 <__swsetup_r+0x6a>
 800a3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <__swsetup_r+0x66>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7ff fa77 	bl	80098d0 <_free_r>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	b94b      	cbnz	r3, 800a416 <__swsetup_r+0x9a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40c:	d003      	beq.n	800a416 <__swsetup_r+0x9a>
 800a40e:	4621      	mov	r1, r4
 800a410:	4630      	mov	r0, r6
 800a412:	f000 fa07 	bl	800a824 <__smakebuf_r>
 800a416:	89a0      	ldrh	r0, [r4, #12]
 800a418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a41c:	f010 0301 	ands.w	r3, r0, #1
 800a420:	d00a      	beq.n	800a438 <__swsetup_r+0xbc>
 800a422:	2300      	movs	r3, #0
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6963      	ldr	r3, [r4, #20]
 800a428:	425b      	negs	r3, r3
 800a42a:	61a3      	str	r3, [r4, #24]
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	b943      	cbnz	r3, 800a442 <__swsetup_r+0xc6>
 800a430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a434:	d1ba      	bne.n	800a3ac <__swsetup_r+0x30>
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	0781      	lsls	r1, r0, #30
 800a43a:	bf58      	it	pl
 800a43c:	6963      	ldrpl	r3, [r4, #20]
 800a43e:	60a3      	str	r3, [r4, #8]
 800a440:	e7f4      	b.n	800a42c <__swsetup_r+0xb0>
 800a442:	2000      	movs	r0, #0
 800a444:	e7f7      	b.n	800a436 <__swsetup_r+0xba>
 800a446:	bf00      	nop
 800a448:	20000060 	.word	0x20000060
 800a44c:	0800b01c 	.word	0x0800b01c
 800a450:	0800b03c 	.word	0x0800b03c
 800a454:	0800affc 	.word	0x0800affc

0800a458 <abort>:
 800a458:	b508      	push	{r3, lr}
 800a45a:	2006      	movs	r0, #6
 800a45c:	f000 faa4 	bl	800a9a8 <raise>
 800a460:	2001      	movs	r0, #1
 800a462:	f7f9 fc39 	bl	8003cd8 <_exit>
	...

0800a468 <__sflush_r>:
 800a468:	898a      	ldrh	r2, [r1, #12]
 800a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	4605      	mov	r5, r0
 800a470:	0710      	lsls	r0, r2, #28
 800a472:	460c      	mov	r4, r1
 800a474:	d458      	bmi.n	800a528 <__sflush_r+0xc0>
 800a476:	684b      	ldr	r3, [r1, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc05      	bgt.n	800a488 <__sflush_r+0x20>
 800a47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dc02      	bgt.n	800a488 <__sflush_r+0x20>
 800a482:	2000      	movs	r0, #0
 800a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a48a:	2e00      	cmp	r6, #0
 800a48c:	d0f9      	beq.n	800a482 <__sflush_r+0x1a>
 800a48e:	2300      	movs	r3, #0
 800a490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a494:	682f      	ldr	r7, [r5, #0]
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	d032      	beq.n	800a500 <__sflush_r+0x98>
 800a49a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	075a      	lsls	r2, r3, #29
 800a4a0:	d505      	bpl.n	800a4ae <__sflush_r+0x46>
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	1ac0      	subs	r0, r0, r3
 800a4a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4a8:	b10b      	cbz	r3, 800a4ae <__sflush_r+0x46>
 800a4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4ac:	1ac0      	subs	r0, r0, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4b4:	6a21      	ldr	r1, [r4, #32]
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b0      	blx	r6
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	d106      	bne.n	800a4ce <__sflush_r+0x66>
 800a4c0:	6829      	ldr	r1, [r5, #0]
 800a4c2:	291d      	cmp	r1, #29
 800a4c4:	d82c      	bhi.n	800a520 <__sflush_r+0xb8>
 800a4c6:	4a2a      	ldr	r2, [pc, #168]	; (800a570 <__sflush_r+0x108>)
 800a4c8:	40ca      	lsrs	r2, r1
 800a4ca:	07d6      	lsls	r6, r2, #31
 800a4cc:	d528      	bpl.n	800a520 <__sflush_r+0xb8>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	6062      	str	r2, [r4, #4]
 800a4d2:	04d9      	lsls	r1, r3, #19
 800a4d4:	6922      	ldr	r2, [r4, #16]
 800a4d6:	6022      	str	r2, [r4, #0]
 800a4d8:	d504      	bpl.n	800a4e4 <__sflush_r+0x7c>
 800a4da:	1c42      	adds	r2, r0, #1
 800a4dc:	d101      	bne.n	800a4e2 <__sflush_r+0x7a>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	b903      	cbnz	r3, 800a4e4 <__sflush_r+0x7c>
 800a4e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e6:	602f      	str	r7, [r5, #0]
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	d0ca      	beq.n	800a482 <__sflush_r+0x1a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__sflush_r+0x92>
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff f9eb 	bl	80098d0 <_free_r>
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a4fe:	e7c1      	b.n	800a484 <__sflush_r+0x1c>
 800a500:	6a21      	ldr	r1, [r4, #32]
 800a502:	2301      	movs	r3, #1
 800a504:	4628      	mov	r0, r5
 800a506:	47b0      	blx	r6
 800a508:	1c41      	adds	r1, r0, #1
 800a50a:	d1c7      	bne.n	800a49c <__sflush_r+0x34>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0c4      	beq.n	800a49c <__sflush_r+0x34>
 800a512:	2b1d      	cmp	r3, #29
 800a514:	d001      	beq.n	800a51a <__sflush_r+0xb2>
 800a516:	2b16      	cmp	r3, #22
 800a518:	d101      	bne.n	800a51e <__sflush_r+0xb6>
 800a51a:	602f      	str	r7, [r5, #0]
 800a51c:	e7b1      	b.n	800a482 <__sflush_r+0x1a>
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	e7ad      	b.n	800a484 <__sflush_r+0x1c>
 800a528:	690f      	ldr	r7, [r1, #16]
 800a52a:	2f00      	cmp	r7, #0
 800a52c:	d0a9      	beq.n	800a482 <__sflush_r+0x1a>
 800a52e:	0793      	lsls	r3, r2, #30
 800a530:	680e      	ldr	r6, [r1, #0]
 800a532:	bf08      	it	eq
 800a534:	694b      	ldreq	r3, [r1, #20]
 800a536:	600f      	str	r7, [r1, #0]
 800a538:	bf18      	it	ne
 800a53a:	2300      	movne	r3, #0
 800a53c:	eba6 0807 	sub.w	r8, r6, r7
 800a540:	608b      	str	r3, [r1, #8]
 800a542:	f1b8 0f00 	cmp.w	r8, #0
 800a546:	dd9c      	ble.n	800a482 <__sflush_r+0x1a>
 800a548:	6a21      	ldr	r1, [r4, #32]
 800a54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a54c:	4643      	mov	r3, r8
 800a54e:	463a      	mov	r2, r7
 800a550:	4628      	mov	r0, r5
 800a552:	47b0      	blx	r6
 800a554:	2800      	cmp	r0, #0
 800a556:	dc06      	bgt.n	800a566 <__sflush_r+0xfe>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	e78e      	b.n	800a484 <__sflush_r+0x1c>
 800a566:	4407      	add	r7, r0
 800a568:	eba8 0800 	sub.w	r8, r8, r0
 800a56c:	e7e9      	b.n	800a542 <__sflush_r+0xda>
 800a56e:	bf00      	nop
 800a570:	20400001 	.word	0x20400001

0800a574 <_fflush_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	690b      	ldr	r3, [r1, #16]
 800a578:	4605      	mov	r5, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	b913      	cbnz	r3, 800a584 <_fflush_r+0x10>
 800a57e:	2500      	movs	r5, #0
 800a580:	4628      	mov	r0, r5
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	b118      	cbz	r0, 800a58e <_fflush_r+0x1a>
 800a586:	6983      	ldr	r3, [r0, #24]
 800a588:	b90b      	cbnz	r3, 800a58e <_fflush_r+0x1a>
 800a58a:	f000 f887 	bl	800a69c <__sinit>
 800a58e:	4b14      	ldr	r3, [pc, #80]	; (800a5e0 <_fflush_r+0x6c>)
 800a590:	429c      	cmp	r4, r3
 800a592:	d11b      	bne.n	800a5cc <_fflush_r+0x58>
 800a594:	686c      	ldr	r4, [r5, #4]
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0ef      	beq.n	800a57e <_fflush_r+0xa>
 800a59e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5a0:	07d0      	lsls	r0, r2, #31
 800a5a2:	d404      	bmi.n	800a5ae <_fflush_r+0x3a>
 800a5a4:	0599      	lsls	r1, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_fflush_r+0x3a>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5aa:	f000 f915 	bl	800a7d8 <__retarget_lock_acquire_recursive>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	f7ff ff59 	bl	800a468 <__sflush_r>
 800a5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b8:	07da      	lsls	r2, r3, #31
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	d4e0      	bmi.n	800a580 <_fflush_r+0xc>
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	059b      	lsls	r3, r3, #22
 800a5c2:	d4dd      	bmi.n	800a580 <_fflush_r+0xc>
 800a5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c6:	f000 f908 	bl	800a7da <__retarget_lock_release_recursive>
 800a5ca:	e7d9      	b.n	800a580 <_fflush_r+0xc>
 800a5cc:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <_fflush_r+0x70>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	d101      	bne.n	800a5d6 <_fflush_r+0x62>
 800a5d2:	68ac      	ldr	r4, [r5, #8]
 800a5d4:	e7df      	b.n	800a596 <_fflush_r+0x22>
 800a5d6:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <_fflush_r+0x74>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	bf08      	it	eq
 800a5dc:	68ec      	ldreq	r4, [r5, #12]
 800a5de:	e7da      	b.n	800a596 <_fflush_r+0x22>
 800a5e0:	0800b01c 	.word	0x0800b01c
 800a5e4:	0800b03c 	.word	0x0800b03c
 800a5e8:	0800affc 	.word	0x0800affc

0800a5ec <std>:
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5fa:	6083      	str	r3, [r0, #8]
 800a5fc:	8181      	strh	r1, [r0, #12]
 800a5fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a600:	81c2      	strh	r2, [r0, #14]
 800a602:	6183      	str	r3, [r0, #24]
 800a604:	4619      	mov	r1, r3
 800a606:	2208      	movs	r2, #8
 800a608:	305c      	adds	r0, #92	; 0x5c
 800a60a:	f7ff f867 	bl	80096dc <memset>
 800a60e:	4b05      	ldr	r3, [pc, #20]	; (800a624 <std+0x38>)
 800a610:	6263      	str	r3, [r4, #36]	; 0x24
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <std+0x3c>)
 800a614:	62a3      	str	r3, [r4, #40]	; 0x28
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <std+0x40>)
 800a618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <std+0x44>)
 800a61c:	6224      	str	r4, [r4, #32]
 800a61e:	6323      	str	r3, [r4, #48]	; 0x30
 800a620:	bd10      	pop	{r4, pc}
 800a622:	bf00      	nop
 800a624:	0800a9e1 	.word	0x0800a9e1
 800a628:	0800aa03 	.word	0x0800aa03
 800a62c:	0800aa3b 	.word	0x0800aa3b
 800a630:	0800aa5f 	.word	0x0800aa5f

0800a634 <_cleanup_r>:
 800a634:	4901      	ldr	r1, [pc, #4]	; (800a63c <_cleanup_r+0x8>)
 800a636:	f000 b8af 	b.w	800a798 <_fwalk_reent>
 800a63a:	bf00      	nop
 800a63c:	0800a575 	.word	0x0800a575

0800a640 <__sfmoreglue>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	1e4a      	subs	r2, r1, #1
 800a644:	2568      	movs	r5, #104	; 0x68
 800a646:	4355      	muls	r5, r2
 800a648:	460e      	mov	r6, r1
 800a64a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a64e:	f7ff f98f 	bl	8009970 <_malloc_r>
 800a652:	4604      	mov	r4, r0
 800a654:	b140      	cbz	r0, 800a668 <__sfmoreglue+0x28>
 800a656:	2100      	movs	r1, #0
 800a658:	e9c0 1600 	strd	r1, r6, [r0]
 800a65c:	300c      	adds	r0, #12
 800a65e:	60a0      	str	r0, [r4, #8]
 800a660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a664:	f7ff f83a 	bl	80096dc <memset>
 800a668:	4620      	mov	r0, r4
 800a66a:	bd70      	pop	{r4, r5, r6, pc}

0800a66c <__sfp_lock_acquire>:
 800a66c:	4801      	ldr	r0, [pc, #4]	; (800a674 <__sfp_lock_acquire+0x8>)
 800a66e:	f000 b8b3 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	2000098c 	.word	0x2000098c

0800a678 <__sfp_lock_release>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__sfp_lock_release+0x8>)
 800a67a:	f000 b8ae 	b.w	800a7da <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	2000098c 	.word	0x2000098c

0800a684 <__sinit_lock_acquire>:
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <__sinit_lock_acquire+0x8>)
 800a686:	f000 b8a7 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a68a:	bf00      	nop
 800a68c:	20000987 	.word	0x20000987

0800a690 <__sinit_lock_release>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__sinit_lock_release+0x8>)
 800a692:	f000 b8a2 	b.w	800a7da <__retarget_lock_release_recursive>
 800a696:	bf00      	nop
 800a698:	20000987 	.word	0x20000987

0800a69c <__sinit>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	f7ff fff0 	bl	800a684 <__sinit_lock_acquire>
 800a6a4:	69a3      	ldr	r3, [r4, #24]
 800a6a6:	b11b      	cbz	r3, 800a6b0 <__sinit+0x14>
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f7ff bff0 	b.w	800a690 <__sinit_lock_release>
 800a6b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a6b6:	4b13      	ldr	r3, [pc, #76]	; (800a704 <__sinit+0x68>)
 800a6b8:	4a13      	ldr	r2, [pc, #76]	; (800a708 <__sinit+0x6c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	bf04      	itt	eq
 800a6c2:	2301      	moveq	r3, #1
 800a6c4:	61a3      	streq	r3, [r4, #24]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 f820 	bl	800a70c <__sfp>
 800a6cc:	6060      	str	r0, [r4, #4]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 f81c 	bl	800a70c <__sfp>
 800a6d4:	60a0      	str	r0, [r4, #8]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 f818 	bl	800a70c <__sfp>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	60e0      	str	r0, [r4, #12]
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	6860      	ldr	r0, [r4, #4]
 800a6e4:	f7ff ff82 	bl	800a5ec <std>
 800a6e8:	68a0      	ldr	r0, [r4, #8]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	2109      	movs	r1, #9
 800a6ee:	f7ff ff7d 	bl	800a5ec <std>
 800a6f2:	68e0      	ldr	r0, [r4, #12]
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	2112      	movs	r1, #18
 800a6f8:	f7ff ff78 	bl	800a5ec <std>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	61a3      	str	r3, [r4, #24]
 800a700:	e7d2      	b.n	800a6a8 <__sinit+0xc>
 800a702:	bf00      	nop
 800a704:	0800af10 	.word	0x0800af10
 800a708:	0800a635 	.word	0x0800a635

0800a70c <__sfp>:
 800a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70e:	4607      	mov	r7, r0
 800a710:	f7ff ffac 	bl	800a66c <__sfp_lock_acquire>
 800a714:	4b1e      	ldr	r3, [pc, #120]	; (800a790 <__sfp+0x84>)
 800a716:	681e      	ldr	r6, [r3, #0]
 800a718:	69b3      	ldr	r3, [r6, #24]
 800a71a:	b913      	cbnz	r3, 800a722 <__sfp+0x16>
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff ffbd 	bl	800a69c <__sinit>
 800a722:	3648      	adds	r6, #72	; 0x48
 800a724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a728:	3b01      	subs	r3, #1
 800a72a:	d503      	bpl.n	800a734 <__sfp+0x28>
 800a72c:	6833      	ldr	r3, [r6, #0]
 800a72e:	b30b      	cbz	r3, 800a774 <__sfp+0x68>
 800a730:	6836      	ldr	r6, [r6, #0]
 800a732:	e7f7      	b.n	800a724 <__sfp+0x18>
 800a734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a738:	b9d5      	cbnz	r5, 800a770 <__sfp+0x64>
 800a73a:	4b16      	ldr	r3, [pc, #88]	; (800a794 <__sfp+0x88>)
 800a73c:	60e3      	str	r3, [r4, #12]
 800a73e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a742:	6665      	str	r5, [r4, #100]	; 0x64
 800a744:	f000 f847 	bl	800a7d6 <__retarget_lock_init_recursive>
 800a748:	f7ff ff96 	bl	800a678 <__sfp_lock_release>
 800a74c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a754:	6025      	str	r5, [r4, #0]
 800a756:	61a5      	str	r5, [r4, #24]
 800a758:	2208      	movs	r2, #8
 800a75a:	4629      	mov	r1, r5
 800a75c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a760:	f7fe ffbc 	bl	80096dc <memset>
 800a764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a76c:	4620      	mov	r0, r4
 800a76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a770:	3468      	adds	r4, #104	; 0x68
 800a772:	e7d9      	b.n	800a728 <__sfp+0x1c>
 800a774:	2104      	movs	r1, #4
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ff62 	bl	800a640 <__sfmoreglue>
 800a77c:	4604      	mov	r4, r0
 800a77e:	6030      	str	r0, [r6, #0]
 800a780:	2800      	cmp	r0, #0
 800a782:	d1d5      	bne.n	800a730 <__sfp+0x24>
 800a784:	f7ff ff78 	bl	800a678 <__sfp_lock_release>
 800a788:	230c      	movs	r3, #12
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	e7ee      	b.n	800a76c <__sfp+0x60>
 800a78e:	bf00      	nop
 800a790:	0800af10 	.word	0x0800af10
 800a794:	ffff0001 	.word	0xffff0001

0800a798 <_fwalk_reent>:
 800a798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a79c:	4606      	mov	r6, r0
 800a79e:	4688      	mov	r8, r1
 800a7a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7a4:	2700      	movs	r7, #0
 800a7a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a7ae:	d505      	bpl.n	800a7bc <_fwalk_reent+0x24>
 800a7b0:	6824      	ldr	r4, [r4, #0]
 800a7b2:	2c00      	cmp	r4, #0
 800a7b4:	d1f7      	bne.n	800a7a6 <_fwalk_reent+0xe>
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7bc:	89ab      	ldrh	r3, [r5, #12]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d907      	bls.n	800a7d2 <_fwalk_reent+0x3a>
 800a7c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	d003      	beq.n	800a7d2 <_fwalk_reent+0x3a>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	47c0      	blx	r8
 800a7d0:	4307      	orrs	r7, r0
 800a7d2:	3568      	adds	r5, #104	; 0x68
 800a7d4:	e7e9      	b.n	800a7aa <_fwalk_reent+0x12>

0800a7d6 <__retarget_lock_init_recursive>:
 800a7d6:	4770      	bx	lr

0800a7d8 <__retarget_lock_acquire_recursive>:
 800a7d8:	4770      	bx	lr

0800a7da <__retarget_lock_release_recursive>:
 800a7da:	4770      	bx	lr

0800a7dc <__swhatbuf_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460e      	mov	r6, r1
 800a7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	b096      	sub	sp, #88	; 0x58
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	da07      	bge.n	800a7fe <__swhatbuf_r+0x22>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	89b3      	ldrh	r3, [r6, #12]
 800a7f4:	061a      	lsls	r2, r3, #24
 800a7f6:	d410      	bmi.n	800a81a <__swhatbuf_r+0x3e>
 800a7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fc:	e00e      	b.n	800a81c <__swhatbuf_r+0x40>
 800a7fe:	466a      	mov	r2, sp
 800a800:	f000 f954 	bl	800aaac <_fstat_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	dbf2      	blt.n	800a7ee <__swhatbuf_r+0x12>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a80e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a812:	425a      	negs	r2, r3
 800a814:	415a      	adcs	r2, r3
 800a816:	602a      	str	r2, [r5, #0]
 800a818:	e7ee      	b.n	800a7f8 <__swhatbuf_r+0x1c>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	2000      	movs	r0, #0
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	b016      	add	sp, #88	; 0x58
 800a822:	bd70      	pop	{r4, r5, r6, pc}

0800a824 <__smakebuf_r>:
 800a824:	898b      	ldrh	r3, [r1, #12]
 800a826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a828:	079d      	lsls	r5, r3, #30
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	d507      	bpl.n	800a840 <__smakebuf_r+0x1c>
 800a830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	6123      	str	r3, [r4, #16]
 800a838:	2301      	movs	r3, #1
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	b002      	add	sp, #8
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	ab01      	add	r3, sp, #4
 800a842:	466a      	mov	r2, sp
 800a844:	f7ff ffca 	bl	800a7dc <__swhatbuf_r>
 800a848:	9900      	ldr	r1, [sp, #0]
 800a84a:	4605      	mov	r5, r0
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff f88f 	bl	8009970 <_malloc_r>
 800a852:	b948      	cbnz	r0, 800a868 <__smakebuf_r+0x44>
 800a854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a858:	059a      	lsls	r2, r3, #22
 800a85a:	d4ef      	bmi.n	800a83c <__smakebuf_r+0x18>
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	f043 0302 	orr.w	r3, r3, #2
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	e7e3      	b.n	800a830 <__smakebuf_r+0xc>
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <__smakebuf_r+0x7c>)
 800a86a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	6020      	str	r0, [r4, #0]
 800a870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	6163      	str	r3, [r4, #20]
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	6120      	str	r0, [r4, #16]
 800a87e:	b15b      	cbz	r3, 800a898 <__smakebuf_r+0x74>
 800a880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a884:	4630      	mov	r0, r6
 800a886:	f000 f923 	bl	800aad0 <_isatty_r>
 800a88a:	b128      	cbz	r0, 800a898 <__smakebuf_r+0x74>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	89a0      	ldrh	r0, [r4, #12]
 800a89a:	4305      	orrs	r5, r0
 800a89c:	81a5      	strh	r5, [r4, #12]
 800a89e:	e7cd      	b.n	800a83c <__smakebuf_r+0x18>
 800a8a0:	0800a635 	.word	0x0800a635

0800a8a4 <memcpy>:
 800a8a4:	440a      	add	r2, r1
 800a8a6:	4291      	cmp	r1, r2
 800a8a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ac:	d100      	bne.n	800a8b0 <memcpy+0xc>
 800a8ae:	4770      	bx	lr
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ba:	4291      	cmp	r1, r2
 800a8bc:	d1f9      	bne.n	800a8b2 <memcpy+0xe>
 800a8be:	bd10      	pop	{r4, pc}

0800a8c0 <memmove>:
 800a8c0:	4288      	cmp	r0, r1
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	eb01 0402 	add.w	r4, r1, r2
 800a8c8:	d902      	bls.n	800a8d0 <memmove+0x10>
 800a8ca:	4284      	cmp	r4, r0
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	d807      	bhi.n	800a8e0 <memmove+0x20>
 800a8d0:	1e43      	subs	r3, r0, #1
 800a8d2:	42a1      	cmp	r1, r4
 800a8d4:	d008      	beq.n	800a8e8 <memmove+0x28>
 800a8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8de:	e7f8      	b.n	800a8d2 <memmove+0x12>
 800a8e0:	4402      	add	r2, r0
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	428a      	cmp	r2, r1
 800a8e6:	d100      	bne.n	800a8ea <memmove+0x2a>
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8f2:	e7f7      	b.n	800a8e4 <memmove+0x24>

0800a8f4 <__malloc_lock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	; (800a8fc <__malloc_lock+0x8>)
 800a8f6:	f7ff bf6f 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	20000988 	.word	0x20000988

0800a900 <__malloc_unlock>:
 800a900:	4801      	ldr	r0, [pc, #4]	; (800a908 <__malloc_unlock+0x8>)
 800a902:	f7ff bf6a 	b.w	800a7da <__retarget_lock_release_recursive>
 800a906:	bf00      	nop
 800a908:	20000988 	.word	0x20000988

0800a90c <_realloc_r>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	4607      	mov	r7, r0
 800a910:	4614      	mov	r4, r2
 800a912:	460e      	mov	r6, r1
 800a914:	b921      	cbnz	r1, 800a920 <_realloc_r+0x14>
 800a916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a91a:	4611      	mov	r1, r2
 800a91c:	f7ff b828 	b.w	8009970 <_malloc_r>
 800a920:	b922      	cbnz	r2, 800a92c <_realloc_r+0x20>
 800a922:	f7fe ffd5 	bl	80098d0 <_free_r>
 800a926:	4625      	mov	r5, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92c:	f000 f8f2 	bl	800ab14 <_malloc_usable_size_r>
 800a930:	42a0      	cmp	r0, r4
 800a932:	d20f      	bcs.n	800a954 <_realloc_r+0x48>
 800a934:	4621      	mov	r1, r4
 800a936:	4638      	mov	r0, r7
 800a938:	f7ff f81a 	bl	8009970 <_malloc_r>
 800a93c:	4605      	mov	r5, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0f2      	beq.n	800a928 <_realloc_r+0x1c>
 800a942:	4631      	mov	r1, r6
 800a944:	4622      	mov	r2, r4
 800a946:	f7ff ffad 	bl	800a8a4 <memcpy>
 800a94a:	4631      	mov	r1, r6
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7fe ffbf 	bl	80098d0 <_free_r>
 800a952:	e7e9      	b.n	800a928 <_realloc_r+0x1c>
 800a954:	4635      	mov	r5, r6
 800a956:	e7e7      	b.n	800a928 <_realloc_r+0x1c>

0800a958 <_raise_r>:
 800a958:	291f      	cmp	r1, #31
 800a95a:	b538      	push	{r3, r4, r5, lr}
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	d904      	bls.n	800a96c <_raise_r+0x14>
 800a962:	2316      	movs	r3, #22
 800a964:	6003      	str	r3, [r0, #0]
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a96e:	b112      	cbz	r2, 800a976 <_raise_r+0x1e>
 800a970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a974:	b94b      	cbnz	r3, 800a98a <_raise_r+0x32>
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f830 	bl	800a9dc <_getpid_r>
 800a97c:	462a      	mov	r2, r5
 800a97e:	4601      	mov	r1, r0
 800a980:	4620      	mov	r0, r4
 800a982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a986:	f000 b817 	b.w	800a9b8 <_kill_r>
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d00a      	beq.n	800a9a4 <_raise_r+0x4c>
 800a98e:	1c59      	adds	r1, r3, #1
 800a990:	d103      	bne.n	800a99a <_raise_r+0x42>
 800a992:	2316      	movs	r3, #22
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	2001      	movs	r0, #1
 800a998:	e7e7      	b.n	800a96a <_raise_r+0x12>
 800a99a:	2400      	movs	r4, #0
 800a99c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	4798      	blx	r3
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e7e0      	b.n	800a96a <_raise_r+0x12>

0800a9a8 <raise>:
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <raise+0xc>)
 800a9aa:	4601      	mov	r1, r0
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	f7ff bfd3 	b.w	800a958 <_raise_r>
 800a9b2:	bf00      	nop
 800a9b4:	20000060 	.word	0x20000060

0800a9b8 <_kill_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d07      	ldr	r5, [pc, #28]	; (800a9d8 <_kill_r+0x20>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	602b      	str	r3, [r5, #0]
 800a9c6:	f7f9 f977 	bl	8003cb8 <_kill>
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	d102      	bne.n	800a9d4 <_kill_r+0x1c>
 800a9ce:	682b      	ldr	r3, [r5, #0]
 800a9d0:	b103      	cbz	r3, 800a9d4 <_kill_r+0x1c>
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	bd38      	pop	{r3, r4, r5, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20000980 	.word	0x20000980

0800a9dc <_getpid_r>:
 800a9dc:	f7f9 b964 	b.w	8003ca8 <_getpid>

0800a9e0 <__sread>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e8:	f000 f89c 	bl	800ab24 <_read_r>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	bfab      	itete	ge
 800a9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9f4:	181b      	addge	r3, r3, r0
 800a9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9fa:	bfac      	ite	ge
 800a9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9fe:	81a3      	strhlt	r3, [r4, #12]
 800aa00:	bd10      	pop	{r4, pc}

0800aa02 <__swrite>:
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	461f      	mov	r7, r3
 800aa08:	898b      	ldrh	r3, [r1, #12]
 800aa0a:	05db      	lsls	r3, r3, #23
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4616      	mov	r6, r2
 800aa12:	d505      	bpl.n	800aa20 <__swrite+0x1e>
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	2302      	movs	r3, #2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f000 f868 	bl	800aaf0 <_lseek_r>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	463b      	mov	r3, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	f000 b817 	b.w	800aa68 <_write_r>

0800aa3a <__sseek>:
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 f855 	bl	800aaf0 <_lseek_r>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	bf15      	itete	ne
 800aa4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa56:	81a3      	strheq	r3, [r4, #12]
 800aa58:	bf18      	it	ne
 800aa5a:	81a3      	strhne	r3, [r4, #12]
 800aa5c:	bd10      	pop	{r4, pc}

0800aa5e <__sclose>:
 800aa5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa62:	f000 b813 	b.w	800aa8c <_close_r>
	...

0800aa68 <_write_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	; (800aa88 <_write_r+0x20>)
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7f9 f955 	bl	8003d26 <_write>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_write_r+0x1e>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_write_r+0x1e>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	20000980 	.word	0x20000980

0800aa8c <_close_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_close_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f9 f961 	bl	8003d5e <_close>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_close_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_close_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20000980 	.word	0x20000980

0800aaac <_fstat_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_fstat_r+0x20>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	4611      	mov	r1, r2
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	f7f9 f95c 	bl	8003d76 <_fstat>
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	d102      	bne.n	800aac8 <_fstat_r+0x1c>
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	b103      	cbz	r3, 800aac8 <_fstat_r+0x1c>
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	bd38      	pop	{r3, r4, r5, pc}
 800aaca:	bf00      	nop
 800aacc:	20000980 	.word	0x20000980

0800aad0 <_isatty_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d06      	ldr	r5, [pc, #24]	; (800aaec <_isatty_r+0x1c>)
 800aad4:	2300      	movs	r3, #0
 800aad6:	4604      	mov	r4, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	f7f9 f95b 	bl	8003d96 <_isatty>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_isatty_r+0x1a>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_isatty_r+0x1a>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20000980 	.word	0x20000980

0800aaf0 <_lseek_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_lseek_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f9 f954 	bl	8003dac <_lseek>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_lseek_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_lseek_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000980 	.word	0x20000980

0800ab14 <_malloc_usable_size_r>:
 800ab14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab18:	1f18      	subs	r0, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfbc      	itt	lt
 800ab1e:	580b      	ldrlt	r3, [r1, r0]
 800ab20:	18c0      	addlt	r0, r0, r3
 800ab22:	4770      	bx	lr

0800ab24 <_read_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d07      	ldr	r5, [pc, #28]	; (800ab44 <_read_r+0x20>)
 800ab28:	4604      	mov	r4, r0
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	602a      	str	r2, [r5, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f7f9 f8da 	bl	8003cec <_read>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_read_r+0x1e>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_read_r+0x1e>
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	20000980 	.word	0x20000980

0800ab48 <sqrt>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	ed2d 8b02 	vpush	{d8}
 800ab4e:	ec55 4b10 	vmov	r4, r5, d0
 800ab52:	f000 f82d 	bl	800abb0 <__ieee754_sqrt>
 800ab56:	4b15      	ldr	r3, [pc, #84]	; (800abac <sqrt+0x64>)
 800ab58:	eeb0 8a40 	vmov.f32	s16, s0
 800ab5c:	eef0 8a60 	vmov.f32	s17, s1
 800ab60:	f993 3000 	ldrsb.w	r3, [r3]
 800ab64:	3301      	adds	r3, #1
 800ab66:	d019      	beq.n	800ab9c <sqrt+0x54>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 ffdc 	bl	8000b2c <__aeabi_dcmpun>
 800ab74:	b990      	cbnz	r0, 800ab9c <sqrt+0x54>
 800ab76:	2200      	movs	r2, #0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ffad 	bl	8000adc <__aeabi_dcmplt>
 800ab82:	b158      	cbz	r0, 800ab9c <sqrt+0x54>
 800ab84:	f7fe fd80 	bl	8009688 <__errno>
 800ab88:	2321      	movs	r3, #33	; 0x21
 800ab8a:	6003      	str	r3, [r0, #0]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4610      	mov	r0, r2
 800ab92:	4619      	mov	r1, r3
 800ab94:	f7f5 fe5a 	bl	800084c <__aeabi_ddiv>
 800ab98:	ec41 0b18 	vmov	d8, r0, r1
 800ab9c:	eeb0 0a48 	vmov.f32	s0, s16
 800aba0:	eef0 0a68 	vmov.f32	s1, s17
 800aba4:	ecbd 8b02 	vpop	{d8}
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	200000c4 	.word	0x200000c4

0800abb0 <__ieee754_sqrt>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	ec55 4b10 	vmov	r4, r5, d0
 800abb8:	4e56      	ldr	r6, [pc, #344]	; (800ad14 <__ieee754_sqrt+0x164>)
 800abba:	43ae      	bics	r6, r5
 800abbc:	ee10 0a10 	vmov	r0, s0
 800abc0:	ee10 3a10 	vmov	r3, s0
 800abc4:	4629      	mov	r1, r5
 800abc6:	462a      	mov	r2, r5
 800abc8:	d110      	bne.n	800abec <__ieee754_sqrt+0x3c>
 800abca:	ee10 2a10 	vmov	r2, s0
 800abce:	462b      	mov	r3, r5
 800abd0:	f7f5 fd12 	bl	80005f8 <__aeabi_dmul>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4620      	mov	r0, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	f7f5 fb56 	bl	800028c <__adddf3>
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	ec45 4b10 	vmov	d0, r4, r5
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	2d00      	cmp	r5, #0
 800abee:	dc10      	bgt.n	800ac12 <__ieee754_sqrt+0x62>
 800abf0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abf4:	4330      	orrs	r0, r6
 800abf6:	d0f5      	beq.n	800abe4 <__ieee754_sqrt+0x34>
 800abf8:	b15d      	cbz	r5, 800ac12 <__ieee754_sqrt+0x62>
 800abfa:	ee10 2a10 	vmov	r2, s0
 800abfe:	462b      	mov	r3, r5
 800ac00:	ee10 0a10 	vmov	r0, s0
 800ac04:	f7f5 fb40 	bl	8000288 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	f7f5 fe1e 	bl	800084c <__aeabi_ddiv>
 800ac10:	e7e6      	b.n	800abe0 <__ieee754_sqrt+0x30>
 800ac12:	1509      	asrs	r1, r1, #20
 800ac14:	d076      	beq.n	800ad04 <__ieee754_sqrt+0x154>
 800ac16:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ac1a:	07ce      	lsls	r6, r1, #31
 800ac1c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ac20:	bf5e      	ittt	pl
 800ac22:	0fda      	lsrpl	r2, r3, #31
 800ac24:	005b      	lslpl	r3, r3, #1
 800ac26:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ac2a:	0fda      	lsrs	r2, r3, #31
 800ac2c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ac30:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ac34:	2000      	movs	r0, #0
 800ac36:	106d      	asrs	r5, r5, #1
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	f04f 0e16 	mov.w	lr, #22
 800ac3e:	4684      	mov	ip, r0
 800ac40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac44:	eb0c 0401 	add.w	r4, ip, r1
 800ac48:	4294      	cmp	r4, r2
 800ac4a:	bfde      	ittt	le
 800ac4c:	1b12      	suble	r2, r2, r4
 800ac4e:	eb04 0c01 	addle.w	ip, r4, r1
 800ac52:	1840      	addle	r0, r0, r1
 800ac54:	0052      	lsls	r2, r2, #1
 800ac56:	f1be 0e01 	subs.w	lr, lr, #1
 800ac5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ac5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac66:	d1ed      	bne.n	800ac44 <__ieee754_sqrt+0x94>
 800ac68:	4671      	mov	r1, lr
 800ac6a:	2720      	movs	r7, #32
 800ac6c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ac70:	4562      	cmp	r2, ip
 800ac72:	eb04 060e 	add.w	r6, r4, lr
 800ac76:	dc02      	bgt.n	800ac7e <__ieee754_sqrt+0xce>
 800ac78:	d113      	bne.n	800aca2 <__ieee754_sqrt+0xf2>
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	d811      	bhi.n	800aca2 <__ieee754_sqrt+0xf2>
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	eb06 0e04 	add.w	lr, r6, r4
 800ac84:	da43      	bge.n	800ad0e <__ieee754_sqrt+0x15e>
 800ac86:	f1be 0f00 	cmp.w	lr, #0
 800ac8a:	db40      	blt.n	800ad0e <__ieee754_sqrt+0x15e>
 800ac8c:	f10c 0801 	add.w	r8, ip, #1
 800ac90:	eba2 020c 	sub.w	r2, r2, ip
 800ac94:	429e      	cmp	r6, r3
 800ac96:	bf88      	it	hi
 800ac98:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ac9c:	1b9b      	subs	r3, r3, r6
 800ac9e:	4421      	add	r1, r4
 800aca0:	46c4      	mov	ip, r8
 800aca2:	0052      	lsls	r2, r2, #1
 800aca4:	3f01      	subs	r7, #1
 800aca6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800acaa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800acae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800acb2:	d1dd      	bne.n	800ac70 <__ieee754_sqrt+0xc0>
 800acb4:	4313      	orrs	r3, r2
 800acb6:	d006      	beq.n	800acc6 <__ieee754_sqrt+0x116>
 800acb8:	1c4c      	adds	r4, r1, #1
 800acba:	bf13      	iteet	ne
 800acbc:	3101      	addne	r1, #1
 800acbe:	3001      	addeq	r0, #1
 800acc0:	4639      	moveq	r1, r7
 800acc2:	f021 0101 	bicne.w	r1, r1, #1
 800acc6:	1043      	asrs	r3, r0, #1
 800acc8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800accc:	0849      	lsrs	r1, r1, #1
 800acce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800acd2:	07c2      	lsls	r2, r0, #31
 800acd4:	bf48      	it	mi
 800acd6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800acda:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800acde:	460c      	mov	r4, r1
 800ace0:	463d      	mov	r5, r7
 800ace2:	e77f      	b.n	800abe4 <__ieee754_sqrt+0x34>
 800ace4:	0ada      	lsrs	r2, r3, #11
 800ace6:	3815      	subs	r0, #21
 800ace8:	055b      	lsls	r3, r3, #21
 800acea:	2a00      	cmp	r2, #0
 800acec:	d0fa      	beq.n	800ace4 <__ieee754_sqrt+0x134>
 800acee:	02d7      	lsls	r7, r2, #11
 800acf0:	d50a      	bpl.n	800ad08 <__ieee754_sqrt+0x158>
 800acf2:	f1c1 0420 	rsb	r4, r1, #32
 800acf6:	fa23 f404 	lsr.w	r4, r3, r4
 800acfa:	1e4d      	subs	r5, r1, #1
 800acfc:	408b      	lsls	r3, r1
 800acfe:	4322      	orrs	r2, r4
 800ad00:	1b41      	subs	r1, r0, r5
 800ad02:	e788      	b.n	800ac16 <__ieee754_sqrt+0x66>
 800ad04:	4608      	mov	r0, r1
 800ad06:	e7f0      	b.n	800acea <__ieee754_sqrt+0x13a>
 800ad08:	0052      	lsls	r2, r2, #1
 800ad0a:	3101      	adds	r1, #1
 800ad0c:	e7ef      	b.n	800acee <__ieee754_sqrt+0x13e>
 800ad0e:	46e0      	mov	r8, ip
 800ad10:	e7be      	b.n	800ac90 <__ieee754_sqrt+0xe0>
 800ad12:	bf00      	nop
 800ad14:	7ff00000 	.word	0x7ff00000

0800ad18 <_gettimeofday>:
 800ad18:	4b02      	ldr	r3, [pc, #8]	; (800ad24 <_gettimeofday+0xc>)
 800ad1a:	2258      	movs	r2, #88	; 0x58
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad22:	4770      	bx	lr
 800ad24:	20000980 	.word	0x20000980

0800ad28 <_init>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr

0800ad34 <_fini>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr
