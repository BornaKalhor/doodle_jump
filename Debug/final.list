
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800b918  0800b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc34  0800bc34  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc34  0800bc34  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc34  0800bc34  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc34  0800bc34  0001bc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800bc3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          000008c8  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000990  20000990  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020dde  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae9  00000000  00000000  00040ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  000449c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001818  00000000  00000000  00046328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228fc  00000000  00000000  00047b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201e2  00000000  00000000  0006a43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce988  00000000  00000000  0008a61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158fa6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007aec  00000000  00000000  00158ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00160ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00160b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b900 	.word	0x0800b900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800b900 	.word	0x0800b900

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	817b      	strh	r3, [r7, #10]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	813b      	strh	r3, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <LiquidCrystal+0x90>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bca:	8939      	ldrh	r1, [r7, #8]
 8000bcc:	897a      	ldrh	r2, [r7, #10]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9308      	str	r3, [sp, #32]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9307      	str	r3, [sp, #28]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9306      	str	r3, [sp, #24]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9305      	str	r3, [sp, #20]
 8000bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be0:	9304      	str	r3, [sp, #16]
 8000be2:	8c3b      	ldrh	r3, [r7, #32]
 8000be4:	9303      	str	r3, [sp, #12]
 8000be6:	8bbb      	ldrh	r3, [r7, #28]
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	8b3b      	ldrh	r3, [r7, #24]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 f820 	bl	8000c3c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bfc:	e018      	b.n	8000c30 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bfe:	8939      	ldrh	r1, [r7, #8]
 8000c00:	897a      	ldrh	r2, [r7, #10]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9308      	str	r3, [sp, #32]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9307      	str	r3, [sp, #28]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	8c3b      	ldrh	r3, [r7, #32]
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	460b      	mov	r3, r1
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f806 	bl	8000c3c <init>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000

08000c3c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	4611      	mov	r1, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <init+0x84>)
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <init+0x88>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <init+0x8c>)
 8000c62:	8b3b      	ldrh	r3, [r7, #24]
 8000c64:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <init+0x90>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <init+0x94>)
 8000c6e:	8bbb      	ldrh	r3, [r7, #28]
 8000c70:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <init+0x94>)
 8000c74:	8c3b      	ldrh	r3, [r7, #32]
 8000c76:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <init+0x94>)
 8000c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c7c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <init+0x94>)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <init+0x94>)
 8000c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c88:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <init+0x94>)
 8000c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c8e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <init+0x94>)
 8000c92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c94:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <init+0x94>)
 8000c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e002      	b.n	8000cb0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <init+0x98>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f000 f810 	bl	8000cd8 <begin>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	200000fc 	.word	0x200000fc
 8000cc8:	2000011a 	.word	0x2000011a
 8000ccc:	20000100 	.word	0x20000100
 8000cd0:	20000108 	.word	0x20000108
 8000cd4:	20000119 	.word	0x20000119

08000cd8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d906      	bls.n	8000cfc <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <begin+0x1f4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <begin+0x1f4>)
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cfc:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <begin+0x1f8>)
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f988 	bl	8001020 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <begin+0x1fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <begin+0x54>
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <begin+0x1f4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <begin+0x1f4>)
 8000d2a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d2c:	f000 f8e4 	bl	8000ef8 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <begin+0x200>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <begin+0x204>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <begin+0x208>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <begin+0x20c>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <begin+0x210>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <begin+0x210>)
 8000d5e:	885b      	ldrh	r3, [r3, #2]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <begin+0x210>)
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <begin+0x210>)
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e02a      	b.n	8000dce <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <begin+0x204>)
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <begin+0x208>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b57      	ldr	r3, [pc, #348]	; (8000ee4 <begin+0x20c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <begin+0x210>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <begin+0x210>)
 8000d96:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <begin+0x210>)
 8000d9e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <begin+0x210>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <begin+0x210>)
 8000dae:	891b      	ldrh	r3, [r3, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <begin+0x210>)
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <begin+0x210>)
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <begin+0x210>)
 8000dc6:	89db      	ldrh	r3, [r3, #14]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dcc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <begin+0x214>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fd27 	bl	800582c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f003 f942 	bl	8004068 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <begin+0x214>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <begin+0x204>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 feae 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <begin+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <begin+0x20c>)
 8000dfa:	8811      	ldrh	r1, [r2, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fea6 	bl	8005b50 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <begin+0x208>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d007      	beq.n	8000e1c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <begin+0x214>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <begin+0x208>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 fe9a 	bl	8005b50 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <begin+0x1f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d115      	bne.n	8000e54 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa45 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f003 f91a 	bl	8004068 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa3f 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e3a:	2005      	movs	r0, #5
 8000e3c:	f003 f914 	bl	8004068 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fa39 	bl	80012b8 <write4bits>
    HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f003 f90e 	bl	8004068 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fa33 	bl	80012b8 <write4bits>
 8000e52:	e01d      	b.n	8000e90 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <begin+0x1f4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9a4 	bl	80011ac <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e64:	2005      	movs	r0, #5
 8000e66:	f003 f8ff 	bl	8004068 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <begin+0x1f4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f999 	bl	80011ac <command>
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f003 f8f4 	bl	8004068 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <begin+0x1f4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f98e 	bl	80011ac <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <begin+0x1f4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f986 	bl	80011ac <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <begin+0x218>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  display();
 8000ea6:	f000 f917 	bl	80010d8 <display>

  // clear it off
  clear();
 8000eaa:	f000 f8d9 	bl	8001060 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <begin+0x21c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <begin+0x21c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f974 	bl	80011ac <command>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000119 	.word	0x20000119
 8000ed0:	20000105 	.word	0x20000105
 8000ed4:	200000e4 	.word	0x200000e4
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	2000011c 	.word	0x2000011c
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	2000011a 	.word	0x2000011a
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	20000100 	.word	0x20000100
 8000ef0:	20000104 	.word	0x20000104
 8000ef4:	20000118 	.word	0x20000118

08000ef8 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <enableClock+0x10c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f06:	d10c      	bne.n	8000f22 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <enableClock+0x110>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <enableClock+0x110>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f20:	e06a      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <enableClock+0x10c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <enableClock+0x114>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10c      	bne.n	8000f46 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <enableClock+0x110>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <enableClock+0x110>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
}
 8000f44:	e058      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <enableClock+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a30      	ldr	r2, [pc, #192]	; (800100c <enableClock+0x114>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10c      	bne.n	8000f6a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <enableClock+0x110>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <enableClock+0x110>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
}
 8000f68:	e046      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOC)
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <enableClock+0x10c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <enableClock+0x118>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10c      	bne.n	8000f8e <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <enableClock+0x110>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	6153      	str	r3, [r2, #20]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <enableClock+0x110>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	e034      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOD)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <enableClock+0x10c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <enableClock+0x11c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10c      	bne.n	8000fb2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <enableClock+0x110>)
 8000f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa2:	6153      	str	r3, [r2, #20]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <enableClock+0x110>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	e022      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOE)
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <enableClock+0x10c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <enableClock+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d10c      	bne.n	8000fd6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <enableClock+0x110>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	6153      	str	r3, [r2, #20]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <enableClock+0x110>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
}
 8000fd4:	e010      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOF)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <enableClock+0x10c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <enableClock+0x124>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10b      	bne.n	8000ff8 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <enableClock+0x110>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6153      	str	r3, [r2, #20]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <enableClock+0x110>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000100 	.word	0x20000100
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48001000 	.word	0x48001000
 800101c:	48001400 	.word	0x48001400

08001020 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <setRowOffsets+0x3c>)
 8001034:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <setRowOffsets+0x3c>)
 800103c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <setRowOffsets+0x3c>)
 8001044:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <setRowOffsets+0x3c>)
 800104c:	70da      	strb	r2, [r3, #3]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000f8 	.word	0x200000f8

08001060 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f8a1 	bl	80011ac <command>
  HAL_Delay(2);  // this command takes a long time!
 800106a:	2002      	movs	r0, #2
 800106c:	f002 fffc 	bl	8004068 <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d803      	bhi.n	8001098 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setCursor+0x5c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	79ba      	ldrb	r2, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d303      	bcc.n	80010aa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <setCursor+0x5c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <setCursor+0x60>)
 80010ae:	5cd2      	ldrb	r2, [r2, r3]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f873 	bl	80011ac <command>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000105 	.word	0x20000105
 80010d4:	200000f8 	.word	0x200000f8

080010d8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <display+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <display+0x28>)
 80010e8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <display+0x28>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f859 	bl	80011ac <command>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000104 	.word	0x20000104

08001104 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <print+0x12>
 8001112:	2300      	movs	r3, #0
 8001114:	e01d      	b.n	8001152 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strlen>
 8001120:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001126:	e00c      	b.n	8001142 <print+0x3e>
    if (write(*buffer++)) n++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f849 	bl	80011c8 <write>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <print+0x4a>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	613a      	str	r2, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ed      	bne.n	8001128 <print+0x24>
 800114c:	e000      	b.n	8001150 <print+0x4c>
    else break;
 800114e:	bf00      	nop
  }
  return n;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f815 	bl	80011ac <command>
  for (int i=0; i<8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e009      	b.n	800119c <createChar+0x42>
    write(charmap[i]);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f819 	bl	80011c8 <write>
  for (int i=0; i<8; i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	ddf2      	ble.n	8001188 <createChar+0x2e>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f814 	bl	80011e8 <send>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <write>:

inline size_t write(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f806 	bl	80011e8 <send>
  return 1; // assume sucess
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <send+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <send+0x70>)
 80011fe:	8811      	ldrh	r1, [r2, #0]
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fca4 	bl	8005b50 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <send+0x74>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2bff      	cmp	r3, #255	; 0xff
 800120e:	d007      	beq.n	8001220 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <send+0x6c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <send+0x74>)
 8001216:	8811      	ldrh	r1, [r2, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fc98 	bl	8005b50 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <send+0x78>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <send+0x4e>
    write8bits(value);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f86c 	bl	800130c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001234:	e009      	b.n	800124a <send+0x62>
    write4bits(value>>4);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f83b 	bl	80012b8 <write4bits>
    write4bits(value);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f837 	bl	80012b8 <write4bits>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000100 	.word	0x20000100
 8001258:	2000011c 	.word	0x2000011c
 800125c:	200000fc 	.word	0x200000fc
 8001260:	20000119 	.word	0x20000119

08001264 <pulseEnable>:

void pulseEnable(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <pulseEnable+0x4c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <pulseEnable+0x50>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fc6c 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 fef5 	bl	8004068 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <pulseEnable+0x4c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <pulseEnable+0x50>)
 8001284:	8811      	ldrh	r1, [r2, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fc61 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800128e:	2001      	movs	r0, #1
 8001290:	f002 feea 	bl	8004068 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <pulseEnable+0x4c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <pulseEnable+0x50>)
 800129a:	8811      	ldrh	r1, [r2, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fc56 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fedf 	bl	8004068 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000100 	.word	0x20000100
 80012b4:	2000011a 	.word	0x2000011a

080012b8 <write4bits>:

void write4bits(uint8_t value) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e013      	b.n	80012f0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <write4bits+0x4c>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <write4bits+0x50>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f004 fc33 	bl	8005b50 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	dde8      	ble.n	80012c8 <write4bits+0x10>
  }

  pulseEnable();
 80012f6:	f7ff ffb5 	bl	8001264 <pulseEnable>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000100 	.word	0x20000100
 8001308:	20000108 	.word	0x20000108

0800130c <write8bits>:

void write8bits(uint8_t value) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e013      	b.n	8001344 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <write8bits+0x4c>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <write8bits+0x50>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	fa42 f303 	asr.w	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f004 fc09 	bl	8005b50 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b07      	cmp	r3, #7
 8001348:	dde8      	ble.n	800131c <write8bits+0x10>
  }

  pulseEnable();
 800134a:	f7ff ff8b 	bl	8001264 <pulseEnable>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000100 	.word	0x20000100
 800135c:	20000108 	.word	0x20000108

08001360 <init_state_vars>:
  0x03,
  0x03,
  0x03
};

void init_state_vars() {
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
     * menusState:
     * 	'z' init page
     * 	'g' game page
     * 	'a' about us
     * */
	menuState = 'z';
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <init_state_vars+0x14>)
 8001366:	227a      	movs	r2, #122	; 0x7a
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	2000016c 	.word	0x2000016c

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b098      	sub	sp, #96	; 0x60
 800137c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f002 fe0d 	bl	8003f9c <HAL_Init>
  /* USER CODE BEGIN Init */




  init_state_vars();
 8001382:	f7ff ffed 	bl	8001360 <init_state_vars>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	2110      	movs	r1, #16
 800138a:	4880      	ldr	r0, [pc, #512]	; (800158c <main+0x214>)
 800138c:	f004 fbe0 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2120      	movs	r1, #32
 8001394:	487d      	ldr	r0, [pc, #500]	; (800158c <main+0x214>)
 8001396:	f004 fbdb 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	487b      	ldr	r0, [pc, #492]	; (800158c <main+0x214>)
 80013a0:	f004 fbd6 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4878      	ldr	r0, [pc, #480]	; (800158c <main+0x214>)
 80013aa:	f004 fbd1 	bl	8005b50 <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80013ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	486e      	ldr	r0, [pc, #440]	; (800158c <main+0x214>)
 80013d4:	f7ff fbe8 	bl	8000ba8 <LiquidCrystal>
  begin(20, 4);
 80013d8:	2104      	movs	r1, #4
 80013da:	2014      	movs	r0, #20
 80013dc:	f7ff fc7c 	bl	8000cd8 <begin>

	createChar(0, doodler);
 80013e0:	496b      	ldr	r1, [pc, #428]	; (8001590 <main+0x218>)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff feb9 	bl	800115a <createChar>
	createChar(1, step);
 80013e8:	496a      	ldr	r1, [pc, #424]	; (8001594 <main+0x21c>)
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff feb5 	bl	800115a <createChar>
	createChar(2, enemy);
 80013f0:	4969      	ldr	r1, [pc, #420]	; (8001598 <main+0x220>)
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff feb1 	bl	800115a <createChar>
	createChar(3, spring_booster);
 80013f8:	4968      	ldr	r1, [pc, #416]	; (800159c <main+0x224>)
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff fead 	bl	800115a <createChar>
	createChar(4, blackhole);
 8001400:	4967      	ldr	r1, [pc, #412]	; (80015a0 <main+0x228>)
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff fea9 	bl	800115a <createChar>
	createChar(5, broken_step);
 8001408:	4966      	ldr	r1, [pc, #408]	; (80015a4 <main+0x22c>)
 800140a:	2005      	movs	r0, #5
 800140c:	f7ff fea5 	bl	800115a <createChar>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f8e0 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 fbcc 	bl	8001bb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001418:	f000 f9a6 	bl	8001768 <MX_I2C1_Init>
  MX_SPI1_Init();
 800141c:	f000 fa3e 	bl	800189c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001420:	f000 fba4 	bl	8001b6c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001424:	f000 fa78 	bl	8001918 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001428:	f000 fb70 	bl	8001b0c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800142c:	f000 fb38 	bl	8001aa0 <MX_TIM7_Init>
  MX_ADC4_Init();
 8001430:	f000 f93c 	bl	80016ac <MX_ADC4_Init>
  MX_TIM3_Init();
 8001434:	f000 fabe 	bl	80019b4 <MX_TIM3_Init>
  MX_RTC_Init();
 8001438:	f000 f9d6 	bl	80017e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc4);
 800143c:	485a      	ldr	r0, [pc, #360]	; (80015a8 <main+0x230>)
 800143e:	f003 f835 	bl	80044ac <HAL_ADC_Start_IT>
  //HAL_TIM_PWM_Init(&htim3, TIM_CHANNEL_1);



  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001442:	2100      	movs	r1, #0
 8001444:	4859      	ldr	r0, [pc, #356]	; (80015ac <main+0x234>)
 8001446:	f006 fdcb 	bl	8007fe0 <HAL_TIM_PWM_Start>
  //htim3.Instance->CCR1 = 220;


  unsigned char hello[8] = "hello \n";
 800144a:	4a59      	ldr	r2, [pc, #356]	; (80015b0 <main+0x238>)
 800144c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001454:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
 8001458:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800145c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001460:	2208      	movs	r2, #8
 8001462:	4854      	ldr	r0, [pc, #336]	; (80015b4 <main+0x23c>)
 8001464:	f007 fefe 	bl	8009264 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001468:	4853      	ldr	r0, [pc, #332]	; (80015b8 <main+0x240>)
 800146a:	f006 fced 	bl	8007e48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800146e:	484f      	ldr	r0, [pc, #316]	; (80015ac <main+0x234>)
 8001470:	f006 fcea 	bl	8007e48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001474:	4851      	ldr	r0, [pc, #324]	; (80015bc <main+0x244>)
 8001476:	f006 fce7 	bl	8007e48 <HAL_TIM_Base_Start_IT>


  RTC_TimeTypeDef mytime;
  mytime.Hours = 6;
 800147a:	2306      	movs	r3, #6
 800147c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  mytime.Minutes = 23;
 8001480:	2317      	movs	r3, #23
 8001482:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  mytime.Seconds = 20;
 8001486:	2314      	movs	r3, #20
 8001488:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800148c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	484a      	ldr	r0, [pc, #296]	; (80015c0 <main+0x248>)
 8001496:	f006 f934 	bl	8007702 <HAL_RTC_SetTime>


  RTC_DateTypeDef mydate;
  mydate.Year = 22;
 800149a:	2316      	movs	r3, #22
 800149c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  mydate.Month = 7;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  mydate.Date = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80014ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4842      	ldr	r0, [pc, #264]	; (80015c0 <main+0x248>)
 80014b6:	f006 fa3f 	bl	8007938 <HAL_RTC_SetDate>


  char timeStr[20];
  char dateStr[20];

  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 80014ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	483f      	ldr	r0, [pc, #252]	; (80015c0 <main+0x248>)
 80014c4:	f006 f9da 	bl	800787c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	483b      	ldr	r0, [pc, #236]	; (80015c0 <main+0x248>)
 80014d2:	f006 fad8 	bl	8007a86 <HAL_RTC_GetDate>


  sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 80014d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014da:	461a      	mov	r2, r3
 80014dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80014e0:	4619      	mov	r1, r3
 80014e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80014e6:	f107 0018 	add.w	r0, r7, #24
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	4935      	ldr	r1, [pc, #212]	; (80015c4 <main+0x24c>)
 80014f0:	f008 ff56 	bl	800a3a0 <siprintf>
  sprintf(dateStr, "%d //%d // %d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 80014f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014f8:	461a      	mov	r2, r3
 80014fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80014fe:	4619      	mov	r1, r3
 8001500:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001504:	1d38      	adds	r0, r7, #4
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	460b      	mov	r3, r1
 800150a:	492f      	ldr	r1, [pc, #188]	; (80015c8 <main+0x250>)
 800150c:	f008 ff48 	bl	800a3a0 <siprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (1)
  {

	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001514:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4828      	ldr	r0, [pc, #160]	; (80015c0 <main+0x248>)
 800151e:	f006 f9ad 	bl	800787c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	4825      	ldr	r0, [pc, #148]	; (80015c0 <main+0x248>)
 800152c:	f006 faab 	bl	8007a86 <HAL_RTC_GetDate>


	  sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001530:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001534:	461a      	mov	r2, r3
 8001536:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800153a:	4619      	mov	r1, r3
 800153c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001540:	f107 0018 	add.w	r0, r7, #24
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	460b      	mov	r3, r1
 8001548:	491e      	ldr	r1, [pc, #120]	; (80015c4 <main+0x24c>)
 800154a:	f008 ff29 	bl	800a3a0 <siprintf>
	  sprintf(dateStr, "%d//%d//%d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 800154e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001552:	461a      	mov	r2, r3
 8001554:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001558:	4619      	mov	r1, r3
 800155a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800155e:	1d38      	adds	r0, r7, #4
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	460b      	mov	r3, r1
 8001564:	4919      	ldr	r1, [pc, #100]	; (80015cc <main+0x254>)
 8001566:	f008 ff1b 	bl	800a3a0 <siprintf>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
	  HAL_Delay(100);
 800156a:	2064      	movs	r0, #100	; 0x64
 800156c:	f002 fd7c 	bl	8004068 <HAL_Delay>

	  i = (i+1) % 100;
 8001570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001572:	3301      	adds	r3, #1
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <main+0x258>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1151      	asrs	r1, r2, #5
 800157c:	17da      	asrs	r2, r3, #31
 800157e:	1a8a      	subs	r2, r1, r2
 8001580:	2164      	movs	r1, #100	; 0x64
 8001582:	fb01 f202 	mul.w	r2, r1, r2
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800158a:	e7c3      	b.n	8001514 <main+0x19c>
 800158c:	48000c00 	.word	0x48000c00
 8001590:	20000004 	.word	0x20000004
 8001594:	2000000c 	.word	0x2000000c
 8001598:	20000014 	.word	0x20000014
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000024 	.word	0x20000024
 80015a4:	2000002c 	.word	0x2000002c
 80015a8:	20000310 	.word	0x20000310
 80015ac:	20000170 	.word	0x20000170
 80015b0:	0800b940 	.word	0x0800b940
 80015b4:	2000028c 	.word	0x2000028c
 80015b8:	20000240 	.word	0x20000240
 80015bc:	2000064c 	.word	0x2000064c
 80015c0:	200001bc 	.word	0x200001bc
 80015c4:	0800b918 	.word	0x0800b918
 80015c8:	0800b924 	.word	0x0800b924
 80015cc:	0800b934 	.word	0x0800b934
 80015d0:	51eb851f 	.word	0x51eb851f

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09e      	sub	sp, #120	; 0x78
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 fe66 	bl	800a2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	223c      	movs	r2, #60	; 0x3c
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 fe58 	bl	800a2b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001604:	230b      	movs	r3, #11
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001616:	2310      	movs	r3, #16
 8001618:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800161a:	2301      	movs	r3, #1
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001626:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800162c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fce6 	bl	8006004 <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800163e:	f000 fba5 	bl	8001d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2302      	movs	r3, #2
 8001648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800165c:	2101      	movs	r1, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fbd8 	bl	8006e14 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800166a:	f000 fb8f 	bl	8001d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <SystemClock_Config+0xd4>)
 8001670:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001684:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fdf6 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800169a:	f000 fb77 	bl	8001d8c <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3778      	adds	r7, #120	; 0x78
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	00030122 	.word	0x00030122

080016ac <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016c4:	4a27      	ldr	r2, [pc, #156]	; (8001764 <MX_ADC4_Init+0xb8>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_ADC4_Init+0xb4>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_ADC4_Init+0xb4>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_ADC4_Init+0xb4>)
 800170a:	2204      	movs	r2, #4
 800170c:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_ADC4_Init+0xb4>)
 8001710:	2200      	movs	r2, #0
 8001712:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_ADC4_Init+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800171a:	4811      	ldr	r0, [pc, #68]	; (8001760 <MX_ADC4_Init+0xb4>)
 800171c:	f002 fce6 	bl	80040ec <HAL_ADC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8001726:	f000 fb31 	bl	8001d8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800172a:	2304      	movs	r3, #4
 800172c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172e:	2301      	movs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_ADC4_Init+0xb4>)
 8001748:	f003 fb32 	bl	8004db0 <HAL_ADC_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8001752:	f000 fb1b 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000310 	.word	0x20000310
 8001764:	50000500 	.word	0x50000500

08001768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_I2C1_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_I2C1_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_I2C1_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_I2C1_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_I2C1_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_I2C1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_I2C1_Init+0x74>)
 80017a4:	f004 fa29 	bl	8005bfa <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f000 faed 	bl	8001d8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_I2C1_Init+0x74>)
 80017b6:	f004 faaf 	bl	8005d18 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f000 fae4 	bl	8001d8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_I2C1_Init+0x74>)
 80017c8:	f004 faf1 	bl	8005dae <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fadb 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000120 	.word	0x20000120
 80017e0:	40005400 	.word	0x40005400
 80017e4:	2000090e 	.word	0x2000090e

080017e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_RTC_Init+0xac>)
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <MX_RTC_Init+0xb0>)
 8001804:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_RTC_Init+0xac>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_RTC_Init+0xac>)
 800180e:	2227      	movs	r2, #39	; 0x27
 8001810:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MX_RTC_Init+0xac>)
 8001814:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001818:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_RTC_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_RTC_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_RTC_Init+0xac>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800182c:	4819      	ldr	r0, [pc, #100]	; (8001894 <MX_RTC_Init+0xac>)
 800182e:	f005 fed7 	bl	80075e0 <HAL_RTC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001838:	f000 faa8 	bl	8001d8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800183c:	2300      	movs	r3, #0
 800183e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001840:	2300      	movs	r3, #0
 8001842:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001844:	2300      	movs	r3, #0
 8001846:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2201      	movs	r2, #1
 8001854:	4619      	mov	r1, r3
 8001856:	480f      	ldr	r0, [pc, #60]	; (8001894 <MX_RTC_Init+0xac>)
 8001858:	f005 ff53 	bl	8007702 <HAL_RTC_SetTime>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001862:	f000 fa93 	bl	8001d8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001866:	2301      	movs	r3, #1
 8001868:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800186a:	2301      	movs	r3, #1
 800186c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800186e:	2301      	movs	r3, #1
 8001870:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001872:	2300      	movs	r3, #0
 8001874:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_RTC_Init+0xac>)
 800187e:	f006 f85b 	bl	8007938 <HAL_RTC_SetDate>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001888:	f000 fa80 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200001bc 	.word	0x200001bc
 8001898:	40002800 	.word	0x40002800

0800189c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_SPI1_Init+0x74>)
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <MX_SPI1_Init+0x78>)
 80018a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_SPI1_Init+0x74>)
 80018a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_SPI1_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_SPI1_Init+0x74>)
 80018b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_SPI1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_SPI1_Init+0x74>)
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_SPI1_Init+0x74>)
 80018d2:	2208      	movs	r2, #8
 80018d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_SPI1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_SPI1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_SPI1_Init+0x74>)
 80018ea:	2207      	movs	r2, #7
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_SPI1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_SPI1_Init+0x74>)
 80018f6:	2208      	movs	r2, #8
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_SPI1_Init+0x74>)
 80018fc:	f006 f9a2 	bl	8007c44 <HAL_SPI_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 fa41 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001dc 	.word	0x200001dc
 8001914:	40013000 	.word	0x40013000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001940:	f640 125f 	movw	r2, #2399	; 0x95f
 8001944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM2_Init+0x98>)
 800194e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM2_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001962:	f006 fa1a 	bl	8007d9a <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800196c:	f000 fa0e 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM2_Init+0x98>)
 800197e:	f006 fe63 	bl	8008648 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001988:	f000 fa00 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM2_Init+0x98>)
 800199a:	f007 fb77 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019a4:	f000 f9f2 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000240 	.word	0x20000240

080019b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019e8:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <MX_TIM3_Init+0xe8>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019ee:	2248      	movs	r2, #72	; 0x48
 80019f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019fa:	2264      	movs	r2, #100	; 0x64
 80019fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a0c:	f006 f9c5 	bl	8007d9a <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a16:	f000 f9b9 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a24:	4619      	mov	r1, r3
 8001a26:	481c      	ldr	r0, [pc, #112]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a28:	f006 fe0e 	bl	8008648 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a32:	f000 f9ab 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a38:	f006 fa70 	bl	8007f1c <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a42:	f000 f9a3 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4810      	ldr	r0, [pc, #64]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a56:	f007 fb19 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a60:	f000 f994 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	; 0x60
 8001a66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a7c:	f006 fcd0 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a86:	f000 f981 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a8c:	f000 faf8 	bl	8002080 <HAL_TIM_MspPostInit>

}
 8001a90:	bf00      	nop
 8001a92:	3738      	adds	r7, #56	; 0x38
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000170 	.word	0x20000170
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <MX_TIM7_Init+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ab8:	f640 125f 	movw	r2, #2399	; 0x95f
 8001abc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ac6:	2214      	movs	r2, #20
 8001ac8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ad2:	f006 f962 	bl	8007d9a <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001adc:	f000 f956 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001aee:	f007 facd 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001af8:	f000 f948 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000064c 	.word	0x2000064c
 8001b08:	40001400 	.word	0x40001400

08001b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <MX_USART2_UART_Init+0x5c>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_USART2_UART_Init+0x58>)
 8001b50:	f007 fb3a 	bl	80091c8 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b5a:	f000 f917 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <MX_USB_PCD_Init+0x40>)
 8001b74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <MX_USB_PCD_Init+0x3c>)
 8001b96:	f004 f956 	bl	8005e46 <HAL_PCD_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001ba0:	f000 f8f4 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000360 	.word	0x20000360
 8001bac:	40005c00 	.word	0x40005c00

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a6b      	ldr	r2, [pc, #428]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6153      	str	r3, [r2, #20]
 8001bd2:	4b69      	ldr	r3, [pc, #420]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf6:	4b60      	ldr	r3, [pc, #384]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001bfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	4a59      	ldr	r2, [pc, #356]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	6153      	str	r3, [r2, #20]
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c30:	6153      	str	r3, [r2, #20]
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <MX_GPIO_Init+0x1c8>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001c56:	2200      	movs	r2, #0
 8001c58:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001c5c:	4847      	ldr	r0, [pc, #284]	; (8001d7c <MX_GPIO_Init+0x1cc>)
 8001c5e:	f003 ff77 	bl	8005b50 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	210f      	movs	r1, #15
 8001c66:	4846      	ldr	r0, [pc, #280]	; (8001d80 <MX_GPIO_Init+0x1d0>)
 8001c68:	f003 ff72 	bl	8005b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001c72:	4844      	ldr	r0, [pc, #272]	; (8001d84 <MX_GPIO_Init+0x1d4>)
 8001c74:	f003 ff6c 	bl	8005b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <MX_GPIO_Init+0x1d8>)
 8001c80:	f003 ff66 	bl	8005b50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001c84:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001c88:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4837      	ldr	r0, [pc, #220]	; (8001d7c <MX_GPIO_Init+0x1cc>)
 8001c9e:	f003 fdc5 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4831      	ldr	r0, [pc, #196]	; (8001d7c <MX_GPIO_Init+0x1cc>)
 8001cb8:	f003 fdb8 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482b      	ldr	r0, [pc, #172]	; (8001d80 <MX_GPIO_Init+0x1d0>)
 8001cd4:	f003 fdaa 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001cd8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4824      	ldr	r0, [pc, #144]	; (8001d84 <MX_GPIO_Init+0x1d4>)
 8001cf2:	f003 fd9b 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cf6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cfa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481e      	ldr	r0, [pc, #120]	; (8001d88 <MX_GPIO_Init+0x1d8>)
 8001d10:	f003 fd8c 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d14:	230f      	movs	r3, #15
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <MX_GPIO_Init+0x1d8>)
 8001d2a:	f003 fd7f 	bl	800582c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2101      	movs	r1, #1
 8001d32:	2006      	movs	r0, #6
 8001d34:	f003 fccd 	bl	80056d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d38:	2006      	movs	r0, #6
 8001d3a:	f003 fce6 	bl	800570a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2101      	movs	r1, #1
 8001d42:	2007      	movs	r0, #7
 8001d44:	f003 fcc5 	bl	80056d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d48:	2007      	movs	r0, #7
 8001d4a:	f003 fcde 	bl	800570a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2101      	movs	r1, #1
 8001d52:	2008      	movs	r0, #8
 8001d54:	f003 fcbd 	bl	80056d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001d58:	2008      	movs	r0, #8
 8001d5a:	f003 fcd6 	bl	800570a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	2009      	movs	r0, #9
 8001d64:	f003 fcb5 	bl	80056d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d68:	2009      	movs	r0, #9
 8001d6a:	f003 fcce 	bl	800570a <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48001000 	.word	0x48001000
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000c00 	.word	0x48000c00

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>
	...

08001d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x44>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_MspInit+0x44>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6193      	str	r3, [r2, #24]
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x44>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x44>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x44>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x44>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dce:	2005      	movs	r0, #5
 8001dd0:	f003 fc74 	bl	80056bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_ADC_MspInit+0x84>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12c      	bne.n	8001e5c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB14     ------> ADC4_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4809      	ldr	r0, [pc, #36]	; (8001e6c <HAL_ADC_MspInit+0x8c>)
 8001e48:	f003 fcf0 	bl	800582c <HAL_GPIO_Init>

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	203d      	movs	r0, #61	; 0x3d
 8001e52:	f003 fc3e 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001e56:	203d      	movs	r0, #61	; 0x3d
 8001e58:	f003 fc57 	bl	800570a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	50000500 	.word	0x50000500
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000400 	.word	0x48000400

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_I2C_MspInit+0x7c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d127      	bne.n	8001ee2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6153      	str	r3, [r2, #20]
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eae:	2312      	movs	r3, #18
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_I2C_MspInit+0x84>)
 8001ec6:	f003 fcb1 	bl	800582c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_I2C_MspInit+0x80>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	48000400 	.word	0x48000400

08001ef8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_RTC_MspInit+0x44>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_RTC_MspInit+0x36>
 8001f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f18:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_RTC_MspInit+0x48>)
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40002800 	.word	0x40002800
 8001f40:	10908100 	.word	0x10908100

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0x7c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d128      	bne.n	8001fb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f70:	6193      	str	r3, [r2, #24]
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	6153      	str	r3, [r2, #20]
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001f96:	23e0      	movs	r3, #224	; 0xe0
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb4:	f003 fc3a 	bl	800582c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013000 	.word	0x40013000
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d114      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	201c      	movs	r0, #28
 8001ff8:	f003 fb6b 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f003 fb84 	bl	800570a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002002:	e032      	b.n	800206a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_TIM_Base_MspInit+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d114      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2102      	movs	r1, #2
 800202a:	201d      	movs	r0, #29
 800202c:	f003 fb51 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002030:	201d      	movs	r0, #29
 8002032:	f003 fb6a 	bl	800570a <HAL_NVIC_EnableIRQ>
}
 8002036:	e018      	b.n	800206a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0f      	ldr	r2, [pc, #60]	; (800207c <HAL_TIM_Base_MspInit+0xb4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d113      	bne.n	800206a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002048:	f043 0320 	orr.w	r3, r3, #32
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2101      	movs	r1, #1
 800205e:	2037      	movs	r0, #55	; 0x37
 8002060:	f003 fb37 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002064:	2037      	movs	r0, #55	; 0x37
 8002066:	f003 fb50 	bl	800570a <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40000400 	.word	0x40000400
 800207c:	40001400 	.word	0x40001400

08002080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_TIM_MspPostInit+0x64>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d11b      	bne.n	80020da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ac:	6153      	str	r3, [r2, #20]
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE2     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ba:	2304      	movs	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020d6:	f003 fba9 	bl	800582c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48001000 	.word	0x48001000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_UART_MspInit+0x8c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d130      	bne.n	8002174 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_UART_MspInit+0x90>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_UART_MspInit+0x90>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_UART_MspInit+0x90>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_UART_MspInit+0x90>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_UART_MspInit+0x90>)
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_UART_MspInit+0x90>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002142:	230c      	movs	r3, #12
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002152:	2307      	movs	r3, #7
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f003 fb64 	bl	800582c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2101      	movs	r1, #1
 8002168:	2026      	movs	r0, #38	; 0x26
 800216a:	f003 fab2 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800216e:	2026      	movs	r0, #38	; 0x26
 8002170:	f003 facb 	bl	800570a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40004400 	.word	0x40004400
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_PCD_MspInit+0x80>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d129      	bne.n	80021fa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	6153      	str	r3, [r2, #20]
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80021be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80021d0:	230e      	movs	r3, #14
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f003 fb25 	bl	800582c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_PCD_MspInit+0x84>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40005c00 	.word	0x40005c00
 8002208:	40021000 	.word	0x40021000

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f001 fee6 	bl	8004028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 8002264:	2001      	movs	r0, #1
 8002266:	f003 fca5 	bl	8005bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  keypadCallback(3);
 800226a:	2003      	movs	r0, #3
 800226c:	f001 fac4 	bl	80037f8 <keypadCallback>
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <EXTI0_IRQHandler+0x20>)
 8002276:	f003 fc83 	bl	8005b80 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	48001000 	.word	0x48001000

08002284 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 8002288:	2002      	movs	r0, #2
 800228a:	f003 fc93 	bl	8005bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  keypadCallback(2);
 800228e:	2002      	movs	r0, #2
 8002290:	f001 fab2 	bl	80037f8 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229a:	4802      	ldr	r0, [pc, #8]	; (80022a4 <EXTI1_IRQHandler+0x20>)
 800229c:	f003 fc58 	bl	8005b50 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI1_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	48001000 	.word	0x48001000

080022a8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80022ac:	2004      	movs	r0, #4
 80022ae:	f003 fc81 	bl	8005bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  keypadCallback(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f001 faa0 	bl	80037f8 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022be:	4802      	ldr	r0, [pc, #8]	; (80022c8 <EXTI2_TSC_IRQHandler+0x20>)
 80022c0:	f003 fc46 	bl	8005b50 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	48001000 	.word	0x48001000

080022cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS_I2C_SPI_Pin);
 80022d0:	2008      	movs	r0, #8
 80022d2:	f003 fc6f 	bl	8005bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022dc:	4803      	ldr	r0, [pc, #12]	; (80022ec <EXTI3_IRQHandler+0x20>)
 80022de:	f003 fc37 	bl	8005b50 <HAL_GPIO_WritePin>
  keypadCallback(0);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f001 fa88 	bl	80037f8 <keypadCallback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	48001000 	.word	0x48001000

080022f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 80022f6:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f8:	489e      	ldr	r0, [pc, #632]	; (8002574 <TIM2_IRQHandler+0x284>)
 80022fa:	f005 ff71 	bl	80081e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80022fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002302:	489d      	ldr	r0, [pc, #628]	; (8002578 <TIM2_IRQHandler+0x288>)
 8002304:	f003 fc3c 	bl	8005b80 <HAL_GPIO_TogglePin>
	unsigned char buff[512] = {' '};
 8002308:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800230c:	2220      	movs	r2, #32
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	3304      	adds	r3, #4
 8002312:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f007 ffcb 	bl	800a2b4 <memset>
//  // Update State variables
//  print("test");
  if (menuState != 'g') { // this is game state
 800231e:	4b97      	ldr	r3, [pc, #604]	; (800257c <TIM2_IRQHandler+0x28c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b67      	cmp	r3, #103	; 0x67
 8002324:	d004      	beq.n	8002330 <TIM2_IRQHandler+0x40>
	  initGameState();
 8002326:	f001 f999 	bl	800365c <initGameState>
	  menuState = 'g';
 800232a:	4b94      	ldr	r3, [pc, #592]	; (800257c <TIM2_IRQHandler+0x28c>)
 800232c:	2267      	movs	r2, #103	; 0x67
 800232e:	701a      	strb	r2, [r3, #0]

  }

  // Upload on LCD
	unsigned char hello[64] = "\n\n\nTurn started \n";
 8002330:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <TIM2_IRQHandler+0x290>)
 8002336:	4634      	mov	r4, r6
 8002338:	461d      	mov	r5, r3
 800233a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	8023      	strh	r3, [r4, #0]
 8002342:	f106 0312 	add.w	r3, r6, #18
 8002346:	222e      	movs	r2, #46	; 0x2e
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f007 ffb2 	bl	800a2b4 <memset>
/*	HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);							*/
  switch (menuState) {
 8002350:	4b8a      	ldr	r3, [pc, #552]	; (800257c <TIM2_IRQHandler+0x28c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3b61      	subs	r3, #97	; 0x61
 8002356:	2b19      	cmp	r3, #25
 8002358:	f200 80e0 	bhi.w	800251c <TIM2_IRQHandler+0x22c>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <TIM2_IRQHandler+0x74>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002507 	.word	0x08002507
 8002368:	0800251d 	.word	0x0800251d
 800236c:	0800251d 	.word	0x0800251d
 8002370:	080023e1 	.word	0x080023e1
 8002374:	0800251d 	.word	0x0800251d
 8002378:	0800251d 	.word	0x0800251d
 800237c:	0800242b 	.word	0x0800242b
 8002380:	0800251d 	.word	0x0800251d
 8002384:	0800251d 	.word	0x0800251d
 8002388:	0800251d 	.word	0x0800251d
 800238c:	0800251d 	.word	0x0800251d
 8002390:	0800251d 	.word	0x0800251d
 8002394:	08002417 	.word	0x08002417
 8002398:	0800251d 	.word	0x0800251d
 800239c:	0800251d 	.word	0x0800251d
 80023a0:	0800251d 	.word	0x0800251d
 80023a4:	0800251d 	.word	0x0800251d
 80023a8:	0800251d 	.word	0x0800251d
 80023ac:	0800251d 	.word	0x0800251d
 80023b0:	0800251d 	.word	0x0800251d
 80023b4:	0800251d 	.word	0x0800251d
 80023b8:	0800251d 	.word	0x0800251d
 80023bc:	0800251d 	.word	0x0800251d
 80023c0:	0800251d 	.word	0x0800251d
 80023c4:	0800251d 	.word	0x0800251d
 80023c8:	080023cd 	.word	0x080023cd
  	  case 'z':
  		  clear();
 80023cc:	f7fe fe48 	bl	8001060 <clear>
  		  setCursor(0, 0);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fe4e 	bl	8001074 <setCursor>
  		  print("Doodle Jump");
 80023d8:	486a      	ldr	r0, [pc, #424]	; (8002584 <TIM2_IRQHandler+0x294>)
 80023da:	f7fe fe93 	bl	8001104 <print>
  		  break;
 80023de:	e09d      	b.n	800251c <TIM2_IRQHandler+0x22c>
	  case 'd':
	  	clear();
 80023e0:	f7fe fe3e 	bl	8001060 <clear>
		  setCursor(0, 0);
 80023e4:	2100      	movs	r1, #0
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fe44 	bl	8001074 <setCursor>
		  print("You Lost ");
 80023ec:	4866      	ldr	r0, [pc, #408]	; (8002588 <TIM2_IRQHandler+0x298>)
 80023ee:	f7fe fe89 	bl	8001104 <print>
		  setCursor(0, 1);
 80023f2:	2101      	movs	r1, #1
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe fe3d 	bl	8001074 <setCursor>
		  sprintf(buff, " %d ", score);
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <TIM2_IRQHandler+0x29c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002402:	4963      	ldr	r1, [pc, #396]	; (8002590 <TIM2_IRQHandler+0x2a0>)
 8002404:	4618      	mov	r0, r3
 8002406:	f007 ffcb 	bl	800a3a0 <siprintf>
		  print(buff);
 800240a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fe78 	bl	8001104 <print>
	   	break;
 8002414:	e082      	b.n	800251c <TIM2_IRQHandler+0x22c>
  	  case 'm':
  		  clear();
 8002416:	f7fe fe23 	bl	8001060 <clear>
  		  setCursor(0, 0);
 800241a:	2100      	movs	r1, #0
 800241c:	2000      	movs	r0, #0
 800241e:	f7fe fe29 	bl	8001074 <setCursor>
  		  print("1 - Start   2 - About us");
 8002422:	485c      	ldr	r0, [pc, #368]	; (8002594 <TIM2_IRQHandler+0x2a4>)
 8002424:	f7fe fe6e 	bl	8001104 <print>
  		  break;
 8002428:	e078      	b.n	800251c <TIM2_IRQHandler+0x22c>
  	  case 'g':

		sprintf(buff, "DEBUG: \n ph:%d, phscreen:%d sc:%d \n", playerHeight, playerHeightInScreen, score);
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <TIM2_IRQHandler+0x2a8>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b5b      	ldr	r3, [pc, #364]	; (800259c <TIM2_IRQHandler+0x2ac>)
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <TIM2_IRQHandler+0x29c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	460b      	mov	r3, r1
 800243e:	4958      	ldr	r1, [pc, #352]	; (80025a0 <TIM2_IRQHandler+0x2b0>)
 8002440:	f007 ffae 	bl	800a3a0 <siprintf>
/*		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);							*/
		sprintf(buff, "DEBUG: \n bl:%d, ls:%d, vd:%d, ms:%d, bs:%d \n",
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <TIM2_IRQHandler+0x2b4>)
 8002446:	681c      	ldr	r4, [r3, #0]
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <TIM2_IRQHandler+0x2b8>)
 800244a:	681d      	ldr	r5, [r3, #0]
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <TIM2_IRQHandler+0x2bc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <TIM2_IRQHandler+0x2c0>)
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	4957      	ldr	r1, [pc, #348]	; (80025b4 <TIM2_IRQHandler+0x2c4>)
 8002456:	6809      	ldr	r1, [r1, #0]
 8002458:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800245c:	9102      	str	r1, [sp, #8]
 800245e:	9201      	str	r2, [sp, #4]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	462b      	mov	r3, r5
 8002464:	4622      	mov	r2, r4
 8002466:	4954      	ldr	r1, [pc, #336]	; (80025b8 <TIM2_IRQHandler+0x2c8>)
 8002468:	f007 ff9a 	bl	800a3a0 <siprintf>
			blockCount, looseCount, voidCount, monsterCount, boosterCount);
/*		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);							*/
		if (!pauseGame)
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <TIM2_IRQHandler+0x2cc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <TIM2_IRQHandler+0x188>
			processTurn();
 8002474:	f000 f9f2 	bl	800285c <processTurn>
		printGame();
 8002478:	f000 fe14 	bl	80030a4 <printGame>
//  		  DEBUG scores
//  		  char buff[20];
//  		  sprintf(buff, "%d %d %d", score, playerHeight, playerHeightInScreen);
//  		  sprintf(buff, "%d", getRandom(0, 9));
//  		  print(buff);
  		  int pc = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  		  int i, j;
  		  for (i = 0; i < boardColumns; i ++) {
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002488:	e025      	b.n	80024d6 <TIM2_IRQHandler+0x1e6>
  			  for (j = 0;j < boardRows; j ++ ) {
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002490:	e018      	b.n	80024c4 <TIM2_IRQHandler+0x1d4>
  				  if (board[i][j] == 'p')
 8002492:	494b      	ldr	r1, [pc, #300]	; (80025c0 <TIM2_IRQHandler+0x2d0>)
 8002494:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	440a      	add	r2, r1
 80024a4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80024a8:	4413      	add	r3, r2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d104      	bne.n	80024ba <TIM2_IRQHandler+0x1ca>
  					  pc ++;
 80024b0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80024b4:	3301      	adds	r3, #1
 80024b6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  			  for (j = 0;j < boardRows; j ++ ) {
 80024ba:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80024be:	3301      	adds	r3, #1
 80024c0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80024c4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80024c8:	2b13      	cmp	r3, #19
 80024ca:	dde2      	ble.n	8002492 <TIM2_IRQHandler+0x1a2>
  		  for (i = 0; i < boardColumns; i ++) {
 80024cc:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80024d0:	3301      	adds	r3, #1
 80024d2:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80024d6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80024da:	2b03      	cmp	r3, #3
 80024dc:	ddd5      	ble.n	800248a <TIM2_IRQHandler+0x19a>
  			  }
  		  }
  		  if (pc > 1) {
 80024de:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	dd19      	ble.n	800251a <TIM2_IRQHandler+0x22a>
				unsigned char hello[64] = "******* HOLY SHIT \n";
 80024e6:	1d3e      	adds	r6, r7, #4
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <TIM2_IRQHandler+0x2d4>)
 80024ea:	4634      	mov	r4, r6
 80024ec:	461d      	mov	r5, r3
 80024ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	f106 0314 	add.w	r3, r6, #20
 80024fa:	222c      	movs	r2, #44	; 0x2c
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f007 fed8 	bl	800a2b4 <memset>
/*  			  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);					*/
  		  }
  		  break;
 8002504:	e009      	b.n	800251a <TIM2_IRQHandler+0x22a>
  	  case 'a':
  		  clear();
 8002506:	f7fe fdab 	bl	8001060 <clear>
  		  setCursor(0, 0);
 800250a:	2100      	movs	r1, #0
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe fdb1 	bl	8001074 <setCursor>
  		  print(" Yosef and Borna");
 8002512:	482d      	ldr	r0, [pc, #180]	; (80025c8 <TIM2_IRQHandler+0x2d8>)
 8002514:	f7fe fdf6 	bl	8001104 <print>
  		  break;
 8002518:	e000      	b.n	800251c <TIM2_IRQHandler+0x22c>
  		  break;
 800251a:	bf00      	nop
  }

  // Delay for better visual
  HAL_Delay(1);
 800251c:	2001      	movs	r0, #1
 800251e:	f001 fda3 	bl	8004068 <HAL_Delay>

  v=HAL_ADC_GetValue(&hadc4);
 8002522:	482a      	ldr	r0, [pc, #168]	; (80025cc <TIM2_IRQHandler+0x2dc>)
 8002524:	f002 f902 	bl	800472c <HAL_ADC_GetValue>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <TIM2_IRQHandler+0x2e0>)
 800252e:	601a      	str	r2, [r3, #0]
  degree = ((((((v)*200)/(4095))*50) +50) / 100) / 11;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <TIM2_IRQHandler+0x2e0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	22c8      	movs	r2, #200	; 0xc8
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <TIM2_IRQHandler+0x2e4>)
 800253c:	fb82 1203 	smull	r1, r2, r2, r3
 8002540:	441a      	add	r2, r3
 8002542:	12d2      	asrs	r2, r2, #11
 8002544:	17db      	asrs	r3, r3, #31
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	3301      	adds	r3, #1
 800254a:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <TIM2_IRQHandler+0x2e8>)
 800254c:	fb82 1203 	smull	r1, r2, r2, r3
 8002550:	1092      	asrs	r2, r2, #2
 8002552:	17db      	asrs	r3, r3, #31
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <TIM2_IRQHandler+0x2ec>)
 8002558:	6013      	str	r3, [r2, #0]
//  degree = (((v)*30)/(4095))*50+500;
  //int step = degree / 50;

  //if(degree < 0) degree = 0;
  //if(degree > 9) degree = 9;
  show(degree);
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <TIM2_IRQHandler+0x2ec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fbde 	bl	8003d20 <show>

//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);

//  HAL_Delay(200);
  HAL_ADC_Start_IT(&hadc4);
 8002564:	4819      	ldr	r0, [pc, #100]	; (80025cc <TIM2_IRQHandler+0x2dc>)
 8002566:	f001 ffa1 	bl	80044ac <HAL_ADC_Start_IT>


  /* USER CODE END TIM2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	f507 7725 	add.w	r7, r7, #660	; 0x294
 8002570:	46bd      	mov	sp, r7
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002574:	20000240 	.word	0x20000240
 8002578:	48001000 	.word	0x48001000
 800257c:	2000016c 	.word	0x2000016c
 8002580:	0800b9ec 	.word	0x0800b9ec
 8002584:	0800b948 	.word	0x0800b948
 8002588:	0800b954 	.word	0x0800b954
 800258c:	2000070c 	.word	0x2000070c
 8002590:	0800b960 	.word	0x0800b960
 8002594:	0800b968 	.word	0x0800b968
 8002598:	20000934 	.word	0x20000934
 800259c:	20000910 	.word	0x20000910
 80025a0:	0800b984 	.word	0x0800b984
 80025a4:	20000978 	.word	0x20000978
 80025a8:	200008a8 	.word	0x200008a8
 80025ac:	20000974 	.word	0x20000974
 80025b0:	20000924 	.word	0x20000924
 80025b4:	200008a4 	.word	0x200008a4
 80025b8:	0800b9a8 	.word	0x0800b9a8
 80025bc:	20000914 	.word	0x20000914
 80025c0:	200006b4 	.word	0x200006b4
 80025c4:	0800ba2c 	.word	0x0800ba2c
 80025c8:	0800b9d8 	.word	0x0800b9d8
 80025cc:	20000310 	.word	0x20000310
 80025d0:	200008b0 	.word	0x200008b0
 80025d4:	80080081 	.word	0x80080081
 80025d8:	2e8ba2e9 	.word	0x2e8ba2e9
 80025dc:	20000930 	.word	0x20000930

080025e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TIM3_IRQHandler+0x10>)
 80025e6:	f005 fdfb 	bl	80081e0 <HAL_TIM_IRQHandler>
////  HAL_Delay(200);
//  HAL_ADC_Start_IT(&hadc4);
//

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000170 	.word	0x20000170

080025f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <USART2_IRQHandler+0x10>)
 80025fa:	f006 fec7 	bl	800938c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000028c 	.word	0x2000028c

08002608 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800260c:	4858      	ldr	r0, [pc, #352]	; (8002770 <TIM7_IRQHandler+0x168>)
 800260e:	f005 fde7 	bl	80081e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
//  turn = 2;
  setScoreSeven();
 8002612:	f001 fb39 	bl	8003c88 <setScoreSeven>

  if (turn % 4 == 0) {
 8002616:	4b57      	ldr	r3, [pc, #348]	; (8002774 <TIM7_IRQHandler+0x16c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11d      	bne.n	800265e <TIM7_IRQHandler+0x56>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002628:	4853      	ldr	r0, [pc, #332]	; (8002778 <TIM7_IRQHandler+0x170>)
 800262a:	f003 fa91 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002634:	4850      	ldr	r0, [pc, #320]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002636:	f003 fa8b 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002640:	484d      	ldr	r0, [pc, #308]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002642:	f003 fa85 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800264c:	484a      	ldr	r0, [pc, #296]	; (8002778 <TIM7_IRQHandler+0x170>)
 800264e:	f003 fa7f 	bl	8005b50 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D0);
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <TIM7_IRQHandler+0x174>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f001 fa1c 	bl	8003a94 <set_seg_value>
 800265c:	e079      	b.n	8002752 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 1) {
 800265e:	4b45      	ldr	r3, [pc, #276]	; (8002774 <TIM7_IRQHandler+0x16c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	425a      	negs	r2, r3
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	f002 0203 	and.w	r2, r2, #3
 800266c:	bf58      	it	pl
 800266e:	4253      	negpl	r3, r2
 8002670:	2b01      	cmp	r3, #1
 8002672:	d11d      	bne.n	80026b0 <TIM7_IRQHandler+0xa8>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800267a:	483f      	ldr	r0, [pc, #252]	; (8002778 <TIM7_IRQHandler+0x170>)
 800267c:	f003 fa68 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002686:	483c      	ldr	r0, [pc, #240]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002688:	f003 fa62 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002692:	4839      	ldr	r0, [pc, #228]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002694:	f003 fa5c 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269e:	4836      	ldr	r0, [pc, #216]	; (8002778 <TIM7_IRQHandler+0x170>)
 80026a0:	f003 fa56 	bl	8005b50 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  set_seg_value(D1);
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <TIM7_IRQHandler+0x178>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f9f3 	bl	8003a94 <set_seg_value>
 80026ae:	e050      	b.n	8002752 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 2) {
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <TIM7_IRQHandler+0x16c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	425a      	negs	r2, r3
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	bf58      	it	pl
 80026c0:	4253      	negpl	r3, r2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11d      	bne.n	8002702 <TIM7_IRQHandler+0xfa>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026cc:	482a      	ldr	r0, [pc, #168]	; (8002778 <TIM7_IRQHandler+0x170>)
 80026ce:	f003 fa3f 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d8:	4827      	ldr	r0, [pc, #156]	; (8002778 <TIM7_IRQHandler+0x170>)
 80026da:	f003 fa39 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80026de:	2201      	movs	r2, #1
 80026e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e4:	4824      	ldr	r0, [pc, #144]	; (8002778 <TIM7_IRQHandler+0x170>)
 80026e6:	f003 fa33 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f0:	4821      	ldr	r0, [pc, #132]	; (8002778 <TIM7_IRQHandler+0x170>)
 80026f2:	f003 fa2d 	bl	8005b50 <HAL_GPIO_WritePin>
//	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D2);
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <TIM7_IRQHandler+0x17c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 f9ca 	bl	8003a94 <set_seg_value>
 8002700:	e027      	b.n	8002752 <TIM7_IRQHandler+0x14a>
  } else if (turn % 4 == 3) {
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <TIM7_IRQHandler+0x16c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	425a      	negs	r2, r3
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	bf58      	it	pl
 8002712:	4253      	negpl	r3, r2
 8002714:	2b03      	cmp	r3, #3
 8002716:	d11c      	bne.n	8002752 <TIM7_IRQHandler+0x14a>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800271e:	4816      	ldr	r0, [pc, #88]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002720:	f003 fa16 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272a:	4813      	ldr	r0, [pc, #76]	; (8002778 <TIM7_IRQHandler+0x170>)
 800272c:	f003 fa10 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002736:	4810      	ldr	r0, [pc, #64]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002738:	f003 fa0a 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <TIM7_IRQHandler+0x170>)
 8002744:	f003 fa04 	bl	8005b50 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D3);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <TIM7_IRQHandler+0x180>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f001 f9a1 	bl	8003a94 <set_seg_value>
  }

  turn = (turn + 1) % 4;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <TIM7_IRQHandler+0x16c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	425a      	negs	r2, r3
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	bf58      	it	pl
 8002764:	4253      	negpl	r3, r2
 8002766:	4a03      	ldr	r2, [pc, #12]	; (8002774 <TIM7_IRQHandler+0x16c>)
 8002768:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000064c 	.word	0x2000064c
 8002774:	200000e8 	.word	0x200000e8
 8002778:	48000400 	.word	0x48000400
 800277c:	200006a8 	.word	0x200006a8
 8002780:	20000938 	.word	0x20000938
 8002784:	200008b4 	.word	0x200008b4
 8002788:	20000698 	.word	0x20000698

0800278c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <ADC4_IRQHandler+0x10>)
 8002792:	f001 ffd9 	bl	8004748 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */
//  HAL_ADC_Start_IT(&hadc4);
  /* USER CODE END ADC4_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000310 	.word	0x20000310

080027a0 <getRandom>:

/* USER CODE BEGIN 1 */

int getRandom(int lower, int upper)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

	int num = (rand() %
 80027aa:	f007 fdb9 	bl	800a320 <rand>
 80027ae:	4602      	mov	r2, r0
	   (upper - lower + 1)) + lower;
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	1acb      	subs	r3, r1, r3
 80027b6:	3301      	adds	r3, #1
	int num = (rand() %
 80027b8:	fb92 f1f3 	sdiv	r1, r2, r3
 80027bc:	fb03 f301 	mul.w	r3, r3, r1
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    return num;
 80027c8:	68fb      	ldr	r3, [r7, #12]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <fireBullet>:

void fireBullet() {
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
	if (playerFalling || board[playerCol][playerRow + 1] != 'e' || bulletCol != -1)
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <fireBullet+0x70>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12c      	bne.n	800283a <fireBullet+0x66>
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <fireBullet+0x74>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <fireBullet+0x78>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	4819      	ldr	r0, [pc, #100]	; (8002850 <fireBullet+0x7c>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	1ad2      	subs	r2, r2, r3
 80027f6:	1883      	adds	r3, r0, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b65      	cmp	r3, #101	; 0x65
 80027fe:	d11c      	bne.n	800283a <fireBullet+0x66>
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <fireBullet+0x80>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d117      	bne.n	800283a <fireBullet+0x66>
		return;
	bulletCol = playerCol;
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <fireBullet+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <fireBullet+0x80>)
 8002810:	6013      	str	r3, [r2, #0]
	bulletRow = playerRow + 1;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <fireBullet+0x78>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <fireBullet+0x84>)
 800281a:	6013      	str	r3, [r2, #0]
	board[bulletCol][bulletRow] = '^';
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <fireBullet+0x80>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <fireBullet+0x84>)
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	480a      	ldr	r0, [pc, #40]	; (8002850 <fireBullet+0x7c>)
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	00da      	lsls	r2, r3, #3
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	1883      	adds	r3, r0, r2
 8002832:	440b      	add	r3, r1
 8002834:	225e      	movs	r2, #94	; 0x5e
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e000      	b.n	800283c <fireBullet+0x68>
		return;
 800283a:	bf00      	nop
}
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	2000069c 	.word	0x2000069c
 8002848:	200006ac 	.word	0x200006ac
 800284c:	2000092c 	.word	0x2000092c
 8002850:	200006b4 	.word	0x200006b4
 8002854:	200006b0 	.word	0x200006b0
 8002858:	200006a4 	.word	0x200006a4

0800285c <processTurn>:

void processTurn()
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	// Shift screen to down
	if (playerHeightInScreen > 12) {
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <processTurn+0x1e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b0c      	cmp	r3, #12
 8002868:	f340 8116 	ble.w	8002a98 <processTurn+0x23c>
	    // unsigned char hello[64] = "SHIFT DOWN \n";
		// HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
		playerHeightInScreen --;
 800286c:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <processTurn+0x1e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <processTurn+0x1e4>)
 8002874:	6013      	str	r3, [r2, #0]
		playerRow --;
 8002876:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <processTurn+0x1e8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <processTurn+0x1e8>)
 800287e:	6013      	str	r3, [r2, #0]
		lastBlockHeightInScreen --;
 8002880:	4b71      	ldr	r3, [pc, #452]	; (8002a48 <processTurn+0x1ec>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	4a70      	ldr	r2, [pc, #448]	; (8002a48 <processTurn+0x1ec>)
 8002888:	6013      	str	r3, [r2, #0]
		bulletRow --;
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <processTurn+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3b01      	subs	r3, #1
 8002890:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <processTurn+0x1f0>)
 8002892:	6013      	str	r3, [r2, #0]

		// delete old monsters states
		// unsigned char hello3[64] = "SHIFTING MONSTERS \n";
		// HAL_UART_Transmit(&huart2, hello3, sizeof(hello3), 500);
		for (i = 0; i < boardColumns; i ++) {
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	e08b      	b.n	80029b2 <processTurn+0x156>
			if (board[i][0] == 'm') {
 800289a:	496d      	ldr	r1, [pc, #436]	; (8002a50 <processTurn+0x1f4>)
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	00da      	lsls	r2, r3, #3
 80028a6:	1ad2      	subs	r2, r2, r3
 80028a8:	188b      	adds	r3, r1, r2
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b6d      	cmp	r3, #109	; 0x6d
 80028ae:	d13a      	bne.n	8002926 <processTurn+0xca>
				// shift monster array to left
				// unsigned char hello5[64] = "SHIFTING MONSTERS \n";
				// HAL_UART_Transmit(&huart2, hello5, sizeof(hello5), 500);
				for (j = 0; j < monsterCount - 1; j ++ ) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	e016      	b.n	80028e4 <processTurn+0x88>
					monsterLoc[j][0] = monsterLoc[j + 1][0];
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <processTurn+0x1f8>)
 80028bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80028c0:	4964      	ldr	r1, [pc, #400]	; (8002a54 <processTurn+0x1f8>)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					monsterLoc[j][1] = monsterLoc[j + 1][1];
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <processTurn+0x1f8>)
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	495f      	ldr	r1, [pc, #380]	; (8002a54 <processTurn+0x1f8>)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	605a      	str	r2, [r3, #4]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <processTurn+0x1fc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbe2      	blt.n	80028b6 <processTurn+0x5a>
				}
				for (j = 0; j < monsterCount - 1; j ++ ) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	e00b      	b.n	800290e <processTurn+0xb2>
					monsterState[j] = monsterState[j + 1];
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <processTurn+0x200>)
 80028fc:	5cd1      	ldrb	r1, [r2, r3]
 80028fe:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <processTurn+0x200>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4413      	add	r3, r2
 8002904:	460a      	mov	r2, r1
 8002906:	701a      	strb	r2, [r3, #0]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <processTurn+0x1fc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	dbed      	blt.n	80028f6 <processTurn+0x9a>
				}
				monsterCount --;
 800291a:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <processTurn+0x1fc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <processTurn+0x1fc>)
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e042      	b.n	80029ac <processTurn+0x150>
			} else if (board[i][0] == 'v') {
 8002926:	494a      	ldr	r1, [pc, #296]	; (8002a50 <processTurn+0x1f4>)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	00da      	lsls	r2, r3, #3
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	188b      	adds	r3, r1, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b76      	cmp	r3, #118	; 0x76
 800293a:	d105      	bne.n	8002948 <processTurn+0xec>
				voidCount --;
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <processTurn+0x204>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3b01      	subs	r3, #1
 8002942:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <processTurn+0x204>)
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e031      	b.n	80029ac <processTurn+0x150>
			} else if (board[i][0] == 'b') {
 8002948:	4941      	ldr	r1, [pc, #260]	; (8002a50 <processTurn+0x1f4>)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	188b      	adds	r3, r1, r2
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b62      	cmp	r3, #98	; 0x62
 800295c:	d105      	bne.n	800296a <processTurn+0x10e>
				blockCount --;
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <processTurn+0x208>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3b01      	subs	r3, #1
 8002964:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <processTurn+0x208>)
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e020      	b.n	80029ac <processTurn+0x150>
			} else if (board[i][0] == 's') {
 800296a:	4939      	ldr	r1, [pc, #228]	; (8002a50 <processTurn+0x1f4>)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	00da      	lsls	r2, r3, #3
 8002976:	1ad2      	subs	r2, r2, r3
 8002978:	188b      	adds	r3, r1, r2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b73      	cmp	r3, #115	; 0x73
 800297e:	d105      	bne.n	800298c <processTurn+0x130>
				boosterCount --;
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <processTurn+0x20c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <processTurn+0x20c>)
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00f      	b.n	80029ac <processTurn+0x150>
			} else if (board[i][0] == 'l') {
 800298c:	4930      	ldr	r1, [pc, #192]	; (8002a50 <processTurn+0x1f4>)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	1ad2      	subs	r2, r2, r3
 800299a:	188b      	adds	r3, r1, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b6c      	cmp	r3, #108	; 0x6c
 80029a0:	d104      	bne.n	80029ac <processTurn+0x150>
				looseCount --;
 80029a2:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <processTurn+0x210>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <processTurn+0x210>)
 80029aa:	6013      	str	r3, [r2, #0]
		for (i = 0; i < boardColumns; i ++) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3301      	adds	r3, #1
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	f77f af70 	ble.w	800289a <processTurn+0x3e>
			}
		}
		for (i = 0; i < monsterCount; i ++ ) {
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	e00d      	b.n	80029dc <processTurn+0x180>
			monsterLoc[i][1] --;
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <processTurn+0x1f8>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	1e5a      	subs	r2, r3, #1
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <processTurn+0x1f8>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	605a      	str	r2, [r3, #4]
		for (i = 0; i < monsterCount; i ++ ) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <processTurn+0x1fc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dbec      	blt.n	80029c0 <processTurn+0x164>
		}
		// 		unsigned char hello4[64] = "SHIFTING BOARD DOWN \n";
		// HAL_UART_Transmit(&huart2, hello4, sizeof(hello4), 500);
		for (j = 0; j < boardRows - 1; j ++ ) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	e023      	b.n	8002a34 <processTurn+0x1d8>
			// replace row[j] with row[j + 1]
			for (i = 0; i < boardColumns; i ++ ) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e01a      	b.n	8002a28 <processTurn+0x1cc>
				board[i][j] = board[i][j + 1];
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1c59      	adds	r1, r3, #1
 80029f6:	4816      	ldr	r0, [pc, #88]	; (8002a50 <processTurn+0x1f4>)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	1ad2      	subs	r2, r2, r3
 8002a04:	1883      	adds	r3, r0, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	7818      	ldrb	r0, [r3, #0]
 8002a0a:	4911      	ldr	r1, [pc, #68]	; (8002a50 <processTurn+0x1f4>)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	440a      	add	r2, r1
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4602      	mov	r2, r0
 8002a20:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < boardColumns; i ++ ) {
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	dde1      	ble.n	80029f2 <processTurn+0x196>
		for (j = 0; j < boardRows - 1; j ++ ) {
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	ddd8      	ble.n	80029ec <processTurn+0x190>
			}
		}
		for (i = 0; i < boardColumns; i ++ ) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	e025      	b.n	8002a8c <processTurn+0x230>
 8002a40:	20000910 	.word	0x20000910
 8002a44:	2000092c 	.word	0x2000092c
 8002a48:	200008ac 	.word	0x200008ac
 8002a4c:	200006a4 	.word	0x200006a4
 8002a50:	200006b4 	.word	0x200006b4
 8002a54:	20000710 	.word	0x20000710
 8002a58:	20000924 	.word	0x20000924
 8002a5c:	20000940 	.word	0x20000940
 8002a60:	20000974 	.word	0x20000974
 8002a64:	20000978 	.word	0x20000978
 8002a68:	200008a4 	.word	0x200008a4
 8002a6c:	200008a8 	.word	0x200008a8
			board[i][boardRows - 1] = 'e';
 8002a70:	4997      	ldr	r1, [pc, #604]	; (8002cd0 <processTurn+0x474>)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00da      	lsls	r2, r3, #3
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	188b      	adds	r3, r1, r2
 8002a80:	3313      	adds	r3, #19
 8002a82:	2265      	movs	r2, #101	; 0x65
 8002a84:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < boardColumns; i ++ ) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	ddee      	ble.n	8002a70 <processTurn+0x214>
		}
		// unsigned char hello2[64] = "Selecting new objects \n";
		// HAL_UART_Transmit(&huart2, hello2, sizeof(hello2), 500);
		setRowObjects(boardRows - 1);
 8002a92:	2013      	movs	r0, #19
 8002a94:	f000 fd56 	bl	8003544 <setRowObjects>
		// unsigned char hello1[64] = "Selected objects for new row \n";
		// HAL_UART_Transmit(&huart2, hello1, sizeof(hello1), 500);
	}

	// Void
	if (playerRow > 0 && playerOn == 'v') {
 8002a98:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <processTurn+0x478>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dd06      	ble.n	8002aae <processTurn+0x252>
 8002aa0:	4b8d      	ldr	r3, [pc, #564]	; (8002cd8 <processTurn+0x47c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b76      	cmp	r3, #118	; 0x76
 8002aa6:	d102      	bne.n	8002aae <processTurn+0x252>
		playerFalling = 1;
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <processTurn+0x480>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
	}
	// Loose Block
	if (playerRow > 0 && board[playerCol][playerRow - 1] == 'l' && jumpCount < 1) {
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <processTurn+0x478>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	dd22      	ble.n	8002afc <processTurn+0x2a0>
 8002ab6:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <processTurn+0x484>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <processTurn+0x478>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1e59      	subs	r1, r3, #1
 8002ac0:	4883      	ldr	r0, [pc, #524]	; (8002cd0 <processTurn+0x474>)
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00da      	lsls	r2, r3, #3
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	1883      	adds	r3, r0, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b6c      	cmp	r3, #108	; 0x6c
 8002ad4:	d112      	bne.n	8002afc <processTurn+0x2a0>
 8002ad6:	4b83      	ldr	r3, [pc, #524]	; (8002ce4 <processTurn+0x488>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dc0e      	bgt.n	8002afc <processTurn+0x2a0>
		board[playerCol][playerRow - 1] = 'e';
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <processTurn+0x484>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	; (8002cd4 <processTurn+0x478>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1e59      	subs	r1, r3, #1
 8002ae8:	4879      	ldr	r0, [pc, #484]	; (8002cd0 <processTurn+0x474>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00da      	lsls	r2, r3, #3
 8002af2:	1ad2      	subs	r2, r2, r3
 8002af4:	1883      	adds	r3, r0, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	2265      	movs	r2, #101	; 0x65
 8002afa:	701a      	strb	r2, [r3, #0]
	}

	// Monster
	if (playerRow > 0 && playerOn == 'm') {
 8002afc:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <processTurn+0x478>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dd06      	ble.n	8002b12 <processTurn+0x2b6>
 8002b04:	4b74      	ldr	r3, [pc, #464]	; (8002cd8 <processTurn+0x47c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b6d      	cmp	r3, #109	; 0x6d
 8002b0a:	d102      	bne.n	8002b12 <processTurn+0x2b6>
		playerFalling = 1;
 8002b0c:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <processTurn+0x480>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
	}

	// Move bullet
	if (bulletCol != -1 && board[bulletCol][bulletRow + 1] == 'e') {
 8002b12:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <processTurn+0x48c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d031      	beq.n	8002b80 <processTurn+0x324>
 8002b1c:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <processTurn+0x48c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b72      	ldr	r3, [pc, #456]	; (8002cec <processTurn+0x490>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	486a      	ldr	r0, [pc, #424]	; (8002cd0 <processTurn+0x474>)
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00da      	lsls	r2, r3, #3
 8002b30:	1ad2      	subs	r2, r2, r3
 8002b32:	1883      	adds	r3, r0, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b65      	cmp	r3, #101	; 0x65
 8002b3a:	d121      	bne.n	8002b80 <processTurn+0x324>
		board[bulletCol][bulletRow] = 'e';
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <processTurn+0x48c>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <processTurn+0x490>)
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	4862      	ldr	r0, [pc, #392]	; (8002cd0 <processTurn+0x474>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00da      	lsls	r2, r3, #3
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	1883      	adds	r3, r0, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	2265      	movs	r2, #101	; 0x65
 8002b56:	701a      	strb	r2, [r3, #0]
		bulletRow ++;
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <processTurn+0x490>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a63      	ldr	r2, [pc, #396]	; (8002cec <processTurn+0x490>)
 8002b60:	6013      	str	r3, [r2, #0]
		board[bulletCol][bulletRow] = '*';
 8002b62:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <processTurn+0x48c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b61      	ldr	r3, [pc, #388]	; (8002cec <processTurn+0x490>)
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	4859      	ldr	r0, [pc, #356]	; (8002cd0 <processTurn+0x474>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	1ad2      	subs	r2, r2, r3
 8002b76:	1883      	adds	r3, r0, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	222a      	movs	r2, #42	; 0x2a
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e0a3      	b.n	8002cc8 <processTurn+0x46c>
	} else if (bulletCol != -1 && board[bulletCol][bulletRow + 1] != 'e') {
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <processTurn+0x48c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	f000 809e 	beq.w	8002cc8 <processTurn+0x46c>
 8002b8c:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <processTurn+0x48c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b56      	ldr	r3, [pc, #344]	; (8002cec <processTurn+0x490>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c59      	adds	r1, r3, #1
 8002b96:	484e      	ldr	r0, [pc, #312]	; (8002cd0 <processTurn+0x474>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00da      	lsls	r2, r3, #3
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	1883      	adds	r3, r0, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b65      	cmp	r3, #101	; 0x65
 8002baa:	f000 808d 	beq.w	8002cc8 <processTurn+0x46c>
		board[bulletCol][bulletRow] = 'e';
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <processTurn+0x48c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <processTurn+0x490>)
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	4846      	ldr	r0, [pc, #280]	; (8002cd0 <processTurn+0x474>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	1ad2      	subs	r2, r2, r3
 8002bc2:	1883      	adds	r3, r0, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	2265      	movs	r2, #101	; 0x65
 8002bc8:	701a      	strb	r2, [r3, #0]
		if (board[bulletCol][bulletRow + 1] == 'm') {
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <processTurn+0x48c>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <processTurn+0x490>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	483e      	ldr	r0, [pc, #248]	; (8002cd0 <processTurn+0x474>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	00da      	lsls	r2, r3, #3
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	1883      	adds	r3, r0, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b6d      	cmp	r3, #109	; 0x6d
 8002be8:	d166      	bne.n	8002cb8 <processTurn+0x45c>
			for (i = 0; i < monsterCount; i ++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e04f      	b.n	8002c90 <processTurn+0x434>
				if (monsterLoc[i][0] == bulletCol && monsterLoc[i][1] == bulletRow + 1) {
 8002bf0:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <processTurn+0x494>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <processTurn+0x48c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d144      	bne.n	8002c8a <processTurn+0x42e>
 8002c00:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <processTurn+0x494>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <processTurn+0x490>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d13a      	bne.n	8002c8a <processTurn+0x42e>
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	e016      	b.n	8002c48 <processTurn+0x3ec>
						monsterLoc[j][0] = monsterLoc[j + 1][0];
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <processTurn+0x494>)
 8002c20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002c24:	4932      	ldr	r1, [pc, #200]	; (8002cf0 <processTurn+0x494>)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						monsterLoc[j][1] = monsterLoc[j + 1][1];
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <processTurn+0x494>)
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	492d      	ldr	r1, [pc, #180]	; (8002cf0 <processTurn+0x494>)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	605a      	str	r2, [r3, #4]
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <processTurn+0x498>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbe2      	blt.n	8002c1a <processTurn+0x3be>
					}
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	e00b      	b.n	8002c72 <processTurn+0x416>
						monsterState[j] = monsterState[j + 1];
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <processTurn+0x49c>)
 8002c60:	5cd1      	ldrb	r1, [r2, r3]
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <processTurn+0x49c>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	460a      	mov	r2, r1
 8002c6a:	701a      	strb	r2, [r3, #0]
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <processTurn+0x498>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dbed      	blt.n	8002c5a <processTurn+0x3fe>
					}
					monsterCount --;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <processTurn+0x498>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <processTurn+0x498>)
 8002c86:	6013      	str	r3, [r2, #0]
					break;
 8002c88:	e007      	b.n	8002c9a <processTurn+0x43e>
			for (i = 0; i < monsterCount; i ++) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <processTurn+0x498>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dbaa      	blt.n	8002bf0 <processTurn+0x394>
				}
			}
			board[bulletCol][bulletRow + 1] = 'e';
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <processTurn+0x48c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <processTurn+0x490>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <processTurn+0x474>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	00da      	lsls	r2, r3, #3
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	1883      	adds	r3, r0, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	2265      	movs	r2, #101	; 0x65
 8002cb6:	701a      	strb	r2, [r3, #0]
		}
		bulletCol = -1;
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <processTurn+0x48c>)
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	601a      	str	r2, [r3, #0]
		bulletRow = -1;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <processTurn+0x490>)
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc6:	601a      	str	r2, [r3, #0]
	}

	// Move monsters
	for (i = 0; i < monsterCount; i ++ ) {
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	e0c2      	b.n	8002e54 <processTurn+0x5f8>
 8002cce:	bf00      	nop
 8002cd0:	200006b4 	.word	0x200006b4
 8002cd4:	2000092c 	.word	0x2000092c
 8002cd8:	2000093c 	.word	0x2000093c
 8002cdc:	2000069c 	.word	0x2000069c
 8002ce0:	200006ac 	.word	0x200006ac
 8002ce4:	2000090c 	.word	0x2000090c
 8002ce8:	200006b0 	.word	0x200006b0
 8002cec:	200006a4 	.word	0x200006a4
 8002cf0:	20000710 	.word	0x20000710
 8002cf4:	20000924 	.word	0x20000924
 8002cf8:	20000940 	.word	0x20000940
		if (monsterState[i] == 'l') {
 8002cfc:	4aa4      	ldr	r2, [pc, #656]	; (8002f90 <processTurn+0x734>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b6c      	cmp	r3, #108	; 0x6c
 8002d06:	d151      	bne.n	8002dac <processTurn+0x550>
			if (monsterLoc[i][0] > 0 && board[monsterLoc[i][0] - 1][monsterLoc[i][1]] == 'e') {
 8002d08:	4aa2      	ldr	r2, [pc, #648]	; (8002f94 <processTurn+0x738>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dd45      	ble.n	8002da0 <processTurn+0x544>
 8002d14:	4a9f      	ldr	r2, [pc, #636]	; (8002f94 <processTurn+0x738>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	499d      	ldr	r1, [pc, #628]	; (8002f94 <processTurn+0x738>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	489b      	ldr	r0, [pc, #620]	; (8002f98 <processTurn+0x73c>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	1883      	adds	r3, r0, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b65      	cmp	r3, #101	; 0x65
 8002d3c:	d130      	bne.n	8002da0 <processTurn+0x544>
				board[monsterLoc[i][0] - 1][monsterLoc[i][1]] = 'm';
 8002d3e:	4a95      	ldr	r2, [pc, #596]	; (8002f94 <processTurn+0x738>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d46:	1e5a      	subs	r2, r3, #1
 8002d48:	4992      	ldr	r1, [pc, #584]	; (8002f94 <processTurn+0x738>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	4891      	ldr	r0, [pc, #580]	; (8002f98 <processTurn+0x73c>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	00da      	lsls	r2, r3, #3
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	1883      	adds	r3, r0, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	226d      	movs	r2, #109	; 0x6d
 8002d64:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 8002d66:	4a8b      	ldr	r2, [pc, #556]	; (8002f94 <processTurn+0x738>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002d6e:	4989      	ldr	r1, [pc, #548]	; (8002f94 <processTurn+0x738>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	4887      	ldr	r0, [pc, #540]	; (8002f98 <processTurn+0x73c>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	00da      	lsls	r2, r3, #3
 8002d82:	1ad2      	subs	r2, r2, r3
 8002d84:	1883      	adds	r3, r0, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	2265      	movs	r2, #101	; 0x65
 8002d8a:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] --;
 8002d8c:	4a81      	ldr	r2, [pc, #516]	; (8002f94 <processTurn+0x738>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	497f      	ldr	r1, [pc, #508]	; (8002f94 <processTurn+0x738>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002d9e:	e056      	b.n	8002e4e <processTurn+0x5f2>
			} else{
				monsterState[i] = 'r';
 8002da0:	4a7b      	ldr	r2, [pc, #492]	; (8002f90 <processTurn+0x734>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	2272      	movs	r2, #114	; 0x72
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e050      	b.n	8002e4e <processTurn+0x5f2>
			}
		} else {
			if (monsterLoc[i][0] < boardColumns - 1 && board[monsterLoc[i][0] + 1][monsterLoc[i][1]] == 'e') {
 8002dac:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <processTurn+0x738>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	dc45      	bgt.n	8002e44 <processTurn+0x5e8>
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <processTurn+0x738>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4974      	ldr	r1, [pc, #464]	; (8002f94 <processTurn+0x738>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	4872      	ldr	r0, [pc, #456]	; (8002f98 <processTurn+0x73c>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	1ad2      	subs	r2, r2, r3
 8002dd8:	1883      	adds	r3, r0, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b65      	cmp	r3, #101	; 0x65
 8002de0:	d130      	bne.n	8002e44 <processTurn+0x5e8>
				board[monsterLoc[i][0] + 1][monsterLoc[i][1]] = 'm';
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <processTurn+0x738>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	4969      	ldr	r1, [pc, #420]	; (8002f94 <processTurn+0x738>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	4868      	ldr	r0, [pc, #416]	; (8002f98 <processTurn+0x73c>)
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00da      	lsls	r2, r3, #3
 8002e00:	1ad2      	subs	r2, r2, r3
 8002e02:	1883      	adds	r3, r0, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	226d      	movs	r2, #109	; 0x6d
 8002e08:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 8002e0a:	4a62      	ldr	r2, [pc, #392]	; (8002f94 <processTurn+0x738>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002e12:	4960      	ldr	r1, [pc, #384]	; (8002f94 <processTurn+0x738>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	485e      	ldr	r0, [pc, #376]	; (8002f98 <processTurn+0x73c>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	00da      	lsls	r2, r3, #3
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	1883      	adds	r3, r0, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	2265      	movs	r2, #101	; 0x65
 8002e2e:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] ++;
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <processTurn+0x738>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	4956      	ldr	r1, [pc, #344]	; (8002f94 <processTurn+0x738>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002e42:	e004      	b.n	8002e4e <processTurn+0x5f2>
			} else {
				monsterState[i] = 'l';
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <processTurn+0x734>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	226c      	movs	r2, #108	; 0x6c
 8002e4c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < monsterCount; i ++ ) {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3301      	adds	r3, #1
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <processTurn+0x740>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	f6ff af4e 	blt.w	8002cfc <processTurn+0x4a0>

		}
	}

    //	Jump and Gravity
	if (playerRow == 0) {
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <processTurn+0x744>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <processTurn+0x614>
		// Die
		menuState = 'd';
 8002e68:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <processTurn+0x748>)
 8002e6a:	2264      	movs	r2, #100	; 0x64
 8002e6c:	701a      	strb	r2, [r3, #0]
		movePlayerTo(playerCol, playerRow + 1);
		jumpCount --;
	}


}
 8002e6e:	e08a      	b.n	8002f86 <processTurn+0x72a>
	} else if (playerFalling) {
 8002e70:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <processTurn+0x74c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <processTurn+0x630>
		movePlayerTo(playerCol, playerRow - 1);
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <processTurn+0x750>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <processTurn+0x744>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 f895 	bl	8002fb4 <movePlayerTo>
}
 8002e8a:	e07c      	b.n	8002f86 <processTurn+0x72a>
	} else if (jumpCount == 0 && playerRow > 0) { // Jump rule
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <processTurn+0x754>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d165      	bne.n	8002f60 <processTurn+0x704>
 8002e94:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <processTurn+0x744>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dd61      	ble.n	8002f60 <processTurn+0x704>
		if (board[playerCol][playerRow - 1] == 'e' ||
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <processTurn+0x750>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <processTurn+0x744>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1e59      	subs	r1, r3, #1
 8002ea6:	483c      	ldr	r0, [pc, #240]	; (8002f98 <processTurn+0x73c>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	00da      	lsls	r2, r3, #3
 8002eb0:	1ad2      	subs	r2, r2, r3
 8002eb2:	1883      	adds	r3, r0, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b65      	cmp	r3, #101	; 0x65
 8002eba:	d01f      	beq.n	8002efc <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'm' ||
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <processTurn+0x750>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <processTurn+0x744>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1e59      	subs	r1, r3, #1
 8002ec6:	4834      	ldr	r0, [pc, #208]	; (8002f98 <processTurn+0x73c>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00da      	lsls	r2, r3, #3
 8002ed0:	1ad2      	subs	r2, r2, r3
 8002ed2:	1883      	adds	r3, r0, r2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	781b      	ldrb	r3, [r3, #0]
		if (board[playerCol][playerRow - 1] == 'e' ||
 8002ed8:	2b6d      	cmp	r3, #109	; 0x6d
 8002eda:	d00f      	beq.n	8002efc <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'v') {
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <processTurn+0x750>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <processTurn+0x744>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1e59      	subs	r1, r3, #1
 8002ee6:	482c      	ldr	r0, [pc, #176]	; (8002f98 <processTurn+0x73c>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	00da      	lsls	r2, r3, #3
 8002ef0:	1ad2      	subs	r2, r2, r3
 8002ef2:	1883      	adds	r3, r0, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	781b      	ldrb	r3, [r3, #0]
			board[playerCol][playerRow - 1] == 'm' ||
 8002ef8:	2b76      	cmp	r3, #118	; 0x76
 8002efa:	d108      	bne.n	8002f0e <processTurn+0x6b2>
			movePlayerTo(playerCol, playerRow - 1);
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <processTurn+0x750>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <processTurn+0x744>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f853 	bl	8002fb4 <movePlayerTo>
		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <processTurn+0x750>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <processTurn+0x744>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1e59      	subs	r1, r3, #1
 8002f18:	481f      	ldr	r0, [pc, #124]	; (8002f98 <processTurn+0x73c>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00da      	lsls	r2, r3, #3
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	1883      	adds	r3, r0, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b62      	cmp	r3, #98	; 0x62
 8002f2c:	d104      	bne.n	8002f38 <processTurn+0x6dc>
			jumpCount = jumpOnBlock;
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <processTurn+0x754>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
			buzz();
 8002f34:	f000 ff14 	bl	8003d60 <buzz>
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <processTurn+0x750>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <processTurn+0x744>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1e59      	subs	r1, r3, #1
 8002f42:	4815      	ldr	r0, [pc, #84]	; (8002f98 <processTurn+0x73c>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	1ad2      	subs	r2, r2, r3
 8002f4e:	1883      	adds	r3, r0, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b73      	cmp	r3, #115	; 0x73
 8002f56:	d116      	bne.n	8002f86 <processTurn+0x72a>
			jumpCount = jumpOnCoil;
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <processTurn+0x754>)
 8002f5a:	2214      	movs	r2, #20
 8002f5c:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 8002f5e:	e012      	b.n	8002f86 <processTurn+0x72a>
	} else if (jumpCount > 0) { // Go up rule
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <processTurn+0x754>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	dd0e      	ble.n	8002f86 <processTurn+0x72a>
		movePlayerTo(playerCol, playerRow + 1);
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <processTurn+0x750>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <processTurn+0x744>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f000 f81d 	bl	8002fb4 <movePlayerTo>
		jumpCount --;
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <processTurn+0x754>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <processTurn+0x754>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	e7ff      	b.n	8002f86 <processTurn+0x72a>
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000940 	.word	0x20000940
 8002f94:	20000710 	.word	0x20000710
 8002f98:	200006b4 	.word	0x200006b4
 8002f9c:	20000924 	.word	0x20000924
 8002fa0:	2000092c 	.word	0x2000092c
 8002fa4:	2000016c 	.word	0x2000016c
 8002fa8:	2000069c 	.word	0x2000069c
 8002fac:	200006ac 	.word	0x200006ac
 8002fb0:	2000090c 	.word	0x2000090c

08002fb4 <movePlayerTo>:

void movePlayerTo(int toCol, int toRow)
{
 8002fb4:	b490      	push	{r4, r7}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	if (playerRow < toRow) {
 8002fbe:	4b32      	ldr	r3, [pc, #200]	; (8003088 <movePlayerTo+0xd4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dd14      	ble.n	8002ff2 <movePlayerTo+0x3e>
		playerHeight ++;
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <movePlayerTo+0xd8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a2f      	ldr	r2, [pc, #188]	; (800308c <movePlayerTo+0xd8>)
 8002fd0:	6013      	str	r3, [r2, #0]
		playerHeightInScreen ++;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <movePlayerTo+0xdc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <movePlayerTo+0xdc>)
 8002fda:	6013      	str	r3, [r2, #0]
		if (playerHeight > score)
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <movePlayerTo+0xd8>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <movePlayerTo+0xe0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dd13      	ble.n	8003010 <movePlayerTo+0x5c>
			score = playerHeight;
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <movePlayerTo+0xd8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a29      	ldr	r2, [pc, #164]	; (8003094 <movePlayerTo+0xe0>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e00e      	b.n	8003010 <movePlayerTo+0x5c>
	} else if (playerRow > toRow) {
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <movePlayerTo+0xd4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	da09      	bge.n	8003010 <movePlayerTo+0x5c>
		playerHeight --;
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <movePlayerTo+0xd8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3b01      	subs	r3, #1
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <movePlayerTo+0xd8>)
 8003004:	6013      	str	r3, [r2, #0]
		playerHeightInScreen --;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <movePlayerTo+0xdc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3b01      	subs	r3, #1
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <movePlayerTo+0xdc>)
 800300e:	6013      	str	r3, [r2, #0]
	}
	if (playerOn != 'm')
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <movePlayerTo+0xe4>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b6d      	cmp	r3, #109	; 0x6d
 8003016:	d00f      	beq.n	8003038 <movePlayerTo+0x84>
		board[playerCol][playerRow] = playerOn;
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <movePlayerTo+0xe8>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <movePlayerTo+0xd4>)
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <movePlayerTo+0xe4>)
 8003022:	781c      	ldrb	r4, [r3, #0]
 8003024:	481e      	ldr	r0, [pc, #120]	; (80030a0 <movePlayerTo+0xec>)
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	00da      	lsls	r2, r3, #3
 800302e:	1ad2      	subs	r2, r2, r3
 8003030:	1883      	adds	r3, r0, r2
 8003032:	440b      	add	r3, r1
 8003034:	4622      	mov	r2, r4
 8003036:	701a      	strb	r2, [r3, #0]
	playerCol = toCol;
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <movePlayerTo+0xe8>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6013      	str	r3, [r2, #0]
	playerRow = toRow;
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <movePlayerTo+0xd4>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6013      	str	r3, [r2, #0]
	playerOn = board[playerCol][playerRow];
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <movePlayerTo+0xe8>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <movePlayerTo+0xd4>)
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	4814      	ldr	r0, [pc, #80]	; (80030a0 <movePlayerTo+0xec>)
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	00da      	lsls	r2, r3, #3
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	1883      	adds	r3, r0, r2
 800305a:	440b      	add	r3, r1
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <movePlayerTo+0xe4>)
 8003060:	701a      	strb	r2, [r3, #0]
	board[playerCol][playerRow] = 'p';
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <movePlayerTo+0xe8>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <movePlayerTo+0xd4>)
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	480d      	ldr	r0, [pc, #52]	; (80030a0 <movePlayerTo+0xec>)
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	00da      	lsls	r2, r3, #3
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	1883      	adds	r3, r0, r2
 8003078:	440b      	add	r3, r1
 800307a:	2270      	movs	r2, #112	; 0x70
 800307c:	701a      	strb	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bc90      	pop	{r4, r7}
 8003086:	4770      	bx	lr
 8003088:	2000092c 	.word	0x2000092c
 800308c:	20000934 	.word	0x20000934
 8003090:	20000910 	.word	0x20000910
 8003094:	2000070c 	.word	0x2000070c
 8003098:	2000093c 	.word	0x2000093c
 800309c:	200006ac 	.word	0x200006ac
 80030a0:	200006b4 	.word	0x200006b4

080030a4 <printGame>:

void printGame()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
	setCursor(0,  0);
 80030aa:	2100      	movs	r1, #0
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fd ffe1 	bl	8001074 <setCursor>
	char tmp[2];
	int c, i, j;
	for (c = 0; c < boardColumns; c ++ ) {
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e0bb      	b.n	8003230 <printGame+0x18c>

		i = c;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60bb      	str	r3, [r7, #8]
		if (c == 1)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <printGame+0x24>
			i = 2;
 80030c2:	2302      	movs	r3, #2
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	e004      	b.n	80030d2 <printGame+0x2e>
		else if (c == 2)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d101      	bne.n	80030d2 <printGame+0x2e>
			i = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < boardRows; j ++ ) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	e0a4      	b.n	8003222 <printGame+0x17e>
			if (board[i][j] != boardTemp[i][j]) {
 80030d8:	495a      	ldr	r1, [pc, #360]	; (8003244 <printGame+0x1a0>)
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	00da      	lsls	r2, r3, #3
 80030e4:	1ad2      	subs	r2, r2, r3
 80030e6:	440a      	add	r2, r1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	7819      	ldrb	r1, [r3, #0]
 80030ee:	4856      	ldr	r0, [pc, #344]	; (8003248 <printGame+0x1a4>)
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	00da      	lsls	r2, r3, #3
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	4402      	add	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4299      	cmp	r1, r3
 8003106:	f000 8089 	beq.w	800321c <printGame+0x178>
				setCursor(j, i);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ffad 	bl	8001074 <setCursor>
				tmp[0] = board[i][j];
 800311a:	494a      	ldr	r1, [pc, #296]	; (8003244 <printGame+0x1a0>)
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	1ad2      	subs	r2, r2, r3
 8003128:	440a      	add	r2, r1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	703b      	strb	r3, [r7, #0]
				tmp[1] = '\0';
 8003132:	2300      	movs	r3, #0
 8003134:	707b      	strb	r3, [r7, #1]
				  switch (board[i][j])
 8003136:	4943      	ldr	r1, [pc, #268]	; (8003244 <printGame+0x1a0>)
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	00da      	lsls	r2, r3, #3
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	440a      	add	r2, r1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b62      	subs	r3, #98	; 0x62
 800314e:	2b14      	cmp	r3, #20
 8003150:	d848      	bhi.n	80031e4 <printGame+0x140>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <printGame+0xb4>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	080031bd 	.word	0x080031bd
 800315c:	080031e5 	.word	0x080031e5
 8003160:	080031e5 	.word	0x080031e5
 8003164:	080031b5 	.word	0x080031b5
 8003168:	080031e5 	.word	0x080031e5
 800316c:	080031e5 	.word	0x080031e5
 8003170:	080031e5 	.word	0x080031e5
 8003174:	080031e5 	.word	0x080031e5
 8003178:	080031e5 	.word	0x080031e5
 800317c:	080031e5 	.word	0x080031e5
 8003180:	080031dd 	.word	0x080031dd
 8003184:	080031c5 	.word	0x080031c5
 8003188:	080031e5 	.word	0x080031e5
 800318c:	080031e5 	.word	0x080031e5
 8003190:	080031ad 	.word	0x080031ad
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031e5 	.word	0x080031e5
 800319c:	080031cd 	.word	0x080031cd
 80031a0:	080031e5 	.word	0x080031e5
 80031a4:	080031e5 	.word	0x080031e5
 80031a8:	080031d5 	.word	0x080031d5
					{
					case 'p':
						write(0);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fe f80b 	bl	80011c8 <write>
						break;
 80031b2:	e01c      	b.n	80031ee <printGame+0x14a>
					case 'e':
						print(" ");
 80031b4:	4825      	ldr	r0, [pc, #148]	; (800324c <printGame+0x1a8>)
 80031b6:	f7fd ffa5 	bl	8001104 <print>
				       	break;
 80031ba:	e018      	b.n	80031ee <printGame+0x14a>
					case 'b':
						write(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fe f803 	bl	80011c8 <write>
						break;
 80031c2:	e014      	b.n	80031ee <printGame+0x14a>
					case 'm':
						write(2);
 80031c4:	2002      	movs	r0, #2
 80031c6:	f7fd ffff 	bl	80011c8 <write>
						break;
 80031ca:	e010      	b.n	80031ee <printGame+0x14a>
					case 's':
						write(3);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f7fd fffb 	bl	80011c8 <write>
						break;
 80031d2:	e00c      	b.n	80031ee <printGame+0x14a>
					case 'v':
						write(4);
 80031d4:	2004      	movs	r0, #4
 80031d6:	f7fd fff7 	bl	80011c8 <write>
						break;
 80031da:	e008      	b.n	80031ee <printGame+0x14a>
					case 'l':
						write(5);
 80031dc:	2005      	movs	r0, #5
 80031de:	f7fd fff3 	bl	80011c8 <write>
						break;
 80031e2:	e004      	b.n	80031ee <printGame+0x14a>
				     default:
				    	 print(tmp);
 80031e4:	463b      	mov	r3, r7
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd ff8c 	bl	8001104 <print>
				       break;
 80031ec:	bf00      	nop
				     }
				boardTemp[i][j] = board[i][j];
 80031ee:	4915      	ldr	r1, [pc, #84]	; (8003244 <printGame+0x1a0>)
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00da      	lsls	r2, r3, #3
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	440a      	add	r2, r1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	7818      	ldrb	r0, [r3, #0]
 8003204:	4910      	ldr	r1, [pc, #64]	; (8003248 <printGame+0x1a4>)
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	00da      	lsls	r2, r3, #3
 8003210:	1ad2      	subs	r2, r2, r3
 8003212:	440a      	add	r2, r1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	4602      	mov	r2, r0
 800321a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++ ) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3301      	adds	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b13      	cmp	r3, #19
 8003226:	f77f af57 	ble.w	80030d8 <printGame+0x34>
	for (c = 0; c < boardColumns; c ++ ) {
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	f77f af40 	ble.w	80030b8 <printGame+0x14>
			}
		}
	}
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200006b4 	.word	0x200006b4
 8003248:	200008b8 	.word	0x200008b8
 800324c:	0800ba6c 	.word	0x0800ba6c

08003250 <chooseWhichObject>:

char chooseWhichObject(int j)
{
 8003250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */

	if (j - lastBlockHeightInScreen > 4) {
 800325a:	4bae      	ldr	r3, [pc, #696]	; (8003514 <chooseWhichObject+0x2c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b04      	cmp	r3, #4
 8003264:	dd04      	ble.n	8003270 <chooseWhichObject+0x20>
		lastBlockHeightInScreen = j;
 8003266:	4aab      	ldr	r2, [pc, #684]	; (8003514 <chooseWhichObject+0x2c4>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6013      	str	r3, [r2, #0]
		return 'b';		
 800326c:	2362      	movs	r3, #98	; 0x62
 800326e:	e14c      	b.n	800350a <chooseWhichObject+0x2ba>
	}

	if (blockCount + looseCount + voidCount + monsterCount + boosterCount > maxObjects)
 8003270:	4ba9      	ldr	r3, [pc, #676]	; (8003518 <chooseWhichObject+0x2c8>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4ba9      	ldr	r3, [pc, #676]	; (800351c <chooseWhichObject+0x2cc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	441a      	add	r2, r3
 800327a:	4ba9      	ldr	r3, [pc, #676]	; (8003520 <chooseWhichObject+0x2d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	441a      	add	r2, r3
 8003280:	4ba8      	ldr	r3, [pc, #672]	; (8003524 <chooseWhichObject+0x2d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	441a      	add	r2, r3
 8003286:	4ba8      	ldr	r3, [pc, #672]	; (8003528 <chooseWhichObject+0x2d8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	2b09      	cmp	r3, #9
 800328e:	dd01      	ble.n	8003294 <chooseWhichObject+0x44>
		return 'e';
 8003290:	2365      	movs	r3, #101	; 0x65
 8003292:	e13a      	b.n	800350a <chooseWhichObject+0x2ba>

	int BProb = BProbBase + BProbBase / (sqrt(score)); // as score goes high it will be so hard
 8003294:	4ba5      	ldr	r3, [pc, #660]	; (800352c <chooseWhichObject+0x2dc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f943 	bl	8000524 <__aeabi_i2d>
 800329e:	4604      	mov	r4, r0
 80032a0:	460d      	mov	r5, r1
 80032a2:	4ba2      	ldr	r3, [pc, #648]	; (800352c <chooseWhichObject+0x2dc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f93c 	bl	8000524 <__aeabi_i2d>
 80032ac:	4680      	mov	r8, r0
 80032ae:	4689      	mov	r9, r1
 80032b0:	4b9f      	ldr	r3, [pc, #636]	; (8003530 <chooseWhichObject+0x2e0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f935 	bl	8000524 <__aeabi_i2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	ec43 2b10 	vmov	d0, r2, r3
 80032c2:	f008 fa2d 	bl	800b720 <sqrt>
 80032c6:	ec53 2b10 	vmov	r2, r3, d0
 80032ca:	4640      	mov	r0, r8
 80032cc:	4649      	mov	r1, r9
 80032ce:	f7fd fabd 	bl	800084c <__aeabi_ddiv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4620      	mov	r0, r4
 80032d8:	4629      	mov	r1, r5
 80032da:	f7fc ffd7 	bl	800028c <__adddf3>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc37 	bl	8000b58 <__aeabi_d2iz>
 80032ea:	4603      	mov	r3, r0
 80032ec:	617b      	str	r3, [r7, #20]
	if (getRandom(0, 100) < BProb) {
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7ff fa55 	bl	80027a0 <getRandom>
 80032f6:	4602      	mov	r2, r0
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	dd04      	ble.n	8003308 <chooseWhichObject+0xb8>
		lastBlockHeightInScreen = j;
 80032fe:	4a85      	ldr	r2, [pc, #532]	; (8003514 <chooseWhichObject+0x2c4>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]
		return 'b';
 8003304:	2362      	movs	r3, #98	; 0x62
 8003306:	e100      	b.n	800350a <chooseWhichObject+0x2ba>
	}

//	return 'e';

	int SProb = SProbBase + SProbBase / (sqrt(score)); // as score goes high it will be so hard
 8003308:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <chooseWhichObject+0x2e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f909 	bl	8000524 <__aeabi_i2d>
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	4b87      	ldr	r3, [pc, #540]	; (8003534 <chooseWhichObject+0x2e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f902 	bl	8000524 <__aeabi_i2d>
 8003320:	4680      	mov	r8, r0
 8003322:	4689      	mov	r9, r1
 8003324:	4b82      	ldr	r3, [pc, #520]	; (8003530 <chooseWhichObject+0x2e0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f8fb 	bl	8000524 <__aeabi_i2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	ec43 2b10 	vmov	d0, r2, r3
 8003336:	f008 f9f3 	bl	800b720 <sqrt>
 800333a:	ec53 2b10 	vmov	r2, r3, d0
 800333e:	4640      	mov	r0, r8
 8003340:	4649      	mov	r1, r9
 8003342:	f7fd fa83 	bl	800084c <__aeabi_ddiv>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	f7fc ff9d 	bl	800028c <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd fbfd 	bl	8000b58 <__aeabi_d2iz>
 800335e:	4603      	mov	r3, r0
 8003360:	613b      	str	r3, [r7, #16]
	if (getRandom(0, 100) < SProb) {
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	2000      	movs	r0, #0
 8003366:	f7ff fa1b 	bl	80027a0 <getRandom>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4293      	cmp	r3, r2
 8003370:	dd01      	ble.n	8003376 <chooseWhichObject+0x126>
		return 's';
 8003372:	2373      	movs	r3, #115	; 0x73
 8003374:	e0c9      	b.n	800350a <chooseWhichObject+0x2ba>
	}

	int LProb = LProbBase + LProbBase / (sqrt(score)); // as score goes high it will be so hard
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <chooseWhichObject+0x2e8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f8d2 	bl	8000524 <__aeabi_i2d>
 8003380:	4604      	mov	r4, r0
 8003382:	460d      	mov	r5, r1
 8003384:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <chooseWhichObject+0x2e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8cb 	bl	8000524 <__aeabi_i2d>
 800338e:	4680      	mov	r8, r0
 8003390:	4689      	mov	r9, r1
 8003392:	4b67      	ldr	r3, [pc, #412]	; (8003530 <chooseWhichObject+0x2e0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8c4 	bl	8000524 <__aeabi_i2d>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	ec43 2b10 	vmov	d0, r2, r3
 80033a4:	f008 f9bc 	bl	800b720 <sqrt>
 80033a8:	ec53 2b10 	vmov	r2, r3, d0
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fd fa4c 	bl	800084c <__aeabi_ddiv>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fc ff66 	bl	800028c <__adddf3>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7fd fbc6 	bl	8000b58 <__aeabi_d2iz>
 80033cc:	4603      	mov	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]
	if (getRandom(0, 100) < LProb) {
 80033d0:	2164      	movs	r1, #100	; 0x64
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff f9e4 	bl	80027a0 <getRandom>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4293      	cmp	r3, r2
 80033de:	dd01      	ble.n	80033e4 <chooseWhichObject+0x194>
		return 'l';
 80033e0:	236c      	movs	r3, #108	; 0x6c
 80033e2:	e092      	b.n	800350a <chooseWhichObject+0x2ba>
	}

	if (score > 20 && monsterCount < 4) {
 80033e4:	4b52      	ldr	r3, [pc, #328]	; (8003530 <chooseWhichObject+0x2e0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b14      	cmp	r3, #20
 80033ea:	dd45      	ble.n	8003478 <chooseWhichObject+0x228>
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <chooseWhichObject+0x2d4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	dc41      	bgt.n	8003478 <chooseWhichObject+0x228>
		int MProb = MProbBase + MProbBase * (sqrt(score)); // as score goes high it will be so hard
 80033f4:	4b51      	ldr	r3, [pc, #324]	; (800353c <chooseWhichObject+0x2ec>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f893 	bl	8000524 <__aeabi_i2d>
 80033fe:	4604      	mov	r4, r0
 8003400:	460d      	mov	r5, r1
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <chooseWhichObject+0x2ec>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f88c 	bl	8000524 <__aeabi_i2d>
 800340c:	4680      	mov	r8, r0
 800340e:	4689      	mov	r9, r1
 8003410:	4b47      	ldr	r3, [pc, #284]	; (8003530 <chooseWhichObject+0x2e0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f885 	bl	8000524 <__aeabi_i2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	ec43 2b10 	vmov	d0, r2, r3
 8003422:	f008 f97d 	bl	800b720 <sqrt>
 8003426:	ec53 2b10 	vmov	r2, r3, d0
 800342a:	4640      	mov	r0, r8
 800342c:	4649      	mov	r1, r9
 800342e:	f7fd f8e3 	bl	80005f8 <__aeabi_dmul>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	f7fc ff27 	bl	800028c <__adddf3>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fb87 	bl	8000b58 <__aeabi_d2iz>
 800344a:	4603      	mov	r3, r0
 800344c:	61fb      	str	r3, [r7, #28]
		if (MProb > 2 * MProbBase)
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <chooseWhichObject+0x2ec>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	429a      	cmp	r2, r3
 8003458:	dd03      	ble.n	8003462 <chooseWhichObject+0x212>
			MProb = 2 * MProbBase;
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <chooseWhichObject+0x2ec>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
		int t = getRandom(0, 100);
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	2000      	movs	r0, #0
 8003466:	f7ff f99b 	bl	80027a0 <getRandom>
 800346a:	60b8      	str	r0, [r7, #8]

		if (t < MProb) {
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	da01      	bge.n	8003478 <chooseWhichObject+0x228>
//			  char buff[20];
//			  sprintf(buff, "%d", t);
//			  print(buff);
			return 'm';
 8003474:	236d      	movs	r3, #109	; 0x6d
 8003476:	e048      	b.n	800350a <chooseWhichObject+0x2ba>
		}
	}


	if (score > 20 && voidCount < 4) {
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <chooseWhichObject+0x2e0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b14      	cmp	r3, #20
 800347e:	dd43      	ble.n	8003508 <chooseWhichObject+0x2b8>
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <chooseWhichObject+0x2d0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b03      	cmp	r3, #3
 8003486:	dc3f      	bgt.n	8003508 <chooseWhichObject+0x2b8>
		int VProb = VProbBase + VProbBase * (sqrt(score)); // as score goes high it will be so hard
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <chooseWhichObject+0x2f0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f849 	bl	8000524 <__aeabi_i2d>
 8003492:	4604      	mov	r4, r0
 8003494:	460d      	mov	r5, r1
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <chooseWhichObject+0x2f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f842 	bl	8000524 <__aeabi_i2d>
 80034a0:	4680      	mov	r8, r0
 80034a2:	4689      	mov	r9, r1
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <chooseWhichObject+0x2e0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f83b 	bl	8000524 <__aeabi_i2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	ec43 2b10 	vmov	d0, r2, r3
 80034b6:	f008 f933 	bl	800b720 <sqrt>
 80034ba:	ec53 2b10 	vmov	r2, r3, d0
 80034be:	4640      	mov	r0, r8
 80034c0:	4649      	mov	r1, r9
 80034c2:	f7fd f899 	bl	80005f8 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fc fedd 	bl	800028c <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb3d 	bl	8000b58 <__aeabi_d2iz>
 80034de:	4603      	mov	r3, r0
 80034e0:	61bb      	str	r3, [r7, #24]
		if (VProb > 2 * VProbBase)
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <chooseWhichObject+0x2f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	dd02      	ble.n	80034f4 <chooseWhichObject+0x2a4>
			VProb = 2 * VProb;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
		if (getRandom(0, 100) < VProb) {
 80034f4:	2164      	movs	r1, #100	; 0x64
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7ff f952 	bl	80027a0 <getRandom>
 80034fc:	4602      	mov	r2, r0
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4293      	cmp	r3, r2
 8003502:	dd01      	ble.n	8003508 <chooseWhichObject+0x2b8>
			return 'v';
 8003504:	2376      	movs	r3, #118	; 0x76
 8003506:	e000      	b.n	800350a <chooseWhichObject+0x2ba>
		}
	}

	return 'e';
 8003508:	2365      	movs	r3, #101	; 0x65
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003514:	200008ac 	.word	0x200008ac
 8003518:	20000978 	.word	0x20000978
 800351c:	200008a8 	.word	0x200008a8
 8003520:	20000974 	.word	0x20000974
 8003524:	20000924 	.word	0x20000924
 8003528:	200008a4 	.word	0x200008a4
 800352c:	20000708 	.word	0x20000708
 8003530:	2000070c 	.word	0x2000070c
 8003534:	200008a0 	.word	0x200008a0
 8003538:	20000920 	.word	0x20000920
 800353c:	200006a0 	.word	0x200006a0
 8003540:	2000091c 	.word	0x2000091c

08003544 <setRowObjects>:

void setRowObjects(int j)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	 * how to generage a row in this game?
	 * choose witch character should be choosed for this row
	 * choose witch col to place it
	 */
	int i;
	int maxObjectsOnRow = 2;
 800354c:	2302      	movs	r3, #2
 800354e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < boardColumns; i ++ ) {
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e068      	b.n	8003628 <setRowObjects+0xe4>
		char chosen = chooseWhichObject(j);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fe7a 	bl	8003250 <chooseWhichObject>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
		if (chosen != 'e') {
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b65      	cmp	r3, #101	; 0x65
 8003564:	d05a      	beq.n	800361c <setRowObjects+0xd8>
			if (chosen == 'm') {
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b6d      	cmp	r3, #109	; 0x6d
 800356a:	d125      	bne.n	80035b8 <setRowObjects+0x74>
				monsterLoc[monsterCount][0] = i;
 800356c:	4b33      	ldr	r3, [pc, #204]	; (800363c <setRowObjects+0xf8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4933      	ldr	r1, [pc, #204]	; (8003640 <setRowObjects+0xfc>)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				monsterLoc[monsterCount][1] = j;
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <setRowObjects+0xf8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a30      	ldr	r2, [pc, #192]	; (8003640 <setRowObjects+0xfc>)
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	605a      	str	r2, [r3, #4]
				int r = getRandom(0, 1);
 8003586:	2101      	movs	r1, #1
 8003588:	2000      	movs	r0, #0
 800358a:	f7ff f909 	bl	80027a0 <getRandom>
 800358e:	60b8      	str	r0, [r7, #8]
				if (r == 0)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <setRowObjects+0x5e>
					monsterState[monsterCount] = 'l'; // go to left
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <setRowObjects+0xf8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <setRowObjects+0x100>)
 800359c:	216c      	movs	r1, #108	; 0x6c
 800359e:	54d1      	strb	r1, [r2, r3]
 80035a0:	e004      	b.n	80035ac <setRowObjects+0x68>
				else
					monsterState[monsterCount] = 'r'; // go to right
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <setRowObjects+0xf8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <setRowObjects+0x100>)
 80035a8:	2172      	movs	r1, #114	; 0x72
 80035aa:	54d1      	strb	r1, [r2, r3]
				monsterCount ++;
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <setRowObjects+0xf8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <setRowObjects+0xf8>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e022      	b.n	80035fe <setRowObjects+0xba>
			} else if (chosen == 'v') {
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b76      	cmp	r3, #118	; 0x76
 80035bc:	d105      	bne.n	80035ca <setRowObjects+0x86>
				voidCount ++;
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <setRowObjects+0x104>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <setRowObjects+0x104>)
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e019      	b.n	80035fe <setRowObjects+0xba>
			} else if (chosen == 'b') {
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b62      	cmp	r3, #98	; 0x62
 80035ce:	d105      	bne.n	80035dc <setRowObjects+0x98>
				blockCount ++;
 80035d0:	4b1e      	ldr	r3, [pc, #120]	; (800364c <setRowObjects+0x108>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <setRowObjects+0x108>)
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e010      	b.n	80035fe <setRowObjects+0xba>
			} else if (chosen == 's') {
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b73      	cmp	r3, #115	; 0x73
 80035e0:	d105      	bne.n	80035ee <setRowObjects+0xaa>
				boosterCount ++;
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <setRowObjects+0x10c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <setRowObjects+0x10c>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e007      	b.n	80035fe <setRowObjects+0xba>
			} else if (chosen == 'l') {
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b6c      	cmp	r3, #108	; 0x6c
 80035f2:	d104      	bne.n	80035fe <setRowObjects+0xba>
				looseCount ++;
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <setRowObjects+0x110>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <setRowObjects+0x110>)
 80035fc:	6013      	str	r3, [r2, #0]
			}
			maxObjectsOnRow --;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3b01      	subs	r3, #1
 8003602:	613b      	str	r3, [r7, #16]
			board[i][j] = chosen;
 8003604:	4914      	ldr	r1, [pc, #80]	; (8003658 <setRowObjects+0x114>)
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00da      	lsls	r2, r3, #3
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	440a      	add	r2, r1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	701a      	strb	r2, [r3, #0]
		}
		if (maxObjectsOnRow < 1) break;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	dd06      	ble.n	8003630 <setRowObjects+0xec>
	for (i = 0; i < boardColumns; i ++ ) {
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3301      	adds	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b03      	cmp	r3, #3
 800362c:	dd93      	ble.n	8003556 <setRowObjects+0x12>
	}
}
 800362e:	e000      	b.n	8003632 <setRowObjects+0xee>
		if (maxObjectsOnRow < 1) break;
 8003630:	bf00      	nop
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000924 	.word	0x20000924
 8003640:	20000710 	.word	0x20000710
 8003644:	20000940 	.word	0x20000940
 8003648:	20000974 	.word	0x20000974
 800364c:	20000978 	.word	0x20000978
 8003650:	200008a4 	.word	0x200008a4
 8003654:	200008a8 	.word	0x200008a8
 8003658:	200006b4 	.word	0x200006b4

0800365c <initGameState>:

void initGameState()
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	int i, j;
	for (i = 0; i < boardColumns; i ++) {
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e02e      	b.n	80036c6 <initGameState+0x6a>
		for (j = 0; j < boardRows; j ++) {
 8003668:	2300      	movs	r3, #0
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	e01a      	b.n	80036a4 <initGameState+0x48>
			board[i][j] = 'e';
 800366e:	494a      	ldr	r1, [pc, #296]	; (8003798 <initGameState+0x13c>)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	00da      	lsls	r2, r3, #3
 800367a:	1ad2      	subs	r2, r2, r3
 800367c:	440a      	add	r2, r1
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	4413      	add	r3, r2
 8003682:	2265      	movs	r2, #101	; 0x65
 8003684:	701a      	strb	r2, [r3, #0]
			boardTemp[i][j] = '!'; // this means it is the first turn and no value is there
 8003686:	4945      	ldr	r1, [pc, #276]	; (800379c <initGameState+0x140>)
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	00da      	lsls	r2, r3, #3
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	440a      	add	r2, r1
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	2221      	movs	r2, #33	; 0x21
 800369c:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++) {
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b13      	cmp	r3, #19
 80036a8:	dde1      	ble.n	800366e <initGameState+0x12>
		}
		board[i][boardRows] = '\0';
 80036aa:	493b      	ldr	r1, [pc, #236]	; (8003798 <initGameState+0x13c>)
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	1ad2      	subs	r2, r2, r3
 80036b8:	188b      	adds	r3, r1, r2
 80036ba:	3314      	adds	r3, #20
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < boardColumns; i ++) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	ddcd      	ble.n	8003668 <initGameState+0xc>
	}
	board[1][0] = 'b';
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <initGameState+0x13c>)
 80036ce:	2262      	movs	r2, #98	; 0x62
 80036d0:	755a      	strb	r2, [r3, #21]
	lastBlockHeightInScreen = 0;
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <initGameState+0x144>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
	board[1][1] = 'p';
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <initGameState+0x13c>)
 80036da:	2270      	movs	r2, #112	; 0x70
 80036dc:	759a      	strb	r2, [r3, #22]
	playerRow = 1;
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <initGameState+0x148>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
	playerCol = 1;
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <initGameState+0x14c>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
	playerOn = 'e';
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <initGameState+0x150>)
 80036ec:	2265      	movs	r2, #101	; 0x65
 80036ee:	701a      	strb	r2, [r3, #0]
	jumpCount = 0;
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <initGameState+0x154>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

	bulletRow = -1;
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <initGameState+0x158>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	601a      	str	r2, [r3, #0]
	bulletCol = -1;
 80036fe:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <initGameState+0x15c>)
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	601a      	str	r2, [r3, #0]

	pauseGame = 0;
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <initGameState+0x160>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

	BProbBase = 10;
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <initGameState+0x164>)
 800370e:	220a      	movs	r2, #10
 8003710:	601a      	str	r2, [r3, #0]
	SProbBase = 1;
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <initGameState+0x168>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
	VProbBase = 1;
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <initGameState+0x16c>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
	LProbBase = 2;
 800371e:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <initGameState+0x170>)
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
	MProbBase = 1;
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <initGameState+0x174>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

	monsterCount = 0;
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <initGameState+0x178>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
	voidCount = 0;
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <initGameState+0x17c>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
	blockCount = 1;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <initGameState+0x180>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
	boosterCount = 0;
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <initGameState+0x184>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
	looseCount = 0;
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <initGameState+0x188>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

	playerFalling = 0;
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <initGameState+0x18c>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

	score = 1;
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <initGameState+0x190>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
	playerHeight = score;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <initGameState+0x190>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <initGameState+0x194>)
 800375a:	6013      	str	r3, [r2, #0]
	playerHeightInScreen = playerHeight;
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <initGameState+0x194>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <initGameState+0x198>)
 8003762:	6013      	str	r3, [r2, #0]

	srand(time(0));
 8003764:	2000      	movs	r0, #0
 8003766:	f006 fe3b 	bl	800a3e0 <time>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4613      	mov	r3, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f006 fda7 	bl	800a2c4 <srand>

	for (j = 2; j < boardRows; j ++ ) {
 8003776:	2302      	movs	r3, #2
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	e005      	b.n	8003788 <initGameState+0x12c>
		setRowObjects(j);
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f7ff fee1 	bl	8003544 <setRowObjects>
	for (j = 2; j < boardRows; j ++ ) {
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b13      	cmp	r3, #19
 800378c:	ddf6      	ble.n	800377c <initGameState+0x120>
	}
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200006b4 	.word	0x200006b4
 800379c:	200008b8 	.word	0x200008b8
 80037a0:	200008ac 	.word	0x200008ac
 80037a4:	2000092c 	.word	0x2000092c
 80037a8:	200006ac 	.word	0x200006ac
 80037ac:	2000093c 	.word	0x2000093c
 80037b0:	2000090c 	.word	0x2000090c
 80037b4:	200006a4 	.word	0x200006a4
 80037b8:	200006b0 	.word	0x200006b0
 80037bc:	20000914 	.word	0x20000914
 80037c0:	20000708 	.word	0x20000708
 80037c4:	200008a0 	.word	0x200008a0
 80037c8:	2000091c 	.word	0x2000091c
 80037cc:	20000920 	.word	0x20000920
 80037d0:	200006a0 	.word	0x200006a0
 80037d4:	20000924 	.word	0x20000924
 80037d8:	20000974 	.word	0x20000974
 80037dc:	20000978 	.word	0x20000978
 80037e0:	200008a4 	.word	0x200008a4
 80037e4:	200008a8 	.word	0x200008a8
 80037e8:	2000069c 	.word	0x2000069c
 80037ec:	2000070c 	.word	0x2000070c
 80037f0:	20000934 	.word	0x20000934
 80037f4:	20000910 	.word	0x20000910

080037f8 <keypadCallback>:

void keypadCallback(int8_t column_number)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if (last_gpio_exti + 250 > HAL_GetTick()) // Simple button debouncing
 8003802:	4b99      	ldr	r3, [pc, #612]	; (8003a68 <keypadCallback+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 800380a:	f000 fc21 	bl	8004050 <HAL_GetTick>
 800380e:	4603      	mov	r3, r0
 8003810:	429c      	cmp	r4, r3
 8003812:	f200 8118 	bhi.w	8003a46 <keypadCallback+0x24e>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8003816:	f000 fc1b 	bl	8004050 <HAL_GetTick>
 800381a:	4603      	mov	r3, r0
 800381c:	4a92      	ldr	r2, [pc, #584]	; (8003a68 <keypadCallback+0x270>)
 800381e:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8003820:	23ff      	movs	r3, #255	; 0xff
 8003822:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 0);
 8003824:	4b91      	ldr	r3, [pc, #580]	; (8003a6c <keypadCallback+0x274>)
 8003826:	2110      	movs	r1, #16
 8003828:	2200      	movs	r2, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f002 f990 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 0);
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <keypadCallback+0x274>)
 8003832:	2120      	movs	r1, #32
 8003834:	2200      	movs	r2, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f002 f98a 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 0);
 800383c:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <keypadCallback+0x274>)
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f002 f984 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 0);
 8003848:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <keypadCallback+0x274>)
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	2200      	movs	r2, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f002 f97e 	bl	8005b50 <HAL_GPIO_WritePin>

  for (uint8_t row = 0; row < 4; row++)
 8003854:	2300      	movs	r3, #0
 8003856:	73bb      	strb	r3, [r7, #14]
 8003858:	e02e      	b.n	80038b8 <keypadCallback+0xc0>
  {
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 1);
 800385a:	7bbb      	ldrb	r3, [r7, #14]
 800385c:	4a84      	ldr	r2, [pc, #528]	; (8003a70 <keypadCallback+0x278>)
 800385e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	4a83      	ldr	r2, [pc, #524]	; (8003a74 <keypadCallback+0x27c>)
 8003866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386a:	2201      	movs	r2, #1
 800386c:	4619      	mov	r1, r3
 800386e:	f002 f96f 	bl	8005b50 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Column_ports[column_number], Column_pins[column_number]))
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	4a80      	ldr	r2, [pc, #512]	; (8003a78 <keypadCallback+0x280>)
 8003878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	497e      	ldr	r1, [pc, #504]	; (8003a7c <keypadCallback+0x284>)
 8003882:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f002 f949 	bl	8005b20 <HAL_GPIO_ReadPin>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <keypadCallback+0xa2>
    {
      row_number = row;
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e011      	b.n	80038be <keypadCallback+0xc6>
    }
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 0);
 800389a:	7bbb      	ldrb	r3, [r7, #14]
 800389c:	4a74      	ldr	r2, [pc, #464]	; (8003a70 <keypadCallback+0x278>)
 800389e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	4a73      	ldr	r2, [pc, #460]	; (8003a74 <keypadCallback+0x27c>)
 80038a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038aa:	2200      	movs	r2, #0
 80038ac:	4619      	mov	r1, r3
 80038ae:	f002 f94f 	bl	8005b50 <HAL_GPIO_WritePin>
  for (uint8_t row = 0; row < 4; row++)
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	3301      	adds	r3, #1
 80038b6:	73bb      	strb	r3, [r7, #14]
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d9cd      	bls.n	800385a <keypadCallback+0x62>
  }

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 1);
 80038be:	4b6b      	ldr	r3, [pc, #428]	; (8003a6c <keypadCallback+0x274>)
 80038c0:	2110      	movs	r1, #16
 80038c2:	2201      	movs	r2, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 f943 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 1);
 80038ca:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <keypadCallback+0x274>)
 80038cc:	2120      	movs	r1, #32
 80038ce:	2201      	movs	r2, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 f93d 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 1);
 80038d6:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <keypadCallback+0x274>)
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	2201      	movs	r2, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 f937 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 1);
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <keypadCallback+0x274>)
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	2201      	movs	r2, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 f931 	bl	8005b50 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	f000 80a8 	beq.w	8003a4a <keypadCallback+0x252>
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	f000 80a2 	beq.w	8003a4a <keypadCallback+0x252>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	b2da      	uxtb	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	4413      	add	r3, r2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	3301      	adds	r3, #1
 8003914:	737b      	strb	r3, [r7, #13]

//  setCursor(curser_column, 0);
  switch (button_number)
 8003916:	7b7b      	ldrb	r3, [r7, #13]
 8003918:	3b01      	subs	r3, #1
 800391a:	2b0f      	cmp	r3, #15
 800391c:	f200 8097 	bhi.w	8003a4e <keypadCallback+0x256>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <keypadCallback+0x130>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003a4f 	.word	0x08003a4f
 800392c:	08003a4f 	.word	0x08003a4f
 8003930:	08003a4f 	.word	0x08003a4f
 8003934:	08003a4f 	.word	0x08003a4f
 8003938:	08003a4f 	.word	0x08003a4f
 800393c:	08003a4f 	.word	0x08003a4f
 8003940:	08003a4f 	.word	0x08003a4f
 8003944:	08003a4f 	.word	0x08003a4f
 8003948:	08003969 	.word	0x08003969
 800394c:	08003981 	.word	0x08003981
 8003950:	08003991 	.word	0x08003991
 8003954:	08003a4f 	.word	0x08003a4f
 8003958:	08003a4f 	.word	0x08003a4f
 800395c:	08003997 	.word	0x08003997
 8003960:	080039d9 	.word	0x080039d9
 8003964:	08003a27 	.word	0x08003a27
       break;
     case 8:
//    	  print("8");
       break;
     case 9:
	 	if (pauseGame) 
 8003968:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <keypadCallback+0x288>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <keypadCallback+0x180>
		 	pauseGame = 0;
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <keypadCallback+0x288>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
		else 
			pauseGame = 1;
//    	  print("9");
       break;
 8003976:	e073      	b.n	8003a60 <keypadCallback+0x268>
			pauseGame = 1;
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <keypadCallback+0x288>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
       break;
 800397e:	e06f      	b.n	8003a60 <keypadCallback+0x268>
     case 10:
     	 if (menuState == 'z')
 8003980:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <keypadCallback+0x28c>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b7a      	cmp	r3, #122	; 0x7a
 8003986:	d164      	bne.n	8003a52 <keypadCallback+0x25a>
     		 menuState = 'm';
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <keypadCallback+0x28c>)
 800398a:	226d      	movs	r2, #109	; 0x6d
 800398c:	701a      	strb	r2, [r3, #0]
       break;
 800398e:	e060      	b.n	8003a52 <keypadCallback+0x25a>
     case 11:
//    	  print("11");
		fireBullet();
 8003990:	f7fe ff20 	bl	80027d4 <fireBullet>
       break;
 8003994:	e064      	b.n	8003a60 <keypadCallback+0x268>
       break;
     case 13:
//    	 print("13");
       break;
     case 14:
    	 if (menuState == 'm')
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <keypadCallback+0x28c>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b6d      	cmp	r3, #109	; 0x6d
 800399c:	d103      	bne.n	80039a6 <keypadCallback+0x1ae>
    		 menuState = 'a';
 800399e:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <keypadCallback+0x28c>)
 80039a0:	2261      	movs	r2, #97	; 0x61
 80039a2:	701a      	strb	r2, [r3, #0]
    	 else if (menuState == 'g' && !playerFalling) {
    		 //    		 Player move right
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
    	 }
       break;
 80039a4:	e057      	b.n	8003a56 <keypadCallback+0x25e>
    	 else if (menuState == 'g' && !playerFalling) {
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <keypadCallback+0x28c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b67      	cmp	r3, #103	; 0x67
 80039ac:	d153      	bne.n	8003a56 <keypadCallback+0x25e>
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <keypadCallback+0x290>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d14f      	bne.n	8003a56 <keypadCallback+0x25e>
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <keypadCallback+0x294>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	425a      	negs	r2, r3
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	f002 0203 	and.w	r2, r2, #3
 80039c6:	bf58      	it	pl
 80039c8:	4253      	negpl	r3, r2
 80039ca:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <keypadCallback+0x298>)
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff faef 	bl	8002fb4 <movePlayerTo>
       break;
 80039d6:	e03e      	b.n	8003a56 <keypadCallback+0x25e>
     case 15:
    	 if (menuState == 'm') {
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <keypadCallback+0x28c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b6d      	cmp	r3, #109	; 0x6d
 80039de:	d105      	bne.n	80039ec <keypadCallback+0x1f4>
    		 initGameState();
 80039e0:	f7ff fe3c 	bl	800365c <initGameState>
    		 menuState = 'g';
 80039e4:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <keypadCallback+0x28c>)
 80039e6:	2267      	movs	r2, #103	; 0x67
 80039e8:	701a      	strb	r2, [r3, #0]
				 movePlayerTo(boardColumns - 1, playerRow);
			 } else {
				 movePlayerTo(playerCol - 1, playerRow);
			 }
    	 }
       break;
 80039ea:	e036      	b.n	8003a5a <keypadCallback+0x262>
    	 } else if (menuState == 'g' && !playerFalling) {
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <keypadCallback+0x28c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b67      	cmp	r3, #103	; 0x67
 80039f2:	d132      	bne.n	8003a5a <keypadCallback+0x262>
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <keypadCallback+0x290>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d12e      	bne.n	8003a5a <keypadCallback+0x262>
			 if (playerCol == 0) {
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <keypadCallback+0x294>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <keypadCallback+0x21a>
				 movePlayerTo(boardColumns - 1, playerRow);
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <keypadCallback+0x298>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	f7ff fad2 	bl	8002fb4 <movePlayerTo>
       break;
 8003a10:	e023      	b.n	8003a5a <keypadCallback+0x262>
				 movePlayerTo(playerCol - 1, playerRow);
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <keypadCallback+0x294>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <keypadCallback+0x298>)
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fac8 	bl	8002fb4 <movePlayerTo>
       break;
 8003a24:	e019      	b.n	8003a5a <keypadCallback+0x262>
     case 16:
    	  if (menuState == 'a')
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <keypadCallback+0x28c>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b61      	cmp	r3, #97	; 0x61
 8003a2c:	d103      	bne.n	8003a36 <keypadCallback+0x23e>
    		  menuState = 'm';
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <keypadCallback+0x28c>)
 8003a30:	226d      	movs	r2, #109	; 0x6d
 8003a32:	701a      	strb	r2, [r3, #0]
			else if (menuState == 'd')
				menuState = 'm';
       break;
 8003a34:	e013      	b.n	8003a5e <keypadCallback+0x266>
			else if (menuState == 'd')
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <keypadCallback+0x28c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d10f      	bne.n	8003a5e <keypadCallback+0x266>
				menuState = 'm';
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <keypadCallback+0x28c>)
 8003a40:	226d      	movs	r2, #109	; 0x6d
 8003a42:	701a      	strb	r2, [r3, #0]
       break;
 8003a44:	e00b      	b.n	8003a5e <keypadCallback+0x266>
    return;
 8003a46:	bf00      	nop
 8003a48:	e00a      	b.n	8003a60 <keypadCallback+0x268>
    return; // Reject invalid scan
 8003a4a:	bf00      	nop
 8003a4c:	e008      	b.n	8003a60 <keypadCallback+0x268>

     default:
       break;
 8003a4e:	bf00      	nop
 8003a50:	e006      	b.n	8003a60 <keypadCallback+0x268>
       break;
 8003a52:	bf00      	nop
 8003a54:	e004      	b.n	8003a60 <keypadCallback+0x268>
       break;
 8003a56:	bf00      	nop
 8003a58:	e002      	b.n	8003a60 <keypadCallback+0x268>
       break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <keypadCallback+0x268>
       break;
 8003a5e:	bf00      	nop
     }
}
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd90      	pop	{r4, r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000928 	.word	0x20000928
 8003a6c:	48000c00 	.word	0x48000c00
 8003a70:	0800ba80 	.word	0x0800ba80
 8003a74:	0800ba90 	.word	0x0800ba90
 8003a78:	0800ba98 	.word	0x0800ba98
 8003a7c:	0800baa8 	.word	0x0800baa8
 8003a80:	20000914 	.word	0x20000914
 8003a84:	2000016c 	.word	0x2000016c
 8003a88:	2000069c 	.word	0x2000069c
 8003a8c:	200006ac 	.word	0x200006ac
 8003a90:	2000092c 	.word	0x2000092c

08003a94 <set_seg_value>:


void set_seg_value(int D) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	if (D == 0) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <set_seg_value+0x38>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4877      	ldr	r0, [pc, #476]	; (8003c84 <set_seg_value+0x1f0>)
 8003aa8:	f002 f852 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003aac:	2200      	movs	r2, #0
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4874      	ldr	r0, [pc, #464]	; (8003c84 <set_seg_value+0x1f0>)
 8003ab2:	f002 f84d 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4872      	ldr	r0, [pc, #456]	; (8003c84 <set_seg_value+0x1f0>)
 8003abc:	f002 f848 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2108      	movs	r1, #8
 8003ac4:	486f      	ldr	r0, [pc, #444]	; (8003c84 <set_seg_value+0x1f0>)
 8003ac6:	f002 f843 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
	}
}
 8003aca:	e0d6      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if (D == 1) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d114      	bne.n	8003afc <set_seg_value+0x68>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	486b      	ldr	r0, [pc, #428]	; (8003c84 <set_seg_value+0x1f0>)
 8003ad8:	f002 f83a 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4868      	ldr	r0, [pc, #416]	; (8003c84 <set_seg_value+0x1f0>)
 8003ae2:	f002 f835 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4866      	ldr	r0, [pc, #408]	; (8003c84 <set_seg_value+0x1f0>)
 8003aec:	f002 f830 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2108      	movs	r1, #8
 8003af4:	4863      	ldr	r0, [pc, #396]	; (8003c84 <set_seg_value+0x1f0>)
 8003af6:	f002 f82b 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003afa:	e0be      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if (D == 2) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d114      	bne.n	8003b2c <set_seg_value+0x98>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2101      	movs	r1, #1
 8003b06:	485f      	ldr	r0, [pc, #380]	; (8003c84 <set_seg_value+0x1f0>)
 8003b08:	f002 f822 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2102      	movs	r1, #2
 8003b10:	485c      	ldr	r0, [pc, #368]	; (8003c84 <set_seg_value+0x1f0>)
 8003b12:	f002 f81d 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2104      	movs	r1, #4
 8003b1a:	485a      	ldr	r0, [pc, #360]	; (8003c84 <set_seg_value+0x1f0>)
 8003b1c:	f002 f818 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2108      	movs	r1, #8
 8003b24:	4857      	ldr	r0, [pc, #348]	; (8003c84 <set_seg_value+0x1f0>)
 8003b26:	f002 f813 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003b2a:	e0a6      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if (D == 3) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d114      	bne.n	8003b5c <set_seg_value+0xc8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003b32:	2201      	movs	r2, #1
 8003b34:	2101      	movs	r1, #1
 8003b36:	4853      	ldr	r0, [pc, #332]	; (8003c84 <set_seg_value+0x1f0>)
 8003b38:	f002 f80a 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4850      	ldr	r0, [pc, #320]	; (8003c84 <set_seg_value+0x1f0>)
 8003b42:	f002 f805 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2104      	movs	r1, #4
 8003b4a:	484e      	ldr	r0, [pc, #312]	; (8003c84 <set_seg_value+0x1f0>)
 8003b4c:	f002 f800 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2108      	movs	r1, #8
 8003b54:	484b      	ldr	r0, [pc, #300]	; (8003c84 <set_seg_value+0x1f0>)
 8003b56:	f001 fffb 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003b5a:	e08e      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 4) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d114      	bne.n	8003b8c <set_seg_value+0xf8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2101      	movs	r1, #1
 8003b66:	4847      	ldr	r0, [pc, #284]	; (8003c84 <set_seg_value+0x1f0>)
 8003b68:	f001 fff2 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4844      	ldr	r0, [pc, #272]	; (8003c84 <set_seg_value+0x1f0>)
 8003b72:	f001 ffed 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003b76:	2201      	movs	r2, #1
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4842      	ldr	r0, [pc, #264]	; (8003c84 <set_seg_value+0x1f0>)
 8003b7c:	f001 ffe8 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	2108      	movs	r1, #8
 8003b84:	483f      	ldr	r0, [pc, #252]	; (8003c84 <set_seg_value+0x1f0>)
 8003b86:	f001 ffe3 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003b8a:	e076      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 5) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d114      	bne.n	8003bbc <set_seg_value+0x128>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003b92:	2201      	movs	r2, #1
 8003b94:	2101      	movs	r1, #1
 8003b96:	483b      	ldr	r0, [pc, #236]	; (8003c84 <set_seg_value+0x1f0>)
 8003b98:	f001 ffda 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4838      	ldr	r0, [pc, #224]	; (8003c84 <set_seg_value+0x1f0>)
 8003ba2:	f001 ffd5 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2104      	movs	r1, #4
 8003baa:	4836      	ldr	r0, [pc, #216]	; (8003c84 <set_seg_value+0x1f0>)
 8003bac:	f001 ffd0 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	4833      	ldr	r0, [pc, #204]	; (8003c84 <set_seg_value+0x1f0>)
 8003bb6:	f001 ffcb 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003bba:	e05e      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 6) {
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d114      	bne.n	8003bec <set_seg_value+0x158>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	482f      	ldr	r0, [pc, #188]	; (8003c84 <set_seg_value+0x1f0>)
 8003bc8:	f001 ffc2 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2102      	movs	r1, #2
 8003bd0:	482c      	ldr	r0, [pc, #176]	; (8003c84 <set_seg_value+0x1f0>)
 8003bd2:	f001 ffbd 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	2104      	movs	r1, #4
 8003bda:	482a      	ldr	r0, [pc, #168]	; (8003c84 <set_seg_value+0x1f0>)
 8003bdc:	f001 ffb8 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2108      	movs	r1, #8
 8003be4:	4827      	ldr	r0, [pc, #156]	; (8003c84 <set_seg_value+0x1f0>)
 8003be6:	f001 ffb3 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003bea:	e046      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 7) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b07      	cmp	r3, #7
 8003bf0:	d114      	bne.n	8003c1c <set_seg_value+0x188>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4823      	ldr	r0, [pc, #140]	; (8003c84 <set_seg_value+0x1f0>)
 8003bf8:	f001 ffaa 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4820      	ldr	r0, [pc, #128]	; (8003c84 <set_seg_value+0x1f0>)
 8003c02:	f001 ffa5 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003c06:	2201      	movs	r2, #1
 8003c08:	2104      	movs	r1, #4
 8003c0a:	481e      	ldr	r0, [pc, #120]	; (8003c84 <set_seg_value+0x1f0>)
 8003c0c:	f001 ffa0 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2108      	movs	r1, #8
 8003c14:	481b      	ldr	r0, [pc, #108]	; (8003c84 <set_seg_value+0x1f0>)
 8003c16:	f001 ff9b 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003c1a:	e02e      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 8) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d114      	bne.n	8003c4c <set_seg_value+0x1b8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2101      	movs	r1, #1
 8003c26:	4817      	ldr	r0, [pc, #92]	; (8003c84 <set_seg_value+0x1f0>)
 8003c28:	f001 ff92 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4814      	ldr	r0, [pc, #80]	; (8003c84 <set_seg_value+0x1f0>)
 8003c32:	f001 ff8d 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4812      	ldr	r0, [pc, #72]	; (8003c84 <set_seg_value+0x1f0>)
 8003c3c:	f001 ff88 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003c40:	2201      	movs	r2, #1
 8003c42:	2108      	movs	r1, #8
 8003c44:	480f      	ldr	r0, [pc, #60]	; (8003c84 <set_seg_value+0x1f0>)
 8003c46:	f001 ff83 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003c4a:	e016      	b.n	8003c7a <set_seg_value+0x1e6>
	} else if(D == 9) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b09      	cmp	r3, #9
 8003c50:	d113      	bne.n	8003c7a <set_seg_value+0x1e6>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003c52:	2201      	movs	r2, #1
 8003c54:	2101      	movs	r1, #1
 8003c56:	480b      	ldr	r0, [pc, #44]	; (8003c84 <set_seg_value+0x1f0>)
 8003c58:	f001 ff7a 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4808      	ldr	r0, [pc, #32]	; (8003c84 <set_seg_value+0x1f0>)
 8003c62:	f001 ff75 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2104      	movs	r1, #4
 8003c6a:	4806      	ldr	r0, [pc, #24]	; (8003c84 <set_seg_value+0x1f0>)
 8003c6c:	f001 ff70 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003c70:	2201      	movs	r2, #1
 8003c72:	2108      	movs	r1, #8
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <set_seg_value+0x1f0>)
 8003c76:	f001 ff6b 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	48000800 	.word	0x48000800

08003c88 <setScoreSeven>:

void setScoreSeven() {
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	D3 = score % 10;
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <setScoreSeven+0x80>)
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <setScoreSeven+0x84>)
 8003c92:	fb83 2301 	smull	r2, r3, r3, r1
 8003c96:	109a      	asrs	r2, r3, #2
 8003c98:	17cb      	asrs	r3, r1, #31
 8003c9a:	1ad2      	subs	r2, r2, r3
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	1aca      	subs	r2, r1, r3
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <setScoreSeven+0x88>)
 8003ca8:	601a      	str	r2, [r3, #0]
	D2 = (score / 10) % 10;
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <setScoreSeven+0x80>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <setScoreSeven+0x84>)
 8003cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb4:	1092      	asrs	r2, r2, #2
 8003cb6:	17db      	asrs	r3, r3, #31
 8003cb8:	1ad1      	subs	r1, r2, r3
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <setScoreSeven+0x84>)
 8003cbc:	fb83 2301 	smull	r2, r3, r3, r1
 8003cc0:	109a      	asrs	r2, r3, #2
 8003cc2:	17cb      	asrs	r3, r1, #31
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	1aca      	subs	r2, r1, r3
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <setScoreSeven+0x8c>)
 8003cd2:	601a      	str	r2, [r3, #0]
	D1 = (score / 100) % 10;
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <setScoreSeven+0x80>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <setScoreSeven+0x90>)
 8003cda:	fb82 1203 	smull	r1, r2, r2, r3
 8003cde:	1152      	asrs	r2, r2, #5
 8003ce0:	17db      	asrs	r3, r3, #31
 8003ce2:	1ad1      	subs	r1, r2, r3
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <setScoreSeven+0x84>)
 8003ce6:	fb83 2301 	smull	r2, r3, r3, r1
 8003cea:	109a      	asrs	r2, r3, #2
 8003cec:	17cb      	asrs	r3, r1, #31
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	1aca      	subs	r2, r1, r3
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <setScoreSeven+0x94>)
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	2000070c 	.word	0x2000070c
 8003d0c:	66666667 	.word	0x66666667
 8003d10:	20000698 	.word	0x20000698
 8003d14:	200008b4 	.word	0x200008b4
 8003d18:	51eb851f 	.word	0x51eb851f
 8003d1c:	20000938 	.word	0x20000938

08003d20 <show>:


void show(int i){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	int show = sprintf(showarr, "difficulty %d \n", i);
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4909      	ldr	r1, [pc, #36]	; (8003d50 <show+0x30>)
 8003d2c:	4809      	ldr	r0, [pc, #36]	; (8003d54 <show+0x34>)
 8003d2e:	f006 fb37 	bl	800a3a0 <siprintf>
 8003d32:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, showarr, sizeof(showarr), 1000);
 8003d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d38:	221e      	movs	r2, #30
 8003d3a:	4906      	ldr	r1, [pc, #24]	; (8003d54 <show+0x34>)
 8003d3c:	4806      	ldr	r0, [pc, #24]	; (8003d58 <show+0x38>)
 8003d3e:	f005 fa91 	bl	8009264 <HAL_UART_Transmit>
	D0 = i;
 8003d42:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <show+0x3c>)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6013      	str	r3, [r2, #0]


}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	0800ba70 	.word	0x0800ba70
 8003d54:	20000034 	.word	0x20000034
 8003d58:	2000028c 	.word	0x2000028c
 8003d5c:	200006a8 	.word	0x200006a8

08003d60 <buzz>:


void buzz(){
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
	int i;
	for(i = 0 ; i <= 100 ; i++){
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	e006      	b.n	8003d7a <buzz+0x1a>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <buzz+0x34>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
	for(i = 0 ; i <= 100 ; i++){
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3301      	adds	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	ddf5      	ble.n	8003d6c <buzz+0xc>
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <buzz+0x34>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8003d88:	bf00      	nop
}
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	20000170 	.word	0x20000170

08003d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
	return 1;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_kill>:

int _kill(int pid, int sig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003db2:	f006 fa55 	bl	800a260 <__errno>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2216      	movs	r2, #22
 8003dba:	601a      	str	r2, [r3, #0]
	return -1;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_exit>:

void _exit (int status)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffe7 	bl	8003da8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dda:	e7fe      	b.n	8003dda <_exit+0x12>

08003ddc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e00a      	b.n	8003e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dee:	f3af 8000 	nop.w
 8003df2:	4601      	mov	r1, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf0      	blt.n	8003dee <_read+0x12>
	}

return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e009      	b.n	8003e3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	60ba      	str	r2, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf1      	blt.n	8003e28 <_write+0x12>
	}
	return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_close>:

int _close(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e76:	605a      	str	r2, [r3, #4]
	return 0;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_isatty>:

int _isatty(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f006 f9ba 	bl	800a260 <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000a000 	.word	0x2000a000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	200000ec 	.word	0x200000ec
 8003f20:	20000990 	.word	0x20000990

08003f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x20>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <SystemInit+0x20>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f4e:	490e      	ldr	r1, [pc, #56]	; (8003f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <LoopForever+0xe>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f54:	e002      	b.n	8003f5c <LoopCopyDataInit>

08003f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5a:	3304      	adds	r3, #4

08003f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f60:	d3f9      	bcc.n	8003f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f64:	4c0b      	ldr	r4, [pc, #44]	; (8003f94 <LoopForever+0x16>)
  movs r3, #0
 8003f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f68:	e001      	b.n	8003f6e <LoopFillZerobss>

08003f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f6c:	3204      	adds	r2, #4

08003f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f70:	d3fb      	bcc.n	8003f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f72:	f7ff ffd7 	bl	8003f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f76:	f006 f979 	bl	800a26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f7a:	f7fd f9fd 	bl	8001378 <main>

08003f7e <LoopForever>:

LoopForever:
    b LoopForever
 8003f7e:	e7fe      	b.n	8003f7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f80:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f88:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8003f8c:	0800bc3c 	.word	0x0800bc3c
  ldr r2, =_sbss
 8003f90:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003f94:	20000990 	.word	0x20000990

08003f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f98:	e7fe      	b.n	8003f98 <ADC1_2_IRQHandler>
	...

08003f9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_Init+0x28>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_Init+0x28>)
 8003fa6:	f043 0310 	orr.w	r3, r3, #16
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fac:	2003      	movs	r0, #3
 8003fae:	f001 fb85 	bl	80056bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f000 f808 	bl	8003fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb8:	f7fd feee 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000

08003fc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_InitTick+0x54>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_InitTick+0x58>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fb9d 	bl	8005726 <HAL_SYSTICK_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00e      	b.n	8004014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b0f      	cmp	r3, #15
 8003ffa:	d80a      	bhi.n	8004012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f001 fb65 	bl	80056d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004008:	4a06      	ldr	r2, [pc, #24]	; (8004024 <HAL_InitTick+0x5c>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000054 	.word	0x20000054
 8004020:	2000005c 	.word	0x2000005c
 8004024:	20000058 	.word	0x20000058

08004028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_IncTick+0x20>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_IncTick+0x24>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4413      	add	r3, r2
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_IncTick+0x24>)
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	2000005c 	.word	0x2000005c
 800404c:	2000097c 	.word	0x2000097c

08004050 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return uwTick;  
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_GetTick+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000097c 	.word	0x2000097c

08004068 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7ff ffee 	bl	8004050 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d005      	beq.n	800408e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_Delay+0x44>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800408e:	bf00      	nop
 8004090:	f7ff ffde 	bl	8004050 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d8f7      	bhi.n	8004090 <HAL_Delay+0x28>
  {
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000005c 	.word	0x2000005c

080040b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b09a      	sub	sp, #104	; 0x68
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e1c9      	b.n	80044a0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d176      	bne.n	800420c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d152      	bne.n	80041cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd fe4d 	bl	8001de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d13b      	bne.n	80041cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 f97b 	bl	8005450 <ADC_Disable>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12f      	bne.n	80041cc <HAL_ADC_Init+0xe0>
 800416c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004170:	2b00      	cmp	r3, #0
 8004172:	d12b      	bne.n	80041cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800417c:	f023 0302 	bic.w	r3, r3, #2
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004196:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041a8:	4b86      	ldr	r3, [pc, #536]	; (80043c4 <HAL_ADC_Init+0x2d8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a86      	ldr	r2, [pc, #536]	; (80043c8 <HAL_ADC_Init+0x2dc>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0c9a      	lsrs	r2, r3, #18
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041be:	e002      	b.n	80041c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f9      	bne.n	80041c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80041e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e8:	d110      	bne.n	800420c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f023 0312 	bic.w	r3, r3, #18
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8136 	bne.w	8004486 <HAL_ADC_Init+0x39a>
 800421a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8131 	bne.w	8004486 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800422e:	2b00      	cmp	r3, #0
 8004230:	f040 8129 	bne.w	8004486 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800423c:	f043 0202 	orr.w	r2, r3, #2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424c:	d004      	beq.n	8004258 <HAL_ADC_Init+0x16c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5e      	ldr	r2, [pc, #376]	; (80043cc <HAL_ADC_Init+0x2e0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_ADC_Init+0x170>
 8004258:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <HAL_ADC_Init+0x2e4>)
 800425a:	e000      	b.n	800425e <HAL_ADC_Init+0x172>
 800425c:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_ADC_Init+0x2e8>)
 800425e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004268:	d102      	bne.n	8004270 <HAL_ADC_Init+0x184>
 800426a:	4b58      	ldr	r3, [pc, #352]	; (80043cc <HAL_ADC_Init+0x2e0>)
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e01a      	b.n	80042a6 <HAL_ADC_Init+0x1ba>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a55      	ldr	r2, [pc, #340]	; (80043cc <HAL_ADC_Init+0x2e0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d103      	bne.n	8004282 <HAL_ADC_Init+0x196>
 800427a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e011      	b.n	80042a6 <HAL_ADC_Init+0x1ba>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a54      	ldr	r2, [pc, #336]	; (80043d8 <HAL_ADC_Init+0x2ec>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d102      	bne.n	8004292 <HAL_ADC_Init+0x1a6>
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_ADC_Init+0x2f0>)
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e009      	b.n	80042a6 <HAL_ADC_Init+0x1ba>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_ADC_Init+0x2f0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d102      	bne.n	80042a2 <HAL_ADC_Init+0x1b6>
 800429c:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_ADC_Init+0x2ec>)
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e001      	b.n	80042a6 <HAL_ADC_Init+0x1ba>
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d108      	bne.n	80042c6 <HAL_ADC_Init+0x1da>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_Init+0x1da>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_ADC_Init+0x1dc>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11c      	bne.n	8004306 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_ADC_Init+0x202>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_Init+0x202>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_ADC_Init+0x204>
 80042ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d108      	bne.n	8004306 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80042f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	431a      	orrs	r2, r3
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7e5b      	ldrb	r3, [r3, #25]
 800430a:	035b      	lsls	r3, r3, #13
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004310:	2a01      	cmp	r2, #1
 8004312:	d002      	beq.n	800431a <HAL_ADC_Init+0x22e>
 8004314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004318:	e000      	b.n	800431c <HAL_ADC_Init+0x230>
 800431a:	2200      	movs	r2, #0
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800432c:	4313      	orrs	r3, r2
 800432e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d11b      	bne.n	8004372 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7e5b      	ldrb	r3, [r3, #25]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	3b01      	subs	r3, #1
 8004348:	045a      	lsls	r2, r3, #17
 800434a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800434c:	4313      	orrs	r3, r2
 800434e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004352:	663b      	str	r3, [r7, #96]	; 0x60
 8004354:	e00d      	b.n	8004372 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	2b01      	cmp	r3, #1
 8004378:	d03a      	beq.n	80043f0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <HAL_ADC_Init+0x2ec>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_ADC_Init+0x2a2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <HAL_ADC_Init+0x2f0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d128      	bne.n	80043e0 <HAL_ADC_Init+0x2f4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004396:	d012      	beq.n	80043be <HAL_ADC_Init+0x2d2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d00a      	beq.n	80043b8 <HAL_ADC_Init+0x2cc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80043aa:	d002      	beq.n	80043b2 <HAL_ADC_Init+0x2c6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	e018      	b.n	80043e4 <HAL_ADC_Init+0x2f8>
 80043b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b6:	e015      	b.n	80043e4 <HAL_ADC_Init+0x2f8>
 80043b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80043bc:	e012      	b.n	80043e4 <HAL_ADC_Init+0x2f8>
 80043be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80043c2:	e00f      	b.n	80043e4 <HAL_ADC_Init+0x2f8>
 80043c4:	20000054 	.word	0x20000054
 80043c8:	431bde83 	.word	0x431bde83
 80043cc:	50000100 	.word	0x50000100
 80043d0:	50000300 	.word	0x50000300
 80043d4:	50000700 	.word	0x50000700
 80043d8:	50000400 	.word	0x50000400
 80043dc:	50000500 	.word	0x50000500
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043e8:	4313      	orrs	r3, r2
 80043ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ec:	4313      	orrs	r3, r2
 80043ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d114      	bne.n	8004428 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440c:	f023 0302 	bic.w	r3, r3, #2
 8004410:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7e1b      	ldrb	r3, [r3, #24]
 8004416:	039a      	lsls	r2, r3, #14
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4313      	orrs	r3, r2
 8004422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004424:	4313      	orrs	r3, r2
 8004426:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_ADC_Init+0x3bc>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004438:	430b      	orrs	r3, r1
 800443a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10c      	bne.n	800445e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f023 010f 	bic.w	r1, r3, #15
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
 800445c:	e007      	b.n	800446e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 020f 	bic.w	r2, r2, #15
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f023 0303 	bic.w	r3, r3, #3
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
 8004484:	e00a      	b.n	800449c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f023 0312 	bic.w	r3, r3, #18
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800449c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3768      	adds	r7, #104	; 0x68
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	fff0c007 	.word	0xfff0c007

080044ac <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8123 	bne.w	800470e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_Start_IT+0x2a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e11e      	b.n	8004714 <HAL_ADC_Start_IT+0x268>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ff52 	bl	8005388 <ADC_Enable>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 810a 	bne.w	8004704 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450c:	d004      	beq.n	8004518 <HAL_ADC_Start_IT+0x6c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a82      	ldr	r2, [pc, #520]	; (800471c <HAL_ADC_Start_IT+0x270>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d106      	bne.n	8004526 <HAL_ADC_Start_IT+0x7a>
 8004518:	4b81      	ldr	r3, [pc, #516]	; (8004720 <HAL_ADC_Start_IT+0x274>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_ADC_Start_IT+0x9a>
 8004524:	e005      	b.n	8004532 <HAL_ADC_Start_IT+0x86>
 8004526:	4b7f      	ldr	r3, [pc, #508]	; (8004724 <HAL_ADC_Start_IT+0x278>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_ADC_Start_IT+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800453a:	d004      	beq.n	8004546 <HAL_ADC_Start_IT+0x9a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a79      	ldr	r2, [pc, #484]	; (8004728 <HAL_ADC_Start_IT+0x27c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d115      	bne.n	8004572 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d036      	beq.n	80045ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004570:	e02d      	b.n	80045ce <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004586:	d004      	beq.n	8004592 <HAL_ADC_Start_IT+0xe6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a63      	ldr	r2, [pc, #396]	; (800471c <HAL_ADC_Start_IT+0x270>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10a      	bne.n	80045a8 <HAL_ADC_Start_IT+0xfc>
 8004592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e008      	b.n	80045ba <HAL_ADC_Start_IT+0x10e>
 80045a8:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_ADC_Start_IT+0x27c>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d106      	bne.n	80045ea <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f023 0206 	bic.w	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	645a      	str	r2, [r3, #68]	; 0x44
 80045e8:	e002      	b.n	80045f0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	221c      	movs	r2, #28
 80045fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d110      	bne.n	800462a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0208 	orr.w	r2, r2, #8
 8004626:	605a      	str	r2, [r3, #4]
          break;
 8004628:	e008      	b.n	800463c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 020c 	orr.w	r2, r2, #12
 8004638:	605a      	str	r2, [r3, #4]
          break;
 800463a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0210 	bic.w	r2, r2, #16
 8004652:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800465c:	d004      	beq.n	8004668 <HAL_ADC_Start_IT+0x1bc>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2e      	ldr	r2, [pc, #184]	; (800471c <HAL_ADC_Start_IT+0x270>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d106      	bne.n	8004676 <HAL_ADC_Start_IT+0x1ca>
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_ADC_Start_IT+0x274>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2b00      	cmp	r3, #0
 8004672:	d03e      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 8004674:	e005      	b.n	8004682 <HAL_ADC_Start_IT+0x1d6>
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_ADC_Start_IT+0x278>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2b00      	cmp	r3, #0
 8004680:	d037      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800468a:	d004      	beq.n	8004696 <HAL_ADC_Start_IT+0x1ea>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_ADC_Start_IT+0x270>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d106      	bne.n	80046a4 <HAL_ADC_Start_IT+0x1f8>
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_ADC_Start_IT+0x274>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d027      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 80046a2:	e005      	b.n	80046b0 <HAL_ADC_Start_IT+0x204>
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_ADC_Start_IT+0x278>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d020      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b8:	d004      	beq.n	80046c4 <HAL_ADC_Start_IT+0x218>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_ADC_Start_IT+0x270>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d106      	bne.n	80046d2 <HAL_ADC_Start_IT+0x226>
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_ADC_Start_IT+0x274>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d010      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 80046d0:	e005      	b.n	80046de <HAL_ADC_Start_IT+0x232>
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_ADC_Start_IT+0x278>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d009      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e6:	d004      	beq.n	80046f2 <HAL_ADC_Start_IT+0x246>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <HAL_ADC_Start_IT+0x27c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10f      	bne.n	8004712 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0204 	orr.w	r2, r2, #4
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	e006      	b.n	8004712 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800470c:	e001      	b.n	8004712 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800470e:	2302      	movs	r3, #2
 8004710:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	50000100 	.word	0x50000100
 8004720:	50000300 	.word	0x50000300
 8004724:	50000700 	.word	0x50000700
 8004728:	50000400 	.word	0x50000400

0800472c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d106      	bne.n	8004778 <HAL_ADC_IRQHandler+0x30>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00f      	beq.n	8004798 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004782:	2b08      	cmp	r3, #8
 8004784:	f040 80c0 	bne.w	8004908 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b08      	cmp	r3, #8
 8004794:	f040 80b8 	bne.w	8004908 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b8:	d004      	beq.n	80047c4 <HAL_ADC_IRQHandler+0x7c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a95      	ldr	r2, [pc, #596]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d106      	bne.n	80047d2 <HAL_ADC_IRQHandler+0x8a>
 80047c4:	4b94      	ldr	r3, [pc, #592]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03e      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 80047d0:	e005      	b.n	80047de <HAL_ADC_IRQHandler+0x96>
 80047d2:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e6:	d004      	beq.n	80047f2 <HAL_ADC_IRQHandler+0xaa>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a89      	ldr	r2, [pc, #548]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d106      	bne.n	8004800 <HAL_ADC_IRQHandler+0xb8>
 80047f2:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d027      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 80047fe:	e005      	b.n	800480c <HAL_ADC_IRQHandler+0xc4>
 8004800:	4b86      	ldr	r3, [pc, #536]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2b05      	cmp	r3, #5
 800480a:	d020      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004814:	d004      	beq.n	8004820 <HAL_ADC_IRQHandler+0xd8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7e      	ldr	r2, [pc, #504]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d106      	bne.n	800482e <HAL_ADC_IRQHandler+0xe6>
 8004820:	4b7d      	ldr	r3, [pc, #500]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2b09      	cmp	r3, #9
 800482a:	d010      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 800482c:	e005      	b.n	800483a <HAL_ADC_IRQHandler+0xf2>
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b09      	cmp	r3, #9
 8004838:	d009      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004842:	d004      	beq.n	800484e <HAL_ADC_IRQHandler+0x106>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a75      	ldr	r2, [pc, #468]	; (8004a20 <HAL_ADC_IRQHandler+0x2d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d104      	bne.n	8004858 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e00f      	b.n	8004878 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004860:	d004      	beq.n	800486c <HAL_ADC_IRQHandler+0x124>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6b      	ldr	r2, [pc, #428]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d102      	bne.n	8004872 <HAL_ADC_IRQHandler+0x12a>
 800486c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004870:	e000      	b.n	8004874 <HAL_ADC_IRQHandler+0x12c>
 8004872:	4b6b      	ldr	r3, [pc, #428]	; (8004a20 <HAL_ADC_IRQHandler+0x2d8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004882:	2b00      	cmp	r3, #0
 8004884:	d139      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800488c:	2b00      	cmp	r3, #0
 800488e:	d134      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d12d      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11a      	bne.n	80048e2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 020c 	bic.w	r2, r2, #12
 80048ba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
 80048e0:	e00b      	b.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0210 	orr.w	r2, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fbd8 	bl	80040b0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	220c      	movs	r2, #12
 8004906:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b20      	cmp	r3, #32
 8004914:	d106      	bne.n	8004924 <HAL_ADC_IRQHandler+0x1dc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d00f      	beq.n	8004944 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	f040 813c 	bne.w	8004bac <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	f040 8134 	bne.w	8004bac <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004958:	d004      	beq.n	8004964 <HAL_ADC_IRQHandler+0x21c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d106      	bne.n	8004972 <HAL_ADC_IRQHandler+0x22a>
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03e      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 8004970:	e005      	b.n	800497e <HAL_ADC_IRQHandler+0x236>
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2b00      	cmp	r3, #0
 800497c:	d037      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004986:	d004      	beq.n	8004992 <HAL_ADC_IRQHandler+0x24a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d106      	bne.n	80049a0 <HAL_ADC_IRQHandler+0x258>
 8004992:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2b05      	cmp	r3, #5
 800499c:	d027      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 800499e:	e005      	b.n	80049ac <HAL_ADC_IRQHandler+0x264>
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d020      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b4:	d004      	beq.n	80049c0 <HAL_ADC_IRQHandler+0x278>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d106      	bne.n	80049ce <HAL_ADC_IRQHandler+0x286>
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_ADC_IRQHandler+0x2d0>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d010      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 80049cc:	e005      	b.n	80049da <HAL_ADC_IRQHandler+0x292>
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_ADC_IRQHandler+0x2d4>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d009      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e2:	d004      	beq.n	80049ee <HAL_ADC_IRQHandler+0x2a6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0d      	ldr	r2, [pc, #52]	; (8004a20 <HAL_ADC_IRQHandler+0x2d8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d104      	bne.n	80049f8 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e018      	b.n	8004a2a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a00:	d004      	beq.n	8004a0c <HAL_ADC_IRQHandler+0x2c4>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <HAL_ADC_IRQHandler+0x2cc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10b      	bne.n	8004a24 <HAL_ADC_IRQHandler+0x2dc>
 8004a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a10:	e009      	b.n	8004a26 <HAL_ADC_IRQHandler+0x2de>
 8004a12:	bf00      	nop
 8004a14:	50000100 	.word	0x50000100
 8004a18:	50000300 	.word	0x50000300
 8004a1c:	50000700 	.word	0x50000700
 8004a20:	50000400 	.word	0x50000400
 8004a24:	4b9d      	ldr	r3, [pc, #628]	; (8004c9c <HAL_ADC_IRQHandler+0x554>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 80b2 	bne.w	8004b9e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 80a5 	bne.w	8004b9e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 809f 	bne.w	8004b9e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	f040 8097 	bne.w	8004b9e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a78:	d004      	beq.n	8004a84 <HAL_ADC_IRQHandler+0x33c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a88      	ldr	r2, [pc, #544]	; (8004ca0 <HAL_ADC_IRQHandler+0x558>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d106      	bne.n	8004a92 <HAL_ADC_IRQHandler+0x34a>
 8004a84:	4b87      	ldr	r3, [pc, #540]	; (8004ca4 <HAL_ADC_IRQHandler+0x55c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d03e      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004a90:	e005      	b.n	8004a9e <HAL_ADC_IRQHandler+0x356>
 8004a92:	4b85      	ldr	r3, [pc, #532]	; (8004ca8 <HAL_ADC_IRQHandler+0x560>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d037      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aa6:	d004      	beq.n	8004ab2 <HAL_ADC_IRQHandler+0x36a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a7c      	ldr	r2, [pc, #496]	; (8004ca0 <HAL_ADC_IRQHandler+0x558>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d106      	bne.n	8004ac0 <HAL_ADC_IRQHandler+0x378>
 8004ab2:	4b7c      	ldr	r3, [pc, #496]	; (8004ca4 <HAL_ADC_IRQHandler+0x55c>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d027      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004abe:	e005      	b.n	8004acc <HAL_ADC_IRQHandler+0x384>
 8004ac0:	4b79      	ldr	r3, [pc, #484]	; (8004ca8 <HAL_ADC_IRQHandler+0x560>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d020      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_ADC_IRQHandler+0x398>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a71      	ldr	r2, [pc, #452]	; (8004ca0 <HAL_ADC_IRQHandler+0x558>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d106      	bne.n	8004aee <HAL_ADC_IRQHandler+0x3a6>
 8004ae0:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_ADC_IRQHandler+0x55c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2b07      	cmp	r3, #7
 8004aea:	d010      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004aec:	e005      	b.n	8004afa <HAL_ADC_IRQHandler+0x3b2>
 8004aee:	4b6e      	ldr	r3, [pc, #440]	; (8004ca8 <HAL_ADC_IRQHandler+0x560>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	d009      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b02:	d004      	beq.n	8004b0e <HAL_ADC_IRQHandler+0x3c6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a64      	ldr	r2, [pc, #400]	; (8004c9c <HAL_ADC_IRQHandler+0x554>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d104      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e00f      	b.n	8004b38 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_IRQHandler+0x3e4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5e      	ldr	r2, [pc, #376]	; (8004ca0 <HAL_ADC_IRQHandler+0x558>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d102      	bne.n	8004b32 <HAL_ADC_IRQHandler+0x3ea>
 8004b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b30:	e000      	b.n	8004b34 <HAL_ADC_IRQHandler+0x3ec>
 8004b32:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <HAL_ADC_IRQHandler+0x554>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d12d      	bne.n	8004b9e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11a      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b5e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d112      	bne.n	8004b9e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0201 	orr.w	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
 8004b84:	e00b      	b.n	8004b9e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8de 	bl	8004d60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2260      	movs	r2, #96	; 0x60
 8004baa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d113      	bne.n	8004be2 <HAL_ADC_IRQHandler+0x49a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d10c      	bne.n	8004be2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fa75 	bl	80040c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf0:	d115      	bne.n	8004c1e <HAL_ADC_IRQHandler+0x4d6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c00:	d10d      	bne.n	8004c1e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8ba 	bl	8004d88 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d115      	bne.n	8004c5a <HAL_ADC_IRQHandler+0x512>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3c:	d10d      	bne.n	8004c5a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8a6 	bl	8004d9c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c58:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d151      	bne.n	8004d0c <HAL_ADC_IRQHandler+0x5c4>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d14a      	bne.n	8004d0c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e02d      	b.n	8004ce0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c8c:	d004      	beq.n	8004c98 <HAL_ADC_IRQHandler+0x550>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <HAL_ADC_IRQHandler+0x558>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <HAL_ADC_IRQHandler+0x564>
 8004c98:	4b02      	ldr	r3, [pc, #8]	; (8004ca4 <HAL_ADC_IRQHandler+0x55c>)
 8004c9a:	e008      	b.n	8004cae <HAL_ADC_IRQHandler+0x566>
 8004c9c:	50000400 	.word	0x50000400
 8004ca0:	50000100 	.word	0x50000100
 8004ca4:	50000300 	.word	0x50000300
 8004ca8:	50000700 	.word	0x50000700
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_ADC_IRQHandler+0x614>)
 8004cae:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10a      	bne.n	8004ce0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e007      	b.n	8004ce0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10e      	bne.n	8004d04 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff f9ea 	bl	80040d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d11b      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x60c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d113      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	f043 0208 	orr.w	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f810 	bl	8004d74 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	50000700 	.word	0x50000700

08004d60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b09b      	sub	sp, #108	; 0x6c
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x22>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e2cb      	b.n	800536a <HAL_ADC_ConfigChannel+0x5ba>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 82af 	bne.w	8005348 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d81c      	bhi.n	8004e2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	461a      	mov	r2, r3
 8004e06:	231f      	movs	r3, #31
 8004e08:	4093      	lsls	r3, r2
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	4019      	ands	r1, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2a:	e063      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	d81e      	bhi.n	8004e72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	3b1e      	subs	r3, #30
 8004e48:	221f      	movs	r2, #31
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	4019      	ands	r1, r3
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	3b1e      	subs	r3, #30
 8004e64:	fa00 f203 	lsl.w	r2, r0, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e70:	e040      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b0e      	cmp	r3, #14
 8004e78:	d81e      	bhi.n	8004eb8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4413      	add	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	3b3c      	subs	r3, #60	; 0x3c
 8004e8e:	221f      	movs	r2, #31
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	4019      	ands	r1, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	3b3c      	subs	r3, #60	; 0x3c
 8004eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb6:	e01d      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	3b5a      	subs	r3, #90	; 0x5a
 8004ecc:	221f      	movs	r2, #31
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	4019      	ands	r1, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	3b5a      	subs	r3, #90	; 0x5a
 8004ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 80e5 	bne.w	80050ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d91c      	bls.n	8004f46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b1e      	subs	r3, #30
 8004f1e:	2207      	movs	r2, #7
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	4019      	ands	r1, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6898      	ldr	r0, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	3b1e      	subs	r3, #30
 8004f38:	fa00 f203 	lsl.w	r2, r0, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	619a      	str	r2, [r3, #24]
 8004f44:	e019      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6959      	ldr	r1, [r3, #20]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	2207      	movs	r2, #7
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	4019      	ands	r1, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6898      	ldr	r0, [r3, #8]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d84f      	bhi.n	800503c <HAL_ADC_ConfigChannel+0x28c>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_ADC_ConfigChannel+0x1f4>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fd7 	.word	0x08004fd7
 8004fac:	08004ff9 	.word	0x08004ff9
 8004fb0:	0800501b 	.word	0x0800501b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fba:	4b9f      	ldr	r3, [pc, #636]	; (8005238 <HAL_ADC_ConfigChannel+0x488>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	0691      	lsls	r1, r2, #26
 8004fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004fd2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004fd4:	e07e      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fdc:	4b96      	ldr	r3, [pc, #600]	; (8005238 <HAL_ADC_ConfigChannel+0x488>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	0691      	lsls	r1, r2, #26
 8004fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ff4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004ff6:	e06d      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ffe:	4b8e      	ldr	r3, [pc, #568]	; (8005238 <HAL_ADC_ConfigChannel+0x488>)
 8005000:	4013      	ands	r3, r2
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	0691      	lsls	r1, r2, #26
 8005008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800500a:	430a      	orrs	r2, r1
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005016:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005018:	e05c      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005020:	4b85      	ldr	r3, [pc, #532]	; (8005238 <HAL_ADC_ConfigChannel+0x488>)
 8005022:	4013      	ands	r3, r2
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	0691      	lsls	r1, r2, #26
 800502a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800502c:	430a      	orrs	r2, r1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005038:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800503a:	e04b      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	069b      	lsls	r3, r3, #26
 800504c:	429a      	cmp	r2, r3
 800504e:	d107      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800505e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	069b      	lsls	r3, r3, #26
 8005070:	429a      	cmp	r2, r3
 8005072:	d107      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005082:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800508a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	069b      	lsls	r3, r3, #26
 8005094:	429a      	cmp	r2, r3
 8005096:	d107      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	069b      	lsls	r3, r3, #26
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d10a      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80050cc:	e001      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80050d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d108      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x344>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x344>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_ADC_ConfigChannel+0x346>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 8131 	bne.w	800535e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00f      	beq.n	8005124 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43da      	mvns	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	400a      	ands	r2, r1
 800511e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005122:	e049      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	409a      	lsls	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b09      	cmp	r3, #9
 8005144:	d91c      	bls.n	8005180 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6999      	ldr	r1, [r3, #24]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	3b1b      	subs	r3, #27
 8005158:	2207      	movs	r2, #7
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	4019      	ands	r1, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6898      	ldr	r0, [r3, #8]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	3b1b      	subs	r3, #27
 8005172:	fa00 f203 	lsl.w	r2, r0, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	619a      	str	r2, [r3, #24]
 800517e:	e01b      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6959      	ldr	r1, [r3, #20]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	2207      	movs	r2, #7
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	4019      	ands	r1, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6898      	ldr	r0, [r3, #8]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	fa00 f203 	lsl.w	r2, r0, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c0:	d004      	beq.n	80051cc <HAL_ADC_ConfigChannel+0x41c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	; (800523c <HAL_ADC_ConfigChannel+0x48c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x420>
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <HAL_ADC_ConfigChannel+0x490>)
 80051ce:	e000      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x422>
 80051d0:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <HAL_ADC_ConfigChannel+0x494>)
 80051d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d105      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80051ec:	2b11      	cmp	r3, #17
 80051ee:	d105      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80051f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005200:	2b12      	cmp	r3, #18
 8005202:	f040 80ac 	bne.w	800535e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 80a5 	bne.w	800535e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800521c:	d102      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x474>
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <HAL_ADC_ConfigChannel+0x48c>)
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e023      	b.n	800526c <HAL_ADC_ConfigChannel+0x4bc>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <HAL_ADC_ConfigChannel+0x48c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x498>
 800522e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e01a      	b.n	800526c <HAL_ADC_ConfigChannel+0x4bc>
 8005236:	bf00      	nop
 8005238:	83fff000 	.word	0x83fff000
 800523c:	50000100 	.word	0x50000100
 8005240:	50000300 	.word	0x50000300
 8005244:	50000700 	.word	0x50000700
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a4a      	ldr	r2, [pc, #296]	; (8005378 <HAL_ADC_ConfigChannel+0x5c8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d102      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x4a8>
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_ADC_ConfigChannel+0x5cc>)
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e009      	b.n	800526c <HAL_ADC_ConfigChannel+0x4bc>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a47      	ldr	r2, [pc, #284]	; (800537c <HAL_ADC_ConfigChannel+0x5cc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d102      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x4b8>
 8005262:	4b45      	ldr	r3, [pc, #276]	; (8005378 <HAL_ADC_ConfigChannel+0x5c8>)
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e001      	b.n	800526c <HAL_ADC_ConfigChannel+0x4bc>
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d108      	bne.n	800528c <HAL_ADC_ConfigChannel+0x4dc>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_ADC_ConfigChannel+0x4dc>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_ADC_ConfigChannel+0x4de>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d150      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005292:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x504>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x504>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x506>
 80052b4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d13c      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d11d      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x54e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ca:	d118      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80052cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_ADC_ConfigChannel+0x5d0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a29      	ldr	r2, [pc, #164]	; (8005384 <HAL_ADC_ConfigChannel+0x5d4>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	0c9a      	lsrs	r2, r3, #18
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052ee:	e002      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f9      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80052fc:	e02e      	b.n	800535c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b11      	cmp	r3, #17
 8005304:	d10b      	bne.n	800531e <HAL_ADC_ConfigChannel+0x56e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800530e:	d106      	bne.n	800531e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800531c:	e01e      	b.n	800535c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b12      	cmp	r3, #18
 8005324:	d11a      	bne.n	800535c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800532e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005330:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005332:	e013      	b.n	800535c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005346:	e00a      	b.n	800535e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f043 0220 	orr.w	r2, r3, #32
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800535a:	e000      	b.n	800535e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800535c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800536a:	4618      	mov	r0, r3
 800536c:	376c      	adds	r7, #108	; 0x6c
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	50000400 	.word	0x50000400
 800537c:	50000500 	.word	0x50000500
 8005380:	20000054 	.word	0x20000054
 8005384:	431bde83 	.word	0x431bde83

08005388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d108      	bne.n	80053b4 <ADC_Enable+0x2c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <ADC_Enable+0x2c>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <ADC_Enable+0x2e>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d143      	bne.n	8005442 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <ADC_Enable+0xc4>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f043 0210 	orr.w	r2, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e02f      	b.n	8005444 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80053f4:	f7fe fe2c 	bl	8004050 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80053fa:	e01b      	b.n	8005434 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053fc:	f7fe fe28 	bl	8004050 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d914      	bls.n	8005434 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d00d      	beq.n	8005434 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0210 	orr.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d1dc      	bne.n	80053fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	8000003f 	.word	0x8000003f

08005450 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d108      	bne.n	800547c <ADC_Disable+0x2c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <ADC_Disable+0x2c>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <ADC_Disable+0x2e>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d047      	beq.n	8005512 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030d 	and.w	r3, r3, #13
 800548c:	2b01      	cmp	r3, #1
 800548e:	d10f      	bne.n	80054b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0202 	orr.w	r2, r2, #2
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2203      	movs	r2, #3
 80054a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80054a8:	f7fe fdd2 	bl	8004050 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054ae:	e029      	b.n	8005504 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0210 	orr.w	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e023      	b.n	8005514 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054cc:	f7fe fdc0 	bl	8004050 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d914      	bls.n	8005504 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10d      	bne.n	8005504 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f043 0210 	orr.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f8:	f043 0201 	orr.w	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e007      	b.n	8005514 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d0dc      	beq.n	80054cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <__NVIC_SetPriorityGrouping+0x44>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554e:	4a04      	ldr	r2, [pc, #16]	; (8005560 <__NVIC_SetPriorityGrouping+0x44>)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	60d3      	str	r3, [r2, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <__NVIC_GetPriorityGrouping+0x18>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0307 	and.w	r3, r3, #7
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db0b      	blt.n	80055aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	f003 021f 	and.w	r2, r3, #31
 8005598:	4907      	ldr	r1, [pc, #28]	; (80055b8 <__NVIC_EnableIRQ+0x38>)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	2001      	movs	r0, #1
 80055a2:	fa00 f202 	lsl.w	r2, r0, r2
 80055a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e100 	.word	0xe000e100

080055bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	6039      	str	r1, [r7, #0]
 80055c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db0a      	blt.n	80055e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <__NVIC_SetPriority+0x4c>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	440b      	add	r3, r1
 80055e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e4:	e00a      	b.n	80055fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4908      	ldr	r1, [pc, #32]	; (800560c <__NVIC_SetPriority+0x50>)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3b04      	subs	r3, #4
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	761a      	strb	r2, [r3, #24]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000e100 	.word	0xe000e100
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f1c3 0307 	rsb	r3, r3, #7
 800562a:	2b04      	cmp	r3, #4
 800562c:	bf28      	it	cs
 800562e:	2304      	movcs	r3, #4
 8005630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3304      	adds	r3, #4
 8005636:	2b06      	cmp	r3, #6
 8005638:	d902      	bls.n	8005640 <NVIC_EncodePriority+0x30>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b03      	subs	r3, #3
 800563e:	e000      	b.n	8005642 <NVIC_EncodePriority+0x32>
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	401a      	ands	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005658:	f04f 31ff 	mov.w	r1, #4294967295
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	43d9      	mvns	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	4313      	orrs	r3, r2
         );
}
 800566a:	4618      	mov	r0, r3
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3b01      	subs	r3, #1
 8005684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005688:	d301      	bcc.n	800568e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800568a:	2301      	movs	r3, #1
 800568c:	e00f      	b.n	80056ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <SysTick_Config+0x40>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3b01      	subs	r3, #1
 8005694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005696:	210f      	movs	r1, #15
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	f7ff ff8e 	bl	80055bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <SysTick_Config+0x40>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056a6:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <SysTick_Config+0x40>)
 80056a8:	2207      	movs	r2, #7
 80056aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	e000e010 	.word	0xe000e010

080056bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff29 	bl	800551c <__NVIC_SetPriorityGrouping>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	4603      	mov	r3, r0
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e4:	f7ff ff3e 	bl	8005564 <__NVIC_GetPriorityGrouping>
 80056e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	6978      	ldr	r0, [r7, #20]
 80056f0:	f7ff ff8e 	bl	8005610 <NVIC_EncodePriority>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ff5d 	bl	80055bc <__NVIC_SetPriority>
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff31 	bl	8005580 <__NVIC_EnableIRQ>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffa2 	bl	8005678 <SysTick_Config>
 8005734:	4603      	mov	r3, r0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800574c:	2b02      	cmp	r3, #2
 800574e:	d008      	beq.n	8005762 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2204      	movs	r2, #4
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e020      	b.n	80057a4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 020e 	bic.w	r2, r2, #14
 8005770:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d005      	beq.n	80057d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e027      	b.n	8005822 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 020e 	bic.w	r2, r2, #14
 80057e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fa:	2101      	movs	r1, #1
 80057fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005800:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
    } 
  }
  return status;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800583a:	e154      	b.n	8005ae6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8146 	beq.w	8005ae0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d005      	beq.n	800586c <HAL_GPIO_Init+0x40>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d130      	bne.n	80058ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4013      	ands	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058a2:	2201      	movs	r2, #1
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0201 	and.w	r2, r3, #1
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d017      	beq.n	800590a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	2203      	movs	r2, #3
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d123      	bne.n	800595e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	08da      	lsrs	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3208      	adds	r2, #8
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	220f      	movs	r2, #15
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	08da      	lsrs	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3208      	adds	r2, #8
 8005958:	6939      	ldr	r1, [r7, #16]
 800595a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2203      	movs	r2, #3
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 0203 	and.w	r2, r3, #3
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80a0 	beq.w	8005ae0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a0:	4b58      	ldr	r3, [pc, #352]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6193      	str	r3, [r2, #24]
 80059ac:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059b8:	4a53      	ldr	r2, [pc, #332]	; (8005b08 <HAL_GPIO_Init+0x2dc>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4013      	ands	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059e2:	d019      	beq.n	8005a18 <HAL_GPIO_Init+0x1ec>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a49      	ldr	r2, [pc, #292]	; (8005b0c <HAL_GPIO_Init+0x2e0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_GPIO_Init+0x1e8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a48      	ldr	r2, [pc, #288]	; (8005b10 <HAL_GPIO_Init+0x2e4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00d      	beq.n	8005a10 <HAL_GPIO_Init+0x1e4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a47      	ldr	r2, [pc, #284]	; (8005b14 <HAL_GPIO_Init+0x2e8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <HAL_GPIO_Init+0x1e0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a46      	ldr	r2, [pc, #280]	; (8005b18 <HAL_GPIO_Init+0x2ec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_GPIO_Init+0x1dc>
 8005a04:	2304      	movs	r3, #4
 8005a06:	e008      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a08:	2305      	movs	r3, #5
 8005a0a:	e006      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e004      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e002      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	f002 0203 	and.w	r2, r2, #3
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	4093      	lsls	r3, r2
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a2a:	4937      	ldr	r1, [pc, #220]	; (8005b08 <HAL_GPIO_Init+0x2dc>)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	3302      	adds	r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a38:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4013      	ands	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a62:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a86:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ab6:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f47f aea3 	bne.w	800583c <HAL_GPIO_Init+0x10>
  }
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	48000400 	.word	0x48000400
 8005b10:	48000800 	.word	0x48000800
 8005b14:	48000c00 	.word	0x48000c00
 8005b18:	48001000 	.word	0x48001000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e001      	b.n	8005b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	807b      	strh	r3, [r7, #2]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b60:	787b      	ldrb	r3, [r7, #1]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b6c:	e002      	b.n	8005b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4013      	ands	r3, r2
 8005b98:	041a      	lsls	r2, r3, #16
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	43d9      	mvns	r1, r3
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	400b      	ands	r3, r1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	619a      	str	r2, [r3, #24]
}
 8005ba8:	bf00      	nop
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005bbe:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bca:	4a05      	ldr	r2, [pc, #20]	; (8005be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f806 	bl	8005be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40010400 	.word	0x40010400

08005be4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e081      	b.n	8005d10 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fc f925 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	; 0x24
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d107      	bne.n	8005c74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	e006      	b.n	8005c82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d104      	bne.n	8005c94 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69d9      	ldr	r1, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d138      	bne.n	8005da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e032      	b.n	8005da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d139      	bne.n	8005e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e033      	b.n	8005e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2224      	movs	r2, #36	; 0x24
 8005dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e48:	b08b      	sub	sp, #44	; 0x2c
 8005e4a:	af06      	add	r7, sp, #24
 8005e4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0d0      	b.n	8005ffa <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fc f989 	bl	8002184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2203      	movs	r2, #3
 8005e76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 f9b2 	bl	800a1e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e04c      	b.n	8005f24 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	440b      	add	r3, r1
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	b298      	uxth	r0, r3
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3336      	adds	r3, #54	; 0x36
 8005ec8:	4602      	mov	r2, r0
 8005eca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	3303      	adds	r3, #3
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ee2:	7bfa      	ldrb	r2, [r7, #15]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	3338      	adds	r3, #56	; 0x38
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ef6:	7bfa      	ldrb	r2, [r7, #15]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	440b      	add	r3, r1
 8005f04:	333c      	adds	r3, #60	; 0x3c
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f0a:	7bfa      	ldrb	r2, [r7, #15]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	440b      	add	r3, r1
 8005f18:	3340      	adds	r3, #64	; 0x40
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	3301      	adds	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3ad      	bcc.n	8005e8a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	e044      	b.n	8005fbe <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f34:	7bfa      	ldrb	r2, [r7, #15]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	440b      	add	r3, r1
 8005fb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	7bfa      	ldrb	r2, [r7, #15]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3b5      	bcc.n	8005f34 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	687e      	ldr	r6, [r7, #4]
 8005fd0:	466d      	mov	r5, sp
 8005fd2:	f106 0410 	add.w	r4, r6, #16
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	1d33      	adds	r3, r6, #4
 8005fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f004 f91b 	bl	800a21e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800600a:	af00      	add	r7, sp, #0
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f000 bef4 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 816a 	beq.w	8006302 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800602e:	4bb3      	ldr	r3, [pc, #716]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00c      	beq.n	8006054 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800603a:	4bb0      	ldr	r3, [pc, #704]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b08      	cmp	r3, #8
 8006044:	d159      	bne.n	80060fa <HAL_RCC_OscConfig+0xf6>
 8006046:	4bad      	ldr	r3, [pc, #692]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d152      	bne.n	80060fa <HAL_RCC_OscConfig+0xf6>
 8006054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006058:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006060:	fa93 f3a3 	rbit	r3, r3
 8006064:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006068:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <HAL_RCC_OscConfig+0x82>
 8006080:	4b9e      	ldr	r3, [pc, #632]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	e015      	b.n	80060b2 <HAL_RCC_OscConfig+0xae>
 8006086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800608a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006092:	fa93 f3a3 	rbit	r3, r3
 8006096:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800609a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800609e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80060a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80060ae:	4b93      	ldr	r3, [pc, #588]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80060ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80060be:	fa92 f2a2 	rbit	r2, r2
 80060c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80060c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80060ca:	fab2 f282 	clz	r2, r2
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	f042 0220 	orr.w	r2, r2, #32
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	f002 021f 	and.w	r2, r2, #31
 80060da:	2101      	movs	r1, #1
 80060dc:	fa01 f202 	lsl.w	r2, r1, r2
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 810c 	beq.w	8006300 <HAL_RCC_OscConfig+0x2fc>
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 8106 	bne.w	8006300 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f000 be86 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d106      	bne.n	8006114 <HAL_RCC_OscConfig+0x110>
 8006106:	4b7d      	ldr	r3, [pc, #500]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7c      	ldr	r2, [pc, #496]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e030      	b.n	8006176 <HAL_RCC_OscConfig+0x172>
 8006114:	1d3b      	adds	r3, r7, #4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x134>
 800611e:	4b77      	ldr	r3, [pc, #476]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a76      	ldr	r2, [pc, #472]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	4b74      	ldr	r3, [pc, #464]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a73      	ldr	r2, [pc, #460]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e01e      	b.n	8006176 <HAL_RCC_OscConfig+0x172>
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006142:	d10c      	bne.n	800615e <HAL_RCC_OscConfig+0x15a>
 8006144:	4b6d      	ldr	r3, [pc, #436]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a6c      	ldr	r2, [pc, #432]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 800614a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b6a      	ldr	r3, [pc, #424]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a69      	ldr	r2, [pc, #420]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e00b      	b.n	8006176 <HAL_RCC_OscConfig+0x172>
 800615e:	4b67      	ldr	r3, [pc, #412]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a66      	ldr	r2, [pc, #408]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b64      	ldr	r3, [pc, #400]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a63      	ldr	r2, [pc, #396]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006174:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006176:	4b61      	ldr	r3, [pc, #388]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f023 020f 	bic.w	r2, r3, #15
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	495d      	ldr	r1, [pc, #372]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006186:	4313      	orrs	r3, r2
 8006188:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d059      	beq.n	8006248 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fd ff5c 	bl	8004050 <HAL_GetTick>
 8006198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800619e:	f7fd ff57 	bl	8004050 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d902      	bls.n	80061b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f000 be29 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
 80061b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80061c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061cc:	fab3 f383 	clz	r3, r3
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_RCC_OscConfig+0x1e2>
 80061e0:	4b46      	ldr	r3, [pc, #280]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	e015      	b.n	8006212 <HAL_RCC_OscConfig+0x20e>
 80061e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80061f2:	fa93 f3a3 	rbit	r3, r3
 80061f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80061fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006202:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800620e:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006216:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800621a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800621e:	fa92 f2a2 	rbit	r2, r2
 8006222:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006226:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800622a:	fab2 f282 	clz	r2, r2
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	f002 021f 	and.w	r2, r2, #31
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f202 	lsl.w	r2, r1, r2
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ab      	beq.n	800619e <HAL_RCC_OscConfig+0x19a>
 8006246:	e05c      	b.n	8006302 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd ff02 	bl	8004050 <HAL_GetTick>
 800624c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006250:	e00a      	b.n	8006268 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006252:	f7fd fefd 	bl	8004050 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b64      	cmp	r3, #100	; 0x64
 8006260:	d902      	bls.n	8006268 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	f000 bdcf 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800626c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006270:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800627c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006280:	fab3 f383 	clz	r3, r3
 8006284:	b2db      	uxtb	r3, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <HAL_RCC_OscConfig+0x296>
 8006294:	4b19      	ldr	r3, [pc, #100]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	e015      	b.n	80062c6 <HAL_RCC_OscConfig+0x2c2>
 800629a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800629e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80062a6:	fa93 f3a3 	rbit	r3, r3
 80062aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80062ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80062b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80062ba:	fa93 f3a3 	rbit	r3, r3
 80062be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80062c2:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <HAL_RCC_OscConfig+0x2f8>)
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80062ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80062d2:	fa92 f2a2 	rbit	r2, r2
 80062d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80062da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80062de:	fab2 f282 	clz	r2, r2
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	f042 0220 	orr.w	r2, r2, #32
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	f002 021f 	and.w	r2, r2, #31
 80062ee:	2101      	movs	r1, #1
 80062f0:	fa01 f202 	lsl.w	r2, r1, r2
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ab      	bne.n	8006252 <HAL_RCC_OscConfig+0x24e>
 80062fa:	e002      	b.n	8006302 <HAL_RCC_OscConfig+0x2fe>
 80062fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 816f 	beq.w	80065f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006312:	4bd0      	ldr	r3, [pc, #832]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800631e:	4bcd      	ldr	r3, [pc, #820]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b08      	cmp	r3, #8
 8006328:	d16c      	bne.n	8006404 <HAL_RCC_OscConfig+0x400>
 800632a:	4bca      	ldr	r3, [pc, #808]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d166      	bne.n	8006404 <HAL_RCC_OscConfig+0x400>
 8006336:	2302      	movs	r3, #2
 8006338:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006348:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634c:	fab3 f383 	clz	r3, r3
 8006350:	b2db      	uxtb	r3, r3
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d102      	bne.n	8006366 <HAL_RCC_OscConfig+0x362>
 8006360:	4bbc      	ldr	r3, [pc, #752]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	e013      	b.n	800638e <HAL_RCC_OscConfig+0x38a>
 8006366:	2302      	movs	r3, #2
 8006368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006378:	2302      	movs	r3, #2
 800637a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800637e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006382:	fa93 f3a3 	rbit	r3, r3
 8006386:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800638a:	4bb2      	ldr	r3, [pc, #712]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	2202      	movs	r2, #2
 8006390:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006394:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006398:	fa92 f2a2 	rbit	r2, r2
 800639c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80063a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80063a4:	fab2 f282 	clz	r2, r2
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	f042 0220 	orr.w	r2, r2, #32
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	f002 021f 	and.w	r2, r2, #31
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <HAL_RCC_OscConfig+0x3cc>
 80063c0:	1d3b      	adds	r3, r7, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d002      	beq.n	80063d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f000 bd1b 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d0:	4ba0      	ldr	r3, [pc, #640]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	21f8      	movs	r1, #248	; 0xf8
 80063e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80063e8:	fa91 f1a1 	rbit	r1, r1
 80063ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80063f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80063f4:	fab1 f181 	clz	r1, r1
 80063f8:	b2c9      	uxtb	r1, r1
 80063fa:	408b      	lsls	r3, r1
 80063fc:	4995      	ldr	r1, [pc, #596]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006402:	e0f5      	b.n	80065f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8085 	beq.w	800651a <HAL_RCC_OscConfig+0x516>
 8006410:	2301      	movs	r3, #1
 8006412:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006422:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	461a      	mov	r2, r3
 8006438:	2301      	movs	r3, #1
 800643a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643c:	f7fd fe08 	bl	8004050 <HAL_GetTick>
 8006440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006444:	e00a      	b.n	800645c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006446:	f7fd fe03 	bl	8004050 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d902      	bls.n	800645c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	f000 bcd5 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
 800645c:	2302      	movs	r3, #2
 800645e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800646e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006472:	fab3 f383 	clz	r3, r3
 8006476:	b2db      	uxtb	r3, r3
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d102      	bne.n	800648c <HAL_RCC_OscConfig+0x488>
 8006486:	4b73      	ldr	r3, [pc, #460]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	e013      	b.n	80064b4 <HAL_RCC_OscConfig+0x4b0>
 800648c:	2302      	movs	r3, #2
 800648e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006492:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006496:	fa93 f3a3 	rbit	r3, r3
 800649a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800649e:	2302      	movs	r3, #2
 80064a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80064a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80064a8:	fa93 f3a3 	rbit	r3, r3
 80064ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80064b0:	4b68      	ldr	r3, [pc, #416]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2202      	movs	r2, #2
 80064b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80064ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80064be:	fa92 f2a2 	rbit	r2, r2
 80064c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80064c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80064ca:	fab2 f282 	clz	r2, r2
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	f042 0220 	orr.w	r2, r2, #32
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	f002 021f 	and.w	r2, r2, #31
 80064da:	2101      	movs	r1, #1
 80064dc:	fa01 f202 	lsl.w	r2, r1, r2
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0af      	beq.n	8006446 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e6:	4b5b      	ldr	r3, [pc, #364]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	21f8      	movs	r1, #248	; 0xf8
 80064f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80064fe:	fa91 f1a1 	rbit	r1, r1
 8006502:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006506:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800650a:	fab1 f181 	clz	r1, r1
 800650e:	b2c9      	uxtb	r1, r1
 8006510:	408b      	lsls	r3, r1
 8006512:	4950      	ldr	r1, [pc, #320]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	e06a      	b.n	80065f0 <HAL_RCC_OscConfig+0x5ec>
 800651a:	2301      	movs	r3, #1
 800651c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800652c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800653a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006546:	f7fd fd83 	bl	8004050 <HAL_GetTick>
 800654a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006550:	f7fd fd7e 	bl	8004050 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d902      	bls.n	8006566 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	f000 bc50 	b.w	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006566:	2302      	movs	r3, #2
 8006568:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006570:	fa93 f3a3 	rbit	r3, r3
 8006574:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d102      	bne.n	8006596 <HAL_RCC_OscConfig+0x592>
 8006590:	4b30      	ldr	r3, [pc, #192]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	e013      	b.n	80065be <HAL_RCC_OscConfig+0x5ba>
 8006596:	2302      	movs	r3, #2
 8006598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065a0:	fa93 f3a3 	rbit	r3, r3
 80065a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80065a8:	2302      	movs	r3, #2
 80065aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065b2:	fa93 f3a3 	rbit	r3, r3
 80065b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065ba:	4b26      	ldr	r3, [pc, #152]	; (8006654 <HAL_RCC_OscConfig+0x650>)
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	2202      	movs	r2, #2
 80065c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80065c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80065c8:	fa92 f2a2 	rbit	r2, r2
 80065cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80065d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80065d4:	fab2 f282 	clz	r2, r2
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	f042 0220 	orr.w	r2, r2, #32
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	f002 021f 	and.w	r2, r2, #31
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f202 	lsl.w	r2, r1, r2
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1af      	bne.n	8006550 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80da 	beq.w	80067b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d069      	beq.n	80066de <HAL_RCC_OscConfig+0x6da>
 800660a:	2301      	movs	r3, #1
 800660c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006610:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006614:	fa93 f3a3 	rbit	r3, r3
 8006618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006620:	fab3 f383 	clz	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_OscConfig+0x654>)
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	461a      	mov	r2, r3
 8006630:	2301      	movs	r3, #1
 8006632:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006634:	f7fd fd0c 	bl	8004050 <HAL_GetTick>
 8006638:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800663c:	e00e      	b.n	800665c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800663e:	f7fd fd07 	bl	8004050 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d906      	bls.n	800665c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e3d9      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000
 8006658:	10908120 	.word	0x10908120
 800665c:	2302      	movs	r3, #2
 800665e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006666:	fa93 f3a3 	rbit	r3, r3
 800666a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800666e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006672:	2202      	movs	r2, #2
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fa93 f2a3 	rbit	r2, r3
 8006680:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800668a:	2202      	movs	r2, #2
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	fa93 f2a3 	rbit	r2, r3
 8006698:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800669c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669e:	4ba5      	ldr	r3, [pc, #660]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80066a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80066a6:	2102      	movs	r1, #2
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	fa93 f1a3 	rbit	r1, r3
 80066b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80066b8:	6019      	str	r1, [r3, #0]
  return result;
 80066ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	fab3 f383 	clz	r3, r3
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0b0      	beq.n	800663e <HAL_RCC_OscConfig+0x63a>
 80066dc:	e06a      	b.n	80067b4 <HAL_RCC_OscConfig+0x7b0>
 80066de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80066e2:	2201      	movs	r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	fa93 f2a3 	rbit	r2, r3
 80066f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066f4:	601a      	str	r2, [r3, #0]
  return result;
 80066f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066fc:	fab3 f383 	clz	r3, r3
 8006700:	b2db      	uxtb	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	4b8c      	ldr	r3, [pc, #560]	; (8006938 <HAL_RCC_OscConfig+0x934>)
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006710:	f7fd fc9e 	bl	8004050 <HAL_GetTick>
 8006714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006718:	e009      	b.n	800672e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800671a:	f7fd fc99 	bl	8004050 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e36b      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 800672e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006732:	2202      	movs	r2, #2
 8006734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	fa93 f2a3 	rbit	r2, r3
 8006740:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800674a:	2202      	movs	r2, #2
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	fa93 f2a3 	rbit	r2, r3
 8006758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006762:	2202      	movs	r2, #2
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	fa93 f2a3 	rbit	r2, r3
 8006770:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006774:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006776:	4b6f      	ldr	r3, [pc, #444]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800677a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800677e:	2102      	movs	r1, #2
 8006780:	6019      	str	r1, [r3, #0]
 8006782:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	fa93 f1a3 	rbit	r1, r3
 800678c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006790:	6019      	str	r1, [r3, #0]
  return result;
 8006792:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	fab3 f383 	clz	r3, r3
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2101      	movs	r1, #1
 80067aa:	fa01 f303 	lsl.w	r3, r1, r3
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1b2      	bne.n	800671a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b4:	1d3b      	adds	r3, r7, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8158 	beq.w	8006a74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ca:	4b5a      	ldr	r3, [pc, #360]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d112      	bne.n	80067fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d6:	4b57      	ldr	r3, [pc, #348]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	4a56      	ldr	r2, [pc, #344]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80067dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e0:	61d3      	str	r3, [r2, #28]
 80067e2:	4b54      	ldr	r3, [pc, #336]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80067ea:	f107 0308 	add.w	r3, r7, #8
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fc:	4b4f      	ldr	r3, [pc, #316]	; (800693c <HAL_RCC_OscConfig+0x938>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11a      	bne.n	800683e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <HAL_RCC_OscConfig+0x938>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4b      	ldr	r2, [pc, #300]	; (800693c <HAL_RCC_OscConfig+0x938>)
 800680e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006812:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006814:	f7fd fc1c 	bl	8004050 <HAL_GetTick>
 8006818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681c:	e009      	b.n	8006832 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800681e:	f7fd fc17 	bl	8004050 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b64      	cmp	r3, #100	; 0x64
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e2e9      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <HAL_RCC_OscConfig+0x938>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0ef      	beq.n	800681e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d106      	bne.n	8006856 <HAL_RCC_OscConfig+0x852>
 8006848:	4b3a      	ldr	r3, [pc, #232]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	4a39      	ldr	r2, [pc, #228]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	6213      	str	r3, [r2, #32]
 8006854:	e02f      	b.n	80068b6 <HAL_RCC_OscConfig+0x8b2>
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10c      	bne.n	800687a <HAL_RCC_OscConfig+0x876>
 8006860:	4b34      	ldr	r3, [pc, #208]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	4a33      	ldr	r2, [pc, #204]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	6213      	str	r3, [r2, #32]
 800686c:	4b31      	ldr	r3, [pc, #196]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	4a30      	ldr	r2, [pc, #192]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006872:	f023 0304 	bic.w	r3, r3, #4
 8006876:	6213      	str	r3, [r2, #32]
 8006878:	e01d      	b.n	80068b6 <HAL_RCC_OscConfig+0x8b2>
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b05      	cmp	r3, #5
 8006882:	d10c      	bne.n	800689e <HAL_RCC_OscConfig+0x89a>
 8006884:	4b2b      	ldr	r3, [pc, #172]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 800688a:	f043 0304 	orr.w	r3, r3, #4
 800688e:	6213      	str	r3, [r2, #32]
 8006890:	4b28      	ldr	r3, [pc, #160]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	4a27      	ldr	r2, [pc, #156]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6213      	str	r3, [r2, #32]
 800689c:	e00b      	b.n	80068b6 <HAL_RCC_OscConfig+0x8b2>
 800689e:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	4a24      	ldr	r2, [pc, #144]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	6213      	str	r3, [r2, #32]
 80068aa:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	4a21      	ldr	r2, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 80068b0:	f023 0304 	bic.w	r3, r3, #4
 80068b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d06b      	beq.n	8006998 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c0:	f7fd fbc6 	bl	8004050 <HAL_GetTick>
 80068c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c8:	e00b      	b.n	80068e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ca:	f7fd fbc1 	bl	8004050 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e291      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 80068e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068e6:	2202      	movs	r2, #2
 80068e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	fa93 f2a3 	rbit	r2, r3
 80068f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068fe:	2202      	movs	r2, #2
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	fa93 f2a3 	rbit	r2, r3
 800690c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006910:	601a      	str	r2, [r3, #0]
  return result;
 8006912:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006918:	fab3 f383 	clz	r3, r3
 800691c:	b2db      	uxtb	r3, r3
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f043 0302 	orr.w	r3, r3, #2
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d109      	bne.n	8006940 <HAL_RCC_OscConfig+0x93c>
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <HAL_RCC_OscConfig+0x930>)
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	e014      	b.n	800695c <HAL_RCC_OscConfig+0x958>
 8006932:	bf00      	nop
 8006934:	40021000 	.word	0x40021000
 8006938:	10908120 	.word	0x10908120
 800693c:	40007000 	.word	0x40007000
 8006940:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006944:	2202      	movs	r2, #2
 8006946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	fa93 f2a3 	rbit	r2, r3
 8006952:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	4bbb      	ldr	r3, [pc, #748]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006960:	2102      	movs	r1, #2
 8006962:	6011      	str	r1, [r2, #0]
 8006964:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	fa92 f1a2 	rbit	r1, r2
 800696e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006972:	6011      	str	r1, [r2, #0]
  return result;
 8006974:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	fab2 f282 	clz	r2, r2
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	f002 021f 	and.w	r2, r2, #31
 800698a:	2101      	movs	r1, #1
 800698c:	fa01 f202 	lsl.w	r2, r1, r2
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d099      	beq.n	80068ca <HAL_RCC_OscConfig+0x8c6>
 8006996:	e063      	b.n	8006a60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006998:	f7fd fb5a 	bl	8004050 <HAL_GetTick>
 800699c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a0:	e00b      	b.n	80069ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fd fb55 	bl	8004050 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e225      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 80069ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069be:	2202      	movs	r2, #2
 80069c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	fa93 f2a3 	rbit	r2, r3
 80069cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069d6:	2202      	movs	r2, #2
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	fa93 f2a3 	rbit	r2, r3
 80069e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069e8:	601a      	str	r2, [r3, #0]
  return result;
 80069ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f0:	fab3 f383 	clz	r3, r3
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f043 0302 	orr.w	r3, r3, #2
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d102      	bne.n	8006a0a <HAL_RCC_OscConfig+0xa06>
 8006a04:	4b90      	ldr	r3, [pc, #576]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	e00d      	b.n	8006a26 <HAL_RCC_OscConfig+0xa22>
 8006a0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a0e:	2202      	movs	r2, #2
 8006a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	fa93 f2a3 	rbit	r2, r3
 8006a1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	4b89      	ldr	r3, [pc, #548]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	6011      	str	r1, [r2, #0]
 8006a2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	fa92 f1a2 	rbit	r1, r2
 8006a38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006a3c:	6011      	str	r1, [r2, #0]
  return result;
 8006a3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	fab2 f282 	clz	r2, r2
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	f002 021f 	and.w	r2, r2, #31
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1a0      	bne.n	80069a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d105      	bne.n	8006a74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a68:	4b77      	ldr	r3, [pc, #476]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	4a76      	ldr	r2, [pc, #472]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a74:	1d3b      	adds	r3, r7, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 81c2 	beq.w	8006e04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a80:	4b71      	ldr	r3, [pc, #452]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	f000 819c 	beq.w	8006dc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	f040 8114 	bne.w	8006cc2 <HAL_RCC_OscConfig+0xcbe>
 8006a9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	fa93 f2a3 	rbit	r2, r3
 8006aae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006ab2:	601a      	str	r2, [r3, #0]
  return result;
 8006ab4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006ab8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aba:	fab3 f383 	clz	r3, r3
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	461a      	mov	r2, r3
 8006acc:	2300      	movs	r3, #0
 8006ace:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fd fabe 	bl	8004050 <HAL_GetTick>
 8006ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ad8:	e009      	b.n	8006aee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ada:	f7fd fab9 	bl	8004050 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e18b      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006aee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	fa93 f2a3 	rbit	r2, r3
 8006b02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b06:	601a      	str	r2, [r3, #0]
  return result;
 8006b08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b0e:	fab3 f383 	clz	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d102      	bne.n	8006b28 <HAL_RCC_OscConfig+0xb24>
 8006b22:	4b49      	ldr	r3, [pc, #292]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	e01b      	b.n	8006b60 <HAL_RCC_OscConfig+0xb5c>
 8006b28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	fa93 f2a3 	rbit	r2, r3
 8006b3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	fa93 f2a3 	rbit	r2, r3
 8006b56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	fa92 f1a2 	rbit	r1, r2
 8006b74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006b78:	6011      	str	r1, [r2, #0]
  return result;
 8006b7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	fab2 f282 	clz	r2, r2
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	f042 0220 	orr.w	r2, r2, #32
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	f002 021f 	and.w	r2, r2, #31
 8006b90:	2101      	movs	r1, #1
 8006b92:	fa01 f202 	lsl.w	r2, r1, r2
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d19e      	bne.n	8006ada <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b9c:	4b2a      	ldr	r3, [pc, #168]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ba4:	1d3b      	adds	r3, r7, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	4925      	ldr	r1, [pc, #148]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	fa93 f2a3 	rbit	r2, r3
 8006bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006bd0:	601a      	str	r2, [r3, #0]
  return result;
 8006bd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006bd6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd8:	fab3 f383 	clz	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006be2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	461a      	mov	r2, r3
 8006bea:	2301      	movs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bee:	f7fd fa2f 	bl	8004050 <HAL_GetTick>
 8006bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bf6:	e009      	b.n	8006c0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fd fa2a 	bl	8004050 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0fc      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006c0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	fa93 f2a3 	rbit	r2, r3
 8006c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c24:	601a      	str	r2, [r3, #0]
  return result;
 8006c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <HAL_RCC_OscConfig+0xc48>
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <HAL_RCC_OscConfig+0xc44>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	e01e      	b.n	8006c84 <HAL_RCC_OscConfig+0xc80>
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	fa93 f2a3 	rbit	r2, r3
 8006c60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	fa93 f2a3 	rbit	r2, r3
 8006c7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	4b63      	ldr	r3, [pc, #396]	; (8006e10 <HAL_RCC_OscConfig+0xe0c>)
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	fa92 f1a2 	rbit	r1, r2
 8006c98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006c9c:	6011      	str	r1, [r2, #0]
  return result;
 8006c9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	fab2 f282 	clz	r2, r2
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	f042 0220 	orr.w	r2, r2, #32
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	f002 021f 	and.w	r2, r2, #31
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d09b      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xbf4>
 8006cc0:	e0a0      	b.n	8006e04 <HAL_RCC_OscConfig+0xe00>
 8006cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	fa93 f2a3 	rbit	r2, r3
 8006cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cda:	601a      	str	r2, [r3, #0]
  return result;
 8006cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ce0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce2:	fab3 f383 	clz	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf8:	f7fd f9aa 	bl	8004050 <HAL_GetTick>
 8006cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d00:	e009      	b.n	8006d16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d02:	f7fd f9a5 	bl	8004050 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e077      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
 8006d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	fa93 f2a3 	rbit	r2, r3
 8006d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2e:	601a      	str	r2, [r3, #0]
  return result;
 8006d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d36:	fab3 f383 	clz	r3, r3
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d102      	bne.n	8006d50 <HAL_RCC_OscConfig+0xd4c>
 8006d4a:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <HAL_RCC_OscConfig+0xe0c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	e01b      	b.n	8006d88 <HAL_RCC_OscConfig+0xd84>
 8006d50:	f107 0320 	add.w	r3, r7, #32
 8006d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	f107 0320 	add.w	r3, r7, #32
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	fa93 f2a3 	rbit	r2, r3
 8006d64:	f107 031c 	add.w	r3, r7, #28
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f107 0318 	add.w	r3, r7, #24
 8006d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f107 0318 	add.w	r3, r7, #24
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	fa93 f2a3 	rbit	r2, r3
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCC_OscConfig+0xe0c>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	f107 0210 	add.w	r2, r7, #16
 8006d8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d90:	6011      	str	r1, [r2, #0]
 8006d92:	f107 0210 	add.w	r2, r7, #16
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	fa92 f1a2 	rbit	r1, r2
 8006d9c:	f107 020c 	add.w	r2, r7, #12
 8006da0:	6011      	str	r1, [r2, #0]
  return result;
 8006da2:	f107 020c 	add.w	r2, r7, #12
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	fab2 f282 	clz	r2, r2
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	f042 0220 	orr.w	r2, r2, #32
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	f002 021f 	and.w	r2, r2, #31
 8006db8:	2101      	movs	r1, #1
 8006dba:	fa01 f202 	lsl.w	r2, r1, r2
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d19e      	bne.n	8006d02 <HAL_RCC_OscConfig+0xcfe>
 8006dc4:	e01e      	b.n	8006e04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dc6:	1d3b      	adds	r3, r7, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e018      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <HAL_RCC_OscConfig+0xe0c>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ddc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d108      	bne.n	8006e00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006dee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40021000 	.word	0x40021000

08006e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b09e      	sub	sp, #120	; 0x78
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e162      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b90      	ldr	r3, [pc, #576]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d910      	bls.n	8006e5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b8d      	ldr	r3, [pc, #564]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 0207 	bic.w	r2, r3, #7
 8006e42:	498b      	ldr	r1, [pc, #556]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4a:	4b89      	ldr	r3, [pc, #548]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d001      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e14a      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e68:	4b82      	ldr	r3, [pc, #520]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	497f      	ldr	r1, [pc, #508]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80dc 	beq.w	8007040 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d13c      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xf6>
 8006e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e98:	fa93 f3a3 	rbit	r3, r3
 8006e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea0:	fab3 f383 	clz	r3, r3
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d102      	bne.n	8006eba <HAL_RCC_ClockConfig+0xa6>
 8006eb4:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	e00f      	b.n	8006eda <HAL_RCC_ClockConfig+0xc6>
 8006eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec2:	fa93 f3a3 	rbit	r3, r3
 8006ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed0:	fa93 f3a3 	rbit	r3, r3
 8006ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed6:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ede:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ee2:	fa92 f2a2 	rbit	r2, r2
 8006ee6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006eea:	fab2 f282 	clz	r2, r2
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	f042 0220 	orr.w	r2, r2, #32
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	f002 021f 	and.w	r2, r2, #31
 8006efa:	2101      	movs	r1, #1
 8006efc:	fa01 f202 	lsl.w	r2, r1, r2
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d17b      	bne.n	8006ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0f3      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d13c      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x178>
 8006f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1a:	fa93 f3a3 	rbit	r3, r3
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f22:	fab3 f383 	clz	r3, r3
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d102      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x128>
 8006f36:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e00f      	b.n	8006f5c <HAL_RCC_ClockConfig+0x148>
 8006f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f44:	fa93 f3a3 	rbit	r3, r3
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	fa93 f3a3 	rbit	r3, r3
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f58:	4b46      	ldr	r3, [pc, #280]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f60:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f64:	fa92 f2a2 	rbit	r2, r2
 8006f68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f6c:	fab2 f282 	clz	r2, r2
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	f042 0220 	orr.w	r2, r2, #32
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	f002 021f 	and.w	r2, r2, #31
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d13a      	bne.n	8006ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0b2      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	fa93 f3a3 	rbit	r3, r3
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f9a:	fab3 f383 	clz	r3, r3
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x1a0>
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	e00d      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1bc>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	fa93 f3a3 	rbit	r3, r3
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	fa93 f3a3 	rbit	r3, r3
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	61ba      	str	r2, [r7, #24]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	fa92 f2a2 	rbit	r2, r2
 8006fda:	617a      	str	r2, [r7, #20]
  return result;
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	fab2 f282 	clz	r2, r2
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	f042 0220 	orr.w	r2, r2, #32
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	f002 021f 	and.w	r2, r2, #31
 8006fee:	2101      	movs	r1, #1
 8006ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e079      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f023 0203 	bic.w	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	491a      	ldr	r1, [pc, #104]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007010:	f7fd f81e 	bl	8004050 <HAL_GetTick>
 8007014:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	e00a      	b.n	800702e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007018:	f7fd f81a 	bl	8004050 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e061      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <HAL_RCC_ClockConfig+0x260>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f003 020c 	and.w	r2, r3, #12
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	429a      	cmp	r2, r3
 800703e:	d1eb      	bne.n	8007018 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d214      	bcs.n	8007078 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f023 0207 	bic.w	r2, r3, #7
 8007056:	4906      	ldr	r1, [pc, #24]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	4313      	orrs	r3, r2
 800705c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <HAL_RCC_ClockConfig+0x25c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d005      	beq.n	8007078 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e040      	b.n	80070f2 <HAL_RCC_ClockConfig+0x2de>
 8007070:	40022000 	.word	0x40022000
 8007074:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007084:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <HAL_RCC_ClockConfig+0x2e8>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	491a      	ldr	r1, [pc, #104]	; (80070fc <HAL_RCC_ClockConfig+0x2e8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070a2:	4b16      	ldr	r3, [pc, #88]	; (80070fc <HAL_RCC_ClockConfig+0x2e8>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4912      	ldr	r1, [pc, #72]	; (80070fc <HAL_RCC_ClockConfig+0x2e8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80070b6:	f000 f829 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070ba:	4601      	mov	r1, r0
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <HAL_RCC_ClockConfig+0x2e8>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c4:	22f0      	movs	r2, #240	; 0xf0
 80070c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	fa92 f2a2 	rbit	r2, r2
 80070ce:	60fa      	str	r2, [r7, #12]
  return result;
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	fab2 f282 	clz	r2, r2
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	40d3      	lsrs	r3, r2
 80070da:	4a09      	ldr	r2, [pc, #36]	; (8007100 <HAL_RCC_ClockConfig+0x2ec>)
 80070dc:	5cd3      	ldrb	r3, [r2, r3]
 80070de:	fa21 f303 	lsr.w	r3, r1, r3
 80070e2:	4a08      	ldr	r2, [pc, #32]	; (8007104 <HAL_RCC_ClockConfig+0x2f0>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80070e6:	4b08      	ldr	r3, [pc, #32]	; (8007108 <HAL_RCC_ClockConfig+0x2f4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fc ff6c 	bl	8003fc8 <HAL_InitTick>
  
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3778      	adds	r7, #120	; 0x78
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40021000 	.word	0x40021000
 8007100:	0800bab0 	.word	0x0800bab0
 8007104:	20000054 	.word	0x20000054
 8007108:	20000058 	.word	0x20000058

0800710c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b08b      	sub	sp, #44	; 0x2c
 8007110:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007126:	4b29      	ldr	r3, [pc, #164]	; (80071cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b04      	cmp	r3, #4
 8007134:	d002      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x30>
 8007136:	2b08      	cmp	r3, #8
 8007138:	d003      	beq.n	8007142 <HAL_RCC_GetSysClockFreq+0x36>
 800713a:	e03c      	b.n	80071b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800713c:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800713e:	623b      	str	r3, [r7, #32]
      break;
 8007140:	e03c      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007148:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800714c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	fa92 f2a2 	rbit	r2, r2
 8007154:	607a      	str	r2, [r7, #4]
  return result;
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	fab2 f282 	clz	r2, r2
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	40d3      	lsrs	r3, r2
 8007160:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007162:	5cd3      	ldrb	r3, [r2, r3]
 8007164:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007166:	4b19      	ldr	r3, [pc, #100]	; (80071cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	220f      	movs	r2, #15
 8007170:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	fa92 f2a2 	rbit	r2, r2
 8007178:	60fa      	str	r2, [r7, #12]
  return result;
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	fab2 f282 	clz	r2, r2
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	40d3      	lsrs	r3, r2
 8007184:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007194:	4a0e      	ldr	r2, [pc, #56]	; (80071d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	fbb2 f2f3 	udiv	r2, r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
 80071a4:	e004      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	623b      	str	r3, [r7, #32]
      break;
 80071b4:	e002      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071b8:	623b      	str	r3, [r7, #32]
      break;
 80071ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071bc:	6a3b      	ldr	r3, [r7, #32]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	372c      	adds	r7, #44	; 0x2c
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40021000 	.word	0x40021000
 80071d0:	007a1200 	.word	0x007a1200
 80071d4:	0800bac8 	.word	0x0800bac8
 80071d8:	0800bad8 	.word	0x0800bad8
 80071dc:	003d0900 	.word	0x003d0900

080071e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071e4:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000054 	.word	0x20000054

080071f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80071fe:	f7ff ffef 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8007202:	4601      	mov	r1, r0
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800720c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007210:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	fa92 f2a2 	rbit	r2, r2
 8007218:	603a      	str	r2, [r7, #0]
  return result;
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	fab2 f282 	clz	r2, r2
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	40d3      	lsrs	r3, r2
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007226:	5cd3      	ldrb	r3, [r2, r3]
 8007228:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000
 8007238:	0800bac0 	.word	0x0800bac0

0800723c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007242:	f7ff ffcd 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8007246:	4601      	mov	r1, r0
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007250:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007254:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	fa92 f2a2 	rbit	r2, r2
 800725c:	603a      	str	r2, [r7, #0]
  return result;
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	fab2 f282 	clz	r2, r2
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	40d3      	lsrs	r3, r2
 8007268:	4a04      	ldr	r2, [pc, #16]	; (800727c <HAL_RCC_GetPCLK2Freq+0x40>)
 800726a:	5cd3      	ldrb	r3, [r2, r3]
 800726c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40021000 	.word	0x40021000
 800727c:	0800bac0 	.word	0x0800bac0

08007280 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b092      	sub	sp, #72	; 0x48
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007290:	2300      	movs	r3, #0
 8007292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80d4 	beq.w	800744c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a4:	4b4e      	ldr	r3, [pc, #312]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10e      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b0:	4b4b      	ldr	r3, [pc, #300]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4a4a      	ldr	r2, [pc, #296]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ba:	61d3      	str	r3, [r2, #28]
 80072bc:	4b48      	ldr	r3, [pc, #288]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ce:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d118      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072da:	4b42      	ldr	r3, [pc, #264]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a41      	ldr	r2, [pc, #260]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e6:	f7fc feb3 	bl	8004050 <HAL_GetTick>
 80072ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ec:	e008      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ee:	f7fc feaf 	bl	8004050 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d901      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e169      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007300:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800730c:	4b34      	ldr	r3, [pc, #208]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8084 	beq.w	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007328:	429a      	cmp	r2, r3
 800732a:	d07c      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800732c:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800733a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	fa93 f3a3 	rbit	r3, r3
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007346:	fab3 f383 	clz	r3, r3
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	461a      	mov	r2, r3
 8007356:	2301      	movs	r3, #1
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800735e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	fa93 f3a3 	rbit	r3, r3
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	461a      	mov	r2, r3
 800737a:	2300      	movs	r3, #0
 800737c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800737e:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007382:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d04b      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738e:	f7fc fe5f 	bl	8004050 <HAL_GetTick>
 8007392:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007394:	e00a      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fc fe5b 	bl	8004050 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e113      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80073ac:	2302      	movs	r3, #2
 80073ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	fa93 f3a3 	rbit	r3, r3
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
 80073b8:	2302      	movs	r3, #2
 80073ba:	623b      	str	r3, [r7, #32]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	fa93 f3a3 	rbit	r3, r3
 80073c2:	61fb      	str	r3, [r7, #28]
  return result;
 80073c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c6:	fab3 f383 	clz	r3, r3
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f043 0302 	orr.w	r3, r3, #2
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d108      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80073da:	4b01      	ldr	r3, [pc, #4]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	e00d      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40007000 	.word	0x40007000
 80073e8:	10908100 	.word	0x10908100
 80073ec:	2302      	movs	r3, #2
 80073ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	fa93 f3a3 	rbit	r3, r3
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	4b78      	ldr	r3, [pc, #480]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2202      	movs	r2, #2
 80073fe:	613a      	str	r2, [r7, #16]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	fa92 f2a2 	rbit	r2, r2
 8007406:	60fa      	str	r2, [r7, #12]
  return result;
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	fab2 f282 	clz	r2, r2
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	f002 021f 	and.w	r2, r2, #31
 800741a:	2101      	movs	r1, #1
 800741c:	fa01 f202 	lsl.w	r2, r1, r2
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0b7      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007426:	4b6d      	ldr	r3, [pc, #436]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	496a      	ldr	r1, [pc, #424]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007434:	4313      	orrs	r3, r2
 8007436:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007438:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800743c:	2b01      	cmp	r3, #1
 800743e:	d105      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007440:	4b66      	ldr	r3, [pc, #408]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	4a65      	ldr	r2, [pc, #404]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800744a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007458:	4b60      	ldr	r3, [pc, #384]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	f023 0203 	bic.w	r2, r3, #3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	495d      	ldr	r1, [pc, #372]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007476:	4b59      	ldr	r3, [pc, #356]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	4956      	ldr	r1, [pc, #344]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007494:	4b51      	ldr	r3, [pc, #324]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	494e      	ldr	r1, [pc, #312]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074b2:	4b4a      	ldr	r3, [pc, #296]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f023 0210 	bic.w	r2, r3, #16
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	4947      	ldr	r1, [pc, #284]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80074d0:	4b42      	ldr	r3, [pc, #264]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	493f      	ldr	r1, [pc, #252]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d008      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074ee:	4b3b      	ldr	r3, [pc, #236]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	f023 0220 	bic.w	r2, r3, #32
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	4938      	ldr	r1, [pc, #224]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800750c:	4b33      	ldr	r3, [pc, #204]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	4930      	ldr	r1, [pc, #192]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800752a:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	4929      	ldr	r1, [pc, #164]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007538:	4313      	orrs	r3, r2
 800753a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007548:	4b24      	ldr	r3, [pc, #144]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4921      	ldr	r1, [pc, #132]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007566:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	491a      	ldr	r1, [pc, #104]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007584:	4b15      	ldr	r3, [pc, #84]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	4912      	ldr	r1, [pc, #72]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	490b      	ldr	r1, [pc, #44]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	4903      	ldr	r1, [pc, #12]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3748      	adds	r7, #72	; 0x48
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40021000 	.word	0x40021000

080075e0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e083      	b.n	80076fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7f5b      	ldrb	r3, [r3, #29]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d105      	bne.n	8007608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fa fc78 	bl	8001ef8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ca      	movs	r2, #202	; 0xca
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2253      	movs	r2, #83	; 0x53
 800761c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 faa8 	bl	8007b74 <RTC_EnterInitMode>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e05e      	b.n	80076fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6899      	ldr	r1, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68d2      	ldr	r2, [r2, #12]
 8007676:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6919      	ldr	r1, [r3, #16]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	041a      	lsls	r2, r3, #16
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10e      	bne.n	80076c8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa3a 	bl	8007b24 <HAL_RTC_WaitForSynchro>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2204      	movs	r2, #4
 80076c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e018      	b.n	80076fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	22ff      	movs	r2, #255	; 0xff
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80076f8:	2300      	movs	r3, #0
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007702:	b590      	push	{r4, r7, lr}
 8007704:	b087      	sub	sp, #28
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	7f1b      	ldrb	r3, [r3, #28]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_RTC_SetTime+0x1c>
 800771a:	2302      	movs	r3, #2
 800771c:	e0aa      	b.n	8007874 <HAL_RTC_SetTime+0x172>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2202      	movs	r2, #2
 8007728:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d126      	bne.n	800777e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fa3f 	bl	8007bcc <RTC_ByteToBcd2>
 800774e:	4603      	mov	r3, r0
 8007750:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fa38 	bl	8007bcc <RTC_ByteToBcd2>
 800775c:	4603      	mov	r3, r0
 800775e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007760:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	789b      	ldrb	r3, [r3, #2]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fa30 	bl	8007bcc <RTC_ByteToBcd2>
 800776c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800776e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e018      	b.n	80077b0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800779e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80077a4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	78db      	ldrb	r3, [r3, #3]
 80077aa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	22ca      	movs	r2, #202	; 0xca
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2253      	movs	r2, #83	; 0x53
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f9d7 	bl	8007b74 <RTC_EnterInitMode>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	22ff      	movs	r2, #255	; 0xff
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2204      	movs	r2, #4
 80077d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e047      	b.n	8007874 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007802:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	431a      	orrs	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800782a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d111      	bne.n	800785e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f972 	bl	8007b24 <HAL_RTC_WaitForSynchro>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	22ff      	movs	r2, #255	; 0xff
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2204      	movs	r2, #4
 8007852:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e00a      	b.n	8007874 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	22ff      	movs	r2, #255	; 0xff
 8007864:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007872:	2300      	movs	r3, #0
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11a      	bne.n	800792e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f983 	bl	8007c08 <RTC_Bcd2ToByte>
 8007902:	4603      	mov	r3, r0
 8007904:	461a      	mov	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f97a 	bl	8007c08 <RTC_Bcd2ToByte>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	789b      	ldrb	r3, [r3, #2]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f971 	bl	8007c08 <RTC_Bcd2ToByte>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007938:	b590      	push	{r4, r7, lr}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7f1b      	ldrb	r3, [r3, #28]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_RTC_SetDate+0x1c>
 8007950:	2302      	movs	r3, #2
 8007952:	e094      	b.n	8007a7e <HAL_RTC_SetDate+0x146>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2202      	movs	r2, #2
 800795e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10e      	bne.n	8007984 <HAL_RTC_SetDate+0x4c>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	f023 0310 	bic.w	r3, r3, #16
 800797a:	b2db      	uxtb	r3, r3
 800797c:	330a      	adds	r3, #10
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d11c      	bne.n	80079c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f91c 	bl	8007bcc <RTC_ByteToBcd2>
 8007994:	4603      	mov	r3, r0
 8007996:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f915 	bl	8007bcc <RTC_ByteToBcd2>
 80079a2:	4603      	mov	r3, r0
 80079a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	789b      	ldrb	r3, [r3, #2]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 f90d 	bl	8007bcc <RTC_ByteToBcd2>
 80079b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e00e      	b.n	80079e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	78db      	ldrb	r3, [r3, #3]
 80079c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80079d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	22ca      	movs	r2, #202	; 0xca
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2253      	movs	r2, #83	; 0x53
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f8be 	bl	8007b74 <RTC_EnterInitMode>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	22ff      	movs	r2, #255	; 0xff
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e033      	b.n	8007a7e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a34:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d111      	bne.n	8007a68 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f86d 	bl	8007b24 <HAL_RTC_WaitForSynchro>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e00a      	b.n	8007a7e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	22ff      	movs	r2, #255	; 0xff
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd90      	pop	{r4, r7, pc}

08007a86 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	0b5b      	lsrs	r3, r3, #13
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d11a      	bne.n	8007b1a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	78db      	ldrb	r3, [r3, #3]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f88d 	bl	8007c08 <RTC_Bcd2ToByte>
 8007aee:	4603      	mov	r3, r0
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f884 	bl	8007c08 <RTC_Bcd2ToByte>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	789b      	ldrb	r3, [r3, #2]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f87b 	bl	8007c08 <RTC_Bcd2ToByte>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b40:	f7fc fa86 	bl	8004050 <HAL_GetTick>
 8007b44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b46:	e009      	b.n	8007b5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b48:	f7fc fa82 	bl	8004050 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b56:	d901      	bls.n	8007b5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e007      	b.n	8007b6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ee      	beq.n	8007b48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d119      	bne.n	8007bc2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f04f 32ff 	mov.w	r2, #4294967295
 8007b96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b98:	f7fc fa5a 	bl	8004050 <HAL_GetTick>
 8007b9c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b9e:	e009      	b.n	8007bb4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ba0:	f7fc fa56 	bl	8004050 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bae:	d901      	bls.n	8007bb4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e007      	b.n	8007bc4 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0ee      	beq.n	8007ba0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007bda:	e005      	b.n	8007be8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	3b0a      	subs	r3, #10
 8007be6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	2b09      	cmp	r3, #9
 8007bec:	d8f6      	bhi.n	8007bdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b2db      	uxtb	r3, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4413      	add	r3, r2
 8007c36:	b2db      	uxtb	r3, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e09d      	b.n	8007d92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d108      	bne.n	8007c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c66:	d009      	beq.n	8007c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	61da      	str	r2, [r3, #28]
 8007c6e:	e005      	b.n	8007c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fa f954 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cbc:	d902      	bls.n	8007cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e002      	b.n	8007cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007cd2:	d007      	beq.n	8007ce4 <HAL_SPI_Init+0xa0>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cdc:	d002      	beq.n	8007ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	ea42 0103 	orr.w	r1, r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	f003 0204 	and.w	r2, r3, #4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d60:	ea42 0103 	orr.w	r1, r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e049      	b.n	8007e40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fa f901 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f000 fd31 	bl	8008840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d001      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e04a      	b.n	8007ef6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d018      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8a:	d013      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1c      	ldr	r2, [pc, #112]	; (8007f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1a      	ldr	r2, [pc, #104]	; (8007f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d115      	bne.n	8007ee0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d015      	beq.n	8007ef2 <HAL_TIM_Base_Start_IT+0xaa>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d011      	beq.n	8007ef2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ede:	e008      	b.n	8007ef2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	e000      	b.n	8007ef4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40012c00 	.word	0x40012c00
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	00010007 	.word	0x00010007

08007f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e049      	b.n	8007fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f841 	bl	8007fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f000 fc70 	bl	8008840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <HAL_TIM_PWM_Start+0x24>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e03c      	b.n	800807e <HAL_TIM_PWM_Start+0x9e>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b04      	cmp	r3, #4
 8008008:	d109      	bne.n	800801e <HAL_TIM_PWM_Start+0x3e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b01      	cmp	r3, #1
 8008014:	bf14      	ite	ne
 8008016:	2301      	movne	r3, #1
 8008018:	2300      	moveq	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	e02f      	b.n	800807e <HAL_TIM_PWM_Start+0x9e>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d109      	bne.n	8008038 <HAL_TIM_PWM_Start+0x58>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	bf14      	ite	ne
 8008030:	2301      	movne	r3, #1
 8008032:	2300      	moveq	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	e022      	b.n	800807e <HAL_TIM_PWM_Start+0x9e>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b0c      	cmp	r3, #12
 800803c:	d109      	bne.n	8008052 <HAL_TIM_PWM_Start+0x72>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	bf14      	ite	ne
 800804a:	2301      	movne	r3, #1
 800804c:	2300      	moveq	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	e015      	b.n	800807e <HAL_TIM_PWM_Start+0x9e>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b10      	cmp	r3, #16
 8008056:	d109      	bne.n	800806c <HAL_TIM_PWM_Start+0x8c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	e008      	b.n	800807e <HAL_TIM_PWM_Start+0x9e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b01      	cmp	r3, #1
 8008076:	bf14      	ite	ne
 8008078:	2301      	movne	r3, #1
 800807a:	2300      	moveq	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e097      	b.n	80081b6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <HAL_TIM_PWM_Start+0xb6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008094:	e023      	b.n	80080de <HAL_TIM_PWM_Start+0xfe>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Start+0xc6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a4:	e01b      	b.n	80080de <HAL_TIM_PWM_Start+0xfe>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Start+0xd6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b4:	e013      	b.n	80080de <HAL_TIM_PWM_Start+0xfe>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_PWM_Start+0xe6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080c4:	e00b      	b.n	80080de <HAL_TIM_PWM_Start+0xfe>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d104      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xf6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080d4:	e003      	b.n	80080de <HAL_TIM_PWM_Start+0xfe>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2201      	movs	r2, #1
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 ffaa 	bl	8009040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a33      	ldr	r2, [pc, #204]	; (80081c0 <HAL_TIM_PWM_Start+0x1e0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_TIM_PWM_Start+0x13e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a32      	ldr	r2, [pc, #200]	; (80081c4 <HAL_TIM_PWM_Start+0x1e4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <HAL_TIM_PWM_Start+0x13e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a30      	ldr	r2, [pc, #192]	; (80081c8 <HAL_TIM_PWM_Start+0x1e8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_TIM_PWM_Start+0x13e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a2f      	ldr	r2, [pc, #188]	; (80081cc <HAL_TIM_PWM_Start+0x1ec>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <HAL_TIM_PWM_Start+0x13e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a2d      	ldr	r2, [pc, #180]	; (80081d0 <HAL_TIM_PWM_Start+0x1f0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d101      	bne.n	8008122 <HAL_TIM_PWM_Start+0x142>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <HAL_TIM_PWM_Start+0x144>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008136:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a20      	ldr	r2, [pc, #128]	; (80081c0 <HAL_TIM_PWM_Start+0x1e0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d018      	beq.n	8008174 <HAL_TIM_PWM_Start+0x194>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814a:	d013      	beq.n	8008174 <HAL_TIM_PWM_Start+0x194>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <HAL_TIM_PWM_Start+0x1f4>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00e      	beq.n	8008174 <HAL_TIM_PWM_Start+0x194>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1f      	ldr	r2, [pc, #124]	; (80081d8 <HAL_TIM_PWM_Start+0x1f8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d009      	beq.n	8008174 <HAL_TIM_PWM_Start+0x194>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <HAL_TIM_PWM_Start+0x1e4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <HAL_TIM_PWM_Start+0x194>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a16      	ldr	r2, [pc, #88]	; (80081c8 <HAL_TIM_PWM_Start+0x1e8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d115      	bne.n	80081a0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	4b18      	ldr	r3, [pc, #96]	; (80081dc <HAL_TIM_PWM_Start+0x1fc>)
 800817c:	4013      	ands	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b06      	cmp	r3, #6
 8008184:	d015      	beq.n	80081b2 <HAL_TIM_PWM_Start+0x1d2>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818c:	d011      	beq.n	80081b2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819e:	e008      	b.n	80081b2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e000      	b.n	80081b4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40013400 	.word	0x40013400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800
 80081dc:	00010007 	.word	0x00010007

080081e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d122      	bne.n	800823c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b02      	cmp	r3, #2
 8008202:	d11b      	bne.n	800823c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0202 	mvn.w	r2, #2
 800820c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faed 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fadf 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 faf0 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b04      	cmp	r3, #4
 8008248:	d122      	bne.n	8008290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b04      	cmp	r3, #4
 8008256:	d11b      	bne.n	8008290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0204 	mvn.w	r2, #4
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fac3 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fab5 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fac6 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b08      	cmp	r3, #8
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0208 	mvn.w	r2, #8
 80082b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa99 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa8b 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa9c 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b10      	cmp	r3, #16
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b10      	cmp	r3, #16
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0210 	mvn.w	r2, #16
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2208      	movs	r2, #8
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa6f 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa61 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa72 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10e      	bne.n	8008364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b01      	cmp	r3, #1
 8008352:	d107      	bne.n	8008364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0201 	mvn.w	r2, #1
 800835c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa3b 	bl	80087da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836e:	2b80      	cmp	r3, #128	; 0x80
 8008370:	d10e      	bne.n	8008390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837c:	2b80      	cmp	r3, #128	; 0x80
 800837e:	d107      	bne.n	8008390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 ff08 	bl	80091a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839e:	d10e      	bne.n	80083be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083aa:	2b80      	cmp	r3, #128	; 0x80
 80083ac:	d107      	bne.n	80083be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fefb 	bl	80091b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d10e      	bne.n	80083ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d107      	bne.n	80083ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa20 	bl	800882a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d10e      	bne.n	8008416 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b20      	cmp	r3, #32
 8008404:	d107      	bne.n	8008416 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f06f 0220 	mvn.w	r2, #32
 800840e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 febb 	bl	800918c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800843a:	2302      	movs	r3, #2
 800843c:	e0ff      	b.n	800863e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b14      	cmp	r3, #20
 800844a:	f200 80f0 	bhi.w	800862e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	080084a9 	.word	0x080084a9
 8008458:	0800862f 	.word	0x0800862f
 800845c:	0800862f 	.word	0x0800862f
 8008460:	0800862f 	.word	0x0800862f
 8008464:	080084e9 	.word	0x080084e9
 8008468:	0800862f 	.word	0x0800862f
 800846c:	0800862f 	.word	0x0800862f
 8008470:	0800862f 	.word	0x0800862f
 8008474:	0800852b 	.word	0x0800852b
 8008478:	0800862f 	.word	0x0800862f
 800847c:	0800862f 	.word	0x0800862f
 8008480:	0800862f 	.word	0x0800862f
 8008484:	0800856b 	.word	0x0800856b
 8008488:	0800862f 	.word	0x0800862f
 800848c:	0800862f 	.word	0x0800862f
 8008490:	0800862f 	.word	0x0800862f
 8008494:	080085ad 	.word	0x080085ad
 8008498:	0800862f 	.word	0x0800862f
 800849c:	0800862f 	.word	0x0800862f
 80084a0:	0800862f 	.word	0x0800862f
 80084a4:	080085ed 	.word	0x080085ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fa56 	bl	8008960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0208 	orr.w	r2, r2, #8
 80084c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0204 	bic.w	r2, r2, #4
 80084d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6999      	ldr	r1, [r3, #24]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691a      	ldr	r2, [r3, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	619a      	str	r2, [r3, #24]
      break;
 80084e6:	e0a5      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fac6 	bl	8008a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6999      	ldr	r1, [r3, #24]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	021a      	lsls	r2, r3, #8
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	619a      	str	r2, [r3, #24]
      break;
 8008528:	e084      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fb2f 	bl	8008b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0208 	orr.w	r2, r2, #8
 8008544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0204 	bic.w	r2, r2, #4
 8008554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69d9      	ldr	r1, [r3, #28]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	61da      	str	r2, [r3, #28]
      break;
 8008568:	e064      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 fb97 	bl	8008ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69da      	ldr	r2, [r3, #28]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69d9      	ldr	r1, [r3, #28]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	021a      	lsls	r2, r3, #8
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	61da      	str	r2, [r3, #28]
      break;
 80085aa:	e043      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fbe0 	bl	8008d78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0208 	orr.w	r2, r2, #8
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0204 	bic.w	r2, r2, #4
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	691a      	ldr	r2, [r3, #16]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085ea:	e023      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fc24 	bl	8008e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008606:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	021a      	lsls	r2, r3, #8
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800862c:	e002      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
      break;
 8008632:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_TIM_ConfigClockSource+0x1c>
 8008660:	2302      	movs	r3, #2
 8008662:	e0b6      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x18a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800868e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a0:	d03e      	beq.n	8008720 <HAL_TIM_ConfigClockSource+0xd8>
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	f200 8087 	bhi.w	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ae:	f000 8086 	beq.w	80087be <HAL_TIM_ConfigClockSource+0x176>
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d87f      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086b8:	2b70      	cmp	r3, #112	; 0x70
 80086ba:	d01a      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0xaa>
 80086bc:	2b70      	cmp	r3, #112	; 0x70
 80086be:	d87b      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086c0:	2b60      	cmp	r3, #96	; 0x60
 80086c2:	d050      	beq.n	8008766 <HAL_TIM_ConfigClockSource+0x11e>
 80086c4:	2b60      	cmp	r3, #96	; 0x60
 80086c6:	d877      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086c8:	2b50      	cmp	r3, #80	; 0x50
 80086ca:	d03c      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0xfe>
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d873      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d058      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x13e>
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d86f      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086d8:	2b30      	cmp	r3, #48	; 0x30
 80086da:	d064      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15e>
 80086dc:	2b30      	cmp	r3, #48	; 0x30
 80086de:	d86b      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d060      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15e>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d867      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d05c      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15e>
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d05a      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15e>
 80086f0:	e062      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f000 fc7d 	bl	8009000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	609a      	str	r2, [r3, #8]
      break;
 800871e:	e04f      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	6899      	ldr	r1, [r3, #8]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f000 fc66 	bl	8009000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008742:	609a      	str	r2, [r3, #8]
      break;
 8008744:	e03c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	461a      	mov	r2, r3
 8008754:	f000 fbda 	bl	8008f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2150      	movs	r1, #80	; 0x50
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fc33 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008764:	e02c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6859      	ldr	r1, [r3, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	461a      	mov	r2, r3
 8008774:	f000 fbf9 	bl	8008f6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2160      	movs	r1, #96	; 0x60
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fc23 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008784:	e01c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6859      	ldr	r1, [r3, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	461a      	mov	r2, r3
 8008794:	f000 fbba 	bl	8008f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2140      	movs	r1, #64	; 0x40
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fc13 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 80087a4:	e00c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4619      	mov	r1, r3
 80087b0:	4610      	mov	r0, r2
 80087b2:	f000 fc0a 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 80087b6:	e003      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
      break;
 80087bc:	e000      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80087be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a3c      	ldr	r2, [pc, #240]	; (8008944 <TIM_Base_SetConfig+0x104>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00f      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	d00b      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a39      	ldr	r2, [pc, #228]	; (8008948 <TIM_Base_SetConfig+0x108>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d007      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a38      	ldr	r2, [pc, #224]	; (800894c <TIM_Base_SetConfig+0x10c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a37      	ldr	r2, [pc, #220]	; (8008950 <TIM_Base_SetConfig+0x110>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d108      	bne.n	800888a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2d      	ldr	r2, [pc, #180]	; (8008944 <TIM_Base_SetConfig+0x104>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01b      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d017      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2a      	ldr	r2, [pc, #168]	; (8008948 <TIM_Base_SetConfig+0x108>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a29      	ldr	r2, [pc, #164]	; (800894c <TIM_Base_SetConfig+0x10c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00f      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a28      	ldr	r2, [pc, #160]	; (8008950 <TIM_Base_SetConfig+0x110>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00b      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a27      	ldr	r2, [pc, #156]	; (8008954 <TIM_Base_SetConfig+0x114>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a26      	ldr	r2, [pc, #152]	; (8008958 <TIM_Base_SetConfig+0x118>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a25      	ldr	r2, [pc, #148]	; (800895c <TIM_Base_SetConfig+0x11c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d108      	bne.n	80088dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <TIM_Base_SetConfig+0x104>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00f      	beq.n	8008928 <TIM_Base_SetConfig+0xe8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a11      	ldr	r2, [pc, #68]	; (8008950 <TIM_Base_SetConfig+0x110>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_Base_SetConfig+0xe8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <TIM_Base_SetConfig+0x114>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d007      	beq.n	8008928 <TIM_Base_SetConfig+0xe8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a0f      	ldr	r2, [pc, #60]	; (8008958 <TIM_Base_SetConfig+0x118>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_Base_SetConfig+0xe8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a0e      	ldr	r2, [pc, #56]	; (800895c <TIM_Base_SetConfig+0x11c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d103      	bne.n	8008930 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	615a      	str	r2, [r3, #20]
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40000400 	.word	0x40000400
 800894c:	40000800 	.word	0x40000800
 8008950:	40013400 	.word	0x40013400
 8008954:	40014000 	.word	0x40014000
 8008958:	40014400 	.word	0x40014400
 800895c:	40014800 	.word	0x40014800

08008960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f023 0201 	bic.w	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f023 0302 	bic.w	r3, r3, #2
 80089ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a2c      	ldr	r2, [pc, #176]	; (8008a6c <TIM_OC1_SetConfig+0x10c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00f      	beq.n	80089e0 <TIM_OC1_SetConfig+0x80>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a2b      	ldr	r2, [pc, #172]	; (8008a70 <TIM_OC1_SetConfig+0x110>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00b      	beq.n	80089e0 <TIM_OC1_SetConfig+0x80>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <TIM_OC1_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d007      	beq.n	80089e0 <TIM_OC1_SetConfig+0x80>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a29      	ldr	r2, [pc, #164]	; (8008a78 <TIM_OC1_SetConfig+0x118>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_OC1_SetConfig+0x80>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <TIM_OC1_SetConfig+0x11c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d10c      	bne.n	80089fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f023 0308 	bic.w	r3, r3, #8
 80089e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 0304 	bic.w	r3, r3, #4
 80089f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <TIM_OC1_SetConfig+0x10c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00f      	beq.n	8008a22 <TIM_OC1_SetConfig+0xc2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a1a      	ldr	r2, [pc, #104]	; (8008a70 <TIM_OC1_SetConfig+0x110>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00b      	beq.n	8008a22 <TIM_OC1_SetConfig+0xc2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a19      	ldr	r2, [pc, #100]	; (8008a74 <TIM_OC1_SetConfig+0x114>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <TIM_OC1_SetConfig+0xc2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <TIM_OC1_SetConfig+0x118>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d003      	beq.n	8008a22 <TIM_OC1_SetConfig+0xc2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <TIM_OC1_SetConfig+0x11c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d111      	bne.n	8008a46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	621a      	str	r2, [r3, #32]
}
 8008a60:	bf00      	nop
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40013400 	.word	0x40013400
 8008a74:	40014000 	.word	0x40014000
 8008a78:	40014400 	.word	0x40014400
 8008a7c:	40014800 	.word	0x40014800

08008a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f023 0210 	bic.w	r2, r3, #16
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f023 0320 	bic.w	r3, r3, #32
 8008ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a28      	ldr	r2, [pc, #160]	; (8008b80 <TIM_OC2_SetConfig+0x100>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC2_SetConfig+0x6c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a27      	ldr	r2, [pc, #156]	; (8008b84 <TIM_OC2_SetConfig+0x104>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d10d      	bne.n	8008b08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <TIM_OC2_SetConfig+0x100>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00f      	beq.n	8008b30 <TIM_OC2_SetConfig+0xb0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a1c      	ldr	r2, [pc, #112]	; (8008b84 <TIM_OC2_SetConfig+0x104>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00b      	beq.n	8008b30 <TIM_OC2_SetConfig+0xb0>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <TIM_OC2_SetConfig+0x108>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d007      	beq.n	8008b30 <TIM_OC2_SetConfig+0xb0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a1a      	ldr	r2, [pc, #104]	; (8008b8c <TIM_OC2_SetConfig+0x10c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_OC2_SetConfig+0xb0>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a19      	ldr	r2, [pc, #100]	; (8008b90 <TIM_OC2_SetConfig+0x110>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d113      	bne.n	8008b58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b36:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b3e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800

08008b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a27      	ldr	r2, [pc, #156]	; (8008c90 <TIM_OC3_SetConfig+0xfc>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_OC3_SetConfig+0x6a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <TIM_OC3_SetConfig+0x100>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d10d      	bne.n	8008c1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a1c      	ldr	r2, [pc, #112]	; (8008c90 <TIM_OC3_SetConfig+0xfc>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00f      	beq.n	8008c42 <TIM_OC3_SetConfig+0xae>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a1b      	ldr	r2, [pc, #108]	; (8008c94 <TIM_OC3_SetConfig+0x100>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <TIM_OC3_SetConfig+0xae>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a1a      	ldr	r2, [pc, #104]	; (8008c98 <TIM_OC3_SetConfig+0x104>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <TIM_OC3_SetConfig+0xae>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a19      	ldr	r2, [pc, #100]	; (8008c9c <TIM_OC3_SetConfig+0x108>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_OC3_SetConfig+0xae>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <TIM_OC3_SetConfig+0x10c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d113      	bne.n	8008c6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	621a      	str	r2, [r3, #32]
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	40012c00 	.word	0x40012c00
 8008c94:	40013400 	.word	0x40013400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	40014400 	.word	0x40014400
 8008ca0:	40014800 	.word	0x40014800

08008ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	031b      	lsls	r3, r3, #12
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <TIM_OC4_SetConfig+0xc0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00f      	beq.n	8008d28 <TIM_OC4_SetConfig+0x84>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <TIM_OC4_SetConfig+0xc4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00b      	beq.n	8008d28 <TIM_OC4_SetConfig+0x84>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <TIM_OC4_SetConfig+0xc8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d007      	beq.n	8008d28 <TIM_OC4_SetConfig+0x84>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <TIM_OC4_SetConfig+0xcc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_OC4_SetConfig+0x84>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a14      	ldr	r2, [pc, #80]	; (8008d74 <TIM_OC4_SetConfig+0xd0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d109      	bne.n	8008d3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	019b      	lsls	r3, r3, #6
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40012c00 	.word	0x40012c00
 8008d68:	40013400 	.word	0x40013400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40014400 	.word	0x40014400
 8008d74:	40014800 	.word	0x40014800

08008d78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <TIM_OC5_SetConfig+0xb4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00f      	beq.n	8008df2 <TIM_OC5_SetConfig+0x7a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <TIM_OC5_SetConfig+0xb8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <TIM_OC5_SetConfig+0x7a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <TIM_OC5_SetConfig+0xbc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_OC5_SetConfig+0x7a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <TIM_OC5_SetConfig+0xc0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_OC5_SetConfig+0x7a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a13      	ldr	r2, [pc, #76]	; (8008e3c <TIM_OC5_SetConfig+0xc4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d109      	bne.n	8008e06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	621a      	str	r2, [r3, #32]
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40013400 	.word	0x40013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	40014400 	.word	0x40014400
 8008e3c:	40014800 	.word	0x40014800

08008e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	051b      	lsls	r3, r3, #20
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <TIM_OC6_SetConfig+0xb8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00f      	beq.n	8008ebc <TIM_OC6_SetConfig+0x7c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a17      	ldr	r2, [pc, #92]	; (8008efc <TIM_OC6_SetConfig+0xbc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00b      	beq.n	8008ebc <TIM_OC6_SetConfig+0x7c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a16      	ldr	r2, [pc, #88]	; (8008f00 <TIM_OC6_SetConfig+0xc0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d007      	beq.n	8008ebc <TIM_OC6_SetConfig+0x7c>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <TIM_OC6_SetConfig+0xc4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_OC6_SetConfig+0x7c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <TIM_OC6_SetConfig+0xc8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d109      	bne.n	8008ed0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40013400 	.word	0x40013400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f023 0201 	bic.w	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f023 030a 	bic.w	r3, r3, #10
 8008f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	621a      	str	r2, [r3, #32]
}
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0210 	bic.w	r2, r3, #16
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	031b      	lsls	r3, r3, #12
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f043 0307 	orr.w	r3, r3, #7
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	609a      	str	r2, [r3, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	431a      	orrs	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4313      	orrs	r3, r2
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	609a      	str	r2, [r3, #8]
}
 8009034:	bf00      	nop
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	2201      	movs	r2, #1
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	43db      	mvns	r3, r3
 8009062:	401a      	ands	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1a      	ldr	r2, [r3, #32]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	431a      	orrs	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e063      	b.n	800916c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a2b      	ldr	r2, [pc, #172]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d004      	beq.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a2a      	ldr	r2, [pc, #168]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d108      	bne.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1b      	ldr	r2, [pc, #108]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d018      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009116:	d013      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a18      	ldr	r2, [pc, #96]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00e      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d009      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a12      	ldr	r2, [pc, #72]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a13      	ldr	r2, [pc, #76]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d10c      	bne.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	4313      	orrs	r3, r2
 8009150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40013400 	.word	0x40013400
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40014000 	.word	0x40014000

0800918c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e040      	b.n	800925c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7f8 ff80 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2224      	movs	r2, #36	; 0x24
 80091f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0201 	bic.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fbbe 	bl	8009988 <UART_SetConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e022      	b.n	800925c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fd86 	bl	8009d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fe0d 	bl	8009e74 <UART_CheckIdleState>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009278:	2b20      	cmp	r3, #32
 800927a:	f040 8082 	bne.w	8009382 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_UART_Transmit+0x26>
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e07a      	b.n	8009384 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_UART_Transmit+0x38>
 8009298:	2302      	movs	r3, #2
 800929a:	e073      	b.n	8009384 <HAL_UART_Transmit+0x120>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2221      	movs	r2, #33	; 0x21
 80092b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092b2:	f7fa fecd 	bl	8004050 <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d0:	d108      	bne.n	80092e4 <HAL_UART_Transmit+0x80>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	e003      	b.n	80092ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80092f4:	e02d      	b.n	8009352 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2200      	movs	r2, #0
 80092fe:	2180      	movs	r1, #128	; 0x80
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fe00 	bl	8009f06 <UART_WaitOnFlagUntilTimeout>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e039      	b.n	8009384 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	881a      	ldrh	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009322:	b292      	uxth	r2, r2
 8009324:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	3302      	adds	r3, #2
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e008      	b.n	8009340 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	b292      	uxth	r2, r2
 8009338:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	3301      	adds	r3, #1
 800933e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1cb      	bne.n	80092f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2200      	movs	r2, #0
 8009366:	2140      	movs	r1, #64	; 0x40
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fdcc 	bl	8009f06 <UART_WaitOnFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e005      	b.n	8009384 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e000      	b.n	8009384 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009382:	2302      	movs	r3, #2
  }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b0ba      	sub	sp, #232	; 0xe8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80093b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80093ba:	4013      	ands	r3, r2
 80093bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80093c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d115      	bne.n	80093f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80093c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00f      	beq.n	80093f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 82a3 	beq.w	8009930 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
      }
      return;
 80093f2:	e29d      	b.n	8009930 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 8117 	beq.w	800962c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800940a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800940e:	4b85      	ldr	r3, [pc, #532]	; (8009624 <HAL_UART_IRQHandler+0x298>)
 8009410:	4013      	ands	r3, r2
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 810a 	beq.w	800962c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d011      	beq.n	8009448 <HAL_UART_IRQHandler+0xbc>
 8009424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943e:	f043 0201 	orr.w	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d011      	beq.n	8009478 <HAL_UART_IRQHandler+0xec>
 8009454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2202      	movs	r2, #2
 8009466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d011      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
 8009484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2204      	movs	r2, #4
 8009496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800949e:	f043 0202 	orr.w	r2, r3, #2
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d017      	beq.n	80094e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2208      	movs	r2, #8
 80094d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094da:	f043 0208 	orr.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d012      	beq.n	8009516 <HAL_UART_IRQHandler+0x18a>
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800950c:	f043 0220 	orr.w	r2, r3, #32
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8209 	beq.w	8009934 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800952e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009550:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d005      	beq.n	800956e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009566:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800956a:	2b00      	cmp	r3, #0
 800956c:	d04f      	beq.n	800960e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fd8d 	bl	800a08e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d141      	bne.n	8009606 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800959c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1d9      	bne.n	8009582 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d013      	beq.n	80095fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	4a13      	ldr	r2, [pc, #76]	; (8009628 <HAL_UART_IRQHandler+0x29c>)
 80095dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fc f8e4 	bl	80057b0 <HAL_DMA_Abort_IT>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d017      	beq.n	800961e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	e00f      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9ac 	bl	800995c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	e00b      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f9a8 	bl	800995c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960c:	e007      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f9a4 	bl	800995c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800961c:	e18a      	b.n	8009934 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961e:	bf00      	nop
    return;
 8009620:	e188      	b.n	8009934 <HAL_UART_IRQHandler+0x5a8>
 8009622:	bf00      	nop
 8009624:	04000120 	.word	0x04000120
 8009628:	0800a155 	.word	0x0800a155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009630:	2b01      	cmp	r3, #1
 8009632:	f040 8143 	bne.w	80098bc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 813c 	beq.w	80098bc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8135 	beq.w	80098bc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2210      	movs	r2, #16
 8009658:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009664:	2b40      	cmp	r3, #64	; 0x40
 8009666:	f040 80b1 	bne.w	80097cc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009676:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 815c 	beq.w	8009938 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800968a:	429a      	cmp	r2, r3
 800968c:	f080 8154 	bcs.w	8009938 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	f000 8085 	beq.w	80097b0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1da      	bne.n	80096a6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009714:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009718:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800971c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e1      	bne.n	80096f0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800973c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800973e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3308      	adds	r3, #8
 800974c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009750:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009752:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009756:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800975e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e3      	bne.n	800972c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800977e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009780:	f023 0310 	bic.w	r3, r3, #16
 8009784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009792:	65bb      	str	r3, [r7, #88]	; 0x58
 8009794:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e4      	bne.n	8009770 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fb ffc7 	bl	800573e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f8d3 	bl	8009970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ca:	e0b5      	b.n	8009938 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097d8:	b29b      	uxth	r3, r3
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80a7 	beq.w	800993c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80097ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 80a2 	beq.w	800993c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800980c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800981a:	647b      	str	r3, [r7, #68]	; 0x44
 800981c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e4      	bne.n	80097f8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	623b      	str	r3, [r7, #32]
   return(result);
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009852:	633a      	str	r2, [r7, #48]	; 0x30
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e3      	bne.n	800982e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	60fb      	str	r3, [r7, #12]
   return(result);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f023 0310 	bic.w	r3, r3, #16
 800988c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	69b9      	ldr	r1, [r7, #24]
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	617b      	str	r3, [r7, #20]
   return(result);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e4      	bne.n	8009878 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f85b 	bl	8009970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098ba:	e03f      	b.n	800993c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00e      	beq.n	80098e6 <HAL_UART_IRQHandler+0x55a>
 80098c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fc78 	bl	800a1d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098e4:	e02d      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00e      	beq.n	8009910 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01c      	beq.n	8009940 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
    }
    return;
 800990e:	e017      	b.n	8009940 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d012      	beq.n	8009942 <HAL_UART_IRQHandler+0x5b6>
 800991c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00c      	beq.n	8009942 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc29 	bl	800a180 <UART_EndTransmit_IT>
    return;
 800992e:	e008      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009930:	bf00      	nop
 8009932:	e006      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009934:	bf00      	nop
 8009936:	e004      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009938:	bf00      	nop
 800993a:	e002      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
      return;
 800993c:	bf00      	nop
 800993e:	e000      	b.n	8009942 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009940:	bf00      	nop
  }

}
 8009942:	37e8      	adds	r7, #232	; 0xe8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80099b6:	f023 030c 	bic.w	r3, r3, #12
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	6979      	ldr	r1, [r7, #20]
 80099c0:	430b      	orrs	r3, r1
 80099c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4aae      	ldr	r2, [pc, #696]	; (8009cbc <UART_SetConfig+0x334>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d120      	bne.n	8009a4a <UART_SetConfig+0xc2>
 8009a08:	4bad      	ldr	r3, [pc, #692]	; (8009cc0 <UART_SetConfig+0x338>)
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d817      	bhi.n	8009a44 <UART_SetConfig+0xbc>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <UART_SetConfig+0x94>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a2d 	.word	0x08009a2d
 8009a20:	08009a39 	.word	0x08009a39
 8009a24:	08009a3f 	.word	0x08009a3f
 8009a28:	08009a33 	.word	0x08009a33
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	77fb      	strb	r3, [r7, #31]
 8009a30:	e0b5      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a32:	2302      	movs	r3, #2
 8009a34:	77fb      	strb	r3, [r7, #31]
 8009a36:	e0b2      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e0af      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a3e:	2308      	movs	r3, #8
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e0ac      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a44:	2310      	movs	r3, #16
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e0a9      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a9d      	ldr	r2, [pc, #628]	; (8009cc4 <UART_SetConfig+0x33c>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d124      	bne.n	8009a9e <UART_SetConfig+0x116>
 8009a54:	4b9a      	ldr	r3, [pc, #616]	; (8009cc0 <UART_SetConfig+0x338>)
 8009a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a60:	d011      	beq.n	8009a86 <UART_SetConfig+0xfe>
 8009a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a66:	d817      	bhi.n	8009a98 <UART_SetConfig+0x110>
 8009a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a6c:	d011      	beq.n	8009a92 <UART_SetConfig+0x10a>
 8009a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a72:	d811      	bhi.n	8009a98 <UART_SetConfig+0x110>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <UART_SetConfig+0xf8>
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a7c:	d006      	beq.n	8009a8c <UART_SetConfig+0x104>
 8009a7e:	e00b      	b.n	8009a98 <UART_SetConfig+0x110>
 8009a80:	2300      	movs	r3, #0
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e08b      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a86:	2302      	movs	r3, #2
 8009a88:	77fb      	strb	r3, [r7, #31]
 8009a8a:	e088      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e085      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a92:	2308      	movs	r3, #8
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e082      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e07f      	b.n	8009b9e <UART_SetConfig+0x216>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a89      	ldr	r2, [pc, #548]	; (8009cc8 <UART_SetConfig+0x340>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d124      	bne.n	8009af2 <UART_SetConfig+0x16a>
 8009aa8:	4b85      	ldr	r3, [pc, #532]	; (8009cc0 <UART_SetConfig+0x338>)
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009ab0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009ab4:	d011      	beq.n	8009ada <UART_SetConfig+0x152>
 8009ab6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009aba:	d817      	bhi.n	8009aec <UART_SetConfig+0x164>
 8009abc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ac0:	d011      	beq.n	8009ae6 <UART_SetConfig+0x15e>
 8009ac2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ac6:	d811      	bhi.n	8009aec <UART_SetConfig+0x164>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <UART_SetConfig+0x14c>
 8009acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ad0:	d006      	beq.n	8009ae0 <UART_SetConfig+0x158>
 8009ad2:	e00b      	b.n	8009aec <UART_SetConfig+0x164>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	77fb      	strb	r3, [r7, #31]
 8009ad8:	e061      	b.n	8009b9e <UART_SetConfig+0x216>
 8009ada:	2302      	movs	r3, #2
 8009adc:	77fb      	strb	r3, [r7, #31]
 8009ade:	e05e      	b.n	8009b9e <UART_SetConfig+0x216>
 8009ae0:	2304      	movs	r3, #4
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e05b      	b.n	8009b9e <UART_SetConfig+0x216>
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e058      	b.n	8009b9e <UART_SetConfig+0x216>
 8009aec:	2310      	movs	r3, #16
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e055      	b.n	8009b9e <UART_SetConfig+0x216>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a75      	ldr	r2, [pc, #468]	; (8009ccc <UART_SetConfig+0x344>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d124      	bne.n	8009b46 <UART_SetConfig+0x1be>
 8009afc:	4b70      	ldr	r3, [pc, #448]	; (8009cc0 <UART_SetConfig+0x338>)
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b08:	d011      	beq.n	8009b2e <UART_SetConfig+0x1a6>
 8009b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b0e:	d817      	bhi.n	8009b40 <UART_SetConfig+0x1b8>
 8009b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b14:	d011      	beq.n	8009b3a <UART_SetConfig+0x1b2>
 8009b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b1a:	d811      	bhi.n	8009b40 <UART_SetConfig+0x1b8>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <UART_SetConfig+0x1a0>
 8009b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b24:	d006      	beq.n	8009b34 <UART_SetConfig+0x1ac>
 8009b26:	e00b      	b.n	8009b40 <UART_SetConfig+0x1b8>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e037      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e034      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b34:	2304      	movs	r3, #4
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e031      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b3a:	2308      	movs	r3, #8
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e02e      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b40:	2310      	movs	r3, #16
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e02b      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a61      	ldr	r2, [pc, #388]	; (8009cd0 <UART_SetConfig+0x348>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d124      	bne.n	8009b9a <UART_SetConfig+0x212>
 8009b50:	4b5b      	ldr	r3, [pc, #364]	; (8009cc0 <UART_SetConfig+0x338>)
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b5c:	d011      	beq.n	8009b82 <UART_SetConfig+0x1fa>
 8009b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b62:	d817      	bhi.n	8009b94 <UART_SetConfig+0x20c>
 8009b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b68:	d011      	beq.n	8009b8e <UART_SetConfig+0x206>
 8009b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b6e:	d811      	bhi.n	8009b94 <UART_SetConfig+0x20c>
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <UART_SetConfig+0x1f4>
 8009b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b78:	d006      	beq.n	8009b88 <UART_SetConfig+0x200>
 8009b7a:	e00b      	b.n	8009b94 <UART_SetConfig+0x20c>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e00d      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b82:	2302      	movs	r3, #2
 8009b84:	77fb      	strb	r3, [r7, #31]
 8009b86:	e00a      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	77fb      	strb	r3, [r7, #31]
 8009b8c:	e007      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b8e:	2308      	movs	r3, #8
 8009b90:	77fb      	strb	r3, [r7, #31]
 8009b92:	e004      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b94:	2310      	movs	r3, #16
 8009b96:	77fb      	strb	r3, [r7, #31]
 8009b98:	e001      	b.n	8009b9e <UART_SetConfig+0x216>
 8009b9a:	2310      	movs	r3, #16
 8009b9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba6:	d15c      	bne.n	8009c62 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009ba8:	7ffb      	ldrb	r3, [r7, #31]
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d827      	bhi.n	8009bfe <UART_SetConfig+0x276>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0x22c>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	08009bff 	.word	0x08009bff
 8009bc4:	08009bef 	.word	0x08009bef
 8009bc8:	08009bff 	.word	0x08009bff
 8009bcc:	08009bff 	.word	0x08009bff
 8009bd0:	08009bff 	.word	0x08009bff
 8009bd4:	08009bf7 	.word	0x08009bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd8:	f7fd fb0e 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 8009bdc:	61b8      	str	r0, [r7, #24]
        break;
 8009bde:	e013      	b.n	8009c08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be0:	f7fd fb2c 	bl	800723c <HAL_RCC_GetPCLK2Freq>
 8009be4:	61b8      	str	r0, [r7, #24]
        break;
 8009be6:	e00f      	b.n	8009c08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be8:	4b3a      	ldr	r3, [pc, #232]	; (8009cd4 <UART_SetConfig+0x34c>)
 8009bea:	61bb      	str	r3, [r7, #24]
        break;
 8009bec:	e00c      	b.n	8009c08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bee:	f7fd fa8d 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8009bf2:	61b8      	str	r0, [r7, #24]
        break;
 8009bf4:	e008      	b.n	8009c08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfa:	61bb      	str	r3, [r7, #24]
        break;
 8009bfc:	e004      	b.n	8009c08 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	77bb      	strb	r3, [r7, #30]
        break;
 8009c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8085 	beq.w	8009d1a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	005a      	lsls	r2, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	085b      	lsrs	r3, r3, #1
 8009c1a:	441a      	add	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b0f      	cmp	r3, #15
 8009c2c:	d916      	bls.n	8009c5c <UART_SetConfig+0x2d4>
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c34:	d212      	bcs.n	8009c5c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f023 030f 	bic.w	r3, r3, #15
 8009c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	89fb      	ldrh	r3, [r7, #14]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	89fa      	ldrh	r2, [r7, #14]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	e05e      	b.n	8009d1a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	77bb      	strb	r3, [r7, #30]
 8009c60:	e05b      	b.n	8009d1a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c62:	7ffb      	ldrb	r3, [r7, #31]
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d837      	bhi.n	8009cd8 <UART_SetConfig+0x350>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <UART_SetConfig+0x2e8>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c9d 	.word	0x08009c9d
 8009c78:	08009ca5 	.word	0x08009ca5
 8009c7c:	08009cd9 	.word	0x08009cd9
 8009c80:	08009cab 	.word	0x08009cab
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009cd9 	.word	0x08009cd9
 8009c8c:	08009cd9 	.word	0x08009cd9
 8009c90:	08009cb3 	.word	0x08009cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c94:	f7fd fab0 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 8009c98:	61b8      	str	r0, [r7, #24]
        break;
 8009c9a:	e022      	b.n	8009ce2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c9c:	f7fd face 	bl	800723c <HAL_RCC_GetPCLK2Freq>
 8009ca0:	61b8      	str	r0, [r7, #24]
        break;
 8009ca2:	e01e      	b.n	8009ce2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <UART_SetConfig+0x34c>)
 8009ca6:	61bb      	str	r3, [r7, #24]
        break;
 8009ca8:	e01b      	b.n	8009ce2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009caa:	f7fd fa2f 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8009cae:	61b8      	str	r0, [r7, #24]
        break;
 8009cb0:	e017      	b.n	8009ce2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb6:	61bb      	str	r3, [r7, #24]
        break;
 8009cb8:	e013      	b.n	8009ce2 <UART_SetConfig+0x35a>
 8009cba:	bf00      	nop
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	40021000 	.word	0x40021000
 8009cc4:	40004400 	.word	0x40004400
 8009cc8:	40004800 	.word	0x40004800
 8009ccc:	40004c00 	.word	0x40004c00
 8009cd0:	40005000 	.word	0x40005000
 8009cd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	77bb      	strb	r3, [r7, #30]
        break;
 8009ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d018      	beq.n	8009d1a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	085a      	lsrs	r2, r3, #1
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b0f      	cmp	r3, #15
 8009d02:	d908      	bls.n	8009d16 <UART_SetConfig+0x38e>
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d0a:	d204      	bcs.n	8009d16 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	60da      	str	r2, [r3, #12]
 8009d14:	e001      	b.n	8009d1a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d26:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00a      	beq.n	8009d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e2e:	d10a      	bne.n	8009e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e84:	f7fa f8e4 	bl	8004050 <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0308 	and.w	r3, r3, #8
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d10e      	bne.n	8009eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f82d 	bl	8009f06 <UART_WaitOnFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e023      	b.n	8009efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b04      	cmp	r3, #4
 8009ec2:	d10e      	bne.n	8009ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f817 	bl	8009f06 <UART_WaitOnFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e00d      	b.n	8009efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b09c      	sub	sp, #112	; 0x70
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	4613      	mov	r3, r2
 8009f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f16:	e0a5      	b.n	800a064 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	f000 80a1 	beq.w	800a064 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f22:	f7fa f895 	bl	8004050 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d302      	bcc.n	8009f38 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d13e      	bne.n	8009fb6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e6      	bne.n	8009f38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	f023 0301 	bic.w	r3, r3, #1
 8009f80:	663b      	str	r3, [r7, #96]	; 0x60
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e5      	bne.n	8009f6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e067      	b.n	800a086 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d04f      	beq.n	800a064 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd2:	d147      	bne.n	800a064 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ffe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e6      	bne.n	8009fde <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	613b      	str	r3, [r7, #16]
   return(result);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	66bb      	str	r3, [r7, #104]	; 0x68
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a030:	623a      	str	r2, [r7, #32]
 800a032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e5      	bne.n	800a010 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2220      	movs	r2, #32
 800a048:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2220      	movs	r2, #32
 800a04e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2220      	movs	r2, #32
 800a054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e010      	b.n	800a086 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69da      	ldr	r2, [r3, #28]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4013      	ands	r3, r2
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	bf0c      	ite	eq
 800a074:	2301      	moveq	r3, #1
 800a076:	2300      	movne	r3, #0
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	429a      	cmp	r2, r3
 800a080:	f43f af4a 	beq.w	8009f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3770      	adds	r7, #112	; 0x70
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a08e:	b480      	push	{r7}
 800a090:	b095      	sub	sp, #84	; 0x54
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09e:	e853 3f00 	ldrex	r3, [r3]
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e6      	bne.n	800a096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	f023 0301 	bic.w	r3, r3, #1
 800a0de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e5      	bne.n	800a0c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	2b01      	cmp	r3, #1
 800a102:	d118      	bne.n	800a136 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	60bb      	str	r3, [r7, #8]
   return(result);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	647b      	str	r3, [r7, #68]	; 0x44
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a122:	61bb      	str	r3, [r7, #24]
 800a124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	613b      	str	r3, [r7, #16]
   return(result);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e6      	bne.n	800a104 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a148:	bf00      	nop
 800a14a:	3754      	adds	r7, #84	; 0x54
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff fbf2 	bl	800995c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	60bb      	str	r3, [r7, #8]
   return(result);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	61bb      	str	r3, [r7, #24]
 800a1a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6979      	ldr	r1, [r7, #20]
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e6      	bne.n	800a188 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff fbbe 	bl	8009948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1cc:	bf00      	nop
 800a1ce:	3720      	adds	r7, #32
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a1f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	b29b      	uxth	r3, r3
 800a202:	43db      	mvns	r3, r3
 800a204:	b29b      	uxth	r3, r3
 800a206:	4013      	ands	r3, r2
 800a208:	b29a      	uxth	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a21e:	b084      	sub	sp, #16
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	f107 0014 	add.w	r0, r7, #20
 800a22c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	b004      	add	sp, #16
 800a25e:	4770      	bx	lr

0800a260 <__errno>:
 800a260:	4b01      	ldr	r3, [pc, #4]	; (800a268 <__errno+0x8>)
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000060 	.word	0x20000060

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4d0d      	ldr	r5, [pc, #52]	; (800a2a4 <__libc_init_array+0x38>)
 800a270:	4c0d      	ldr	r4, [pc, #52]	; (800a2a8 <__libc_init_array+0x3c>)
 800a272:	1b64      	subs	r4, r4, r5
 800a274:	10a4      	asrs	r4, r4, #2
 800a276:	2600      	movs	r6, #0
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	4d0b      	ldr	r5, [pc, #44]	; (800a2ac <__libc_init_array+0x40>)
 800a27e:	4c0c      	ldr	r4, [pc, #48]	; (800a2b0 <__libc_init_array+0x44>)
 800a280:	f001 fb3e 	bl	800b900 <_init>
 800a284:	1b64      	subs	r4, r4, r5
 800a286:	10a4      	asrs	r4, r4, #2
 800a288:	2600      	movs	r6, #0
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800bc34 	.word	0x0800bc34
 800a2a8:	0800bc34 	.word	0x0800bc34
 800a2ac:	0800bc34 	.word	0x0800bc34
 800a2b0:	0800bc38 	.word	0x0800bc38

0800a2b4 <memset>:
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <memset+0xa>
 800a2bc:	4770      	bx	lr
 800a2be:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c2:	e7f9      	b.n	800a2b8 <memset+0x4>

0800a2c4 <srand>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4b10      	ldr	r3, [pc, #64]	; (800a308 <srand+0x44>)
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	b9b3      	cbnz	r3, 800a2fe <srand+0x3a>
 800a2d0:	2018      	movs	r0, #24
 800a2d2:	f000 f8e1 	bl	800a498 <malloc>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	63a8      	str	r0, [r5, #56]	; 0x38
 800a2da:	b920      	cbnz	r0, 800a2e6 <srand+0x22>
 800a2dc:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <srand+0x48>)
 800a2de:	480c      	ldr	r0, [pc, #48]	; (800a310 <srand+0x4c>)
 800a2e0:	2142      	movs	r1, #66	; 0x42
 800a2e2:	f000 f897 	bl	800a414 <__assert_func>
 800a2e6:	490b      	ldr	r1, [pc, #44]	; (800a314 <srand+0x50>)
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <srand+0x54>)
 800a2ea:	e9c0 1300 	strd	r1, r3, [r0]
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <srand+0x58>)
 800a2f0:	6083      	str	r3, [r0, #8]
 800a2f2:	230b      	movs	r3, #11
 800a2f4:	8183      	strh	r3, [r0, #12]
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a2fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a300:	2200      	movs	r2, #0
 800a302:	611c      	str	r4, [r3, #16]
 800a304:	615a      	str	r2, [r3, #20]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000060 	.word	0x20000060
 800a30c:	0800baec 	.word	0x0800baec
 800a310:	0800bb03 	.word	0x0800bb03
 800a314:	abcd330e 	.word	0xabcd330e
 800a318:	e66d1234 	.word	0xe66d1234
 800a31c:	0005deec 	.word	0x0005deec

0800a320 <rand>:
 800a320:	4b17      	ldr	r3, [pc, #92]	; (800a380 <rand+0x60>)
 800a322:	b510      	push	{r4, lr}
 800a324:	681c      	ldr	r4, [r3, #0]
 800a326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a328:	b9b3      	cbnz	r3, 800a358 <rand+0x38>
 800a32a:	2018      	movs	r0, #24
 800a32c:	f000 f8b4 	bl	800a498 <malloc>
 800a330:	63a0      	str	r0, [r4, #56]	; 0x38
 800a332:	b928      	cbnz	r0, 800a340 <rand+0x20>
 800a334:	4602      	mov	r2, r0
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <rand+0x64>)
 800a338:	4813      	ldr	r0, [pc, #76]	; (800a388 <rand+0x68>)
 800a33a:	214e      	movs	r1, #78	; 0x4e
 800a33c:	f000 f86a 	bl	800a414 <__assert_func>
 800a340:	4a12      	ldr	r2, [pc, #72]	; (800a38c <rand+0x6c>)
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <rand+0x70>)
 800a344:	e9c0 2300 	strd	r2, r3, [r0]
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <rand+0x74>)
 800a34a:	6083      	str	r3, [r0, #8]
 800a34c:	230b      	movs	r3, #11
 800a34e:	8183      	strh	r3, [r0, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	2300      	movs	r3, #0
 800a354:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a358:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a35a:	480f      	ldr	r0, [pc, #60]	; (800a398 <rand+0x78>)
 800a35c:	690a      	ldr	r2, [r1, #16]
 800a35e:	694b      	ldr	r3, [r1, #20]
 800a360:	4c0e      	ldr	r4, [pc, #56]	; (800a39c <rand+0x7c>)
 800a362:	4350      	muls	r0, r2
 800a364:	fb04 0003 	mla	r0, r4, r3, r0
 800a368:	fba2 3404 	umull	r3, r4, r2, r4
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	4404      	add	r4, r0
 800a370:	f144 0000 	adc.w	r0, r4, #0
 800a374:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a378:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a37c:	bd10      	pop	{r4, pc}
 800a37e:	bf00      	nop
 800a380:	20000060 	.word	0x20000060
 800a384:	0800baec 	.word	0x0800baec
 800a388:	0800bb03 	.word	0x0800bb03
 800a38c:	abcd330e 	.word	0xabcd330e
 800a390:	e66d1234 	.word	0xe66d1234
 800a394:	0005deec 	.word	0x0005deec
 800a398:	5851f42d 	.word	0x5851f42d
 800a39c:	4c957f2d 	.word	0x4c957f2d

0800a3a0 <siprintf>:
 800a3a0:	b40e      	push	{r1, r2, r3}
 800a3a2:	b500      	push	{lr}
 800a3a4:	b09c      	sub	sp, #112	; 0x70
 800a3a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a3a8:	9002      	str	r0, [sp, #8]
 800a3aa:	9006      	str	r0, [sp, #24]
 800a3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b0:	4809      	ldr	r0, [pc, #36]	; (800a3d8 <siprintf+0x38>)
 800a3b2:	9107      	str	r1, [sp, #28]
 800a3b4:	9104      	str	r1, [sp, #16]
 800a3b6:	4909      	ldr	r1, [pc, #36]	; (800a3dc <siprintf+0x3c>)
 800a3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3bc:	9105      	str	r1, [sp, #20]
 800a3be:	6800      	ldr	r0, [r0, #0]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	a902      	add	r1, sp, #8
 800a3c4:	f000 f976 	bl	800a6b4 <_svfiprintf_r>
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	b01c      	add	sp, #112	; 0x70
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4770      	bx	lr
 800a3d8:	20000060 	.word	0x20000060
 800a3dc:	ffff0208 	.word	0xffff0208

0800a3e0 <time>:
 800a3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3e2:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <time+0x30>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4669      	mov	r1, sp
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	f000 f842 	bl	800a474 <_gettimeofday_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	bfbe      	ittt	lt
 800a3f4:	f04f 32ff 	movlt.w	r2, #4294967295
 800a3f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3fc:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a404:	b10c      	cbz	r4, 800a40a <time+0x2a>
 800a406:	e9c4 0100 	strd	r0, r1, [r4]
 800a40a:	b004      	add	sp, #16
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	bf00      	nop
 800a410:	20000060 	.word	0x20000060

0800a414 <__assert_func>:
 800a414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a416:	4614      	mov	r4, r2
 800a418:	461a      	mov	r2, r3
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <__assert_func+0x2c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4605      	mov	r5, r0
 800a420:	68d8      	ldr	r0, [r3, #12]
 800a422:	b14c      	cbz	r4, 800a438 <__assert_func+0x24>
 800a424:	4b07      	ldr	r3, [pc, #28]	; (800a444 <__assert_func+0x30>)
 800a426:	9100      	str	r1, [sp, #0]
 800a428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a42c:	4906      	ldr	r1, [pc, #24]	; (800a448 <__assert_func+0x34>)
 800a42e:	462b      	mov	r3, r5
 800a430:	f000 f80e 	bl	800a450 <fiprintf>
 800a434:	f000 fdfc 	bl	800b030 <abort>
 800a438:	4b04      	ldr	r3, [pc, #16]	; (800a44c <__assert_func+0x38>)
 800a43a:	461c      	mov	r4, r3
 800a43c:	e7f3      	b.n	800a426 <__assert_func+0x12>
 800a43e:	bf00      	nop
 800a440:	20000060 	.word	0x20000060
 800a444:	0800bb62 	.word	0x0800bb62
 800a448:	0800bb6f 	.word	0x0800bb6f
 800a44c:	0800bb9d 	.word	0x0800bb9d

0800a450 <fiprintf>:
 800a450:	b40e      	push	{r1, r2, r3}
 800a452:	b503      	push	{r0, r1, lr}
 800a454:	4601      	mov	r1, r0
 800a456:	ab03      	add	r3, sp, #12
 800a458:	4805      	ldr	r0, [pc, #20]	; (800a470 <fiprintf+0x20>)
 800a45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45e:	6800      	ldr	r0, [r0, #0]
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f000 fa51 	bl	800a908 <_vfiprintf_r>
 800a466:	b002      	add	sp, #8
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b003      	add	sp, #12
 800a46e:	4770      	bx	lr
 800a470:	20000060 	.word	0x20000060

0800a474 <_gettimeofday_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d07      	ldr	r5, [pc, #28]	; (800a494 <_gettimeofday_r+0x20>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	4611      	mov	r1, r2
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	f001 fa35 	bl	800b8f0 <_gettimeofday>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d102      	bne.n	800a490 <_gettimeofday_r+0x1c>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	b103      	cbz	r3, 800a490 <_gettimeofday_r+0x1c>
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	bd38      	pop	{r3, r4, r5, pc}
 800a492:	bf00      	nop
 800a494:	20000980 	.word	0x20000980

0800a498 <malloc>:
 800a498:	4b02      	ldr	r3, [pc, #8]	; (800a4a4 <malloc+0xc>)
 800a49a:	4601      	mov	r1, r0
 800a49c:	6818      	ldr	r0, [r3, #0]
 800a49e:	f000 b853 	b.w	800a548 <_malloc_r>
 800a4a2:	bf00      	nop
 800a4a4:	20000060 	.word	0x20000060

0800a4a8 <_free_r>:
 800a4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4aa:	2900      	cmp	r1, #0
 800a4ac:	d048      	beq.n	800a540 <_free_r+0x98>
 800a4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b2:	9001      	str	r0, [sp, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ba:	bfb8      	it	lt
 800a4bc:	18e4      	addlt	r4, r4, r3
 800a4be:	f001 f805 	bl	800b4cc <__malloc_lock>
 800a4c2:	4a20      	ldr	r2, [pc, #128]	; (800a544 <_free_r+0x9c>)
 800a4c4:	9801      	ldr	r0, [sp, #4]
 800a4c6:	6813      	ldr	r3, [r2, #0]
 800a4c8:	4615      	mov	r5, r2
 800a4ca:	b933      	cbnz	r3, 800a4da <_free_r+0x32>
 800a4cc:	6063      	str	r3, [r4, #4]
 800a4ce:	6014      	str	r4, [r2, #0]
 800a4d0:	b003      	add	sp, #12
 800a4d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d6:	f000 bfff 	b.w	800b4d8 <__malloc_unlock>
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	d90b      	bls.n	800a4f6 <_free_r+0x4e>
 800a4de:	6821      	ldr	r1, [r4, #0]
 800a4e0:	1862      	adds	r2, r4, r1
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	bf04      	itt	eq
 800a4e6:	681a      	ldreq	r2, [r3, #0]
 800a4e8:	685b      	ldreq	r3, [r3, #4]
 800a4ea:	6063      	str	r3, [r4, #4]
 800a4ec:	bf04      	itt	eq
 800a4ee:	1852      	addeq	r2, r2, r1
 800a4f0:	6022      	streq	r2, [r4, #0]
 800a4f2:	602c      	str	r4, [r5, #0]
 800a4f4:	e7ec      	b.n	800a4d0 <_free_r+0x28>
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	b10b      	cbz	r3, 800a500 <_free_r+0x58>
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	d9fa      	bls.n	800a4f6 <_free_r+0x4e>
 800a500:	6811      	ldr	r1, [r2, #0]
 800a502:	1855      	adds	r5, r2, r1
 800a504:	42a5      	cmp	r5, r4
 800a506:	d10b      	bne.n	800a520 <_free_r+0x78>
 800a508:	6824      	ldr	r4, [r4, #0]
 800a50a:	4421      	add	r1, r4
 800a50c:	1854      	adds	r4, r2, r1
 800a50e:	42a3      	cmp	r3, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	d1dd      	bne.n	800a4d0 <_free_r+0x28>
 800a514:	681c      	ldr	r4, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	6053      	str	r3, [r2, #4]
 800a51a:	4421      	add	r1, r4
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	e7d7      	b.n	800a4d0 <_free_r+0x28>
 800a520:	d902      	bls.n	800a528 <_free_r+0x80>
 800a522:	230c      	movs	r3, #12
 800a524:	6003      	str	r3, [r0, #0]
 800a526:	e7d3      	b.n	800a4d0 <_free_r+0x28>
 800a528:	6825      	ldr	r5, [r4, #0]
 800a52a:	1961      	adds	r1, r4, r5
 800a52c:	428b      	cmp	r3, r1
 800a52e:	bf04      	itt	eq
 800a530:	6819      	ldreq	r1, [r3, #0]
 800a532:	685b      	ldreq	r3, [r3, #4]
 800a534:	6063      	str	r3, [r4, #4]
 800a536:	bf04      	itt	eq
 800a538:	1949      	addeq	r1, r1, r5
 800a53a:	6021      	streq	r1, [r4, #0]
 800a53c:	6054      	str	r4, [r2, #4]
 800a53e:	e7c7      	b.n	800a4d0 <_free_r+0x28>
 800a540:	b003      	add	sp, #12
 800a542:	bd30      	pop	{r4, r5, pc}
 800a544:	200000f0 	.word	0x200000f0

0800a548 <_malloc_r>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	1ccd      	adds	r5, r1, #3
 800a54c:	f025 0503 	bic.w	r5, r5, #3
 800a550:	3508      	adds	r5, #8
 800a552:	2d0c      	cmp	r5, #12
 800a554:	bf38      	it	cc
 800a556:	250c      	movcc	r5, #12
 800a558:	2d00      	cmp	r5, #0
 800a55a:	4606      	mov	r6, r0
 800a55c:	db01      	blt.n	800a562 <_malloc_r+0x1a>
 800a55e:	42a9      	cmp	r1, r5
 800a560:	d903      	bls.n	800a56a <_malloc_r+0x22>
 800a562:	230c      	movs	r3, #12
 800a564:	6033      	str	r3, [r6, #0]
 800a566:	2000      	movs	r0, #0
 800a568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56a:	f000 ffaf 	bl	800b4cc <__malloc_lock>
 800a56e:	4921      	ldr	r1, [pc, #132]	; (800a5f4 <_malloc_r+0xac>)
 800a570:	680a      	ldr	r2, [r1, #0]
 800a572:	4614      	mov	r4, r2
 800a574:	b99c      	cbnz	r4, 800a59e <_malloc_r+0x56>
 800a576:	4f20      	ldr	r7, [pc, #128]	; (800a5f8 <_malloc_r+0xb0>)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	b923      	cbnz	r3, 800a586 <_malloc_r+0x3e>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4630      	mov	r0, r6
 800a580:	f000 fc86 	bl	800ae90 <_sbrk_r>
 800a584:	6038      	str	r0, [r7, #0]
 800a586:	4629      	mov	r1, r5
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 fc81 	bl	800ae90 <_sbrk_r>
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	d123      	bne.n	800a5da <_malloc_r+0x92>
 800a592:	230c      	movs	r3, #12
 800a594:	6033      	str	r3, [r6, #0]
 800a596:	4630      	mov	r0, r6
 800a598:	f000 ff9e 	bl	800b4d8 <__malloc_unlock>
 800a59c:	e7e3      	b.n	800a566 <_malloc_r+0x1e>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	1b5b      	subs	r3, r3, r5
 800a5a2:	d417      	bmi.n	800a5d4 <_malloc_r+0x8c>
 800a5a4:	2b0b      	cmp	r3, #11
 800a5a6:	d903      	bls.n	800a5b0 <_malloc_r+0x68>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	441c      	add	r4, r3
 800a5ac:	6025      	str	r5, [r4, #0]
 800a5ae:	e004      	b.n	800a5ba <_malloc_r+0x72>
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	42a2      	cmp	r2, r4
 800a5b4:	bf0c      	ite	eq
 800a5b6:	600b      	streq	r3, [r1, #0]
 800a5b8:	6053      	strne	r3, [r2, #4]
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f000 ff8c 	bl	800b4d8 <__malloc_unlock>
 800a5c0:	f104 000b 	add.w	r0, r4, #11
 800a5c4:	1d23      	adds	r3, r4, #4
 800a5c6:	f020 0007 	bic.w	r0, r0, #7
 800a5ca:	1ac2      	subs	r2, r0, r3
 800a5cc:	d0cc      	beq.n	800a568 <_malloc_r+0x20>
 800a5ce:	1a1b      	subs	r3, r3, r0
 800a5d0:	50a3      	str	r3, [r4, r2]
 800a5d2:	e7c9      	b.n	800a568 <_malloc_r+0x20>
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	6864      	ldr	r4, [r4, #4]
 800a5d8:	e7cc      	b.n	800a574 <_malloc_r+0x2c>
 800a5da:	1cc4      	adds	r4, r0, #3
 800a5dc:	f024 0403 	bic.w	r4, r4, #3
 800a5e0:	42a0      	cmp	r0, r4
 800a5e2:	d0e3      	beq.n	800a5ac <_malloc_r+0x64>
 800a5e4:	1a21      	subs	r1, r4, r0
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 fc52 	bl	800ae90 <_sbrk_r>
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d1dd      	bne.n	800a5ac <_malloc_r+0x64>
 800a5f0:	e7cf      	b.n	800a592 <_malloc_r+0x4a>
 800a5f2:	bf00      	nop
 800a5f4:	200000f0 	.word	0x200000f0
 800a5f8:	200000f4 	.word	0x200000f4

0800a5fc <__ssputs_r>:
 800a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	688e      	ldr	r6, [r1, #8]
 800a602:	429e      	cmp	r6, r3
 800a604:	4682      	mov	sl, r0
 800a606:	460c      	mov	r4, r1
 800a608:	4690      	mov	r8, r2
 800a60a:	461f      	mov	r7, r3
 800a60c:	d838      	bhi.n	800a680 <__ssputs_r+0x84>
 800a60e:	898a      	ldrh	r2, [r1, #12]
 800a610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a614:	d032      	beq.n	800a67c <__ssputs_r+0x80>
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	6909      	ldr	r1, [r1, #16]
 800a61a:	eba5 0901 	sub.w	r9, r5, r1
 800a61e:	6965      	ldr	r5, [r4, #20]
 800a620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a628:	3301      	adds	r3, #1
 800a62a:	444b      	add	r3, r9
 800a62c:	106d      	asrs	r5, r5, #1
 800a62e:	429d      	cmp	r5, r3
 800a630:	bf38      	it	cc
 800a632:	461d      	movcc	r5, r3
 800a634:	0553      	lsls	r3, r2, #21
 800a636:	d531      	bpl.n	800a69c <__ssputs_r+0xa0>
 800a638:	4629      	mov	r1, r5
 800a63a:	f7ff ff85 	bl	800a548 <_malloc_r>
 800a63e:	4606      	mov	r6, r0
 800a640:	b950      	cbnz	r0, 800a658 <__ssputs_r+0x5c>
 800a642:	230c      	movs	r3, #12
 800a644:	f8ca 3000 	str.w	r3, [sl]
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	6921      	ldr	r1, [r4, #16]
 800a65a:	464a      	mov	r2, r9
 800a65c:	f000 ff0e 	bl	800b47c <memcpy>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	6126      	str	r6, [r4, #16]
 800a66e:	6165      	str	r5, [r4, #20]
 800a670:	444e      	add	r6, r9
 800a672:	eba5 0509 	sub.w	r5, r5, r9
 800a676:	6026      	str	r6, [r4, #0]
 800a678:	60a5      	str	r5, [r4, #8]
 800a67a:	463e      	mov	r6, r7
 800a67c:	42be      	cmp	r6, r7
 800a67e:	d900      	bls.n	800a682 <__ssputs_r+0x86>
 800a680:	463e      	mov	r6, r7
 800a682:	4632      	mov	r2, r6
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	4641      	mov	r1, r8
 800a688:	f000 ff06 	bl	800b498 <memmove>
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	1b9b      	subs	r3, r3, r6
 800a692:	4432      	add	r2, r6
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	2000      	movs	r0, #0
 800a69a:	e7db      	b.n	800a654 <__ssputs_r+0x58>
 800a69c:	462a      	mov	r2, r5
 800a69e:	f000 ff21 	bl	800b4e4 <_realloc_r>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1e1      	bne.n	800a66c <__ssputs_r+0x70>
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	f7ff fefc 	bl	800a4a8 <_free_r>
 800a6b0:	e7c7      	b.n	800a642 <__ssputs_r+0x46>
	...

0800a6b4 <_svfiprintf_r>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4698      	mov	r8, r3
 800a6ba:	898b      	ldrh	r3, [r1, #12]
 800a6bc:	061b      	lsls	r3, r3, #24
 800a6be:	b09d      	sub	sp, #116	; 0x74
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	d50e      	bpl.n	800a6e6 <_svfiprintf_r+0x32>
 800a6c8:	690b      	ldr	r3, [r1, #16]
 800a6ca:	b963      	cbnz	r3, 800a6e6 <_svfiprintf_r+0x32>
 800a6cc:	2140      	movs	r1, #64	; 0x40
 800a6ce:	f7ff ff3b 	bl	800a548 <_malloc_r>
 800a6d2:	6028      	str	r0, [r5, #0]
 800a6d4:	6128      	str	r0, [r5, #16]
 800a6d6:	b920      	cbnz	r0, 800a6e2 <_svfiprintf_r+0x2e>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	e0d1      	b.n	800a886 <_svfiprintf_r+0x1d2>
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	616b      	str	r3, [r5, #20]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	2320      	movs	r3, #32
 800a6ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f4:	2330      	movs	r3, #48	; 0x30
 800a6f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8a0 <_svfiprintf_r+0x1ec>
 800a6fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6fe:	f04f 0901 	mov.w	r9, #1
 800a702:	4623      	mov	r3, r4
 800a704:	469a      	mov	sl, r3
 800a706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70a:	b10a      	cbz	r2, 800a710 <_svfiprintf_r+0x5c>
 800a70c:	2a25      	cmp	r2, #37	; 0x25
 800a70e:	d1f9      	bne.n	800a704 <_svfiprintf_r+0x50>
 800a710:	ebba 0b04 	subs.w	fp, sl, r4
 800a714:	d00b      	beq.n	800a72e <_svfiprintf_r+0x7a>
 800a716:	465b      	mov	r3, fp
 800a718:	4622      	mov	r2, r4
 800a71a:	4629      	mov	r1, r5
 800a71c:	4638      	mov	r0, r7
 800a71e:	f7ff ff6d 	bl	800a5fc <__ssputs_r>
 800a722:	3001      	adds	r0, #1
 800a724:	f000 80aa 	beq.w	800a87c <_svfiprintf_r+0x1c8>
 800a728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72a:	445a      	add	r2, fp
 800a72c:	9209      	str	r2, [sp, #36]	; 0x24
 800a72e:	f89a 3000 	ldrb.w	r3, [sl]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 80a2 	beq.w	800a87c <_svfiprintf_r+0x1c8>
 800a738:	2300      	movs	r3, #0
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295
 800a73e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a742:	f10a 0a01 	add.w	sl, sl, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	9307      	str	r3, [sp, #28]
 800a74a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a74e:	931a      	str	r3, [sp, #104]	; 0x68
 800a750:	4654      	mov	r4, sl
 800a752:	2205      	movs	r2, #5
 800a754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a758:	4851      	ldr	r0, [pc, #324]	; (800a8a0 <_svfiprintf_r+0x1ec>)
 800a75a:	f7f5 fd41 	bl	80001e0 <memchr>
 800a75e:	9a04      	ldr	r2, [sp, #16]
 800a760:	b9d8      	cbnz	r0, 800a79a <_svfiprintf_r+0xe6>
 800a762:	06d0      	lsls	r0, r2, #27
 800a764:	bf44      	itt	mi
 800a766:	2320      	movmi	r3, #32
 800a768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76c:	0711      	lsls	r1, r2, #28
 800a76e:	bf44      	itt	mi
 800a770:	232b      	movmi	r3, #43	; 0x2b
 800a772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a776:	f89a 3000 	ldrb.w	r3, [sl]
 800a77a:	2b2a      	cmp	r3, #42	; 0x2a
 800a77c:	d015      	beq.n	800a7aa <_svfiprintf_r+0xf6>
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	4654      	mov	r4, sl
 800a782:	2000      	movs	r0, #0
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	4621      	mov	r1, r4
 800a78a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a78e:	3b30      	subs	r3, #48	; 0x30
 800a790:	2b09      	cmp	r3, #9
 800a792:	d94e      	bls.n	800a832 <_svfiprintf_r+0x17e>
 800a794:	b1b0      	cbz	r0, 800a7c4 <_svfiprintf_r+0x110>
 800a796:	9207      	str	r2, [sp, #28]
 800a798:	e014      	b.n	800a7c4 <_svfiprintf_r+0x110>
 800a79a:	eba0 0308 	sub.w	r3, r0, r8
 800a79e:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	46a2      	mov	sl, r4
 800a7a8:	e7d2      	b.n	800a750 <_svfiprintf_r+0x9c>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	1d19      	adds	r1, r3, #4
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	9103      	str	r1, [sp, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bfbb      	ittet	lt
 800a7b6:	425b      	neglt	r3, r3
 800a7b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7bc:	9307      	strge	r3, [sp, #28]
 800a7be:	9307      	strlt	r3, [sp, #28]
 800a7c0:	bfb8      	it	lt
 800a7c2:	9204      	strlt	r2, [sp, #16]
 800a7c4:	7823      	ldrb	r3, [r4, #0]
 800a7c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c8:	d10c      	bne.n	800a7e4 <_svfiprintf_r+0x130>
 800a7ca:	7863      	ldrb	r3, [r4, #1]
 800a7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ce:	d135      	bne.n	800a83c <_svfiprintf_r+0x188>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9203      	str	r2, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfb8      	it	lt
 800a7dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e0:	3402      	adds	r4, #2
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8b0 <_svfiprintf_r+0x1fc>
 800a7e8:	7821      	ldrb	r1, [r4, #0]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	f7f5 fcf7 	bl	80001e0 <memchr>
 800a7f2:	b140      	cbz	r0, 800a806 <_svfiprintf_r+0x152>
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	eba0 000a 	sub.w	r0, r0, sl
 800a7fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	4303      	orrs	r3, r0
 800a802:	3401      	adds	r4, #1
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80a:	4826      	ldr	r0, [pc, #152]	; (800a8a4 <_svfiprintf_r+0x1f0>)
 800a80c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a810:	2206      	movs	r2, #6
 800a812:	f7f5 fce5 	bl	80001e0 <memchr>
 800a816:	2800      	cmp	r0, #0
 800a818:	d038      	beq.n	800a88c <_svfiprintf_r+0x1d8>
 800a81a:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <_svfiprintf_r+0x1f4>)
 800a81c:	bb1b      	cbnz	r3, 800a866 <_svfiprintf_r+0x1b2>
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	3307      	adds	r3, #7
 800a822:	f023 0307 	bic.w	r3, r3, #7
 800a826:	3308      	adds	r3, #8
 800a828:	9303      	str	r3, [sp, #12]
 800a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82c:	4433      	add	r3, r6
 800a82e:	9309      	str	r3, [sp, #36]	; 0x24
 800a830:	e767      	b.n	800a702 <_svfiprintf_r+0x4e>
 800a832:	fb0c 3202 	mla	r2, ip, r2, r3
 800a836:	460c      	mov	r4, r1
 800a838:	2001      	movs	r0, #1
 800a83a:	e7a5      	b.n	800a788 <_svfiprintf_r+0xd4>
 800a83c:	2300      	movs	r3, #0
 800a83e:	3401      	adds	r4, #1
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	4619      	mov	r1, r3
 800a844:	f04f 0c0a 	mov.w	ip, #10
 800a848:	4620      	mov	r0, r4
 800a84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84e:	3a30      	subs	r2, #48	; 0x30
 800a850:	2a09      	cmp	r2, #9
 800a852:	d903      	bls.n	800a85c <_svfiprintf_r+0x1a8>
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0c5      	beq.n	800a7e4 <_svfiprintf_r+0x130>
 800a858:	9105      	str	r1, [sp, #20]
 800a85a:	e7c3      	b.n	800a7e4 <_svfiprintf_r+0x130>
 800a85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a860:	4604      	mov	r4, r0
 800a862:	2301      	movs	r3, #1
 800a864:	e7f0      	b.n	800a848 <_svfiprintf_r+0x194>
 800a866:	ab03      	add	r3, sp, #12
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	462a      	mov	r2, r5
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <_svfiprintf_r+0x1f8>)
 800a86e:	a904      	add	r1, sp, #16
 800a870:	4638      	mov	r0, r7
 800a872:	f3af 8000 	nop.w
 800a876:	1c42      	adds	r2, r0, #1
 800a878:	4606      	mov	r6, r0
 800a87a:	d1d6      	bne.n	800a82a <_svfiprintf_r+0x176>
 800a87c:	89ab      	ldrh	r3, [r5, #12]
 800a87e:	065b      	lsls	r3, r3, #25
 800a880:	f53f af2c 	bmi.w	800a6dc <_svfiprintf_r+0x28>
 800a884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a886:	b01d      	add	sp, #116	; 0x74
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <_svfiprintf_r+0x1f8>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4638      	mov	r0, r7
 800a898:	f000 f9d4 	bl	800ac44 <_printf_i>
 800a89c:	e7eb      	b.n	800a876 <_svfiprintf_r+0x1c2>
 800a89e:	bf00      	nop
 800a8a0:	0800bb9e 	.word	0x0800bb9e
 800a8a4:	0800bba8 	.word	0x0800bba8
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	0800a5fd 	.word	0x0800a5fd
 800a8b0:	0800bba4 	.word	0x0800bba4

0800a8b4 <__sfputc_r>:
 800a8b4:	6893      	ldr	r3, [r2, #8]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	b410      	push	{r4}
 800a8bc:	6093      	str	r3, [r2, #8]
 800a8be:	da08      	bge.n	800a8d2 <__sfputc_r+0x1e>
 800a8c0:	6994      	ldr	r4, [r2, #24]
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	db01      	blt.n	800a8ca <__sfputc_r+0x16>
 800a8c6:	290a      	cmp	r1, #10
 800a8c8:	d103      	bne.n	800a8d2 <__sfputc_r+0x1e>
 800a8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ce:	f000 baef 	b.w	800aeb0 <__swbuf_r>
 800a8d2:	6813      	ldr	r3, [r2, #0]
 800a8d4:	1c58      	adds	r0, r3, #1
 800a8d6:	6010      	str	r0, [r2, #0]
 800a8d8:	7019      	strb	r1, [r3, #0]
 800a8da:	4608      	mov	r0, r1
 800a8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <__sfputs_r>:
 800a8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	460f      	mov	r7, r1
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	18d5      	adds	r5, r2, r3
 800a8ec:	42ac      	cmp	r4, r5
 800a8ee:	d101      	bne.n	800a8f4 <__sfputs_r+0x12>
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	e007      	b.n	800a904 <__sfputs_r+0x22>
 800a8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f8:	463a      	mov	r2, r7
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7ff ffda 	bl	800a8b4 <__sfputc_r>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d1f3      	bne.n	800a8ec <__sfputs_r+0xa>
 800a904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a908 <_vfiprintf_r>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	460d      	mov	r5, r1
 800a90e:	b09d      	sub	sp, #116	; 0x74
 800a910:	4614      	mov	r4, r2
 800a912:	4698      	mov	r8, r3
 800a914:	4606      	mov	r6, r0
 800a916:	b118      	cbz	r0, 800a920 <_vfiprintf_r+0x18>
 800a918:	6983      	ldr	r3, [r0, #24]
 800a91a:	b90b      	cbnz	r3, 800a920 <_vfiprintf_r+0x18>
 800a91c:	f000 fcaa 	bl	800b274 <__sinit>
 800a920:	4b89      	ldr	r3, [pc, #548]	; (800ab48 <_vfiprintf_r+0x240>)
 800a922:	429d      	cmp	r5, r3
 800a924:	d11b      	bne.n	800a95e <_vfiprintf_r+0x56>
 800a926:	6875      	ldr	r5, [r6, #4]
 800a928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a92a:	07d9      	lsls	r1, r3, #31
 800a92c:	d405      	bmi.n	800a93a <_vfiprintf_r+0x32>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d402      	bmi.n	800a93a <_vfiprintf_r+0x32>
 800a934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a936:	f000 fd3b 	bl	800b3b0 <__retarget_lock_acquire_recursive>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	071b      	lsls	r3, r3, #28
 800a93e:	d501      	bpl.n	800a944 <_vfiprintf_r+0x3c>
 800a940:	692b      	ldr	r3, [r5, #16]
 800a942:	b9eb      	cbnz	r3, 800a980 <_vfiprintf_r+0x78>
 800a944:	4629      	mov	r1, r5
 800a946:	4630      	mov	r0, r6
 800a948:	f000 fb04 	bl	800af54 <__swsetup_r>
 800a94c:	b1c0      	cbz	r0, 800a980 <_vfiprintf_r+0x78>
 800a94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a950:	07dc      	lsls	r4, r3, #31
 800a952:	d50e      	bpl.n	800a972 <_vfiprintf_r+0x6a>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	b01d      	add	sp, #116	; 0x74
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95e:	4b7b      	ldr	r3, [pc, #492]	; (800ab4c <_vfiprintf_r+0x244>)
 800a960:	429d      	cmp	r5, r3
 800a962:	d101      	bne.n	800a968 <_vfiprintf_r+0x60>
 800a964:	68b5      	ldr	r5, [r6, #8]
 800a966:	e7df      	b.n	800a928 <_vfiprintf_r+0x20>
 800a968:	4b79      	ldr	r3, [pc, #484]	; (800ab50 <_vfiprintf_r+0x248>)
 800a96a:	429d      	cmp	r5, r3
 800a96c:	bf08      	it	eq
 800a96e:	68f5      	ldreq	r5, [r6, #12]
 800a970:	e7da      	b.n	800a928 <_vfiprintf_r+0x20>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	0598      	lsls	r0, r3, #22
 800a976:	d4ed      	bmi.n	800a954 <_vfiprintf_r+0x4c>
 800a978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a97a:	f000 fd1a 	bl	800b3b2 <__retarget_lock_release_recursive>
 800a97e:	e7e9      	b.n	800a954 <_vfiprintf_r+0x4c>
 800a980:	2300      	movs	r3, #0
 800a982:	9309      	str	r3, [sp, #36]	; 0x24
 800a984:	2320      	movs	r3, #32
 800a986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a98a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a98e:	2330      	movs	r3, #48	; 0x30
 800a990:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab54 <_vfiprintf_r+0x24c>
 800a994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a998:	f04f 0901 	mov.w	r9, #1
 800a99c:	4623      	mov	r3, r4
 800a99e:	469a      	mov	sl, r3
 800a9a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9a4:	b10a      	cbz	r2, 800a9aa <_vfiprintf_r+0xa2>
 800a9a6:	2a25      	cmp	r2, #37	; 0x25
 800a9a8:	d1f9      	bne.n	800a99e <_vfiprintf_r+0x96>
 800a9aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ae:	d00b      	beq.n	800a9c8 <_vfiprintf_r+0xc0>
 800a9b0:	465b      	mov	r3, fp
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7ff ff93 	bl	800a8e2 <__sfputs_r>
 800a9bc:	3001      	adds	r0, #1
 800a9be:	f000 80aa 	beq.w	800ab16 <_vfiprintf_r+0x20e>
 800a9c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c4:	445a      	add	r2, fp
 800a9c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 80a2 	beq.w	800ab16 <_vfiprintf_r+0x20e>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9dc:	f10a 0a01 	add.w	sl, sl, #1
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	9307      	str	r3, [sp, #28]
 800a9e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a9ea:	4654      	mov	r4, sl
 800a9ec:	2205      	movs	r2, #5
 800a9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f2:	4858      	ldr	r0, [pc, #352]	; (800ab54 <_vfiprintf_r+0x24c>)
 800a9f4:	f7f5 fbf4 	bl	80001e0 <memchr>
 800a9f8:	9a04      	ldr	r2, [sp, #16]
 800a9fa:	b9d8      	cbnz	r0, 800aa34 <_vfiprintf_r+0x12c>
 800a9fc:	06d1      	lsls	r1, r2, #27
 800a9fe:	bf44      	itt	mi
 800aa00:	2320      	movmi	r3, #32
 800aa02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa06:	0713      	lsls	r3, r2, #28
 800aa08:	bf44      	itt	mi
 800aa0a:	232b      	movmi	r3, #43	; 0x2b
 800aa0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa10:	f89a 3000 	ldrb.w	r3, [sl]
 800aa14:	2b2a      	cmp	r3, #42	; 0x2a
 800aa16:	d015      	beq.n	800aa44 <_vfiprintf_r+0x13c>
 800aa18:	9a07      	ldr	r2, [sp, #28]
 800aa1a:	4654      	mov	r4, sl
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	f04f 0c0a 	mov.w	ip, #10
 800aa22:	4621      	mov	r1, r4
 800aa24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa28:	3b30      	subs	r3, #48	; 0x30
 800aa2a:	2b09      	cmp	r3, #9
 800aa2c:	d94e      	bls.n	800aacc <_vfiprintf_r+0x1c4>
 800aa2e:	b1b0      	cbz	r0, 800aa5e <_vfiprintf_r+0x156>
 800aa30:	9207      	str	r2, [sp, #28]
 800aa32:	e014      	b.n	800aa5e <_vfiprintf_r+0x156>
 800aa34:	eba0 0308 	sub.w	r3, r0, r8
 800aa38:	fa09 f303 	lsl.w	r3, r9, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	46a2      	mov	sl, r4
 800aa42:	e7d2      	b.n	800a9ea <_vfiprintf_r+0xe2>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	1d19      	adds	r1, r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	9103      	str	r1, [sp, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfbb      	ittet	lt
 800aa50:	425b      	neglt	r3, r3
 800aa52:	f042 0202 	orrlt.w	r2, r2, #2
 800aa56:	9307      	strge	r3, [sp, #28]
 800aa58:	9307      	strlt	r3, [sp, #28]
 800aa5a:	bfb8      	it	lt
 800aa5c:	9204      	strlt	r2, [sp, #16]
 800aa5e:	7823      	ldrb	r3, [r4, #0]
 800aa60:	2b2e      	cmp	r3, #46	; 0x2e
 800aa62:	d10c      	bne.n	800aa7e <_vfiprintf_r+0x176>
 800aa64:	7863      	ldrb	r3, [r4, #1]
 800aa66:	2b2a      	cmp	r3, #42	; 0x2a
 800aa68:	d135      	bne.n	800aad6 <_vfiprintf_r+0x1ce>
 800aa6a:	9b03      	ldr	r3, [sp, #12]
 800aa6c:	1d1a      	adds	r2, r3, #4
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	9203      	str	r2, [sp, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bfb8      	it	lt
 800aa76:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa7a:	3402      	adds	r4, #2
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab64 <_vfiprintf_r+0x25c>
 800aa82:	7821      	ldrb	r1, [r4, #0]
 800aa84:	2203      	movs	r2, #3
 800aa86:	4650      	mov	r0, sl
 800aa88:	f7f5 fbaa 	bl	80001e0 <memchr>
 800aa8c:	b140      	cbz	r0, 800aaa0 <_vfiprintf_r+0x198>
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	eba0 000a 	sub.w	r0, r0, sl
 800aa94:	fa03 f000 	lsl.w	r0, r3, r0
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	4303      	orrs	r3, r0
 800aa9c:	3401      	adds	r4, #1
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa4:	482c      	ldr	r0, [pc, #176]	; (800ab58 <_vfiprintf_r+0x250>)
 800aaa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaaa:	2206      	movs	r2, #6
 800aaac:	f7f5 fb98 	bl	80001e0 <memchr>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d03f      	beq.n	800ab34 <_vfiprintf_r+0x22c>
 800aab4:	4b29      	ldr	r3, [pc, #164]	; (800ab5c <_vfiprintf_r+0x254>)
 800aab6:	bb1b      	cbnz	r3, 800ab00 <_vfiprintf_r+0x1f8>
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	3307      	adds	r3, #7
 800aabc:	f023 0307 	bic.w	r3, r3, #7
 800aac0:	3308      	adds	r3, #8
 800aac2:	9303      	str	r3, [sp, #12]
 800aac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac6:	443b      	add	r3, r7
 800aac8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaca:	e767      	b.n	800a99c <_vfiprintf_r+0x94>
 800aacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad0:	460c      	mov	r4, r1
 800aad2:	2001      	movs	r0, #1
 800aad4:	e7a5      	b.n	800aa22 <_vfiprintf_r+0x11a>
 800aad6:	2300      	movs	r3, #0
 800aad8:	3401      	adds	r4, #1
 800aada:	9305      	str	r3, [sp, #20]
 800aadc:	4619      	mov	r1, r3
 800aade:	f04f 0c0a 	mov.w	ip, #10
 800aae2:	4620      	mov	r0, r4
 800aae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aae8:	3a30      	subs	r2, #48	; 0x30
 800aaea:	2a09      	cmp	r2, #9
 800aaec:	d903      	bls.n	800aaf6 <_vfiprintf_r+0x1ee>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0c5      	beq.n	800aa7e <_vfiprintf_r+0x176>
 800aaf2:	9105      	str	r1, [sp, #20]
 800aaf4:	e7c3      	b.n	800aa7e <_vfiprintf_r+0x176>
 800aaf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aafa:	4604      	mov	r4, r0
 800aafc:	2301      	movs	r3, #1
 800aafe:	e7f0      	b.n	800aae2 <_vfiprintf_r+0x1da>
 800ab00:	ab03      	add	r3, sp, #12
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	462a      	mov	r2, r5
 800ab06:	4b16      	ldr	r3, [pc, #88]	; (800ab60 <_vfiprintf_r+0x258>)
 800ab08:	a904      	add	r1, sp, #16
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f3af 8000 	nop.w
 800ab10:	4607      	mov	r7, r0
 800ab12:	1c78      	adds	r0, r7, #1
 800ab14:	d1d6      	bne.n	800aac4 <_vfiprintf_r+0x1bc>
 800ab16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab18:	07d9      	lsls	r1, r3, #31
 800ab1a:	d405      	bmi.n	800ab28 <_vfiprintf_r+0x220>
 800ab1c:	89ab      	ldrh	r3, [r5, #12]
 800ab1e:	059a      	lsls	r2, r3, #22
 800ab20:	d402      	bmi.n	800ab28 <_vfiprintf_r+0x220>
 800ab22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab24:	f000 fc45 	bl	800b3b2 <__retarget_lock_release_recursive>
 800ab28:	89ab      	ldrh	r3, [r5, #12]
 800ab2a:	065b      	lsls	r3, r3, #25
 800ab2c:	f53f af12 	bmi.w	800a954 <_vfiprintf_r+0x4c>
 800ab30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab32:	e711      	b.n	800a958 <_vfiprintf_r+0x50>
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	462a      	mov	r2, r5
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <_vfiprintf_r+0x258>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f000 f880 	bl	800ac44 <_printf_i>
 800ab44:	e7e4      	b.n	800ab10 <_vfiprintf_r+0x208>
 800ab46:	bf00      	nop
 800ab48:	0800bbf4 	.word	0x0800bbf4
 800ab4c:	0800bc14 	.word	0x0800bc14
 800ab50:	0800bbd4 	.word	0x0800bbd4
 800ab54:	0800bb9e 	.word	0x0800bb9e
 800ab58:	0800bba8 	.word	0x0800bba8
 800ab5c:	00000000 	.word	0x00000000
 800ab60:	0800a8e3 	.word	0x0800a8e3
 800ab64:	0800bba4 	.word	0x0800bba4

0800ab68 <_printf_common>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	4699      	mov	r9, r3
 800ab70:	688a      	ldr	r2, [r1, #8]
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bfb8      	it	lt
 800ab7c:	4613      	movlt	r3, r2
 800ab7e:	6033      	str	r3, [r6, #0]
 800ab80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab84:	4607      	mov	r7, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	b10a      	cbz	r2, 800ab8e <_printf_common+0x26>
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	0699      	lsls	r1, r3, #26
 800ab92:	bf42      	ittt	mi
 800ab94:	6833      	ldrmi	r3, [r6, #0]
 800ab96:	3302      	addmi	r3, #2
 800ab98:	6033      	strmi	r3, [r6, #0]
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	f015 0506 	ands.w	r5, r5, #6
 800aba0:	d106      	bne.n	800abb0 <_printf_common+0x48>
 800aba2:	f104 0a19 	add.w	sl, r4, #25
 800aba6:	68e3      	ldr	r3, [r4, #12]
 800aba8:	6832      	ldr	r2, [r6, #0]
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	42ab      	cmp	r3, r5
 800abae:	dc26      	bgt.n	800abfe <_printf_common+0x96>
 800abb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb4:	1e13      	subs	r3, r2, #0
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	0692      	lsls	r2, r2, #26
 800abbe:	d42b      	bmi.n	800ac18 <_printf_common+0xb0>
 800abc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	3001      	adds	r0, #1
 800abcc:	d01e      	beq.n	800ac0c <_printf_common+0xa4>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	68e5      	ldr	r5, [r4, #12]
 800abd2:	6832      	ldr	r2, [r6, #0]
 800abd4:	f003 0306 	and.w	r3, r3, #6
 800abd8:	2b04      	cmp	r3, #4
 800abda:	bf08      	it	eq
 800abdc:	1aad      	subeq	r5, r5, r2
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	bf0c      	ite	eq
 800abe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abe8:	2500      	movne	r5, #0
 800abea:	4293      	cmp	r3, r2
 800abec:	bfc4      	itt	gt
 800abee:	1a9b      	subgt	r3, r3, r2
 800abf0:	18ed      	addgt	r5, r5, r3
 800abf2:	2600      	movs	r6, #0
 800abf4:	341a      	adds	r4, #26
 800abf6:	42b5      	cmp	r5, r6
 800abf8:	d11a      	bne.n	800ac30 <_printf_common+0xc8>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e008      	b.n	800ac10 <_printf_common+0xa8>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	4649      	mov	r1, r9
 800ac04:	4638      	mov	r0, r7
 800ac06:	47c0      	blx	r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d103      	bne.n	800ac14 <_printf_common+0xac>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	3501      	adds	r5, #1
 800ac16:	e7c6      	b.n	800aba6 <_printf_common+0x3e>
 800ac18:	18e1      	adds	r1, r4, r3
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	2030      	movs	r0, #48	; 0x30
 800ac1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac22:	4422      	add	r2, r4
 800ac24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	e7c7      	b.n	800abc0 <_printf_common+0x58>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4622      	mov	r2, r4
 800ac34:	4649      	mov	r1, r9
 800ac36:	4638      	mov	r0, r7
 800ac38:	47c0      	blx	r8
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0e6      	beq.n	800ac0c <_printf_common+0xa4>
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7d9      	b.n	800abf6 <_printf_common+0x8e>
	...

0800ac44 <_printf_i>:
 800ac44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	460c      	mov	r4, r1
 800ac4a:	4691      	mov	r9, r2
 800ac4c:	7e27      	ldrb	r7, [r4, #24]
 800ac4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac50:	2f78      	cmp	r7, #120	; 0x78
 800ac52:	4680      	mov	r8, r0
 800ac54:	469a      	mov	sl, r3
 800ac56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac5a:	d807      	bhi.n	800ac6c <_printf_i+0x28>
 800ac5c:	2f62      	cmp	r7, #98	; 0x62
 800ac5e:	d80a      	bhi.n	800ac76 <_printf_i+0x32>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	f000 80d8 	beq.w	800ae16 <_printf_i+0x1d2>
 800ac66:	2f58      	cmp	r7, #88	; 0x58
 800ac68:	f000 80a3 	beq.w	800adb2 <_printf_i+0x16e>
 800ac6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac74:	e03a      	b.n	800acec <_printf_i+0xa8>
 800ac76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac7a:	2b15      	cmp	r3, #21
 800ac7c:	d8f6      	bhi.n	800ac6c <_printf_i+0x28>
 800ac7e:	a001      	add	r0, pc, #4	; (adr r0, 800ac84 <_printf_i+0x40>)
 800ac80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac84:	0800acdd 	.word	0x0800acdd
 800ac88:	0800acf1 	.word	0x0800acf1
 800ac8c:	0800ac6d 	.word	0x0800ac6d
 800ac90:	0800ac6d 	.word	0x0800ac6d
 800ac94:	0800ac6d 	.word	0x0800ac6d
 800ac98:	0800ac6d 	.word	0x0800ac6d
 800ac9c:	0800acf1 	.word	0x0800acf1
 800aca0:	0800ac6d 	.word	0x0800ac6d
 800aca4:	0800ac6d 	.word	0x0800ac6d
 800aca8:	0800ac6d 	.word	0x0800ac6d
 800acac:	0800ac6d 	.word	0x0800ac6d
 800acb0:	0800adfd 	.word	0x0800adfd
 800acb4:	0800ad21 	.word	0x0800ad21
 800acb8:	0800addf 	.word	0x0800addf
 800acbc:	0800ac6d 	.word	0x0800ac6d
 800acc0:	0800ac6d 	.word	0x0800ac6d
 800acc4:	0800ae1f 	.word	0x0800ae1f
 800acc8:	0800ac6d 	.word	0x0800ac6d
 800accc:	0800ad21 	.word	0x0800ad21
 800acd0:	0800ac6d 	.word	0x0800ac6d
 800acd4:	0800ac6d 	.word	0x0800ac6d
 800acd8:	0800ade7 	.word	0x0800ade7
 800acdc:	680b      	ldr	r3, [r1, #0]
 800acde:	1d1a      	adds	r2, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	600a      	str	r2, [r1, #0]
 800ace4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ace8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acec:	2301      	movs	r3, #1
 800acee:	e0a3      	b.n	800ae38 <_printf_i+0x1f4>
 800acf0:	6825      	ldr	r5, [r4, #0]
 800acf2:	6808      	ldr	r0, [r1, #0]
 800acf4:	062e      	lsls	r6, r5, #24
 800acf6:	f100 0304 	add.w	r3, r0, #4
 800acfa:	d50a      	bpl.n	800ad12 <_printf_i+0xce>
 800acfc:	6805      	ldr	r5, [r0, #0]
 800acfe:	600b      	str	r3, [r1, #0]
 800ad00:	2d00      	cmp	r5, #0
 800ad02:	da03      	bge.n	800ad0c <_printf_i+0xc8>
 800ad04:	232d      	movs	r3, #45	; 0x2d
 800ad06:	426d      	negs	r5, r5
 800ad08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0c:	485e      	ldr	r0, [pc, #376]	; (800ae88 <_printf_i+0x244>)
 800ad0e:	230a      	movs	r3, #10
 800ad10:	e019      	b.n	800ad46 <_printf_i+0x102>
 800ad12:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad16:	6805      	ldr	r5, [r0, #0]
 800ad18:	600b      	str	r3, [r1, #0]
 800ad1a:	bf18      	it	ne
 800ad1c:	b22d      	sxthne	r5, r5
 800ad1e:	e7ef      	b.n	800ad00 <_printf_i+0xbc>
 800ad20:	680b      	ldr	r3, [r1, #0]
 800ad22:	6825      	ldr	r5, [r4, #0]
 800ad24:	1d18      	adds	r0, r3, #4
 800ad26:	6008      	str	r0, [r1, #0]
 800ad28:	0628      	lsls	r0, r5, #24
 800ad2a:	d501      	bpl.n	800ad30 <_printf_i+0xec>
 800ad2c:	681d      	ldr	r5, [r3, #0]
 800ad2e:	e002      	b.n	800ad36 <_printf_i+0xf2>
 800ad30:	0669      	lsls	r1, r5, #25
 800ad32:	d5fb      	bpl.n	800ad2c <_printf_i+0xe8>
 800ad34:	881d      	ldrh	r5, [r3, #0]
 800ad36:	4854      	ldr	r0, [pc, #336]	; (800ae88 <_printf_i+0x244>)
 800ad38:	2f6f      	cmp	r7, #111	; 0x6f
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2308      	moveq	r3, #8
 800ad3e:	230a      	movne	r3, #10
 800ad40:	2100      	movs	r1, #0
 800ad42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad46:	6866      	ldr	r6, [r4, #4]
 800ad48:	60a6      	str	r6, [r4, #8]
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	bfa2      	ittt	ge
 800ad4e:	6821      	ldrge	r1, [r4, #0]
 800ad50:	f021 0104 	bicge.w	r1, r1, #4
 800ad54:	6021      	strge	r1, [r4, #0]
 800ad56:	b90d      	cbnz	r5, 800ad5c <_printf_i+0x118>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	d04d      	beq.n	800adf8 <_printf_i+0x1b4>
 800ad5c:	4616      	mov	r6, r2
 800ad5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad62:	fb03 5711 	mls	r7, r3, r1, r5
 800ad66:	5dc7      	ldrb	r7, [r0, r7]
 800ad68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad6c:	462f      	mov	r7, r5
 800ad6e:	42bb      	cmp	r3, r7
 800ad70:	460d      	mov	r5, r1
 800ad72:	d9f4      	bls.n	800ad5e <_printf_i+0x11a>
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d10b      	bne.n	800ad90 <_printf_i+0x14c>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	07df      	lsls	r7, r3, #31
 800ad7c:	d508      	bpl.n	800ad90 <_printf_i+0x14c>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	4299      	cmp	r1, r3
 800ad84:	bfde      	ittt	le
 800ad86:	2330      	movle	r3, #48	; 0x30
 800ad88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad90:	1b92      	subs	r2, r2, r6
 800ad92:	6122      	str	r2, [r4, #16]
 800ad94:	f8cd a000 	str.w	sl, [sp]
 800ad98:	464b      	mov	r3, r9
 800ad9a:	aa03      	add	r2, sp, #12
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f7ff fee2 	bl	800ab68 <_printf_common>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d14c      	bne.n	800ae42 <_printf_i+0x1fe>
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	b004      	add	sp, #16
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	4835      	ldr	r0, [pc, #212]	; (800ae88 <_printf_i+0x244>)
 800adb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	680e      	ldr	r6, [r1, #0]
 800adbc:	061f      	lsls	r7, r3, #24
 800adbe:	f856 5b04 	ldr.w	r5, [r6], #4
 800adc2:	600e      	str	r6, [r1, #0]
 800adc4:	d514      	bpl.n	800adf0 <_printf_i+0x1ac>
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	bf44      	itt	mi
 800adca:	f043 0320 	orrmi.w	r3, r3, #32
 800adce:	6023      	strmi	r3, [r4, #0]
 800add0:	b91d      	cbnz	r5, 800adda <_printf_i+0x196>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	f023 0320 	bic.w	r3, r3, #32
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	2310      	movs	r3, #16
 800addc:	e7b0      	b.n	800ad40 <_printf_i+0xfc>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	f043 0320 	orr.w	r3, r3, #32
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	2378      	movs	r3, #120	; 0x78
 800ade8:	4828      	ldr	r0, [pc, #160]	; (800ae8c <_printf_i+0x248>)
 800adea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adee:	e7e3      	b.n	800adb8 <_printf_i+0x174>
 800adf0:	065e      	lsls	r6, r3, #25
 800adf2:	bf48      	it	mi
 800adf4:	b2ad      	uxthmi	r5, r5
 800adf6:	e7e6      	b.n	800adc6 <_printf_i+0x182>
 800adf8:	4616      	mov	r6, r2
 800adfa:	e7bb      	b.n	800ad74 <_printf_i+0x130>
 800adfc:	680b      	ldr	r3, [r1, #0]
 800adfe:	6826      	ldr	r6, [r4, #0]
 800ae00:	6960      	ldr	r0, [r4, #20]
 800ae02:	1d1d      	adds	r5, r3, #4
 800ae04:	600d      	str	r5, [r1, #0]
 800ae06:	0635      	lsls	r5, r6, #24
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	d501      	bpl.n	800ae10 <_printf_i+0x1cc>
 800ae0c:	6018      	str	r0, [r3, #0]
 800ae0e:	e002      	b.n	800ae16 <_printf_i+0x1d2>
 800ae10:	0671      	lsls	r1, r6, #25
 800ae12:	d5fb      	bpl.n	800ae0c <_printf_i+0x1c8>
 800ae14:	8018      	strh	r0, [r3, #0]
 800ae16:	2300      	movs	r3, #0
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	4616      	mov	r6, r2
 800ae1c:	e7ba      	b.n	800ad94 <_printf_i+0x150>
 800ae1e:	680b      	ldr	r3, [r1, #0]
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	600a      	str	r2, [r1, #0]
 800ae24:	681e      	ldr	r6, [r3, #0]
 800ae26:	6862      	ldr	r2, [r4, #4]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7f5 f9d8 	bl	80001e0 <memchr>
 800ae30:	b108      	cbz	r0, 800ae36 <_printf_i+0x1f2>
 800ae32:	1b80      	subs	r0, r0, r6
 800ae34:	6060      	str	r0, [r4, #4]
 800ae36:	6863      	ldr	r3, [r4, #4]
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae40:	e7a8      	b.n	800ad94 <_printf_i+0x150>
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	4632      	mov	r2, r6
 800ae46:	4649      	mov	r1, r9
 800ae48:	4640      	mov	r0, r8
 800ae4a:	47d0      	blx	sl
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d0ab      	beq.n	800ada8 <_printf_i+0x164>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	079b      	lsls	r3, r3, #30
 800ae54:	d413      	bmi.n	800ae7e <_printf_i+0x23a>
 800ae56:	68e0      	ldr	r0, [r4, #12]
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	4298      	cmp	r0, r3
 800ae5c:	bfb8      	it	lt
 800ae5e:	4618      	movlt	r0, r3
 800ae60:	e7a4      	b.n	800adac <_printf_i+0x168>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4632      	mov	r2, r6
 800ae66:	4649      	mov	r1, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	47d0      	blx	sl
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d09b      	beq.n	800ada8 <_printf_i+0x164>
 800ae70:	3501      	adds	r5, #1
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	9903      	ldr	r1, [sp, #12]
 800ae76:	1a5b      	subs	r3, r3, r1
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dcf2      	bgt.n	800ae62 <_printf_i+0x21e>
 800ae7c:	e7eb      	b.n	800ae56 <_printf_i+0x212>
 800ae7e:	2500      	movs	r5, #0
 800ae80:	f104 0619 	add.w	r6, r4, #25
 800ae84:	e7f5      	b.n	800ae72 <_printf_i+0x22e>
 800ae86:	bf00      	nop
 800ae88:	0800bbaf 	.word	0x0800bbaf
 800ae8c:	0800bbc0 	.word	0x0800bbc0

0800ae90 <_sbrk_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_sbrk_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	f7f9 f80c 	bl	8003eb8 <_sbrk>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_sbrk_r+0x1a>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_sbrk_r+0x1a>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000980 	.word	0x20000980

0800aeb0 <__swbuf_r>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	460e      	mov	r6, r1
 800aeb4:	4614      	mov	r4, r2
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	b118      	cbz	r0, 800aec2 <__swbuf_r+0x12>
 800aeba:	6983      	ldr	r3, [r0, #24]
 800aebc:	b90b      	cbnz	r3, 800aec2 <__swbuf_r+0x12>
 800aebe:	f000 f9d9 	bl	800b274 <__sinit>
 800aec2:	4b21      	ldr	r3, [pc, #132]	; (800af48 <__swbuf_r+0x98>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	d12b      	bne.n	800af20 <__swbuf_r+0x70>
 800aec8:	686c      	ldr	r4, [r5, #4]
 800aeca:	69a3      	ldr	r3, [r4, #24]
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	071a      	lsls	r2, r3, #28
 800aed2:	d52f      	bpl.n	800af34 <__swbuf_r+0x84>
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	b36b      	cbz	r3, 800af34 <__swbuf_r+0x84>
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	6820      	ldr	r0, [r4, #0]
 800aedc:	1ac0      	subs	r0, r0, r3
 800aede:	6963      	ldr	r3, [r4, #20]
 800aee0:	b2f6      	uxtb	r6, r6
 800aee2:	4283      	cmp	r3, r0
 800aee4:	4637      	mov	r7, r6
 800aee6:	dc04      	bgt.n	800aef2 <__swbuf_r+0x42>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 f92e 	bl	800b14c <_fflush_r>
 800aef0:	bb30      	cbnz	r0, 800af40 <__swbuf_r+0x90>
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	60a3      	str	r3, [r4, #8]
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	6022      	str	r2, [r4, #0]
 800aefe:	701e      	strb	r6, [r3, #0]
 800af00:	6963      	ldr	r3, [r4, #20]
 800af02:	3001      	adds	r0, #1
 800af04:	4283      	cmp	r3, r0
 800af06:	d004      	beq.n	800af12 <__swbuf_r+0x62>
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	07db      	lsls	r3, r3, #31
 800af0c:	d506      	bpl.n	800af1c <__swbuf_r+0x6c>
 800af0e:	2e0a      	cmp	r6, #10
 800af10:	d104      	bne.n	800af1c <__swbuf_r+0x6c>
 800af12:	4621      	mov	r1, r4
 800af14:	4628      	mov	r0, r5
 800af16:	f000 f919 	bl	800b14c <_fflush_r>
 800af1a:	b988      	cbnz	r0, 800af40 <__swbuf_r+0x90>
 800af1c:	4638      	mov	r0, r7
 800af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <__swbuf_r+0x9c>)
 800af22:	429c      	cmp	r4, r3
 800af24:	d101      	bne.n	800af2a <__swbuf_r+0x7a>
 800af26:	68ac      	ldr	r4, [r5, #8]
 800af28:	e7cf      	b.n	800aeca <__swbuf_r+0x1a>
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <__swbuf_r+0xa0>)
 800af2c:	429c      	cmp	r4, r3
 800af2e:	bf08      	it	eq
 800af30:	68ec      	ldreq	r4, [r5, #12]
 800af32:	e7ca      	b.n	800aeca <__swbuf_r+0x1a>
 800af34:	4621      	mov	r1, r4
 800af36:	4628      	mov	r0, r5
 800af38:	f000 f80c 	bl	800af54 <__swsetup_r>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0cb      	beq.n	800aed8 <__swbuf_r+0x28>
 800af40:	f04f 37ff 	mov.w	r7, #4294967295
 800af44:	e7ea      	b.n	800af1c <__swbuf_r+0x6c>
 800af46:	bf00      	nop
 800af48:	0800bbf4 	.word	0x0800bbf4
 800af4c:	0800bc14 	.word	0x0800bc14
 800af50:	0800bbd4 	.word	0x0800bbd4

0800af54 <__swsetup_r>:
 800af54:	4b32      	ldr	r3, [pc, #200]	; (800b020 <__swsetup_r+0xcc>)
 800af56:	b570      	push	{r4, r5, r6, lr}
 800af58:	681d      	ldr	r5, [r3, #0]
 800af5a:	4606      	mov	r6, r0
 800af5c:	460c      	mov	r4, r1
 800af5e:	b125      	cbz	r5, 800af6a <__swsetup_r+0x16>
 800af60:	69ab      	ldr	r3, [r5, #24]
 800af62:	b913      	cbnz	r3, 800af6a <__swsetup_r+0x16>
 800af64:	4628      	mov	r0, r5
 800af66:	f000 f985 	bl	800b274 <__sinit>
 800af6a:	4b2e      	ldr	r3, [pc, #184]	; (800b024 <__swsetup_r+0xd0>)
 800af6c:	429c      	cmp	r4, r3
 800af6e:	d10f      	bne.n	800af90 <__swsetup_r+0x3c>
 800af70:	686c      	ldr	r4, [r5, #4]
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af78:	0719      	lsls	r1, r3, #28
 800af7a:	d42c      	bmi.n	800afd6 <__swsetup_r+0x82>
 800af7c:	06dd      	lsls	r5, r3, #27
 800af7e:	d411      	bmi.n	800afa4 <__swsetup_r+0x50>
 800af80:	2309      	movs	r3, #9
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	e03e      	b.n	800b00e <__swsetup_r+0xba>
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <__swsetup_r+0xd4>)
 800af92:	429c      	cmp	r4, r3
 800af94:	d101      	bne.n	800af9a <__swsetup_r+0x46>
 800af96:	68ac      	ldr	r4, [r5, #8]
 800af98:	e7eb      	b.n	800af72 <__swsetup_r+0x1e>
 800af9a:	4b24      	ldr	r3, [pc, #144]	; (800b02c <__swsetup_r+0xd8>)
 800af9c:	429c      	cmp	r4, r3
 800af9e:	bf08      	it	eq
 800afa0:	68ec      	ldreq	r4, [r5, #12]
 800afa2:	e7e6      	b.n	800af72 <__swsetup_r+0x1e>
 800afa4:	0758      	lsls	r0, r3, #29
 800afa6:	d512      	bpl.n	800afce <__swsetup_r+0x7a>
 800afa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afaa:	b141      	cbz	r1, 800afbe <__swsetup_r+0x6a>
 800afac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb0:	4299      	cmp	r1, r3
 800afb2:	d002      	beq.n	800afba <__swsetup_r+0x66>
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff fa77 	bl	800a4a8 <_free_r>
 800afba:	2300      	movs	r3, #0
 800afbc:	6363      	str	r3, [r4, #52]	; 0x34
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	2300      	movs	r3, #0
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f043 0308 	orr.w	r3, r3, #8
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	b94b      	cbnz	r3, 800afee <__swsetup_r+0x9a>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afe4:	d003      	beq.n	800afee <__swsetup_r+0x9a>
 800afe6:	4621      	mov	r1, r4
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 fa07 	bl	800b3fc <__smakebuf_r>
 800afee:	89a0      	ldrh	r0, [r4, #12]
 800aff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff4:	f010 0301 	ands.w	r3, r0, #1
 800aff8:	d00a      	beq.n	800b010 <__swsetup_r+0xbc>
 800affa:	2300      	movs	r3, #0
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	6963      	ldr	r3, [r4, #20]
 800b000:	425b      	negs	r3, r3
 800b002:	61a3      	str	r3, [r4, #24]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	b943      	cbnz	r3, 800b01a <__swsetup_r+0xc6>
 800b008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b00c:	d1ba      	bne.n	800af84 <__swsetup_r+0x30>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	0781      	lsls	r1, r0, #30
 800b012:	bf58      	it	pl
 800b014:	6963      	ldrpl	r3, [r4, #20]
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	e7f4      	b.n	800b004 <__swsetup_r+0xb0>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e7f7      	b.n	800b00e <__swsetup_r+0xba>
 800b01e:	bf00      	nop
 800b020:	20000060 	.word	0x20000060
 800b024:	0800bbf4 	.word	0x0800bbf4
 800b028:	0800bc14 	.word	0x0800bc14
 800b02c:	0800bbd4 	.word	0x0800bbd4

0800b030 <abort>:
 800b030:	b508      	push	{r3, lr}
 800b032:	2006      	movs	r0, #6
 800b034:	f000 faa4 	bl	800b580 <raise>
 800b038:	2001      	movs	r0, #1
 800b03a:	f7f8 fec5 	bl	8003dc8 <_exit>
	...

0800b040 <__sflush_r>:
 800b040:	898a      	ldrh	r2, [r1, #12]
 800b042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	4605      	mov	r5, r0
 800b048:	0710      	lsls	r0, r2, #28
 800b04a:	460c      	mov	r4, r1
 800b04c:	d458      	bmi.n	800b100 <__sflush_r+0xc0>
 800b04e:	684b      	ldr	r3, [r1, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc05      	bgt.n	800b060 <__sflush_r+0x20>
 800b054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	dc02      	bgt.n	800b060 <__sflush_r+0x20>
 800b05a:	2000      	movs	r0, #0
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b062:	2e00      	cmp	r6, #0
 800b064:	d0f9      	beq.n	800b05a <__sflush_r+0x1a>
 800b066:	2300      	movs	r3, #0
 800b068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b06c:	682f      	ldr	r7, [r5, #0]
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	d032      	beq.n	800b0d8 <__sflush_r+0x98>
 800b072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	075a      	lsls	r2, r3, #29
 800b078:	d505      	bpl.n	800b086 <__sflush_r+0x46>
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	1ac0      	subs	r0, r0, r3
 800b07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b080:	b10b      	cbz	r3, 800b086 <__sflush_r+0x46>
 800b082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b084:	1ac0      	subs	r0, r0, r3
 800b086:	2300      	movs	r3, #0
 800b088:	4602      	mov	r2, r0
 800b08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b08c:	6a21      	ldr	r1, [r4, #32]
 800b08e:	4628      	mov	r0, r5
 800b090:	47b0      	blx	r6
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	d106      	bne.n	800b0a6 <__sflush_r+0x66>
 800b098:	6829      	ldr	r1, [r5, #0]
 800b09a:	291d      	cmp	r1, #29
 800b09c:	d82c      	bhi.n	800b0f8 <__sflush_r+0xb8>
 800b09e:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <__sflush_r+0x108>)
 800b0a0:	40ca      	lsrs	r2, r1
 800b0a2:	07d6      	lsls	r6, r2, #31
 800b0a4:	d528      	bpl.n	800b0f8 <__sflush_r+0xb8>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	6062      	str	r2, [r4, #4]
 800b0aa:	04d9      	lsls	r1, r3, #19
 800b0ac:	6922      	ldr	r2, [r4, #16]
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	d504      	bpl.n	800b0bc <__sflush_r+0x7c>
 800b0b2:	1c42      	adds	r2, r0, #1
 800b0b4:	d101      	bne.n	800b0ba <__sflush_r+0x7a>
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	b903      	cbnz	r3, 800b0bc <__sflush_r+0x7c>
 800b0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800b0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0be:	602f      	str	r7, [r5, #0]
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	d0ca      	beq.n	800b05a <__sflush_r+0x1a>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <__sflush_r+0x92>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f7ff f9eb 	bl	800a4a8 <_free_r>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b0d6:	e7c1      	b.n	800b05c <__sflush_r+0x1c>
 800b0d8:	6a21      	ldr	r1, [r4, #32]
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b0      	blx	r6
 800b0e0:	1c41      	adds	r1, r0, #1
 800b0e2:	d1c7      	bne.n	800b074 <__sflush_r+0x34>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0c4      	beq.n	800b074 <__sflush_r+0x34>
 800b0ea:	2b1d      	cmp	r3, #29
 800b0ec:	d001      	beq.n	800b0f2 <__sflush_r+0xb2>
 800b0ee:	2b16      	cmp	r3, #22
 800b0f0:	d101      	bne.n	800b0f6 <__sflush_r+0xb6>
 800b0f2:	602f      	str	r7, [r5, #0]
 800b0f4:	e7b1      	b.n	800b05a <__sflush_r+0x1a>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	e7ad      	b.n	800b05c <__sflush_r+0x1c>
 800b100:	690f      	ldr	r7, [r1, #16]
 800b102:	2f00      	cmp	r7, #0
 800b104:	d0a9      	beq.n	800b05a <__sflush_r+0x1a>
 800b106:	0793      	lsls	r3, r2, #30
 800b108:	680e      	ldr	r6, [r1, #0]
 800b10a:	bf08      	it	eq
 800b10c:	694b      	ldreq	r3, [r1, #20]
 800b10e:	600f      	str	r7, [r1, #0]
 800b110:	bf18      	it	ne
 800b112:	2300      	movne	r3, #0
 800b114:	eba6 0807 	sub.w	r8, r6, r7
 800b118:	608b      	str	r3, [r1, #8]
 800b11a:	f1b8 0f00 	cmp.w	r8, #0
 800b11e:	dd9c      	ble.n	800b05a <__sflush_r+0x1a>
 800b120:	6a21      	ldr	r1, [r4, #32]
 800b122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b124:	4643      	mov	r3, r8
 800b126:	463a      	mov	r2, r7
 800b128:	4628      	mov	r0, r5
 800b12a:	47b0      	blx	r6
 800b12c:	2800      	cmp	r0, #0
 800b12e:	dc06      	bgt.n	800b13e <__sflush_r+0xfe>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	e78e      	b.n	800b05c <__sflush_r+0x1c>
 800b13e:	4407      	add	r7, r0
 800b140:	eba8 0800 	sub.w	r8, r8, r0
 800b144:	e7e9      	b.n	800b11a <__sflush_r+0xda>
 800b146:	bf00      	nop
 800b148:	20400001 	.word	0x20400001

0800b14c <_fflush_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	4605      	mov	r5, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b913      	cbnz	r3, 800b15c <_fflush_r+0x10>
 800b156:	2500      	movs	r5, #0
 800b158:	4628      	mov	r0, r5
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	b118      	cbz	r0, 800b166 <_fflush_r+0x1a>
 800b15e:	6983      	ldr	r3, [r0, #24]
 800b160:	b90b      	cbnz	r3, 800b166 <_fflush_r+0x1a>
 800b162:	f000 f887 	bl	800b274 <__sinit>
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <_fflush_r+0x6c>)
 800b168:	429c      	cmp	r4, r3
 800b16a:	d11b      	bne.n	800b1a4 <_fflush_r+0x58>
 800b16c:	686c      	ldr	r4, [r5, #4]
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0ef      	beq.n	800b156 <_fflush_r+0xa>
 800b176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d404      	bmi.n	800b186 <_fflush_r+0x3a>
 800b17c:	0599      	lsls	r1, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_fflush_r+0x3a>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f000 f915 	bl	800b3b0 <__retarget_lock_acquire_recursive>
 800b186:	4628      	mov	r0, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	f7ff ff59 	bl	800b040 <__sflush_r>
 800b18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	4605      	mov	r5, r0
 800b194:	d4e0      	bmi.n	800b158 <_fflush_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d4dd      	bmi.n	800b158 <_fflush_r+0xc>
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f000 f908 	bl	800b3b2 <__retarget_lock_release_recursive>
 800b1a2:	e7d9      	b.n	800b158 <_fflush_r+0xc>
 800b1a4:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <_fflush_r+0x70>)
 800b1a6:	429c      	cmp	r4, r3
 800b1a8:	d101      	bne.n	800b1ae <_fflush_r+0x62>
 800b1aa:	68ac      	ldr	r4, [r5, #8]
 800b1ac:	e7df      	b.n	800b16e <_fflush_r+0x22>
 800b1ae:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <_fflush_r+0x74>)
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	bf08      	it	eq
 800b1b4:	68ec      	ldreq	r4, [r5, #12]
 800b1b6:	e7da      	b.n	800b16e <_fflush_r+0x22>
 800b1b8:	0800bbf4 	.word	0x0800bbf4
 800b1bc:	0800bc14 	.word	0x0800bc14
 800b1c0:	0800bbd4 	.word	0x0800bbd4

0800b1c4 <std>:
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1d2:	6083      	str	r3, [r0, #8]
 800b1d4:	8181      	strh	r1, [r0, #12]
 800b1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b1d8:	81c2      	strh	r2, [r0, #14]
 800b1da:	6183      	str	r3, [r0, #24]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	2208      	movs	r2, #8
 800b1e0:	305c      	adds	r0, #92	; 0x5c
 800b1e2:	f7ff f867 	bl	800a2b4 <memset>
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <std+0x38>)
 800b1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <std+0x3c>)
 800b1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ee:	4b05      	ldr	r3, [pc, #20]	; (800b204 <std+0x40>)
 800b1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <std+0x44>)
 800b1f4:	6224      	str	r4, [r4, #32]
 800b1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b1f8:	bd10      	pop	{r4, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800b5b9 	.word	0x0800b5b9
 800b200:	0800b5db 	.word	0x0800b5db
 800b204:	0800b613 	.word	0x0800b613
 800b208:	0800b637 	.word	0x0800b637

0800b20c <_cleanup_r>:
 800b20c:	4901      	ldr	r1, [pc, #4]	; (800b214 <_cleanup_r+0x8>)
 800b20e:	f000 b8af 	b.w	800b370 <_fwalk_reent>
 800b212:	bf00      	nop
 800b214:	0800b14d 	.word	0x0800b14d

0800b218 <__sfmoreglue>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	1e4a      	subs	r2, r1, #1
 800b21c:	2568      	movs	r5, #104	; 0x68
 800b21e:	4355      	muls	r5, r2
 800b220:	460e      	mov	r6, r1
 800b222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b226:	f7ff f98f 	bl	800a548 <_malloc_r>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b140      	cbz	r0, 800b240 <__sfmoreglue+0x28>
 800b22e:	2100      	movs	r1, #0
 800b230:	e9c0 1600 	strd	r1, r6, [r0]
 800b234:	300c      	adds	r0, #12
 800b236:	60a0      	str	r0, [r4, #8]
 800b238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b23c:	f7ff f83a 	bl	800a2b4 <memset>
 800b240:	4620      	mov	r0, r4
 800b242:	bd70      	pop	{r4, r5, r6, pc}

0800b244 <__sfp_lock_acquire>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__sfp_lock_acquire+0x8>)
 800b246:	f000 b8b3 	b.w	800b3b0 <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	2000098c 	.word	0x2000098c

0800b250 <__sfp_lock_release>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__sfp_lock_release+0x8>)
 800b252:	f000 b8ae 	b.w	800b3b2 <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	2000098c 	.word	0x2000098c

0800b25c <__sinit_lock_acquire>:
 800b25c:	4801      	ldr	r0, [pc, #4]	; (800b264 <__sinit_lock_acquire+0x8>)
 800b25e:	f000 b8a7 	b.w	800b3b0 <__retarget_lock_acquire_recursive>
 800b262:	bf00      	nop
 800b264:	20000987 	.word	0x20000987

0800b268 <__sinit_lock_release>:
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <__sinit_lock_release+0x8>)
 800b26a:	f000 b8a2 	b.w	800b3b2 <__retarget_lock_release_recursive>
 800b26e:	bf00      	nop
 800b270:	20000987 	.word	0x20000987

0800b274 <__sinit>:
 800b274:	b510      	push	{r4, lr}
 800b276:	4604      	mov	r4, r0
 800b278:	f7ff fff0 	bl	800b25c <__sinit_lock_acquire>
 800b27c:	69a3      	ldr	r3, [r4, #24]
 800b27e:	b11b      	cbz	r3, 800b288 <__sinit+0x14>
 800b280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b284:	f7ff bff0 	b.w	800b268 <__sinit_lock_release>
 800b288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b28c:	6523      	str	r3, [r4, #80]	; 0x50
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <__sinit+0x68>)
 800b290:	4a13      	ldr	r2, [pc, #76]	; (800b2e0 <__sinit+0x6c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	62a2      	str	r2, [r4, #40]	; 0x28
 800b296:	42a3      	cmp	r3, r4
 800b298:	bf04      	itt	eq
 800b29a:	2301      	moveq	r3, #1
 800b29c:	61a3      	streq	r3, [r4, #24]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 f820 	bl	800b2e4 <__sfp>
 800b2a4:	6060      	str	r0, [r4, #4]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 f81c 	bl	800b2e4 <__sfp>
 800b2ac:	60a0      	str	r0, [r4, #8]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 f818 	bl	800b2e4 <__sfp>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	60e0      	str	r0, [r4, #12]
 800b2b8:	2104      	movs	r1, #4
 800b2ba:	6860      	ldr	r0, [r4, #4]
 800b2bc:	f7ff ff82 	bl	800b1c4 <std>
 800b2c0:	68a0      	ldr	r0, [r4, #8]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	2109      	movs	r1, #9
 800b2c6:	f7ff ff7d 	bl	800b1c4 <std>
 800b2ca:	68e0      	ldr	r0, [r4, #12]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	2112      	movs	r1, #18
 800b2d0:	f7ff ff78 	bl	800b1c4 <std>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	61a3      	str	r3, [r4, #24]
 800b2d8:	e7d2      	b.n	800b280 <__sinit+0xc>
 800b2da:	bf00      	nop
 800b2dc:	0800bae8 	.word	0x0800bae8
 800b2e0:	0800b20d 	.word	0x0800b20d

0800b2e4 <__sfp>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	f7ff ffac 	bl	800b244 <__sfp_lock_acquire>
 800b2ec:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <__sfp+0x84>)
 800b2ee:	681e      	ldr	r6, [r3, #0]
 800b2f0:	69b3      	ldr	r3, [r6, #24]
 800b2f2:	b913      	cbnz	r3, 800b2fa <__sfp+0x16>
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f7ff ffbd 	bl	800b274 <__sinit>
 800b2fa:	3648      	adds	r6, #72	; 0x48
 800b2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b300:	3b01      	subs	r3, #1
 800b302:	d503      	bpl.n	800b30c <__sfp+0x28>
 800b304:	6833      	ldr	r3, [r6, #0]
 800b306:	b30b      	cbz	r3, 800b34c <__sfp+0x68>
 800b308:	6836      	ldr	r6, [r6, #0]
 800b30a:	e7f7      	b.n	800b2fc <__sfp+0x18>
 800b30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b310:	b9d5      	cbnz	r5, 800b348 <__sfp+0x64>
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <__sfp+0x88>)
 800b314:	60e3      	str	r3, [r4, #12]
 800b316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b31a:	6665      	str	r5, [r4, #100]	; 0x64
 800b31c:	f000 f847 	bl	800b3ae <__retarget_lock_init_recursive>
 800b320:	f7ff ff96 	bl	800b250 <__sfp_lock_release>
 800b324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b32c:	6025      	str	r5, [r4, #0]
 800b32e:	61a5      	str	r5, [r4, #24]
 800b330:	2208      	movs	r2, #8
 800b332:	4629      	mov	r1, r5
 800b334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b338:	f7fe ffbc 	bl	800a2b4 <memset>
 800b33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b344:	4620      	mov	r0, r4
 800b346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b348:	3468      	adds	r4, #104	; 0x68
 800b34a:	e7d9      	b.n	800b300 <__sfp+0x1c>
 800b34c:	2104      	movs	r1, #4
 800b34e:	4638      	mov	r0, r7
 800b350:	f7ff ff62 	bl	800b218 <__sfmoreglue>
 800b354:	4604      	mov	r4, r0
 800b356:	6030      	str	r0, [r6, #0]
 800b358:	2800      	cmp	r0, #0
 800b35a:	d1d5      	bne.n	800b308 <__sfp+0x24>
 800b35c:	f7ff ff78 	bl	800b250 <__sfp_lock_release>
 800b360:	230c      	movs	r3, #12
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	e7ee      	b.n	800b344 <__sfp+0x60>
 800b366:	bf00      	nop
 800b368:	0800bae8 	.word	0x0800bae8
 800b36c:	ffff0001 	.word	0xffff0001

0800b370 <_fwalk_reent>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4606      	mov	r6, r0
 800b376:	4688      	mov	r8, r1
 800b378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b37c:	2700      	movs	r7, #0
 800b37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b382:	f1b9 0901 	subs.w	r9, r9, #1
 800b386:	d505      	bpl.n	800b394 <_fwalk_reent+0x24>
 800b388:	6824      	ldr	r4, [r4, #0]
 800b38a:	2c00      	cmp	r4, #0
 800b38c:	d1f7      	bne.n	800b37e <_fwalk_reent+0xe>
 800b38e:	4638      	mov	r0, r7
 800b390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b394:	89ab      	ldrh	r3, [r5, #12]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d907      	bls.n	800b3aa <_fwalk_reent+0x3a>
 800b39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	d003      	beq.n	800b3aa <_fwalk_reent+0x3a>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	47c0      	blx	r8
 800b3a8:	4307      	orrs	r7, r0
 800b3aa:	3568      	adds	r5, #104	; 0x68
 800b3ac:	e7e9      	b.n	800b382 <_fwalk_reent+0x12>

0800b3ae <__retarget_lock_init_recursive>:
 800b3ae:	4770      	bx	lr

0800b3b0 <__retarget_lock_acquire_recursive>:
 800b3b0:	4770      	bx	lr

0800b3b2 <__retarget_lock_release_recursive>:
 800b3b2:	4770      	bx	lr

0800b3b4 <__swhatbuf_r>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	b096      	sub	sp, #88	; 0x58
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	461d      	mov	r5, r3
 800b3c4:	da07      	bge.n	800b3d6 <__swhatbuf_r+0x22>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	89b3      	ldrh	r3, [r6, #12]
 800b3cc:	061a      	lsls	r2, r3, #24
 800b3ce:	d410      	bmi.n	800b3f2 <__swhatbuf_r+0x3e>
 800b3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d4:	e00e      	b.n	800b3f4 <__swhatbuf_r+0x40>
 800b3d6:	466a      	mov	r2, sp
 800b3d8:	f000 f954 	bl	800b684 <_fstat_r>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dbf2      	blt.n	800b3c6 <__swhatbuf_r+0x12>
 800b3e0:	9a01      	ldr	r2, [sp, #4]
 800b3e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3ea:	425a      	negs	r2, r3
 800b3ec:	415a      	adcs	r2, r3
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	e7ee      	b.n	800b3d0 <__swhatbuf_r+0x1c>
 800b3f2:	2340      	movs	r3, #64	; 0x40
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	b016      	add	sp, #88	; 0x58
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}

0800b3fc <__smakebuf_r>:
 800b3fc:	898b      	ldrh	r3, [r1, #12]
 800b3fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b400:	079d      	lsls	r5, r3, #30
 800b402:	4606      	mov	r6, r0
 800b404:	460c      	mov	r4, r1
 800b406:	d507      	bpl.n	800b418 <__smakebuf_r+0x1c>
 800b408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	6123      	str	r3, [r4, #16]
 800b410:	2301      	movs	r3, #1
 800b412:	6163      	str	r3, [r4, #20]
 800b414:	b002      	add	sp, #8
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	ab01      	add	r3, sp, #4
 800b41a:	466a      	mov	r2, sp
 800b41c:	f7ff ffca 	bl	800b3b4 <__swhatbuf_r>
 800b420:	9900      	ldr	r1, [sp, #0]
 800b422:	4605      	mov	r5, r0
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff f88f 	bl	800a548 <_malloc_r>
 800b42a:	b948      	cbnz	r0, 800b440 <__smakebuf_r+0x44>
 800b42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b430:	059a      	lsls	r2, r3, #22
 800b432:	d4ef      	bmi.n	800b414 <__smakebuf_r+0x18>
 800b434:	f023 0303 	bic.w	r3, r3, #3
 800b438:	f043 0302 	orr.w	r3, r3, #2
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	e7e3      	b.n	800b408 <__smakebuf_r+0xc>
 800b440:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <__smakebuf_r+0x7c>)
 800b442:	62b3      	str	r3, [r6, #40]	; 0x28
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	6020      	str	r0, [r4, #0]
 800b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	6163      	str	r3, [r4, #20]
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	6120      	str	r0, [r4, #16]
 800b456:	b15b      	cbz	r3, 800b470 <__smakebuf_r+0x74>
 800b458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b45c:	4630      	mov	r0, r6
 800b45e:	f000 f923 	bl	800b6a8 <_isatty_r>
 800b462:	b128      	cbz	r0, 800b470 <__smakebuf_r+0x74>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f023 0303 	bic.w	r3, r3, #3
 800b46a:	f043 0301 	orr.w	r3, r3, #1
 800b46e:	81a3      	strh	r3, [r4, #12]
 800b470:	89a0      	ldrh	r0, [r4, #12]
 800b472:	4305      	orrs	r5, r0
 800b474:	81a5      	strh	r5, [r4, #12]
 800b476:	e7cd      	b.n	800b414 <__smakebuf_r+0x18>
 800b478:	0800b20d 	.word	0x0800b20d

0800b47c <memcpy>:
 800b47c:	440a      	add	r2, r1
 800b47e:	4291      	cmp	r1, r2
 800b480:	f100 33ff 	add.w	r3, r0, #4294967295
 800b484:	d100      	bne.n	800b488 <memcpy+0xc>
 800b486:	4770      	bx	lr
 800b488:	b510      	push	{r4, lr}
 800b48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b492:	4291      	cmp	r1, r2
 800b494:	d1f9      	bne.n	800b48a <memcpy+0xe>
 800b496:	bd10      	pop	{r4, pc}

0800b498 <memmove>:
 800b498:	4288      	cmp	r0, r1
 800b49a:	b510      	push	{r4, lr}
 800b49c:	eb01 0402 	add.w	r4, r1, r2
 800b4a0:	d902      	bls.n	800b4a8 <memmove+0x10>
 800b4a2:	4284      	cmp	r4, r0
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	d807      	bhi.n	800b4b8 <memmove+0x20>
 800b4a8:	1e43      	subs	r3, r0, #1
 800b4aa:	42a1      	cmp	r1, r4
 800b4ac:	d008      	beq.n	800b4c0 <memmove+0x28>
 800b4ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4b6:	e7f8      	b.n	800b4aa <memmove+0x12>
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	428a      	cmp	r2, r1
 800b4be:	d100      	bne.n	800b4c2 <memmove+0x2a>
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ca:	e7f7      	b.n	800b4bc <memmove+0x24>

0800b4cc <__malloc_lock>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	; (800b4d4 <__malloc_lock+0x8>)
 800b4ce:	f7ff bf6f 	b.w	800b3b0 <__retarget_lock_acquire_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	20000988 	.word	0x20000988

0800b4d8 <__malloc_unlock>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	; (800b4e0 <__malloc_unlock+0x8>)
 800b4da:	f7ff bf6a 	b.w	800b3b2 <__retarget_lock_release_recursive>
 800b4de:	bf00      	nop
 800b4e0:	20000988 	.word	0x20000988

0800b4e4 <_realloc_r>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	4614      	mov	r4, r2
 800b4ea:	460e      	mov	r6, r1
 800b4ec:	b921      	cbnz	r1, 800b4f8 <_realloc_r+0x14>
 800b4ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	f7ff b828 	b.w	800a548 <_malloc_r>
 800b4f8:	b922      	cbnz	r2, 800b504 <_realloc_r+0x20>
 800b4fa:	f7fe ffd5 	bl	800a4a8 <_free_r>
 800b4fe:	4625      	mov	r5, r4
 800b500:	4628      	mov	r0, r5
 800b502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b504:	f000 f8f2 	bl	800b6ec <_malloc_usable_size_r>
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d20f      	bcs.n	800b52c <_realloc_r+0x48>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4638      	mov	r0, r7
 800b510:	f7ff f81a 	bl	800a548 <_malloc_r>
 800b514:	4605      	mov	r5, r0
 800b516:	2800      	cmp	r0, #0
 800b518:	d0f2      	beq.n	800b500 <_realloc_r+0x1c>
 800b51a:	4631      	mov	r1, r6
 800b51c:	4622      	mov	r2, r4
 800b51e:	f7ff ffad 	bl	800b47c <memcpy>
 800b522:	4631      	mov	r1, r6
 800b524:	4638      	mov	r0, r7
 800b526:	f7fe ffbf 	bl	800a4a8 <_free_r>
 800b52a:	e7e9      	b.n	800b500 <_realloc_r+0x1c>
 800b52c:	4635      	mov	r5, r6
 800b52e:	e7e7      	b.n	800b500 <_realloc_r+0x1c>

0800b530 <_raise_r>:
 800b530:	291f      	cmp	r1, #31
 800b532:	b538      	push	{r3, r4, r5, lr}
 800b534:	4604      	mov	r4, r0
 800b536:	460d      	mov	r5, r1
 800b538:	d904      	bls.n	800b544 <_raise_r+0x14>
 800b53a:	2316      	movs	r3, #22
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	f04f 30ff 	mov.w	r0, #4294967295
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b546:	b112      	cbz	r2, 800b54e <_raise_r+0x1e>
 800b548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b54c:	b94b      	cbnz	r3, 800b562 <_raise_r+0x32>
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 f830 	bl	800b5b4 <_getpid_r>
 800b554:	462a      	mov	r2, r5
 800b556:	4601      	mov	r1, r0
 800b558:	4620      	mov	r0, r4
 800b55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b55e:	f000 b817 	b.w	800b590 <_kill_r>
 800b562:	2b01      	cmp	r3, #1
 800b564:	d00a      	beq.n	800b57c <_raise_r+0x4c>
 800b566:	1c59      	adds	r1, r3, #1
 800b568:	d103      	bne.n	800b572 <_raise_r+0x42>
 800b56a:	2316      	movs	r3, #22
 800b56c:	6003      	str	r3, [r0, #0]
 800b56e:	2001      	movs	r0, #1
 800b570:	e7e7      	b.n	800b542 <_raise_r+0x12>
 800b572:	2400      	movs	r4, #0
 800b574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b578:	4628      	mov	r0, r5
 800b57a:	4798      	blx	r3
 800b57c:	2000      	movs	r0, #0
 800b57e:	e7e0      	b.n	800b542 <_raise_r+0x12>

0800b580 <raise>:
 800b580:	4b02      	ldr	r3, [pc, #8]	; (800b58c <raise+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f7ff bfd3 	b.w	800b530 <_raise_r>
 800b58a:	bf00      	nop
 800b58c:	20000060 	.word	0x20000060

0800b590 <_kill_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d07      	ldr	r5, [pc, #28]	; (800b5b0 <_kill_r+0x20>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	602b      	str	r3, [r5, #0]
 800b59e:	f7f8 fc03 	bl	8003da8 <_kill>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	d102      	bne.n	800b5ac <_kill_r+0x1c>
 800b5a6:	682b      	ldr	r3, [r5, #0]
 800b5a8:	b103      	cbz	r3, 800b5ac <_kill_r+0x1c>
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	bd38      	pop	{r3, r4, r5, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000980 	.word	0x20000980

0800b5b4 <_getpid_r>:
 800b5b4:	f7f8 bbf0 	b.w	8003d98 <_getpid>

0800b5b8 <__sread>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c0:	f000 f89c 	bl	800b6fc <_read_r>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	bfab      	itete	ge
 800b5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b5cc:	181b      	addge	r3, r3, r0
 800b5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5d2:	bfac      	ite	ge
 800b5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5d6:	81a3      	strhlt	r3, [r4, #12]
 800b5d8:	bd10      	pop	{r4, pc}

0800b5da <__swrite>:
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	461f      	mov	r7, r3
 800b5e0:	898b      	ldrh	r3, [r1, #12]
 800b5e2:	05db      	lsls	r3, r3, #23
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	4616      	mov	r6, r2
 800b5ea:	d505      	bpl.n	800b5f8 <__swrite+0x1e>
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f000 f868 	bl	800b6c8 <_lseek_r>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	4632      	mov	r2, r6
 800b606:	463b      	mov	r3, r7
 800b608:	4628      	mov	r0, r5
 800b60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b60e:	f000 b817 	b.w	800b640 <_write_r>

0800b612 <__sseek>:
 800b612:	b510      	push	{r4, lr}
 800b614:	460c      	mov	r4, r1
 800b616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61a:	f000 f855 	bl	800b6c8 <_lseek_r>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	bf15      	itete	ne
 800b624:	6560      	strne	r0, [r4, #84]	; 0x54
 800b626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b62e:	81a3      	strheq	r3, [r4, #12]
 800b630:	bf18      	it	ne
 800b632:	81a3      	strhne	r3, [r4, #12]
 800b634:	bd10      	pop	{r4, pc}

0800b636 <__sclose>:
 800b636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63a:	f000 b813 	b.w	800b664 <_close_r>
	...

0800b640 <_write_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d07      	ldr	r5, [pc, #28]	; (800b660 <_write_r+0x20>)
 800b644:	4604      	mov	r4, r0
 800b646:	4608      	mov	r0, r1
 800b648:	4611      	mov	r1, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	602a      	str	r2, [r5, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	f7f8 fbe1 	bl	8003e16 <_write>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	d102      	bne.n	800b65e <_write_r+0x1e>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	b103      	cbz	r3, 800b65e <_write_r+0x1e>
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	20000980 	.word	0x20000980

0800b664 <_close_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d06      	ldr	r5, [pc, #24]	; (800b680 <_close_r+0x1c>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	f7f8 fbed 	bl	8003e4e <_close>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_close_r+0x1a>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_close_r+0x1a>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20000980 	.word	0x20000980

0800b684 <_fstat_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	; (800b6a4 <_fstat_r+0x20>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f7f8 fbe8 	bl	8003e66 <_fstat>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d102      	bne.n	800b6a0 <_fstat_r+0x1c>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b103      	cbz	r3, 800b6a0 <_fstat_r+0x1c>
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000980 	.word	0x20000980

0800b6a8 <_isatty_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d06      	ldr	r5, [pc, #24]	; (800b6c4 <_isatty_r+0x1c>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	f7f8 fbe7 	bl	8003e86 <_isatty>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_isatty_r+0x1a>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_isatty_r+0x1a>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	20000980 	.word	0x20000980

0800b6c8 <_lseek_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	; (800b6e8 <_lseek_r+0x20>)
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	602a      	str	r2, [r5, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f7f8 fbe0 	bl	8003e9c <_lseek>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_lseek_r+0x1e>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_lseek_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20000980 	.word	0x20000980

0800b6ec <_malloc_usable_size_r>:
 800b6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6f0:	1f18      	subs	r0, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bfbc      	itt	lt
 800b6f6:	580b      	ldrlt	r3, [r1, r0]
 800b6f8:	18c0      	addlt	r0, r0, r3
 800b6fa:	4770      	bx	lr

0800b6fc <_read_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_read_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7f8 fb66 	bl	8003ddc <_read>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_read_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_read_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	20000980 	.word	0x20000980

0800b720 <sqrt>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	ed2d 8b02 	vpush	{d8}
 800b726:	ec55 4b10 	vmov	r4, r5, d0
 800b72a:	f000 f82d 	bl	800b788 <__ieee754_sqrt>
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <sqrt+0x64>)
 800b730:	eeb0 8a40 	vmov.f32	s16, s0
 800b734:	eef0 8a60 	vmov.f32	s17, s1
 800b738:	f993 3000 	ldrsb.w	r3, [r3]
 800b73c:	3301      	adds	r3, #1
 800b73e:	d019      	beq.n	800b774 <sqrt+0x54>
 800b740:	4622      	mov	r2, r4
 800b742:	462b      	mov	r3, r5
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f5 f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800b74c:	b990      	cbnz	r0, 800b774 <sqrt+0x54>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f5 f9c1 	bl	8000adc <__aeabi_dcmplt>
 800b75a:	b158      	cbz	r0, 800b774 <sqrt+0x54>
 800b75c:	f7fe fd80 	bl	800a260 <__errno>
 800b760:	2321      	movs	r3, #33	; 0x21
 800b762:	6003      	str	r3, [r0, #0]
 800b764:	2200      	movs	r2, #0
 800b766:	2300      	movs	r3, #0
 800b768:	4610      	mov	r0, r2
 800b76a:	4619      	mov	r1, r3
 800b76c:	f7f5 f86e 	bl	800084c <__aeabi_ddiv>
 800b770:	ec41 0b18 	vmov	d8, r0, r1
 800b774:	eeb0 0a48 	vmov.f32	s0, s16
 800b778:	eef0 0a68 	vmov.f32	s1, s17
 800b77c:	ecbd 8b02 	vpop	{d8}
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	200000c4 	.word	0x200000c4

0800b788 <__ieee754_sqrt>:
 800b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	ec55 4b10 	vmov	r4, r5, d0
 800b790:	4e56      	ldr	r6, [pc, #344]	; (800b8ec <__ieee754_sqrt+0x164>)
 800b792:	43ae      	bics	r6, r5
 800b794:	ee10 0a10 	vmov	r0, s0
 800b798:	ee10 3a10 	vmov	r3, s0
 800b79c:	4629      	mov	r1, r5
 800b79e:	462a      	mov	r2, r5
 800b7a0:	d110      	bne.n	800b7c4 <__ieee754_sqrt+0x3c>
 800b7a2:	ee10 2a10 	vmov	r2, s0
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f7f4 ff26 	bl	80005f8 <__aeabi_dmul>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f4 fd6a 	bl	800028c <__adddf3>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	ec45 4b10 	vmov	d0, r4, r5
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	dc10      	bgt.n	800b7ea <__ieee754_sqrt+0x62>
 800b7c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7cc:	4330      	orrs	r0, r6
 800b7ce:	d0f5      	beq.n	800b7bc <__ieee754_sqrt+0x34>
 800b7d0:	b15d      	cbz	r5, 800b7ea <__ieee754_sqrt+0x62>
 800b7d2:	ee10 2a10 	vmov	r2, s0
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	ee10 0a10 	vmov	r0, s0
 800b7dc:	f7f4 fd54 	bl	8000288 <__aeabi_dsub>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	f7f5 f832 	bl	800084c <__aeabi_ddiv>
 800b7e8:	e7e6      	b.n	800b7b8 <__ieee754_sqrt+0x30>
 800b7ea:	1509      	asrs	r1, r1, #20
 800b7ec:	d076      	beq.n	800b8dc <__ieee754_sqrt+0x154>
 800b7ee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b7f2:	07ce      	lsls	r6, r1, #31
 800b7f4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b7f8:	bf5e      	ittt	pl
 800b7fa:	0fda      	lsrpl	r2, r3, #31
 800b7fc:	005b      	lslpl	r3, r3, #1
 800b7fe:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b802:	0fda      	lsrs	r2, r3, #31
 800b804:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b808:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b80c:	2000      	movs	r0, #0
 800b80e:	106d      	asrs	r5, r5, #1
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	f04f 0e16 	mov.w	lr, #22
 800b816:	4684      	mov	ip, r0
 800b818:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b81c:	eb0c 0401 	add.w	r4, ip, r1
 800b820:	4294      	cmp	r4, r2
 800b822:	bfde      	ittt	le
 800b824:	1b12      	suble	r2, r2, r4
 800b826:	eb04 0c01 	addle.w	ip, r4, r1
 800b82a:	1840      	addle	r0, r0, r1
 800b82c:	0052      	lsls	r2, r2, #1
 800b82e:	f1be 0e01 	subs.w	lr, lr, #1
 800b832:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b836:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b83a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b83e:	d1ed      	bne.n	800b81c <__ieee754_sqrt+0x94>
 800b840:	4671      	mov	r1, lr
 800b842:	2720      	movs	r7, #32
 800b844:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b848:	4562      	cmp	r2, ip
 800b84a:	eb04 060e 	add.w	r6, r4, lr
 800b84e:	dc02      	bgt.n	800b856 <__ieee754_sqrt+0xce>
 800b850:	d113      	bne.n	800b87a <__ieee754_sqrt+0xf2>
 800b852:	429e      	cmp	r6, r3
 800b854:	d811      	bhi.n	800b87a <__ieee754_sqrt+0xf2>
 800b856:	2e00      	cmp	r6, #0
 800b858:	eb06 0e04 	add.w	lr, r6, r4
 800b85c:	da43      	bge.n	800b8e6 <__ieee754_sqrt+0x15e>
 800b85e:	f1be 0f00 	cmp.w	lr, #0
 800b862:	db40      	blt.n	800b8e6 <__ieee754_sqrt+0x15e>
 800b864:	f10c 0801 	add.w	r8, ip, #1
 800b868:	eba2 020c 	sub.w	r2, r2, ip
 800b86c:	429e      	cmp	r6, r3
 800b86e:	bf88      	it	hi
 800b870:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b874:	1b9b      	subs	r3, r3, r6
 800b876:	4421      	add	r1, r4
 800b878:	46c4      	mov	ip, r8
 800b87a:	0052      	lsls	r2, r2, #1
 800b87c:	3f01      	subs	r7, #1
 800b87e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b882:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b886:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b88a:	d1dd      	bne.n	800b848 <__ieee754_sqrt+0xc0>
 800b88c:	4313      	orrs	r3, r2
 800b88e:	d006      	beq.n	800b89e <__ieee754_sqrt+0x116>
 800b890:	1c4c      	adds	r4, r1, #1
 800b892:	bf13      	iteet	ne
 800b894:	3101      	addne	r1, #1
 800b896:	3001      	addeq	r0, #1
 800b898:	4639      	moveq	r1, r7
 800b89a:	f021 0101 	bicne.w	r1, r1, #1
 800b89e:	1043      	asrs	r3, r0, #1
 800b8a0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b8a4:	0849      	lsrs	r1, r1, #1
 800b8a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b8aa:	07c2      	lsls	r2, r0, #31
 800b8ac:	bf48      	it	mi
 800b8ae:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b8b2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	463d      	mov	r5, r7
 800b8ba:	e77f      	b.n	800b7bc <__ieee754_sqrt+0x34>
 800b8bc:	0ada      	lsrs	r2, r3, #11
 800b8be:	3815      	subs	r0, #21
 800b8c0:	055b      	lsls	r3, r3, #21
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	d0fa      	beq.n	800b8bc <__ieee754_sqrt+0x134>
 800b8c6:	02d7      	lsls	r7, r2, #11
 800b8c8:	d50a      	bpl.n	800b8e0 <__ieee754_sqrt+0x158>
 800b8ca:	f1c1 0420 	rsb	r4, r1, #32
 800b8ce:	fa23 f404 	lsr.w	r4, r3, r4
 800b8d2:	1e4d      	subs	r5, r1, #1
 800b8d4:	408b      	lsls	r3, r1
 800b8d6:	4322      	orrs	r2, r4
 800b8d8:	1b41      	subs	r1, r0, r5
 800b8da:	e788      	b.n	800b7ee <__ieee754_sqrt+0x66>
 800b8dc:	4608      	mov	r0, r1
 800b8de:	e7f0      	b.n	800b8c2 <__ieee754_sqrt+0x13a>
 800b8e0:	0052      	lsls	r2, r2, #1
 800b8e2:	3101      	adds	r1, #1
 800b8e4:	e7ef      	b.n	800b8c6 <__ieee754_sqrt+0x13e>
 800b8e6:	46e0      	mov	r8, ip
 800b8e8:	e7be      	b.n	800b868 <__ieee754_sqrt+0xe0>
 800b8ea:	bf00      	nop
 800b8ec:	7ff00000 	.word	0x7ff00000

0800b8f0 <_gettimeofday>:
 800b8f0:	4b02      	ldr	r3, [pc, #8]	; (800b8fc <_gettimeofday+0xc>)
 800b8f2:	2258      	movs	r2, #88	; 0x58
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fa:	4770      	bx	lr
 800b8fc:	20000980 	.word	0x20000980

0800b900 <_init>:
 800b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b902:	bf00      	nop
 800b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b906:	bc08      	pop	{r3}
 800b908:	469e      	mov	lr, r3
 800b90a:	4770      	bx	lr

0800b90c <_fini>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr
