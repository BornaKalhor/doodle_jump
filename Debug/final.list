
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004510  08004510  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004510  08004510  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000004f4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c27  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288e  00000000  00000000  00034c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000374f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a0  00000000  00000000  000386b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb55  00000000  00000000  00039750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c08  00000000  00000000  000582a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b922e  00000000  00000000  0006cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001260db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b54  00000000  00000000  00126130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004434 	.word	0x08004434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004434 	.word	0x08004434

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08e      	sub	sp, #56	; 0x38
 80001dc:	af0a      	add	r7, sp, #40	; 0x28
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	4608      	mov	r0, r1
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	4603      	mov	r3, r0
 80001e8:	817b      	strh	r3, [r7, #10]
 80001ea:	460b      	mov	r3, r1
 80001ec:	813b      	strh	r3, [r7, #8]
 80001ee:	4613      	mov	r3, r2
 80001f0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <LiquidCrystal+0x90>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d019      	beq.n	800022e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001fa:	8939      	ldrh	r1, [r7, #8]
 80001fc:	897a      	ldrh	r2, [r7, #10]
 80001fe:	2300      	movs	r3, #0
 8000200:	9308      	str	r3, [sp, #32]
 8000202:	2300      	movs	r3, #0
 8000204:	9307      	str	r3, [sp, #28]
 8000206:	2300      	movs	r3, #0
 8000208:	9306      	str	r3, [sp, #24]
 800020a:	2300      	movs	r3, #0
 800020c:	9305      	str	r3, [sp, #20]
 800020e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000210:	9304      	str	r3, [sp, #16]
 8000212:	8c3b      	ldrh	r3, [r7, #32]
 8000214:	9303      	str	r3, [sp, #12]
 8000216:	8bbb      	ldrh	r3, [r7, #28]
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	8b3b      	ldrh	r3, [r7, #24]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	460b      	mov	r3, r1
 8000224:	68f9      	ldr	r1, [r7, #12]
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f820 	bl	800026c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800022c:	e018      	b.n	8000260 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800022e:	8939      	ldrh	r1, [r7, #8]
 8000230:	897a      	ldrh	r2, [r7, #10]
 8000232:	2300      	movs	r3, #0
 8000234:	9308      	str	r3, [sp, #32]
 8000236:	2300      	movs	r3, #0
 8000238:	9307      	str	r3, [sp, #28]
 800023a:	2300      	movs	r3, #0
 800023c:	9306      	str	r3, [sp, #24]
 800023e:	2300      	movs	r3, #0
 8000240:	9305      	str	r3, [sp, #20]
 8000242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000244:	9304      	str	r3, [sp, #16]
 8000246:	8c3b      	ldrh	r3, [r7, #32]
 8000248:	9303      	str	r3, [sp, #12]
 800024a:	8bbb      	ldrh	r3, [r7, #28]
 800024c:	9302      	str	r3, [sp, #8]
 800024e:	8b3b      	ldrh	r3, [r7, #24]
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	460b      	mov	r3, r1
 8000258:	68f9      	ldr	r1, [r7, #12]
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <init>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	60b9      	str	r1, [r7, #8]
 8000274:	4611      	mov	r1, r2
 8000276:	461a      	mov	r2, r3
 8000278:	4603      	mov	r3, r0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	460b      	mov	r3, r1
 800027e:	81bb      	strh	r3, [r7, #12]
 8000280:	4613      	mov	r3, r2
 8000282:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <init+0x84>)
 8000286:	89bb      	ldrh	r3, [r7, #12]
 8000288:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <init+0x88>)
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <init+0x8c>)
 8000292:	8b3b      	ldrh	r3, [r7, #24]
 8000294:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000296:	4a19      	ldr	r2, [pc, #100]	; (80002fc <init+0x90>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <init+0x94>)
 800029e:	8bbb      	ldrh	r3, [r7, #28]
 80002a0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <init+0x94>)
 80002a4:	8c3b      	ldrh	r3, [r7, #32]
 80002a6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80002a8:	4a15      	ldr	r2, [pc, #84]	; (8000300 <init+0x94>)
 80002aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ac:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <init+0x94>)
 80002b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002b2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <init+0x94>)
 80002b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002b8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <init+0x94>)
 80002bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002be:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <init+0x94>)
 80002c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002c4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <init+0x94>)
 80002c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002ca:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e002      	b.n	80002e0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <init+0x98>)
 80002dc:	2210      	movs	r2, #16
 80002de:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2010      	movs	r0, #16
 80002e4:	f000 f810 	bl	8000308 <begin>
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000054 	.word	0x20000054
 80002f4:	20000034 	.word	0x20000034
 80002f8:	20000052 	.word	0x20000052
 80002fc:	20000038 	.word	0x20000038
 8000300:	20000040 	.word	0x20000040
 8000304:	20000051 	.word	0x20000051

08000308 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	460a      	mov	r2, r1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	4613      	mov	r3, r2
 8000316:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d906      	bls.n	800032c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800031e:	4b77      	ldr	r3, [pc, #476]	; (80004fc <begin+0x1f4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b74      	ldr	r3, [pc, #464]	; (80004fc <begin+0x1f4>)
 800032a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800032c:	4a74      	ldr	r2, [pc, #464]	; (8000500 <begin+0x1f8>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3340      	adds	r3, #64	; 0x40
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f988 	bl	8000650 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000340:	4b70      	ldr	r3, [pc, #448]	; (8000504 <begin+0x1fc>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d009      	beq.n	800035c <begin+0x54>
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d106      	bne.n	800035c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800034e:	4b6b      	ldr	r3, [pc, #428]	; (80004fc <begin+0x1f4>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b68      	ldr	r3, [pc, #416]	; (80004fc <begin+0x1f4>)
 800035a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800035c:	f000 f8e4 	bl	8000528 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000360:	2303      	movs	r3, #3
 8000362:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000368:	4b67      	ldr	r3, [pc, #412]	; (8000508 <begin+0x200>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d01b      	beq.n	80003a8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000370:	4b66      	ldr	r3, [pc, #408]	; (800050c <begin+0x204>)
 8000372:	881a      	ldrh	r2, [r3, #0]
 8000374:	4b66      	ldr	r3, [pc, #408]	; (8000510 <begin+0x208>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b65      	ldr	r3, [pc, #404]	; (8000514 <begin+0x20c>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b64      	ldr	r3, [pc, #400]	; (8000518 <begin+0x210>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b62      	ldr	r3, [pc, #392]	; (8000518 <begin+0x210>)
 800038e:	885b      	ldrh	r3, [r3, #2]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b60      	ldr	r3, [pc, #384]	; (8000518 <begin+0x210>)
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b5e      	ldr	r3, [pc, #376]	; (8000518 <begin+0x210>)
 800039e:	88db      	ldrh	r3, [r3, #6]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e02a      	b.n	80003fe <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003a8:	4b58      	ldr	r3, [pc, #352]	; (800050c <begin+0x204>)
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4b58      	ldr	r3, [pc, #352]	; (8000510 <begin+0x208>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b57      	ldr	r3, [pc, #348]	; (8000514 <begin+0x20c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b56      	ldr	r3, [pc, #344]	; (8000518 <begin+0x210>)
 80003be:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b54      	ldr	r3, [pc, #336]	; (8000518 <begin+0x210>)
 80003c6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003cc:	4b52      	ldr	r3, [pc, #328]	; (8000518 <begin+0x210>)
 80003ce:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003d4:	4b50      	ldr	r3, [pc, #320]	; (8000518 <begin+0x210>)
 80003d6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <begin+0x210>)
 80003de:	891b      	ldrh	r3, [r3, #8]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b4c      	ldr	r3, [pc, #304]	; (8000518 <begin+0x210>)
 80003e6:	895b      	ldrh	r3, [r3, #10]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b4a      	ldr	r3, [pc, #296]	; (8000518 <begin+0x210>)
 80003ee:	899b      	ldrh	r3, [r3, #12]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <begin+0x210>)
 80003f6:	89db      	ldrh	r3, [r3, #14]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003fc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003fe:	4b47      	ldr	r3, [pc, #284]	; (800051c <begin+0x214>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f107 020c 	add.w	r2, r7, #12
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fbd3 	bl	8001bb4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 800040e:	2032      	movs	r0, #50	; 0x32
 8000410:	f001 fa9a 	bl	8001948 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000414:	4b41      	ldr	r3, [pc, #260]	; (800051c <begin+0x214>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <begin+0x204>)
 800041a:	8811      	ldrh	r1, [r2, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fd5a 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <begin+0x214>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a3a      	ldr	r2, [pc, #232]	; (8000514 <begin+0x20c>)
 800042a:	8811      	ldrh	r1, [r2, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fd52 	bl	8001ed8 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <begin+0x208>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d007      	beq.n	800044c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <begin+0x214>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a33      	ldr	r2, [pc, #204]	; (8000510 <begin+0x208>)
 8000442:	8811      	ldrh	r1, [r2, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fd46 	bl	8001ed8 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <begin+0x1f4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	2b00      	cmp	r3, #0
 8000456:	d115      	bne.n	8000484 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 fa1b 	bl	8000894 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800045e:	2005      	movs	r0, #5
 8000460:	f001 fa72 	bl	8001948 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 fa15 	bl	8000894 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800046a:	2005      	movs	r0, #5
 800046c:	f001 fa6c 	bl	8001948 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fa0f 	bl	8000894 <write4bits>
    HAL_Delay(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f001 fa66 	bl	8001948 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 800047c:	2002      	movs	r0, #2
 800047e:	f000 fa09 	bl	8000894 <write4bits>
 8000482:	e01d      	b.n	80004c0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <begin+0x1f4>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f97b 	bl	800078a <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000494:	2005      	movs	r0, #5
 8000496:	f001 fa57 	bl	8001948 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <begin+0x1f4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f970 	bl	800078a <command>
    HAL_Delay(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 fa4c 	bl	8001948 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <begin+0x1f4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f043 0320 	orr.w	r3, r3, #32
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f965 	bl	800078a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <begin+0x1f4>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f95d 	bl	800078a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <begin+0x218>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	701a      	strb	r2, [r3, #0]
  display();
 80004d6:	f000 f917 	bl	8000708 <display>

  // clear it off
  clear();
 80004da:	f000 f8d9 	bl	8000690 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <begin+0x21c>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <begin+0x21c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f94b 	bl	800078a <command>

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000051 	.word	0x20000051
 8000500:	2000003d 	.word	0x2000003d
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000000 	.word	0x20000000
 800050c:	20000054 	.word	0x20000054
 8000510:	20000034 	.word	0x20000034
 8000514:	20000052 	.word	0x20000052
 8000518:	20000040 	.word	0x20000040
 800051c:	20000038 	.word	0x20000038
 8000520:	2000003c 	.word	0x2000003c
 8000524:	20000050 	.word	0x20000050

08000528 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <enableClock+0x10c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000536:	d10c      	bne.n	8000552 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <enableClock+0x110>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <enableClock+0x110>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <enableClock+0x110>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000550:	e06a      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <enableClock+0x10c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a39      	ldr	r2, [pc, #228]	; (800063c <enableClock+0x114>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d10c      	bne.n	8000576 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b36      	ldr	r3, [pc, #216]	; (8000638 <enableClock+0x110>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a35      	ldr	r2, [pc, #212]	; (8000638 <enableClock+0x110>)
 8000562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b33      	ldr	r3, [pc, #204]	; (8000638 <enableClock+0x110>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	69bb      	ldr	r3, [r7, #24]
}
 8000574:	e058      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <enableClock+0x10c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <enableClock+0x114>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d10c      	bne.n	800059a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <enableClock+0x110>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <enableClock+0x110>)
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6153      	str	r3, [r2, #20]
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <enableClock+0x110>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697b      	ldr	r3, [r7, #20]
}
 8000598:	e046      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOC)
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <enableClock+0x10c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <enableClock+0x118>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10c      	bne.n	80005be <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <enableClock+0x110>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a23      	ldr	r2, [pc, #140]	; (8000638 <enableClock+0x110>)
 80005aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <enableClock+0x110>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]
}
 80005bc:	e034      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOD)
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <enableClock+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <enableClock+0x11c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d10c      	bne.n	80005e2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <enableClock+0x110>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <enableClock+0x110>)
 80005ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <enableClock+0x110>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	e022      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOE)
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <enableClock+0x10c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <enableClock+0x120>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d10c      	bne.n	8000606 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <enableClock+0x110>)
 80005f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <enableClock+0x110>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
}
 8000604:	e010      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOF)
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <enableClock+0x10c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <enableClock+0x124>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d10b      	bne.n	8000628 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <enableClock+0x110>)
 8000616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061a:	6153      	str	r3, [r2, #20]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <enableClock+0x110>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	bf00      	nop
 800062a:	3724      	adds	r7, #36	; 0x24
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000038 	.word	0x20000038
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400
 8000640:	48000800 	.word	0x48000800
 8000644:	48000c00 	.word	0x48000c00
 8000648:	48001000 	.word	0x48001000
 800064c:	48001400 	.word	0x48001400

08000650 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <setRowOffsets+0x3c>)
 8000664:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <setRowOffsets+0x3c>)
 800066c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <setRowOffsets+0x3c>)
 8000674:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <setRowOffsets+0x3c>)
 800067c:	70da      	strb	r2, [r3, #3]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000030 	.word	0x20000030

08000690 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f878 	bl	800078a <command>
  HAL_Delay(2);  // this command takes a long time!
 800069a:	2002      	movs	r0, #2
 800069c:	f001 f954 	bl	8001948 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80006b4:	2304      	movs	r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d803      	bhi.n	80006c8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <setCursor+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d303      	bcc.n	80006da <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <setCursor+0x5c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <setCursor+0x60>)
 80006de:	5cd2      	ldrb	r2, [r2, r3]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f84a 	bl	800078a <command>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000003d 	.word	0x2000003d
 8000704:	20000030 	.word	0x20000030

08000708 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <display+0x28>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <display+0x28>)
 8000718:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <display+0x28>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f830 	bl	800078a <command>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000003c 	.word	0x2000003c

08000734 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <print+0x12>
 8000742:	2300      	movs	r3, #0
 8000744:	e01d      	b.n	8000782 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fd3c 	bl	80001c8 <strlen>
 8000750:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000756:	e00c      	b.n	8000772 <print+0x3e>
    if (write(*buffer++)) n++;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	617a      	str	r2, [r7, #20]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f820 	bl	80007a6 <write>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <print+0x4a>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	613a      	str	r2, [r7, #16]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1ed      	bne.n	8000758 <print+0x24>
 800077c:	e000      	b.n	8000780 <print+0x4c>
    else break;
 800077e:	bf00      	nop
  }
  return n;
 8000780:	68fb      	ldr	r3, [r7, #12]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f813 	bl	80007c4 <send>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <write>:

inline size_t write(uint8_t value) {
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f805 	bl	80007c4 <send>
  return 1; // assume sucess
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <send+0x6c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <send+0x70>)
 80007da:	8811      	ldrh	r1, [r2, #0]
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fb7a 	bl	8001ed8 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <send+0x74>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	; 0xff
 80007ea:	d007      	beq.n	80007fc <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <send+0x6c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <send+0x74>)
 80007f2:	8811      	ldrh	r1, [r2, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fb6e 	bl	8001ed8 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <send+0x78>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	2b00      	cmp	r3, #0
 8000806:	d004      	beq.n	8000812 <send+0x4e>
    write8bits(value);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f86c 	bl	80008e8 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000810:	e009      	b.n	8000826 <send+0x62>
    write4bits(value>>4);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	091b      	lsrs	r3, r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f83b 	bl	8000894 <write4bits>
    write4bits(value);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f837 	bl	8000894 <write4bits>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000038 	.word	0x20000038
 8000834:	20000054 	.word	0x20000054
 8000838:	20000034 	.word	0x20000034
 800083c:	20000051 	.word	0x20000051

08000840 <pulseEnable>:

void pulseEnable(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <pulseEnable+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <pulseEnable+0x50>)
 800084a:	8811      	ldrh	r1, [r2, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fb42 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f877 	bl	8001948 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <pulseEnable+0x4c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <pulseEnable+0x50>)
 8000860:	8811      	ldrh	r1, [r2, #0]
 8000862:	2201      	movs	r2, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fb37 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800086a:	2001      	movs	r0, #1
 800086c:	f001 f86c 	bl	8001948 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <pulseEnable+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <pulseEnable+0x50>)
 8000876:	8811      	ldrh	r1, [r2, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fb2c 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000880:	2001      	movs	r0, #1
 8000882:	f001 f861 	bl	8001948 <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000038 	.word	0x20000038
 8000890:	20000052 	.word	0x20000052

08000894 <write4bits>:

void write4bits(uint8_t value) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e013      	b.n	80008cc <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <write4bits+0x4c>)
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <write4bits+0x50>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	fa42 f303 	asr.w	r3, r2, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	f001 fb09 	bl	8001ed8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	dde8      	ble.n	80008a4 <write4bits+0x10>
  }

  pulseEnable();
 80008d2:	f7ff ffb5 	bl	8000840 <pulseEnable>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000038 	.word	0x20000038
 80008e4:	20000040 	.word	0x20000040

080008e8 <write8bits>:

void write8bits(uint8_t value) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e013      	b.n	8000920 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <write8bits+0x4c>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <write8bits+0x50>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	fa42 f303 	asr.w	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f001 fadf 	bl	8001ed8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b07      	cmp	r3, #7
 8000924:	dde8      	ble.n	80008f8 <write8bits+0x10>
  }

  pulseEnable();
 8000926:	f7ff ff8b 	bl	8000840 <pulseEnable>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000038 	.word	0x20000038
 8000938:	20000040 	.word	0x20000040

0800093c <init_state_vars>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init_state_vars() {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	menuState = 'z';
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <init_state_vars+0x14>)
 8000942:	227a      	movs	r2, #122	; 0x7a
 8000944:	701a      	strb	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	200000a4 	.word	0x200000a4

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 ff8f 	bl	800187c <HAL_Init>

  /* USER CODE BEGIN Init */
  init_state_vars();
 800095e:	f7ff ffed 	bl	800093c <init_state_vars>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2110      	movs	r1, #16
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <main+0x98>)
 8000968:	f001 fab6 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	2120      	movs	r1, #32
 8000970:	481e      	ldr	r0, [pc, #120]	; (80009ec <main+0x98>)
 8000972:	f001 fab1 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <main+0x98>)
 800097c:	f001 faac 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	4819      	ldr	r0, [pc, #100]	; (80009ec <main+0x98>)
 8000986:	f001 faa7 	bl	8001ed8 <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 800098a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098e:	9303      	str	r3, [sp, #12]
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <main+0x98>)
 80009b0:	f7ff fc12 	bl	80001d8 <LiquidCrystal>
  begin(20, 4);
 80009b4:	2104      	movs	r1, #4
 80009b6:	2014      	movs	r0, #20
 80009b8:	f7ff fca6 	bl	8000308 <begin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f81c 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 f96a 	bl	8000c98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c4:	f000 f87a 	bl	8000abc <MX_I2C1_Init>
  MX_SPI1_Init();
 80009c8:	f000 f8b8 	bl	8000b3c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80009cc:	f000 f942 	bl	8000c54 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80009d0:	f000 f8f2 	bl	8000bb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <main+0x9c>)
 80009d6:	f003 f879 	bl	8003acc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <main+0xa0>)
 80009e0:	f001 fa92 	bl	8001f08 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 ffaf 	bl	8001948 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80009ea:	e7f6      	b.n	80009da <main+0x86>
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	2000010c 	.word	0x2000010c
 80009f4:	48001000 	.word	0x48001000

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09e      	sub	sp, #120	; 0x78
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fd0c 	bl	8004424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	223c      	movs	r2, #60	; 0x3c
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fcfe 	bl	8004424 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a4c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fc9a 	bl	800238c <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f9dd 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fb8c 	bl	800319c <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a8a:	f000 f9c7 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <SystemClock_Config+0xc0>)
 8000a90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fd62 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000aaa:	f000 f9b7 	bl	8000e1c <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3778      	adds	r7, #120	; 0x78
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	00020020 	.word	0x00020020

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f001 fa43 	bl	8001f82 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 f98b 	bl	8000e1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f001 fac9 	bl	80020a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f982 	bl	8000e1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f001 fb0b 	bl	8002136 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f979 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000058 	.word	0x20000058
 8000b34:	40005400 	.word	0x40005400
 8000b38:	2000090e 	.word	0x2000090e

08000b3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_SPI1_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_SPI1_Init+0x74>)
 8000b9c:	f002 fe94 	bl	80038c8 <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 f939 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000a8 	.word	0x200000a8
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000be0:	f640 125f 	movw	r2, #2399	; 0x95f
 8000be4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c02:	f002 ff0c 	bl	8003a1e <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f906 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c1e:	f003 f8de 	bl	8003dde <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c28:	f000 f8f8 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c3a:	f003 faf5 	bl	8004228 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c44:	f000 f8ea 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000010c 	.word	0x2000010c

08000c54 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <MX_USB_PCD_Init+0x40>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c60:	2208      	movs	r2, #8
 8000c62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_USB_PCD_Init+0x3c>)
 8000c7e:	f001 faa6 	bl	80021ce <HAL_PCD_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c88:	f000 f8c8 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000158 	.word	0x20000158
 8000c94:	40005c00 	.word	0x40005c00

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a51      	ldr	r2, [pc, #324]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cde:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4a4b      	ldr	r2, [pc, #300]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6153      	str	r3, [r2, #20]
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a3f      	ldr	r2, [pc, #252]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a39      	ldr	r2, [pc, #228]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <MX_GPIO_Init+0x178>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d44:	4833      	ldr	r0, [pc, #204]	; (8000e14 <MX_GPIO_Init+0x17c>)
 8000d46:	f001 f8c7 	bl	8001ed8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8000d50:	4831      	ldr	r0, [pc, #196]	; (8000e18 <MX_GPIO_Init+0x180>)
 8000d52:	f001 f8c1 	bl	8001ed8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d56:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d5a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4829      	ldr	r0, [pc, #164]	; (8000e14 <MX_GPIO_Init+0x17c>)
 8000d70:	f000 ff20 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000d74:	2320      	movs	r3, #32
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4822      	ldr	r0, [pc, #136]	; (8000e14 <MX_GPIO_Init+0x17c>)
 8000d8a:	f000 ff13 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000d92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	481c      	ldr	r0, [pc, #112]	; (8000e18 <MX_GPIO_Init+0x180>)
 8000da8:	f000 ff04 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dac:	230f      	movs	r3, #15
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000db6:	2302      	movs	r3, #2
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MX_GPIO_Init+0x180>)
 8000dc2:	f000 fef7 	bl	8001bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2006      	movs	r0, #6
 8000dcc:	f000 febb 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd0:	2006      	movs	r0, #6
 8000dd2:	f000 fed4 	bl	8001b7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f000 feb3 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000de0:	2007      	movs	r0, #7
 8000de2:	f000 fecc 	bl	8001b7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2008      	movs	r0, #8
 8000dec:	f000 feab 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000df0:	2008      	movs	r0, #8
 8000df2:	f000 fec4 	bl	8001b7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2009      	movs	r0, #9
 8000dfc:	f000 fea3 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f000 febc 	bl	8001b7e <HAL_NVIC_EnableIRQ>

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48001000 	.word	0x48001000
 8000e18:	48000c00 	.word	0x48000c00

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f000 fe66 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d127      	bne.n	8000ee2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000eaa:	23c0      	movs	r3, #192	; 0xc0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	2312      	movs	r3, #18
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <HAL_I2C_MspInit+0x84>)
 8000ec6:	f000 fe75 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_I2C_MspInit+0x80>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000400 	.word	0x48000400

08000ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x7c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d128      	bne.n	8000f6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_SPI_MspInit+0x80>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f4a:	23e0      	movs	r3, #224	; 0xe0
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fe24 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2102      	movs	r1, #2
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 fdcb 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fde4 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_PCD_MspInit+0x80>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d129      	bne.n	800103a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ffe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001010:	230e      	movs	r3, #14
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f000 fdc9 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8001028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_PCD_MspInit+0x84>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005c00 	.word	0x40005c00
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 fc36 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 ff49 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  keypadCallback(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 fa4a 	bl	8001544 <keypadCallback>
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80010b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <EXTI0_IRQHandler+0x20>)
 80010b6:	f000 ff27 	bl	8001f08 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	48001000 	.word	0x48001000

080010c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f000 ff37 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  keypadCallback(2);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f000 fa38 	bl	8001544 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <EXTI1_IRQHandler+0x20>)
 80010dc:	f000 fefc 	bl	8001ed8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI1_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48001000 	.word	0x48001000

080010e8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010ec:	2004      	movs	r0, #4
 80010ee:	f000 ff25 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  keypadCallback(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 fa26 	bl	8001544 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	4802      	ldr	r0, [pc, #8]	; (8001108 <EXTI2_TSC_IRQHandler+0x20>)
 8001100:	f000 feea 	bl	8001ed8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	48001000 	.word	0x48001000

0800110c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS_I2C_SPI_Pin);
 8001110:	2008      	movs	r0, #8
 8001112:	f000 ff13 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <EXTI3_IRQHandler+0x20>)
 800111e:	f000 fedb 	bl	8001ed8 <HAL_GPIO_WritePin>
  keypadCallback(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 fa0e 	bl	8001544 <keypadCallback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	48001000 	.word	0x48001000

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	483a      	ldr	r0, [pc, #232]	; (8001220 <TIM2_IRQHandler+0xf0>)
 8001136:	f002 fd33 	bl	8003ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800113a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113e:	4839      	ldr	r0, [pc, #228]	; (8001224 <TIM2_IRQHandler+0xf4>)
 8001140:	f000 fee2 	bl	8001f08 <HAL_GPIO_TogglePin>

//  // Update State variables
//  print("test");
  if (menuState != 'g') { // this is game state
 8001144:	4b38      	ldr	r3, [pc, #224]	; (8001228 <TIM2_IRQHandler+0xf8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b67      	cmp	r3, #103	; 0x67
 800114a:	d004      	beq.n	8001156 <TIM2_IRQHandler+0x26>
	  initGameState();
 800114c:	f000 f99e 	bl	800148c <initGameState>
	  menuState = 'g';
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <TIM2_IRQHandler+0xf8>)
 8001152:	2267      	movs	r2, #103	; 0x67
 8001154:	701a      	strb	r2, [r3, #0]

  }

  // Upload on LCD
  switch (menuState) {
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <TIM2_IRQHandler+0xf8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	3b61      	subs	r3, #97	; 0x61
 800115c:	2b19      	cmp	r3, #25
 800115e:	d85a      	bhi.n	8001216 <TIM2_IRQHandler+0xe6>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <TIM2_IRQHandler+0x38>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001203 	.word	0x08001203
 800116c:	08001217 	.word	0x08001217
 8001170:	08001217 	.word	0x08001217
 8001174:	08001217 	.word	0x08001217
 8001178:	08001217 	.word	0x08001217
 800117c:	08001217 	.word	0x08001217
 8001180:	080011f9 	.word	0x080011f9
 8001184:	08001217 	.word	0x08001217
 8001188:	08001217 	.word	0x08001217
 800118c:	08001217 	.word	0x08001217
 8001190:	08001217 	.word	0x08001217
 8001194:	08001217 	.word	0x08001217
 8001198:	080011e5 	.word	0x080011e5
 800119c:	08001217 	.word	0x08001217
 80011a0:	08001217 	.word	0x08001217
 80011a4:	08001217 	.word	0x08001217
 80011a8:	08001217 	.word	0x08001217
 80011ac:	08001217 	.word	0x08001217
 80011b0:	08001217 	.word	0x08001217
 80011b4:	08001217 	.word	0x08001217
 80011b8:	08001217 	.word	0x08001217
 80011bc:	08001217 	.word	0x08001217
 80011c0:	08001217 	.word	0x08001217
 80011c4:	08001217 	.word	0x08001217
 80011c8:	08001217 	.word	0x08001217
 80011cc:	080011d1 	.word	0x080011d1
  	  case 'z':
  		  clear();
 80011d0:	f7ff fa5e 	bl	8000690 <clear>
  		  setCursor(0, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fa64 	bl	80006a4 <setCursor>
  		  print("Doodle Jump");
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <TIM2_IRQHandler+0xfc>)
 80011de:	f7ff faa9 	bl	8000734 <print>
  		  break;
 80011e2:	e018      	b.n	8001216 <TIM2_IRQHandler+0xe6>
  	  case 'm':
  		  clear();
 80011e4:	f7ff fa54 	bl	8000690 <clear>
  		  setCursor(0, 0);
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fa5a 	bl	80006a4 <setCursor>
  		  print("1 - Start   2 - About us");
 80011f0:	480f      	ldr	r0, [pc, #60]	; (8001230 <TIM2_IRQHandler+0x100>)
 80011f2:	f7ff fa9f 	bl	8000734 <print>
  		  break;
 80011f6:	e00e      	b.n	8001216 <TIM2_IRQHandler+0xe6>
  	  case 'g':
  		  printGame();
 80011f8:	f000 f8bc 	bl	8001374 <printGame>
  		  processTurn();
 80011fc:	f000 f81c 	bl	8001238 <processTurn>
  		  break;
 8001200:	e009      	b.n	8001216 <TIM2_IRQHandler+0xe6>
  	  case 'a':
  		  clear();
 8001202:	f7ff fa45 	bl	8000690 <clear>
  		  setCursor(0, 0);
 8001206:	2100      	movs	r1, #0
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fa4b 	bl	80006a4 <setCursor>
  		  print(" Yosef and Borna");
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <TIM2_IRQHandler+0x104>)
 8001210:	f7ff fa90 	bl	8000734 <print>
  		  break;
 8001214:	bf00      	nop
  }

  // Delay for better visual
  HAL_Delay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 fb96 	bl	8001948 <HAL_Delay>
  /* USER CODE END TIM2_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000010c 	.word	0x2000010c
 8001224:	48001000 	.word	0x48001000
 8001228:	200000a4 	.word	0x200000a4
 800122c:	0800444c 	.word	0x0800444c
 8001230:	08004458 	.word	0x08004458
 8001234:	08004474 	.word	0x08004474

08001238 <processTurn>:

/* USER CODE BEGIN 1 */

void processTurn()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (playerRow == 0) {
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <processTurn+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d047      	beq.n	80012d4 <processTurn+0x9c>

	} else if (jumpCount == 0 && playerRow > 0) { // Jump rule
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <processTurn+0xa4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d130      	bne.n	80012ae <processTurn+0x76>
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <processTurn+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dd2c      	ble.n	80012ae <processTurn+0x76>
		// Gravity rule
		if (board[playerCol][playerRow - 1] == 'e') {
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <processTurn+0xa8>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <processTurn+0xa0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	1e59      	subs	r1, r3, #1
 800125e:	4821      	ldr	r0, [pc, #132]	; (80012e4 <processTurn+0xac>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00da      	lsls	r2, r3, #3
 8001268:	1ad2      	subs	r2, r2, r3
 800126a:	1883      	adds	r3, r0, r2
 800126c:	440b      	add	r3, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b65      	cmp	r3, #101	; 0x65
 8001272:	d108      	bne.n	8001286 <processTurn+0x4e>
			movePlayerTo(playerCol, playerRow - 1);
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <processTurn+0xa8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <processTurn+0xa0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 f831 	bl	80012e8 <movePlayerTo>
		}


		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <processTurn+0xa8>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <processTurn+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1e59      	subs	r1, r3, #1
 8001290:	4814      	ldr	r0, [pc, #80]	; (80012e4 <processTurn+0xac>)
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	00da      	lsls	r2, r3, #3
 800129a:	1ad2      	subs	r2, r2, r3
 800129c:	1883      	adds	r3, r0, r2
 800129e:	440b      	add	r3, r1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b62      	cmp	r3, #98	; 0x62
 80012a4:	d116      	bne.n	80012d4 <processTurn+0x9c>
			jumpCount = jumpOnBlock;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <processTurn+0xa4>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 80012ac:	e012      	b.n	80012d4 <processTurn+0x9c>
		}

	} else if (jumpCount > 0) { // Go up rule
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <processTurn+0xa4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dd0e      	ble.n	80012d4 <processTurn+0x9c>
		movePlayerTo(playerCol, playerRow + 1);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <processTurn+0xa8>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <processTurn+0xa0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f000 f810 	bl	80012e8 <movePlayerTo>
		jumpCount --;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <processTurn+0xa4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <processTurn+0xa4>)
 80012d0:	6013      	str	r3, [r2, #0]
	}


}
 80012d2:	e7ff      	b.n	80012d4 <processTurn+0x9c>
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200004f8 	.word	0x200004f8
 80012dc:	200004f0 	.word	0x200004f0
 80012e0:	20000444 	.word	0x20000444
 80012e4:	20000448 	.word	0x20000448

080012e8 <movePlayerTo>:

void movePlayerTo(int toCol, int toRow)
{
 80012e8:	b490      	push	{r4, r7}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	board[playerCol][playerRow] = playerOn;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <movePlayerTo+0x7c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <movePlayerTo+0x80>)
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <movePlayerTo+0x84>)
 80012fc:	781c      	ldrb	r4, [r3, #0]
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <movePlayerTo+0x88>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00da      	lsls	r2, r3, #3
 8001308:	1ad2      	subs	r2, r2, r3
 800130a:	1883      	adds	r3, r0, r2
 800130c:	440b      	add	r3, r1
 800130e:	4622      	mov	r2, r4
 8001310:	701a      	strb	r2, [r3, #0]
	playerCol = toCol;
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <movePlayerTo+0x7c>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6013      	str	r3, [r2, #0]
	playerRow = toRow;
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <movePlayerTo+0x80>)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6013      	str	r3, [r2, #0]
	playerOn = board[playerCol][playerRow];
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <movePlayerTo+0x7c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <movePlayerTo+0x80>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	4812      	ldr	r0, [pc, #72]	; (8001370 <movePlayerTo+0x88>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00da      	lsls	r2, r3, #3
 8001330:	1ad2      	subs	r2, r2, r3
 8001332:	1883      	adds	r3, r0, r2
 8001334:	440b      	add	r3, r1
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <movePlayerTo+0x84>)
 800133a:	701a      	strb	r2, [r3, #0]
	board[playerCol][playerRow] = 'p';
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <movePlayerTo+0x7c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <movePlayerTo+0x80>)
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <movePlayerTo+0x88>)
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	00da      	lsls	r2, r3, #3
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	1883      	adds	r3, r0, r2
 8001352:	440b      	add	r3, r1
 8001354:	2270      	movs	r2, #112	; 0x70
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bc90      	pop	{r4, r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000444 	.word	0x20000444
 8001368:	200004f8 	.word	0x200004f8
 800136c:	200004fc 	.word	0x200004fc
 8001370:	20000448 	.word	0x20000448

08001374 <printGame>:

void printGame()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
	setCursor(0,  0);
 800137a:	2100      	movs	r1, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff f991 	bl	80006a4 <setCursor>
	char tmp[2];
	int c, i, j;
	for (c = 0; c < boardColumns; c ++ ) {
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e073      	b.n	8001470 <printGame+0xfc>

		i = c;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	60bb      	str	r3, [r7, #8]
		if (c == 1)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <printGame+0x24>
			i = 2;
 8001392:	2302      	movs	r3, #2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	e004      	b.n	80013a2 <printGame+0x2e>
		else if (c == 2)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d101      	bne.n	80013a2 <printGame+0x2e>
			i = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < boardRows; j ++ ) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e05d      	b.n	8001464 <printGame+0xf0>
			if (board[i][j] != boardTemp[i][j]) {
 80013a8:	4935      	ldr	r1, [pc, #212]	; (8001480 <printGame+0x10c>)
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00da      	lsls	r2, r3, #3
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	440a      	add	r2, r1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	7819      	ldrb	r1, [r3, #0]
 80013be:	4831      	ldr	r0, [pc, #196]	; (8001484 <printGame+0x110>)
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	00da      	lsls	r2, r3, #3
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	4402      	add	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4299      	cmp	r1, r3
 80013d6:	d042      	beq.n	800145e <printGame+0xea>
				setCursor(j, i);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f95e 	bl	80006a4 <setCursor>
				tmp[0] = board[i][j];
 80013e8:	4925      	ldr	r1, [pc, #148]	; (8001480 <printGame+0x10c>)
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00da      	lsls	r2, r3, #3
 80013f4:	1ad2      	subs	r2, r2, r3
 80013f6:	440a      	add	r2, r1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	703b      	strb	r3, [r7, #0]
				tmp[1] = '\0';
 8001400:	2300      	movs	r3, #0
 8001402:	707b      	strb	r3, [r7, #1]
				  switch (board[i][j])
 8001404:	491e      	ldr	r1, [pc, #120]	; (8001480 <printGame+0x10c>)
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	00da      	lsls	r2, r3, #3
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	440a      	add	r2, r1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b65      	cmp	r3, #101	; 0x65
 800141c:	d103      	bne.n	8001426 <printGame+0xb2>
				     {
				     case 'e':
				    	print(" ");
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <printGame+0x114>)
 8001420:	f7ff f988 	bl	8000734 <print>
				       break;
 8001424:	e004      	b.n	8001430 <printGame+0xbc>
				     default:
				    	 print(tmp);
 8001426:	463b      	mov	r3, r7
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f983 	bl	8000734 <print>
				       break;
 800142e:	bf00      	nop
				     }
				boardTemp[i][j] = board[i][j];
 8001430:	4913      	ldr	r1, [pc, #76]	; (8001480 <printGame+0x10c>)
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00da      	lsls	r2, r3, #3
 800143c:	1ad2      	subs	r2, r2, r3
 800143e:	440a      	add	r2, r1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	7818      	ldrb	r0, [r3, #0]
 8001446:	490f      	ldr	r1, [pc, #60]	; (8001484 <printGame+0x110>)
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00da      	lsls	r2, r3, #3
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	440a      	add	r2, r1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4602      	mov	r2, r0
 800145c:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++ ) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3301      	adds	r3, #1
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b13      	cmp	r3, #19
 8001468:	dd9e      	ble.n	80013a8 <printGame+0x34>
	for (c = 0; c < boardColumns; c ++ ) {
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b03      	cmp	r3, #3
 8001474:	dd88      	ble.n	8001388 <printGame+0x14>
			}
		}
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000448 	.word	0x20000448
 8001484:	2000049c 	.word	0x2000049c
 8001488:	08004488 	.word	0x08004488

0800148c <initGameState>:

void initGameState()
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < boardColumns; i ++) {
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e02e      	b.n	80014f6 <initGameState+0x6a>
		for (j = 0; j < boardRows; j ++) {
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	e00e      	b.n	80014bc <initGameState+0x30>
			board[i][j] = 'e';
 800149e:	4923      	ldr	r1, [pc, #140]	; (800152c <initGameState+0xa0>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	00da      	lsls	r2, r3, #3
 80014aa:	1ad2      	subs	r2, r2, r3
 80014ac:	440a      	add	r2, r1
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	2265      	movs	r2, #101	; 0x65
 80014b4:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++) {
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b13      	cmp	r3, #19
 80014c0:	dded      	ble.n	800149e <initGameState+0x12>
		}
		board[i][boardRows] = '\0';
 80014c2:	491a      	ldr	r1, [pc, #104]	; (800152c <initGameState+0xa0>)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00da      	lsls	r2, r3, #3
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	188b      	adds	r3, r1, r2
 80014d2:	3314      	adds	r3, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		boardTemp[i][j] = '!'; // this means it is the first turn and no value is there
 80014d8:	4915      	ldr	r1, [pc, #84]	; (8001530 <initGameState+0xa4>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	00da      	lsls	r2, r3, #3
 80014e4:	1ad2      	subs	r2, r2, r3
 80014e6:	440a      	add	r2, r1
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	2221      	movs	r2, #33	; 0x21
 80014ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < boardColumns; i ++) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	ddcd      	ble.n	8001498 <initGameState+0xc>
	}
	board[1][0] = 'b';
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <initGameState+0xa0>)
 80014fe:	2262      	movs	r2, #98	; 0x62
 8001500:	755a      	strb	r2, [r3, #21]
	board[1][1] = 'p';
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <initGameState+0xa0>)
 8001504:	2270      	movs	r2, #112	; 0x70
 8001506:	759a      	strb	r2, [r3, #22]
	playerRow = 1;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <initGameState+0xa8>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
	playerCol = 1;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <initGameState+0xac>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
	playerOn = 'e';
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <initGameState+0xb0>)
 8001516:	2265      	movs	r2, #101	; 0x65
 8001518:	701a      	strb	r2, [r3, #0]
	jumpCount = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <initGameState+0xb4>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20000448 	.word	0x20000448
 8001530:	2000049c 	.word	0x2000049c
 8001534:	200004f8 	.word	0x200004f8
 8001538:	20000444 	.word	0x20000444
 800153c:	200004fc 	.word	0x200004fc
 8001540:	200004f0 	.word	0x200004f0

08001544 <keypadCallback>:

void keypadCallback(int8_t column_number)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if (last_gpio_exti + 250 > HAL_GetTick()) // Simple button debouncing
 800154e:	4b9b      	ldr	r3, [pc, #620]	; (80017bc <keypadCallback+0x278>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 8001556:	f000 f9eb 	bl	8001930 <HAL_GetTick>
 800155a:	4603      	mov	r3, r0
 800155c:	429c      	cmp	r4, r3
 800155e:	f200 811d 	bhi.w	800179c <keypadCallback+0x258>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8001562:	f000 f9e5 	bl	8001930 <HAL_GetTick>
 8001566:	4603      	mov	r3, r0
 8001568:	4a94      	ldr	r2, [pc, #592]	; (80017bc <keypadCallback+0x278>)
 800156a:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 800156c:	23ff      	movs	r3, #255	; 0xff
 800156e:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 0);
 8001570:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <keypadCallback+0x27c>)
 8001572:	2110      	movs	r1, #16
 8001574:	2200      	movs	r2, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fcae 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 0);
 800157c:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <keypadCallback+0x27c>)
 800157e:	2120      	movs	r1, #32
 8001580:	2200      	movs	r2, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fca8 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 0);
 8001588:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <keypadCallback+0x27c>)
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	2200      	movs	r2, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fca2 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 0);
 8001594:	4b8a      	ldr	r3, [pc, #552]	; (80017c0 <keypadCallback+0x27c>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	2200      	movs	r2, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc9c 	bl	8001ed8 <HAL_GPIO_WritePin>

  for (uint8_t row = 0; row < 4; row++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	73bb      	strb	r3, [r7, #14]
 80015a4:	e02e      	b.n	8001604 <keypadCallback+0xc0>
  {
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 1);
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	4a86      	ldr	r2, [pc, #536]	; (80017c4 <keypadCallback+0x280>)
 80015aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	4a85      	ldr	r2, [pc, #532]	; (80017c8 <keypadCallback+0x284>)
 80015b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4619      	mov	r1, r3
 80015ba:	f000 fc8d 	bl	8001ed8 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Column_ports[column_number], Column_pins[column_number]))
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	4a82      	ldr	r2, [pc, #520]	; (80017cc <keypadCallback+0x288>)
 80015c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4980      	ldr	r1, [pc, #512]	; (80017d0 <keypadCallback+0x28c>)
 80015ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f000 fc67 	bl	8001ea8 <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <keypadCallback+0xa2>
    {
      row_number = row;
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	73fb      	strb	r3, [r7, #15]
      break;
 80015e4:	e011      	b.n	800160a <keypadCallback+0xc6>
    }
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 0);
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	4a76      	ldr	r2, [pc, #472]	; (80017c4 <keypadCallback+0x280>)
 80015ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	4a75      	ldr	r2, [pc, #468]	; (80017c8 <keypadCallback+0x284>)
 80015f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	f000 fc6d 	bl	8001ed8 <HAL_GPIO_WritePin>
  for (uint8_t row = 0; row < 4; row++)
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	3301      	adds	r3, #1
 8001602:	73bb      	strb	r3, [r7, #14]
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d9cd      	bls.n	80015a6 <keypadCallback+0x62>
  }

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 1);
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <keypadCallback+0x27c>)
 800160c:	2110      	movs	r1, #16
 800160e:	2201      	movs	r2, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fc61 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 1);
 8001616:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <keypadCallback+0x27c>)
 8001618:	2120      	movs	r1, #32
 800161a:	2201      	movs	r2, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fc5b 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 1);
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <keypadCallback+0x27c>)
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	2201      	movs	r2, #1
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fc55 	bl	8001ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 1);
 800162e:	4b64      	ldr	r3, [pc, #400]	; (80017c0 <keypadCallback+0x27c>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	2201      	movs	r2, #1
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fc4f 	bl	8001ed8 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001642:	f000 80ad 	beq.w	80017a0 <keypadCallback+0x25c>
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164e:	f000 80a7 	beq.w	80017a0 <keypadCallback+0x25c>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4413      	add	r3, r2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	737b      	strb	r3, [r7, #13]

//  setCursor(curser_column, 0);
  switch (button_number)
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	3b01      	subs	r3, #1
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f200 809c 	bhi.w	80017a4 <keypadCallback+0x260>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <keypadCallback+0x130>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	080017a5 	.word	0x080017a5
 8001678:	080017a5 	.word	0x080017a5
 800167c:	080017a5 	.word	0x080017a5
 8001680:	080016b5 	.word	0x080016b5
 8001684:	080016bd 	.word	0x080016bd
 8001688:	080016c5 	.word	0x080016c5
 800168c:	080016cd 	.word	0x080016cd
 8001690:	080016d5 	.word	0x080016d5
 8001694:	080016dd 	.word	0x080016dd
 8001698:	080016e5 	.word	0x080016e5
 800169c:	080016f5 	.word	0x080016f5
 80016a0:	080016fd 	.word	0x080016fd
 80016a4:	08001705 	.word	0x08001705
 80016a8:	0800170d 	.word	0x0800170d
 80016ac:	08001747 	.word	0x08001747
 80016b0:	0800178d 	.word	0x0800178d
       break;
     case 3:
//    	  print("3");
       break;
     case 4:
    	  print("4");
 80016b4:	4847      	ldr	r0, [pc, #284]	; (80017d4 <keypadCallback+0x290>)
 80016b6:	f7ff f83d 	bl	8000734 <print>
       break;
 80016ba:	e07c      	b.n	80017b6 <keypadCallback+0x272>
     case 5:
    	  print("5");
 80016bc:	4846      	ldr	r0, [pc, #280]	; (80017d8 <keypadCallback+0x294>)
 80016be:	f7ff f839 	bl	8000734 <print>
       break;
 80016c2:	e078      	b.n	80017b6 <keypadCallback+0x272>
     case 6:
    	  print("6");
 80016c4:	4845      	ldr	r0, [pc, #276]	; (80017dc <keypadCallback+0x298>)
 80016c6:	f7ff f835 	bl	8000734 <print>
       break;
 80016ca:	e074      	b.n	80017b6 <keypadCallback+0x272>
     case 7:
    	  print("7");
 80016cc:	4844      	ldr	r0, [pc, #272]	; (80017e0 <keypadCallback+0x29c>)
 80016ce:	f7ff f831 	bl	8000734 <print>
       break;
 80016d2:	e070      	b.n	80017b6 <keypadCallback+0x272>
     case 8:
    	  print("8");
 80016d4:	4843      	ldr	r0, [pc, #268]	; (80017e4 <keypadCallback+0x2a0>)
 80016d6:	f7ff f82d 	bl	8000734 <print>
       break;
 80016da:	e06c      	b.n	80017b6 <keypadCallback+0x272>
     case 9:
    	  print("9");
 80016dc:	4842      	ldr	r0, [pc, #264]	; (80017e8 <keypadCallback+0x2a4>)
 80016de:	f7ff f829 	bl	8000734 <print>
       break;
 80016e2:	e068      	b.n	80017b6 <keypadCallback+0x272>
     case 10:
     	 if (menuState == 'z')
 80016e4:	4b41      	ldr	r3, [pc, #260]	; (80017ec <keypadCallback+0x2a8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b7a      	cmp	r3, #122	; 0x7a
 80016ea:	d15d      	bne.n	80017a8 <keypadCallback+0x264>
     		 menuState = 'm';
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <keypadCallback+0x2a8>)
 80016ee:	226d      	movs	r2, #109	; 0x6d
 80016f0:	701a      	strb	r2, [r3, #0]
       break;
 80016f2:	e059      	b.n	80017a8 <keypadCallback+0x264>
     case 11:
    	  print("11");
 80016f4:	483e      	ldr	r0, [pc, #248]	; (80017f0 <keypadCallback+0x2ac>)
 80016f6:	f7ff f81d 	bl	8000734 <print>
       break;
 80016fa:	e05c      	b.n	80017b6 <keypadCallback+0x272>
     case 12:
    	  print("12");
 80016fc:	483d      	ldr	r0, [pc, #244]	; (80017f4 <keypadCallback+0x2b0>)
 80016fe:	f7ff f819 	bl	8000734 <print>
       break;
 8001702:	e058      	b.n	80017b6 <keypadCallback+0x272>
     case 13:
    	 print("13");
 8001704:	483c      	ldr	r0, [pc, #240]	; (80017f8 <keypadCallback+0x2b4>)
 8001706:	f7ff f815 	bl	8000734 <print>
       break;
 800170a:	e054      	b.n	80017b6 <keypadCallback+0x272>
     case 14:
    	 if (menuState == 'm')
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <keypadCallback+0x2a8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b6d      	cmp	r3, #109	; 0x6d
 8001712:	d103      	bne.n	800171c <keypadCallback+0x1d8>
    		 menuState = 'a';
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <keypadCallback+0x2a8>)
 8001716:	2261      	movs	r2, #97	; 0x61
 8001718:	701a      	strb	r2, [r3, #0]
    	 else if (menuState == 'g') {
    		 //    		 Player move right
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
    	 }
       break;
 800171a:	e047      	b.n	80017ac <keypadCallback+0x268>
    	 else if (menuState == 'g') {
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <keypadCallback+0x2a8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b67      	cmp	r3, #103	; 0x67
 8001722:	d143      	bne.n	80017ac <keypadCallback+0x268>
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <keypadCallback+0x2b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	425a      	negs	r2, r3
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	bf58      	it	pl
 8001736:	4253      	negpl	r3, r2
 8001738:	4a31      	ldr	r2, [pc, #196]	; (8001800 <keypadCallback+0x2bc>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fdd2 	bl	80012e8 <movePlayerTo>
       break;
 8001744:	e032      	b.n	80017ac <keypadCallback+0x268>
     case 15:
    	 if (menuState == 'm') {
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <keypadCallback+0x2a8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b6d      	cmp	r3, #109	; 0x6d
 800174c:	d105      	bne.n	800175a <keypadCallback+0x216>
    		 initGameState();
 800174e:	f7ff fe9d 	bl	800148c <initGameState>
    		 menuState = 'g';
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <keypadCallback+0x2a8>)
 8001754:	2267      	movs	r2, #103	; 0x67
 8001756:	701a      	strb	r2, [r3, #0]
				 movePlayerTo(boardColumns - 1, playerRow);
			 } else {
				 movePlayerTo(playerCol - 1, playerRow);
			 }
    	 }
       break;
 8001758:	e02a      	b.n	80017b0 <keypadCallback+0x26c>
    	 } else if (menuState == 'g') {
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <keypadCallback+0x2a8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b67      	cmp	r3, #103	; 0x67
 8001760:	d126      	bne.n	80017b0 <keypadCallback+0x26c>
			 if (playerCol == 0) {
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <keypadCallback+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <keypadCallback+0x234>
				 movePlayerTo(boardColumns - 1, playerRow);
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <keypadCallback+0x2bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	2003      	movs	r0, #3
 8001772:	f7ff fdb9 	bl	80012e8 <movePlayerTo>
       break;
 8001776:	e01b      	b.n	80017b0 <keypadCallback+0x26c>
				 movePlayerTo(playerCol - 1, playerRow);
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <keypadCallback+0x2b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a20      	ldr	r2, [pc, #128]	; (8001800 <keypadCallback+0x2bc>)
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fdaf 	bl	80012e8 <movePlayerTo>
       break;
 800178a:	e011      	b.n	80017b0 <keypadCallback+0x26c>
     case 16:
    	  if (menuState == 'a')
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <keypadCallback+0x2a8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b61      	cmp	r3, #97	; 0x61
 8001792:	d10f      	bne.n	80017b4 <keypadCallback+0x270>
    		  menuState = 'm';
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <keypadCallback+0x2a8>)
 8001796:	226d      	movs	r2, #109	; 0x6d
 8001798:	701a      	strb	r2, [r3, #0]
       break;
 800179a:	e00b      	b.n	80017b4 <keypadCallback+0x270>
    return;
 800179c:	bf00      	nop
 800179e:	e00a      	b.n	80017b6 <keypadCallback+0x272>
    return; // Reject invalid scan
 80017a0:	bf00      	nop
 80017a2:	e008      	b.n	80017b6 <keypadCallback+0x272>

     default:
       break;
 80017a4:	bf00      	nop
 80017a6:	e006      	b.n	80017b6 <keypadCallback+0x272>
       break;
 80017a8:	bf00      	nop
 80017aa:	e004      	b.n	80017b6 <keypadCallback+0x272>
       break;
 80017ac:	bf00      	nop
 80017ae:	e002      	b.n	80017b6 <keypadCallback+0x272>
       break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <keypadCallback+0x272>
       break;
 80017b4:	bf00      	nop
     }
}
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	200004f4 	.word	0x200004f4
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	080044b0 	.word	0x080044b0
 80017c8:	080044c0 	.word	0x080044c0
 80017cc:	080044c8 	.word	0x080044c8
 80017d0:	080044d8 	.word	0x080044d8
 80017d4:	0800448c 	.word	0x0800448c
 80017d8:	08004490 	.word	0x08004490
 80017dc:	08004494 	.word	0x08004494
 80017e0:	08004498 	.word	0x08004498
 80017e4:	0800449c 	.word	0x0800449c
 80017e8:	080044a0 	.word	0x080044a0
 80017ec:	200000a4 	.word	0x200000a4
 80017f0:	080044a4 	.word	0x080044a4
 80017f4:	080044a8 	.word	0x080044a8
 80017f8:	080044ac 	.word	0x080044ac
 80017fc:	20000444 	.word	0x20000444
 8001800:	200004f8 	.word	0x200004f8

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0b      	ldr	r4, [pc, #44]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ffd7 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f002 fdc1 	bl	80043dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff f87b 	bl	8000954 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800186c:	08004518 	.word	0x08004518
  ldr r2, =_sbss
 8001870:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001874:	20000504 	.word	0x20000504

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f94f 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fac6 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f967 	bl	8001b9a <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	f000 f92f 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000000c 	.word	0x2000000c
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c
 800192c:	20000500 	.word	0x20000500

08001930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;  
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000500 	.word	0x20000500

08001948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	e154      	b.n	8001e6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8146 	beq.w	8001e68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x40>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	6939      	ldr	r1, [r7, #16]
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a0 	beq.w	8001e68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_GPIO_Init+0x2d8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_GPIO_Init+0x2d8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <HAL_GPIO_Init+0x2d8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d40:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <HAL_GPIO_Init+0x2dc>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d6a:	d019      	beq.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <HAL_GPIO_Init+0x2e0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_GPIO_Init+0x1e8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a48      	ldr	r2, [pc, #288]	; (8001e98 <HAL_GPIO_Init+0x2e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_Init+0x1e4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1e0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_Init+0x1dc>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e008      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001da0:	2300      	movs	r3, #0
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db2:	4937      	ldr	r1, [pc, #220]	; (8001e90 <HAL_GPIO_Init+0x2dc>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e0e:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f aea3 	bne.w	8001bc4 <HAL_GPIO_Init+0x10>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e001      	b.n	8001eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43d9      	mvns	r1, r3
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	400b      	ands	r3, r1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f806 	bl	8001f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e081      	b.n	8002098 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe ff61 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2224      	movs	r2, #36	; 0x24
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e006      	b.n	800200a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002008:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d104      	bne.n	800201c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69d9      	ldr	r1, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d138      	bne.n	8002128 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e032      	b.n	800212a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	d139      	bne.n	80021c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002156:	2302      	movs	r3, #2
 8002158:	e033      	b.n	80021c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2224      	movs	r2, #36	; 0x24
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002188:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d0:	b08b      	sub	sp, #44	; 0x2c
 80021d2:	af06      	add	r7, sp, #24
 80021d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d0      	b.n	8002382 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe fee5 	bl	8000fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f8ac 	bl	8004364 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e04c      	b.n	80022ac <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	3301      	adds	r3, #1
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	b298      	uxth	r0, r3
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	3336      	adds	r3, #54	; 0x36
 8002250:	4602      	mov	r2, r0
 8002252:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3303      	adds	r3, #3
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3338      	adds	r3, #56	; 0x38
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	; 0x3c
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3340      	adds	r3, #64	; 0x40
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	3301      	adds	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3ad      	bcc.n	8002212 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e044      	b.n	8002346 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3301      	adds	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3b5      	bcc.n	80022bc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	687e      	ldr	r6, [r7, #4]
 8002358:	466d      	mov	r5, sp
 800235a:	f106 0410 	add.w	r4, r6, #16
 800235e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	602b      	str	r3, [r5, #0]
 8002366:	1d33      	adds	r3, r6, #4
 8002368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f002 f815 	bl	800439a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002392:	af00      	add	r7, sp, #0
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f000 bef4 	b.w	800318e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 816a 	beq.w	800268a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b6:	4bb3      	ldr	r3, [pc, #716]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00c      	beq.n	80023dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c2:	4bb0      	ldr	r3, [pc, #704]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d159      	bne.n	8002482 <HAL_RCC_OscConfig+0xf6>
 80023ce:	4bad      	ldr	r3, [pc, #692]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d152      	bne.n	8002482 <HAL_RCC_OscConfig+0xf6>
 80023dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x82>
 8002408:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	e015      	b.n	800243a <HAL_RCC_OscConfig+0xae>
 800240e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002412:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002426:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800242a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002436:	4b93      	ldr	r3, [pc, #588]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800243e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002442:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002446:	fa92 f2a2 	rbit	r2, r2
 800244a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800244e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 810c 	beq.w	8002688 <HAL_RCC_OscConfig+0x2fc>
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 8106 	bne.w	8002688 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f000 be86 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x110>
 800248e:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7c      	ldr	r2, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e030      	b.n	80024fe <HAL_RCC_OscConfig+0x172>
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x134>
 80024a6:	4b77      	ldr	r3, [pc, #476]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a76      	ldr	r2, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b74      	ldr	r3, [pc, #464]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a73      	ldr	r2, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x172>
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x15a>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x172>
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a63      	ldr	r2, [pc, #396]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	495d      	ldr	r1, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d059      	beq.n	80025d0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fa08 	bl	8001930 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002526:	f7ff fa03 	bl	8001930 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d902      	bls.n	800253c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f000 be29 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
 800253c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002540:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002550:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0x1e2>
 8002568:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x20e>
 800256e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002572:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002586:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800258a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025a6:	fa92 f2a2 	rbit	r2, r2
 80025aa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ab      	beq.n	8002526 <HAL_RCC_OscConfig+0x19a>
 80025ce:	e05c      	b.n	800268a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff f9ae 	bl	8001930 <HAL_GetTick>
 80025d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025da:	f7ff f9a9 	bl	8001930 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d902      	bls.n	80025f0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f000 bdcf 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
 80025f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002604:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_RCC_OscConfig+0x296>
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x2c2>
 8002622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002626:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800263e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCC_OscConfig+0x2f8>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002652:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002656:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002662:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ab      	bne.n	80025da <HAL_RCC_OscConfig+0x24e>
 8002682:	e002      	b.n	800268a <HAL_RCC_OscConfig+0x2fe>
 8002684:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 816f 	beq.w	8002978 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800269a:	4bd0      	ldr	r3, [pc, #832]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026a6:	4bcd      	ldr	r3, [pc, #820]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d16c      	bne.n	800278c <HAL_RCC_OscConfig+0x400>
 80026b2:	4bca      	ldr	r3, [pc, #808]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d166      	bne.n	800278c <HAL_RCC_OscConfig+0x400>
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_OscConfig+0x362>
 80026e8:	4bbc      	ldr	r3, [pc, #752]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e013      	b.n	8002716 <HAL_RCC_OscConfig+0x38a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002706:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002712:	4bb2      	ldr	r3, [pc, #712]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	2202      	movs	r2, #2
 8002718:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800271c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002720:	fa92 f2a2 	rbit	r2, r2
 8002724:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002728:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800272c:	fab2 f282 	clz	r2, r2
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f042 0220 	orr.w	r2, r2, #32
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f002 021f 	and.w	r2, r2, #31
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f202 	lsl.w	r2, r1, r2
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x3cc>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d002      	beq.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 bd1b 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4ba0      	ldr	r3, [pc, #640]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	21f8      	movs	r1, #248	; 0xf8
 8002768:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002770:	fa91 f1a1 	rbit	r1, r1
 8002774:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002778:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800277c:	fab1 f181 	clz	r1, r1
 8002780:	b2c9      	uxtb	r1, r1
 8002782:	408b      	lsls	r3, r1
 8002784:	4995      	ldr	r1, [pc, #596]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e0f5      	b.n	8002978 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8085 	beq.w	80028a2 <HAL_RCC_OscConfig+0x516>
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	461a      	mov	r2, r3
 80027c0:	2301      	movs	r3, #1
 80027c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff f8b4 	bl	8001930 <HAL_GetTick>
 80027c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff f8af 	bl	8001930 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	f000 bcd5 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d102      	bne.n	8002814 <HAL_RCC_OscConfig+0x488>
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e013      	b.n	800283c <HAL_RCC_OscConfig+0x4b0>
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800282c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002842:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800284e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0af      	beq.n	80027ce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	21f8      	movs	r1, #248	; 0xf8
 800287e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002886:	fa91 f1a1 	rbit	r1, r1
 800288a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800288e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002892:	fab1 f181 	clz	r1, r1
 8002896:	b2c9      	uxtb	r1, r1
 8002898:	408b      	lsls	r3, r1
 800289a:	4950      	ldr	r1, [pc, #320]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e06a      	b.n	8002978 <HAL_RCC_OscConfig+0x5ec>
 80028a2:	2301      	movs	r3, #1
 80028a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	2300      	movs	r3, #0
 80028cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7ff f82f 	bl	8001930 <HAL_GetTick>
 80028d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7ff f82a 	bl	8001930 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d902      	bls.n	80028ee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	f000 bc50 	b.w	800318e <HAL_RCC_OscConfig+0xe02>
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x592>
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e013      	b.n	8002946 <HAL_RCC_OscConfig+0x5ba>
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002930:	2302      	movs	r3, #2
 8002932:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002936:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_RCC_OscConfig+0x650>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2202      	movs	r2, #2
 8002948:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800294c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002958:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1af      	bne.n	80028d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80da 	beq.w	8002b3c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d069      	beq.n	8002a66 <HAL_RCC_OscConfig+0x6da>
 8002992:	2301      	movs	r3, #1
 8002994:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x654>)
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	2301      	movs	r3, #1
 80029ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fe ffb8 	bl	8001930 <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	e00e      	b.n	80029e4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c6:	f7fe ffb3 	bl	8001930 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d906      	bls.n	80029e4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e3d9      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	10908120 	.word	0x10908120
 80029e4:	2302      	movs	r3, #2
 80029e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a12:	2202      	movs	r2, #2
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4ba5      	ldr	r3, [pc, #660]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a2e:	2102      	movs	r1, #2
 8002a30:	6019      	str	r1, [r3, #0]
 8002a32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f1a3 	rbit	r1, r3
 8002a3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a40:	6019      	str	r1, [r3, #0]
  return result;
 8002a42:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0b0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x63a>
 8002a64:	e06a      	b.n	8002b3c <HAL_RCC_OscConfig+0x7b0>
 8002a66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a7c:	601a      	str	r2, [r3, #0]
  return result;
 8002a7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a82:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x934>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	461a      	mov	r2, r3
 8002a94:	2300      	movs	r3, #0
 8002a96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe ff4a 	bl	8001930 <HAL_GetTick>
 8002a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe ff45 	bl	8001930 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e36b      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 8002ab6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002afc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afe:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b06:	2102      	movs	r1, #2
 8002b08:	6019      	str	r1, [r3, #0]
 8002b0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f1a3 	rbit	r1, r3
 8002b14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b18:	6019      	str	r1, [r3, #0]
  return result;
 8002b1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1b2      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8158 	beq.w	8002dfc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a56      	ldr	r2, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <HAL_RCC_OscConfig+0x938>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11a      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x938>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_RCC_OscConfig+0x938>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fec8 	bl	8001930 <HAL_GetTick>
 8002ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fec3 	bl	8001930 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e2e9      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCC_OscConfig+0x938>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ef      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x852>
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a39      	ldr	r2, [pc, #228]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	e02f      	b.n	8002c3e <HAL_RCC_OscConfig+0x8b2>
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x876>
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e01d      	b.n	8002c3e <HAL_RCC_OscConfig+0x8b2>
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x89a>
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	e00b      	b.n	8002c3e <HAL_RCC_OscConfig+0x8b2>
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6213      	str	r3, [r2, #32]
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d06b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fe72 	bl	8001930 <HAL_GetTick>
 8002c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fe6d 	bl	8001930 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e291      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 8002c6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c98:	601a      	str	r2, [r3, #0]
  return result;
 8002c9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x93c>
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_RCC_OscConfig+0x930>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x958>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	10908120 	.word	0x10908120
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	4bbb      	ldr	r3, [pc, #748]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ce8:	2102      	movs	r1, #2
 8002cea:	6011      	str	r1, [r2, #0]
 8002cec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	fa92 f1a2 	rbit	r1, r2
 8002cf6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cfa:	6011      	str	r1, [r2, #0]
  return result;
 8002cfc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	fab2 f282 	clz	r2, r2
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d099      	beq.n	8002c52 <HAL_RCC_OscConfig+0x8c6>
 8002d1e:	e063      	b.n	8002de8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fe06 	bl	8001930 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	e00b      	b.n	8002d42 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fe01 	bl	8001930 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e225      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 8002d42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d70:	601a      	str	r2, [r3, #0]
  return result;
 8002d72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_OscConfig+0xa06>
 8002d8c:	4b90      	ldr	r3, [pc, #576]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	e00d      	b.n	8002dae <HAL_RCC_OscConfig+0xa22>
 8002d92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d96:	2202      	movs	r2, #2
 8002d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	fa93 f2a3 	rbit	r2, r3
 8002da4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002db2:	2102      	movs	r1, #2
 8002db4:	6011      	str	r1, [r2, #0]
 8002db6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	fa92 f1a2 	rbit	r1, r2
 8002dc0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002dc4:	6011      	str	r1, [r2, #0]
  return result;
 8002dc6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1a0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 81c2 	beq.w	800318c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	f000 819c 	beq.w	800314e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	f040 8114 	bne.w	800304a <HAL_RCC_OscConfig+0xcbe>
 8002e22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e3a:	601a      	str	r2, [r3, #0]
  return result;
 8002e3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fd6a 	bl	8001930 <HAL_GetTick>
 8002e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fd65 	bl	8001930 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e18b      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 8002e76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e8e:	601a      	str	r2, [r3, #0]
  return result;
 8002e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xb24>
 8002eaa:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	e01b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb5c>
 8002eb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f2a3 	rbit	r2, r3
 8002ec4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fa92 f1a2 	rbit	r1, r2
 8002efc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f00:	6011      	str	r1, [r2, #0]
  return result;
 8002f02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d19e      	bne.n	8002e62 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	4925      	ldr	r1, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f58:	601a      	str	r2, [r3, #0]
  return result;
 8002f5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f5e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	461a      	mov	r2, r3
 8002f72:	2301      	movs	r3, #1
 8002f74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fcdb 	bl	8001930 <HAL_GetTick>
 8002f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f7e:	e009      	b.n	8002f94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fcd6 	bl	8001930 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0fc      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 8002f94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fac:	601a      	str	r2, [r3, #0]
  return result;
 8002fae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xc48>
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <HAL_RCC_OscConfig+0xc44>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	e01e      	b.n	800300c <HAL_RCC_OscConfig+0xc80>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fa93 f2a3 	rbit	r2, r3
 8002fe8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_OscConfig+0xe0c>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	fa92 f1a2 	rbit	r1, r2
 8003020:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003024:	6011      	str	r1, [r2, #0]
  return result;
 8003026:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	fab2 f282 	clz	r2, r2
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f042 0220 	orr.w	r2, r2, #32
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f002 021f 	and.w	r2, r2, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d09b      	beq.n	8002f80 <HAL_RCC_OscConfig+0xbf4>
 8003048:	e0a0      	b.n	800318c <HAL_RCC_OscConfig+0xe00>
 800304a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800304e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003062:	601a      	str	r2, [r3, #0]
  return result;
 8003064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003068:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	461a      	mov	r2, r3
 800307c:	2300      	movs	r3, #0
 800307e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fc56 	bl	8001930 <HAL_GetTick>
 8003084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003088:	e009      	b.n	800309e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe fc51 	bl	8001930 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e077      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
 800309e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b6:	601a      	str	r2, [r3, #0]
  return result;
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd4c>
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0xe0c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e01b      	b.n	8003110 <HAL_RCC_OscConfig+0xd84>
 80030d8:	f107 0320 	add.w	r3, r7, #32
 80030dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f107 0320 	add.w	r3, r7, #32
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f107 0318 	add.w	r3, r7, #24
 80030f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f107 0318 	add.w	r3, r7, #24
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCC_OscConfig+0xe0c>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f107 0210 	add.w	r2, r7, #16
 8003114:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003118:	6011      	str	r1, [r2, #0]
 800311a:	f107 0210 	add.w	r2, r7, #16
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fa92 f1a2 	rbit	r1, r2
 8003124:	f107 020c 	add.w	r2, r7, #12
 8003128:	6011      	str	r1, [r2, #0]
  return result;
 800312a:	f107 020c 	add.w	r2, r7, #12
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f042 0220 	orr.w	r2, r2, #32
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d19e      	bne.n	800308a <HAL_RCC_OscConfig+0xcfe>
 800314c:	e01e      	b.n	800318c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e018      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_RCC_OscConfig+0xe0c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003164:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	429a      	cmp	r2, r3
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800317a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09e      	sub	sp, #120	; 0x78
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e162      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	498b      	ldr	r1, [pc, #556]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e14a      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	497f      	ldr	r1, [pc, #508]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80dc 	beq.w	80033c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d13c      	bne.n	8003292 <HAL_RCC_ClockConfig+0xf6>
 8003218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_RCC_ClockConfig+0xa6>
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e00f      	b.n	8003262 <HAL_RCC_ClockConfig+0xc6>
 8003242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
 8003250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003266:	65ba      	str	r2, [r7, #88]	; 0x58
 8003268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d17b      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0f3      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d13c      	bne.n	8003314 <HAL_RCC_ClockConfig+0x178>
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x128>
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_ClockConfig+0x148>
 80032c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d6:	643b      	str	r3, [r7, #64]	; 0x40
 80032d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13a      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b2      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 8003314:	2302      	movs	r3, #2
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_RCC_ClockConfig+0x1a0>
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e00d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1bc>
 800333c:	2302      	movs	r3, #2
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2202      	movs	r2, #2
 800335a:	61ba      	str	r2, [r7, #24]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	617a      	str	r2, [r7, #20]
  return result;
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e079      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	491a      	ldr	r1, [pc, #104]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fe faca 	bl	8001930 <HAL_GetTick>
 800339c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fac6 	bl	8001930 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e061      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d214      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4906      	ldr	r1, [pc, #24]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e040      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800343e:	f000 f829 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	fa92 f2a2 	rbit	r2, r2
 8003456:	60fa      	str	r2, [r7, #12]
  return result;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	40d3      	lsrs	r3, r2
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x2ec>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	fa21 f303 	lsr.w	r3, r1, r3
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_RCC_ClockConfig+0x2f0>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_RCC_ClockConfig+0x2f4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fa18 	bl	80018a8 <HAL_InitTick>
  
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3778      	adds	r7, #120	; 0x78
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	080044e0 	.word	0x080044e0
 800348c:	20000004 	.word	0x20000004
 8003490:	20000008 	.word	0x20000008

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b08b      	sub	sp, #44	; 0x2c
 8003498:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x30>
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x36>
 80034c2:	e03c      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034c6:	623b      	str	r3, [r7, #32]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	607a      	str	r2, [r7, #4]
  return result;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	40d3      	lsrs	r3, r2
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	220f      	movs	r2, #15
 80034f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	60fa      	str	r2, [r7, #12]
  return result;
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_RCC_GetSysClockFreq+0xcc>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e004      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	623b      	str	r3, [r7, #32]
      break;
 800353c:	e002      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003540:	623b      	str	r3, [r7, #32]
      break;
 8003542:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003544:	6a3b      	ldr	r3, [r7, #32]
}
 8003546:	4618      	mov	r0, r3
 8003548:	372c      	adds	r7, #44	; 0x2c
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	007a1200 	.word	0x007a1200
 800355c:	080044f0 	.word	0x080044f0
 8003560:	08004500 	.word	0x08004500
 8003564:	003d0900 	.word	0x003d0900

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80d4 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358c:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10e      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	61d3      	str	r3, [r2, #28]
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b45      	ldr	r3, [pc, #276]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fe f9af 	bl	8001930 <HAL_GetTick>
 80035d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fe f9ab 	bl	8001930 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e169      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8084 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003610:	429a      	cmp	r2, r3
 8003612:	d07c      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2301      	movs	r3, #1
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe f95b 	bl	8001930 <HAL_GetTick>
 800367a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe f957 	bl	8001930 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e113      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003694:	2302      	movs	r3, #2
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	2302      	movs	r3, #2
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	61fb      	str	r3, [r7, #28]
  return result;
 80036ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d108      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036c2:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	e00d      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
 80036d0:	10908100 	.word	0x10908100
 80036d4:	2302      	movs	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	4b78      	ldr	r3, [pc, #480]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2202      	movs	r2, #2
 80036e6:	613a      	str	r2, [r7, #16]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	fa92 f2a2 	rbit	r2, r2
 80036ee:	60fa      	str	r2, [r7, #12]
  return result;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	fab2 f282 	clz	r2, r2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f002 021f 	and.w	r2, r2, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0b7      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	496a      	ldr	r1, [pc, #424]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003732:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f023 0203 	bic.w	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	495d      	ldr	r1, [pc, #372]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800375e:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4956      	ldr	r1, [pc, #344]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377c:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	494e      	ldr	r1, [pc, #312]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4947      	ldr	r1, [pc, #284]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037b8:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	493f      	ldr	r1, [pc, #252]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f023 0220 	bic.w	r2, r3, #32
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4938      	ldr	r1, [pc, #224]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	4930      	ldr	r1, [pc, #192]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003812:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	4929      	ldr	r1, [pc, #164]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4921      	ldr	r1, [pc, #132]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	491a      	ldr	r1, [pc, #104]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	4912      	ldr	r1, [pc, #72]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	490b      	ldr	r1, [pc, #44]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3748      	adds	r7, #72	; 0x48
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000

080038c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e09d      	b.n	8003a16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d009      	beq.n	8003900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
 80038f2:	e005      	b.n	8003900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd faec 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003940:	d902      	bls.n	8003948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e002      	b.n	800394e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003956:	d007      	beq.n	8003968 <HAL_SPI_Init+0xa0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	ea42 0103 	orr.w	r1, r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	f003 0204 	and.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039e4:	ea42 0103 	orr.w	r1, r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e049      	b.n	8003ac4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd fa99 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fab9 	bl	8003fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d001      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04a      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x6c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d013      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x6c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_TIM_Base_Start_IT+0xc0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x6c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x6c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d115      	bne.n	8003b64 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d015      	beq.n	8003b76 <HAL_TIM_Base_Start_IT+0xaa>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d011      	beq.n	8003b76 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	e008      	b.n	8003b76 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40013400 	.word	0x40013400
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	00010007 	.word	0x00010007

08003ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0202 	mvn.w	r2, #2
 8003bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9d8 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9ca 	bl	8003f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9db 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0204 	mvn.w	r2, #4
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9ae 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9a0 	bl	8003f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f9b1 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0208 	mvn.w	r2, #8
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f984 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f976 	bl	8003f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f987 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f95a 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f94c 	bl	8003f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f95d 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0201 	mvn.w	r2, #1
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f926 	bl	8003f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 faf6 	bl	800433c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fae9 	bl	8004350 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f90b 	bl	8003fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d10e      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0220 	mvn.w	r2, #32
 8003dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 faa9 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_ConfigClockSource+0x1c>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0b6      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x18a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	d03e      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xd8>
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	f200 8087 	bhi.w	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	f000 8086 	beq.w	8003f54 <HAL_TIM_ConfigClockSource+0x176>
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d87f      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e4e:	2b70      	cmp	r3, #112	; 0x70
 8003e50:	d01a      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0xaa>
 8003e52:	2b70      	cmp	r3, #112	; 0x70
 8003e54:	d87b      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e56:	2b60      	cmp	r3, #96	; 0x60
 8003e58:	d050      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0x11e>
 8003e5a:	2b60      	cmp	r3, #96	; 0x60
 8003e5c:	d877      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e5e:	2b50      	cmp	r3, #80	; 0x50
 8003e60:	d03c      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xfe>
 8003e62:	2b50      	cmp	r3, #80	; 0x50
 8003e64:	d873      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d058      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0x13e>
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d86f      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e6e:	2b30      	cmp	r3, #48	; 0x30
 8003e70:	d064      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0x15e>
 8003e72:	2b30      	cmp	r3, #48	; 0x30
 8003e74:	d86b      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d060      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0x15e>
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d867      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d05c      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0x15e>
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d05a      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0x15e>
 8003e86:	e062      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f000 f9a6 	bl	80041e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
      break;
 8003eb4:	e04f      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 f98f 	bl	80041e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e03c      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f000 f903 	bl	80040f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2150      	movs	r1, #80	; 0x50
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f95c 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003efa:	e02c      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f000 f922 	bl	8004152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2160      	movs	r1, #96	; 0x60
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f94c 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003f1a:	e01c      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f000 f8e3 	bl	80040f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f93c 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003f3a:	e00c      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f000 f933 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e003      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      break;
 8003f52:	e000      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <TIM_Base_SetConfig+0x104>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x38>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a39      	ldr	r2, [pc, #228]	; (80040dc <TIM_Base_SetConfig+0x108>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x38>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a38      	ldr	r2, [pc, #224]	; (80040e0 <TIM_Base_SetConfig+0x10c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x38>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a37      	ldr	r2, [pc, #220]	; (80040e4 <TIM_Base_SetConfig+0x110>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <TIM_Base_SetConfig+0x104>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <TIM_Base_SetConfig+0x108>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <TIM_Base_SetConfig+0x10c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <TIM_Base_SetConfig+0x110>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a26      	ldr	r2, [pc, #152]	; (80040ec <TIM_Base_SetConfig+0x118>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <TIM_Base_SetConfig+0x11c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <TIM_Base_SetConfig+0x104>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_Base_SetConfig+0xe8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <TIM_Base_SetConfig+0x110>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0xe8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <TIM_Base_SetConfig+0x114>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0xe8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <TIM_Base_SetConfig+0x118>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0xe8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <TIM_Base_SetConfig+0x11c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0201 	bic.w	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800411e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 030a 	bic.w	r3, r3, #10
 8004130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004152:	b480      	push	{r7}
 8004154:	b087      	sub	sp, #28
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f043 0307 	orr.w	r3, r3, #7
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e063      	b.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d108      	bne.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800427a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d013      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10c      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800436c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004370:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	b29b      	uxth	r3, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	4013      	ands	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800439a:	b084      	sub	sp, #16
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	f107 0014 	add.w	r0, r7, #20
 80043a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	b004      	add	sp, #16
 80043da:	4770      	bx	lr

080043dc <__libc_init_array>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	4d0d      	ldr	r5, [pc, #52]	; (8004414 <__libc_init_array+0x38>)
 80043e0:	4c0d      	ldr	r4, [pc, #52]	; (8004418 <__libc_init_array+0x3c>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	2600      	movs	r6, #0
 80043e8:	42a6      	cmp	r6, r4
 80043ea:	d109      	bne.n	8004400 <__libc_init_array+0x24>
 80043ec:	4d0b      	ldr	r5, [pc, #44]	; (800441c <__libc_init_array+0x40>)
 80043ee:	4c0c      	ldr	r4, [pc, #48]	; (8004420 <__libc_init_array+0x44>)
 80043f0:	f000 f820 	bl	8004434 <_init>
 80043f4:	1b64      	subs	r4, r4, r5
 80043f6:	10a4      	asrs	r4, r4, #2
 80043f8:	2600      	movs	r6, #0
 80043fa:	42a6      	cmp	r6, r4
 80043fc:	d105      	bne.n	800440a <__libc_init_array+0x2e>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	f855 3b04 	ldr.w	r3, [r5], #4
 8004404:	4798      	blx	r3
 8004406:	3601      	adds	r6, #1
 8004408:	e7ee      	b.n	80043e8 <__libc_init_array+0xc>
 800440a:	f855 3b04 	ldr.w	r3, [r5], #4
 800440e:	4798      	blx	r3
 8004410:	3601      	adds	r6, #1
 8004412:	e7f2      	b.n	80043fa <__libc_init_array+0x1e>
 8004414:	08004510 	.word	0x08004510
 8004418:	08004510 	.word	0x08004510
 800441c:	08004510 	.word	0x08004510
 8004420:	08004514 	.word	0x08004514

08004424 <memset>:
 8004424:	4402      	add	r2, r0
 8004426:	4603      	mov	r3, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	d100      	bne.n	800442e <memset+0xa>
 800442c:	4770      	bx	lr
 800442e:	f803 1b01 	strb.w	r1, [r3], #1
 8004432:	e7f9      	b.n	8004428 <memset+0x4>

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
