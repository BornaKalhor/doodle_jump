
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800906c  0800906c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800906c  0800906c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800906c  0800906c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000800  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c667  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349b  00000000  00000000  0003c73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c18  00000000  00000000  000426b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af90  00000000  00000000  000632c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c03d8  00000000  00000000  0007e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bac  00000000  00000000  0013e684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00145230  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00145254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d70 	.word	0x08008d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008d70 	.word	0x08008d70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	817b      	strh	r3, [r7, #10]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	813b      	strh	r3, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <LiquidCrystal+0x90>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bca:	8939      	ldrh	r1, [r7, #8]
 8000bcc:	897a      	ldrh	r2, [r7, #10]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9308      	str	r3, [sp, #32]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9307      	str	r3, [sp, #28]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9306      	str	r3, [sp, #24]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9305      	str	r3, [sp, #20]
 8000bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be0:	9304      	str	r3, [sp, #16]
 8000be2:	8c3b      	ldrh	r3, [r7, #32]
 8000be4:	9303      	str	r3, [sp, #12]
 8000be6:	8bbb      	ldrh	r3, [r7, #28]
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	8b3b      	ldrh	r3, [r7, #24]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 f820 	bl	8000c3c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bfc:	e018      	b.n	8000c30 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bfe:	8939      	ldrh	r1, [r7, #8]
 8000c00:	897a      	ldrh	r2, [r7, #10]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9308      	str	r3, [sp, #32]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9307      	str	r3, [sp, #28]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	8c3b      	ldrh	r3, [r7, #32]
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	460b      	mov	r3, r1
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f806 	bl	8000c3c <init>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000

08000c3c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	4611      	mov	r1, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <init+0x84>)
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <init+0x88>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <init+0x8c>)
 8000c62:	8b3b      	ldrh	r3, [r7, #24]
 8000c64:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <init+0x90>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <init+0x94>)
 8000c6e:	8bbb      	ldrh	r3, [r7, #28]
 8000c70:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <init+0x94>)
 8000c74:	8c3b      	ldrh	r3, [r7, #32]
 8000c76:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <init+0x94>)
 8000c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c7c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <init+0x94>)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <init+0x94>)
 8000c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c88:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <init+0x94>)
 8000c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c8e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <init+0x94>)
 8000c92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c94:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <init+0x94>)
 8000c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e002      	b.n	8000cb0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <init+0x98>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f000 f810 	bl	8000cd8 <begin>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000fc 	.word	0x200000fc
 8000cc4:	200000dc 	.word	0x200000dc
 8000cc8:	200000fa 	.word	0x200000fa
 8000ccc:	200000e0 	.word	0x200000e0
 8000cd0:	200000e8 	.word	0x200000e8
 8000cd4:	200000f9 	.word	0x200000f9

08000cd8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d906      	bls.n	8000cfc <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <begin+0x1f4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <begin+0x1f4>)
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cfc:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <begin+0x1f8>)
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f988 	bl	8001020 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <begin+0x1fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <begin+0x54>
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <begin+0x1f4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <begin+0x1f4>)
 8000d2a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d2c:	f000 f8e4 	bl	8000ef8 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <begin+0x200>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <begin+0x204>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <begin+0x208>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <begin+0x20c>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <begin+0x210>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <begin+0x210>)
 8000d5e:	885b      	ldrh	r3, [r3, #2]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <begin+0x210>)
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <begin+0x210>)
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e02a      	b.n	8000dce <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <begin+0x204>)
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <begin+0x208>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b57      	ldr	r3, [pc, #348]	; (8000ee4 <begin+0x20c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <begin+0x210>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <begin+0x210>)
 8000d96:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <begin+0x210>)
 8000d9e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <begin+0x210>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <begin+0x210>)
 8000dae:	891b      	ldrh	r3, [r3, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <begin+0x210>)
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <begin+0x210>)
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <begin+0x210>)
 8000dc6:	89db      	ldrh	r3, [r3, #14]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dcc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <begin+0x214>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 f805 	bl	8003de8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f002 fe56 	bl	8003a90 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <begin+0x214>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <begin+0x204>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f98c 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <begin+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <begin+0x20c>)
 8000dfa:	8811      	ldrh	r1, [r2, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 f984 	bl	800410c <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <begin+0x208>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d007      	beq.n	8000e1c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <begin+0x214>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <begin+0x208>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 f978 	bl	800410c <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <begin+0x1f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d115      	bne.n	8000e54 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa45 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f002 fe2e 	bl	8003a90 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa3f 	bl	80012b8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e3a:	2005      	movs	r0, #5
 8000e3c:	f002 fe28 	bl	8003a90 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fa39 	bl	80012b8 <write4bits>
    HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f002 fe22 	bl	8003a90 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fa33 	bl	80012b8 <write4bits>
 8000e52:	e01d      	b.n	8000e90 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <begin+0x1f4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9a4 	bl	80011ac <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e64:	2005      	movs	r0, #5
 8000e66:	f002 fe13 	bl	8003a90 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <begin+0x1f4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f999 	bl	80011ac <command>
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f002 fe08 	bl	8003a90 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <begin+0x1f4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f98e 	bl	80011ac <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <begin+0x1f4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f986 	bl	80011ac <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <begin+0x218>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  display();
 8000ea6:	f000 f917 	bl	80010d8 <display>

  // clear it off
  clear();
 8000eaa:	f000 f8d9 	bl	8001060 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <begin+0x21c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <begin+0x21c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f974 	bl	80011ac <command>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000f9 	.word	0x200000f9
 8000ed0:	200000e5 	.word	0x200000e5
 8000ed4:	200000c4 	.word	0x200000c4
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	200000fc 	.word	0x200000fc
 8000ee0:	200000dc 	.word	0x200000dc
 8000ee4:	200000fa 	.word	0x200000fa
 8000ee8:	200000e8 	.word	0x200000e8
 8000eec:	200000e0 	.word	0x200000e0
 8000ef0:	200000e4 	.word	0x200000e4
 8000ef4:	200000f8 	.word	0x200000f8

08000ef8 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <enableClock+0x10c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f06:	d10c      	bne.n	8000f22 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <enableClock+0x110>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <enableClock+0x110>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f20:	e06a      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <enableClock+0x10c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <enableClock+0x114>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10c      	bne.n	8000f46 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <enableClock+0x110>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <enableClock+0x110>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
}
 8000f44:	e058      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <enableClock+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a30      	ldr	r2, [pc, #192]	; (800100c <enableClock+0x114>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10c      	bne.n	8000f6a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <enableClock+0x110>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <enableClock+0x110>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
}
 8000f68:	e046      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOC)
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <enableClock+0x10c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <enableClock+0x118>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10c      	bne.n	8000f8e <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <enableClock+0x110>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	6153      	str	r3, [r2, #20]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <enableClock+0x110>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	e034      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOD)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <enableClock+0x10c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <enableClock+0x11c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10c      	bne.n	8000fb2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <enableClock+0x110>)
 8000f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa2:	6153      	str	r3, [r2, #20]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <enableClock+0x110>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	e022      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOE)
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <enableClock+0x10c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <enableClock+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d10c      	bne.n	8000fd6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <enableClock+0x110>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	6153      	str	r3, [r2, #20]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <enableClock+0x110>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
}
 8000fd4:	e010      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOF)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <enableClock+0x10c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <enableClock+0x124>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10b      	bne.n	8000ff8 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <enableClock+0x110>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6153      	str	r3, [r2, #20]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <enableClock+0x110>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	200000e0 	.word	0x200000e0
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48001000 	.word	0x48001000
 800101c:	48001400 	.word	0x48001400

08001020 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <setRowOffsets+0x3c>)
 8001034:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <setRowOffsets+0x3c>)
 800103c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <setRowOffsets+0x3c>)
 8001044:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <setRowOffsets+0x3c>)
 800104c:	70da      	strb	r2, [r3, #3]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000d8 	.word	0x200000d8

08001060 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f8a1 	bl	80011ac <command>
  HAL_Delay(2);  // this command takes a long time!
 800106a:	2002      	movs	r0, #2
 800106c:	f002 fd10 	bl	8003a90 <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d803      	bhi.n	8001098 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setCursor+0x5c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	79ba      	ldrb	r2, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d303      	bcc.n	80010aa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <setCursor+0x5c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <setCursor+0x60>)
 80010ae:	5cd2      	ldrb	r2, [r2, r3]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f873 	bl	80011ac <command>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e5 	.word	0x200000e5
 80010d4:	200000d8 	.word	0x200000d8

080010d8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <display+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <display+0x28>)
 80010e8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <display+0x28>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f859 	bl	80011ac <command>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000e4 	.word	0x200000e4

08001104 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <print+0x12>
 8001112:	2300      	movs	r3, #0
 8001114:	e01d      	b.n	8001152 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strlen>
 8001120:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001126:	e00c      	b.n	8001142 <print+0x3e>
    if (write(*buffer++)) n++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f849 	bl	80011c8 <write>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <print+0x4a>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	613a      	str	r2, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ed      	bne.n	8001128 <print+0x24>
 800114c:	e000      	b.n	8001150 <print+0x4c>
    else break;
 800114e:	bf00      	nop
  }
  return n;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f815 	bl	80011ac <command>
  for (int i=0; i<8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e009      	b.n	800119c <createChar+0x42>
    write(charmap[i]);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f819 	bl	80011c8 <write>
  for (int i=0; i<8; i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	ddf2      	ble.n	8001188 <createChar+0x2e>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f814 	bl	80011e8 <send>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <write>:

inline size_t write(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f806 	bl	80011e8 <send>
  return 1; // assume sucess
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <send+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <send+0x70>)
 80011fe:	8811      	ldrh	r1, [r2, #0]
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f002 ff82 	bl	800410c <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <send+0x74>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2bff      	cmp	r3, #255	; 0xff
 800120e:	d007      	beq.n	8001220 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <send+0x6c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <send+0x74>)
 8001216:	8811      	ldrh	r1, [r2, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f002 ff76 	bl	800410c <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <send+0x78>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <send+0x4e>
    write8bits(value);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f86c 	bl	800130c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001234:	e009      	b.n	800124a <send+0x62>
    write4bits(value>>4);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f83b 	bl	80012b8 <write4bits>
    write4bits(value);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f837 	bl	80012b8 <write4bits>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000e0 	.word	0x200000e0
 8001258:	200000fc 	.word	0x200000fc
 800125c:	200000dc 	.word	0x200000dc
 8001260:	200000f9 	.word	0x200000f9

08001264 <pulseEnable>:

void pulseEnable(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <pulseEnable+0x4c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <pulseEnable+0x50>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f002 ff4a 	bl	800410c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 fc09 	bl	8003a90 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <pulseEnable+0x4c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <pulseEnable+0x50>)
 8001284:	8811      	ldrh	r1, [r2, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f002 ff3f 	bl	800410c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800128e:	2001      	movs	r0, #1
 8001290:	f002 fbfe 	bl	8003a90 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <pulseEnable+0x4c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <pulseEnable+0x50>)
 800129a:	8811      	ldrh	r1, [r2, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 ff34 	bl	800410c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fbf3 	bl	8003a90 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	200000fa 	.word	0x200000fa

080012b8 <write4bits>:

void write4bits(uint8_t value) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e013      	b.n	80012f0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <write4bits+0x4c>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <write4bits+0x50>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f002 ff11 	bl	800410c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	dde8      	ble.n	80012c8 <write4bits+0x10>
  }

  pulseEnable();
 80012f6:	f7ff ffb5 	bl	8001264 <pulseEnable>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000e0 	.word	0x200000e0
 8001308:	200000e8 	.word	0x200000e8

0800130c <write8bits>:

void write8bits(uint8_t value) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e013      	b.n	8001344 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <write8bits+0x4c>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <write8bits+0x50>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	fa42 f303 	asr.w	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f002 fee7 	bl	800410c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b07      	cmp	r3, #7
 8001348:	dde8      	ble.n	800131c <write8bits+0x10>
  }

  pulseEnable();
 800134a:	f7ff ff8b 	bl	8001264 <pulseEnable>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000e0 	.word	0x200000e0
 800135c:	200000e8 	.word	0x200000e8

08001360 <init_state_vars>:
  0x03,
  0x03,
  0x03
};

void init_state_vars() {
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
     * menusState:
     * 	'z' init page
     * 	'g' game page
     * 	'a' about us
     * */
	menuState = 'z';
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <init_state_vars+0x14>)
 8001366:	227a      	movs	r2, #122	; 0x7a
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	2000014c 	.word	0x2000014c

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f002 fb21 	bl	80039c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_state_vars();
 8001382:	f7ff ffed 	bl	8001360 <init_state_vars>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	2110      	movs	r1, #16
 800138a:	4837      	ldr	r0, [pc, #220]	; (8001468 <main+0xf0>)
 800138c:	f002 febe 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2120      	movs	r1, #32
 8001394:	4834      	ldr	r0, [pc, #208]	; (8001468 <main+0xf0>)
 8001396:	f002 feb9 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4832      	ldr	r0, [pc, #200]	; (8001468 <main+0xf0>)
 80013a0:	f002 feb4 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	482f      	ldr	r0, [pc, #188]	; (8001468 <main+0xf0>)
 80013aa:	f002 feaf 	bl	800410c <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80013ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4825      	ldr	r0, [pc, #148]	; (8001468 <main+0xf0>)
 80013d4:	f7ff fbe8 	bl	8000ba8 <LiquidCrystal>
  begin(20, 4);
 80013d8:	2104      	movs	r1, #4
 80013da:	2014      	movs	r0, #20
 80013dc:	f7ff fc7c 	bl	8000cd8 <begin>

	createChar(0, doodler);
 80013e0:	4922      	ldr	r1, [pc, #136]	; (800146c <main+0xf4>)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff feb9 	bl	800115a <createChar>
	createChar(1, step);
 80013e8:	4921      	ldr	r1, [pc, #132]	; (8001470 <main+0xf8>)
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff feb5 	bl	800115a <createChar>
	createChar(2, enemy);
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <main+0xfc>)
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff feb1 	bl	800115a <createChar>
	createChar(3, spring_booster);
 80013f8:	491f      	ldr	r1, [pc, #124]	; (8001478 <main+0x100>)
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff fead 	bl	800115a <createChar>
	createChar(4, blackhole);
 8001400:	491e      	ldr	r1, [pc, #120]	; (800147c <main+0x104>)
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff fea9 	bl	800115a <createChar>
	createChar(5, broken_step);
 8001408:	491d      	ldr	r1, [pc, #116]	; (8001480 <main+0x108>)
 800140a:	2005      	movs	r0, #5
 800140c:	f7ff fea5 	bl	800115a <createChar>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f842 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 f9f8 	bl	8001808 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001418:	f000 f8a2 	bl	8001560 <MX_I2C1_Init>
  MX_SPI1_Init();
 800141c:	f000 f8e0 	bl	80015e0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001420:	f000 f9d0 	bl	80017c4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001424:	f000 f91a 	bl	800165c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001428:	f000 f99c 	bl	8001764 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800142c:	f000 f964 	bl	80016f8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <main+0x10c>)
 8001432:	f004 fcb5 	bl	8005da0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <main+0x110>)
 8001438:	f004 fcb2 	bl	8005da0 <HAL_TIM_Base_Start_IT>
  unsigned char hello[8] = "hello \n";
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <main+0x114>)
 800143e:	463b      	mov	r3, r7
 8001440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001444:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
 8001448:	4639      	mov	r1, r7
 800144a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800144e:	2208      	movs	r2, #8
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <main+0x118>)
 8001452:	f005 f93f 	bl	80066d4 <HAL_UART_Transmit>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <main+0x11c>)
 800145c:	f002 fe6e 	bl	800413c <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f002 fb15 	bl	8003a90 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001466:	e7f6      	b.n	8001456 <main+0xde>
 8001468:	48000c00 	.word	0x48000c00
 800146c:	20000004 	.word	0x20000004
 8001470:	2000000c 	.word	0x2000000c
 8001474:	20000014 	.word	0x20000014
 8001478:	2000001c 	.word	0x2000001c
 800147c:	20000024 	.word	0x20000024
 8001480:	2000002c 	.word	0x2000002c
 8001484:	200001b4 	.word	0x200001b4
 8001488:	20000570 	.word	0x20000570
 800148c:	08008d88 	.word	0x08008d88
 8001490:	20000200 	.word	0x20000200
 8001494:	48001000 	.word	0x48001000

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b09e      	sub	sp, #120	; 0x78
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014a2:	2228      	movs	r2, #40	; 0x28
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 f93c 	bl	8007724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	223c      	movs	r2, #60	; 0x3c
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 f92e 	bl	8007724 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014c8:	2303      	movs	r3, #3
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2310      	movs	r3, #16
 80014dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 f864 	bl	80045c0 <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80014fe:	f000 fa71 	bl	80019e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2302      	movs	r3, #2
 8001508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f003 ff56 	bl	80053d0 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800152a:	f000 fa5b 	bl	80019e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SystemClock_Config+0xc4>)
 8001530:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4618      	mov	r0, r3
 8001544:	f004 f97a 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800154e:	f000 fa49 	bl	80019e4 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3778      	adds	r7, #120	; 0x78
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	00020022 	.word	0x00020022

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_I2C1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_I2C1_Init+0x74>)
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <MX_I2C1_Init+0x7c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001578:	2201      	movs	r2, #1
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x74>)
 800159c:	f002 fe0b 	bl	80041b6 <HAL_I2C_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015a6:	f000 fa1d 	bl	80019e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015ae:	f002 fe91 	bl	80042d4 <HAL_I2CEx_ConfigAnalogFilter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f000 fa14 	bl	80019e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015c0:	f002 fed3 	bl	800436a <HAL_I2CEx_ConfigDigitalFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 fa0b 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000100 	.word	0x20000100
 80015d8:	40005400 	.word	0x40005400
 80015dc:	2000090e 	.word	0x2000090e

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_SPI1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_SPI1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_SPI1_Init+0x74>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI1_Init+0x74>)
 80015fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI1_Init+0x74>)
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI1_Init+0x74>)
 8001616:	2208      	movs	r2, #8
 8001618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_SPI1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI1_Init+0x74>)
 800162e:	2207      	movs	r2, #7
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI1_Init+0x74>)
 800163a:	2208      	movs	r2, #8
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_SPI1_Init+0x74>)
 8001640:	f004 faac 	bl	8005b9c <HAL_SPI_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 f9cb 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000150 	.word	0x20000150
 8001658:	40013000 	.word	0x40013000

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM2_Init+0x98>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM2_Init+0x98>)
 8001684:	f640 125f 	movw	r2, #2399	; 0x95f
 8001688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM2_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM2_Init+0x98>)
 8001692:	f242 7210 	movw	r2, #10000	; 0x2710
 8001696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_TIM2_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016a6:	f004 fb24 	bl	8005cf2 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 f998 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016c2:	f004 fcf6 	bl	80060b2 <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016cc:	f000 f98a 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016de:	f004 ff0d 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016e8:	f000 f97c 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200001b4 	.word	0x200001b4

080016f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_TIM7_Init+0x64>)
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <MX_TIM7_Init+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_TIM7_Init+0x64>)
 8001710:	f640 125f 	movw	r2, #2399	; 0x95f
 8001714:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_TIM7_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_TIM7_Init+0x64>)
 800171e:	2214      	movs	r2, #20
 8001720:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_TIM7_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_TIM7_Init+0x64>)
 800172a:	f004 fae2 	bl	8005cf2 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001734:	f000 f956 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_TIM7_Init+0x64>)
 8001746:	f004 fed9 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001750:	f000 f948 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000570 	.word	0x20000570
 8001760:	40001400 	.word	0x40001400

08001764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART2_UART_Init+0x58>)
 80017a8:	f004 ff46 	bl	8006638 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017b2:	f000 f917 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000200 	.word	0x20000200
 80017c0:	40004400 	.word	0x40004400

080017c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <MX_USB_PCD_Init+0x40>)
 80017cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017d0:	2208      	movs	r2, #8
 80017d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017dc:	2202      	movs	r2, #2
 80017de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_USB_PCD_Init+0x3c>)
 80017ee:	f002 fe08 	bl	8004402 <HAL_PCD_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80017f8:	f000 f8f4 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000284 	.word	0x20000284
 8001804:	40005c00 	.word	0x40005c00

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a6b      	ldr	r2, [pc, #428]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001828:	6153      	str	r3, [r2, #20]
 800182a:	4b69      	ldr	r3, [pc, #420]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800183c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001840:	6153      	str	r3, [r2, #20]
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800184e:	4b60      	ldr	r3, [pc, #384]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a59      	ldr	r2, [pc, #356]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a53      	ldr	r2, [pc, #332]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b51      	ldr	r3, [pc, #324]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 800189c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <MX_GPIO_Init+0x1c8>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80018ae:	2200      	movs	r2, #0
 80018b0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80018b4:	4847      	ldr	r0, [pc, #284]	; (80019d4 <MX_GPIO_Init+0x1cc>)
 80018b6:	f002 fc29 	bl	800410c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	210f      	movs	r1, #15
 80018be:	4846      	ldr	r0, [pc, #280]	; (80019d8 <MX_GPIO_Init+0x1d0>)
 80018c0:	f002 fc24 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80018ca:	4844      	ldr	r0, [pc, #272]	; (80019dc <MX_GPIO_Init+0x1d4>)
 80018cc:	f002 fc1e 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80018d0:	2200      	movs	r2, #0
 80018d2:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 80018d6:	4842      	ldr	r0, [pc, #264]	; (80019e0 <MX_GPIO_Init+0x1d8>)
 80018d8:	f002 fc18 	bl	800410c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80018dc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80018e0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4837      	ldr	r0, [pc, #220]	; (80019d4 <MX_GPIO_Init+0x1cc>)
 80018f6:	f002 fa77 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 80018fa:	2320      	movs	r3, #32
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4831      	ldr	r0, [pc, #196]	; (80019d4 <MX_GPIO_Init+0x1cc>)
 8001910:	f002 fa6a 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001914:	230f      	movs	r3, #15
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <MX_GPIO_Init+0x1d0>)
 800192c:	f002 fa5c 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001930:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4824      	ldr	r0, [pc, #144]	; (80019dc <MX_GPIO_Init+0x1d4>)
 800194a:	f002 fa4d 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800194e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001952:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_GPIO_Init+0x1d8>)
 8001968:	f002 fa3e 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800196c:	230f      	movs	r3, #15
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001970:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <MX_GPIO_Init+0x1d8>)
 8001982:	f002 fa31 	bl	8003de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	2006      	movs	r0, #6
 800198c:	f002 f97f 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001990:	2006      	movs	r0, #6
 8001992:	f002 f998 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2101      	movs	r1, #1
 800199a:	2007      	movs	r0, #7
 800199c:	f002 f977 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019a0:	2007      	movs	r0, #7
 80019a2:	f002 f990 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2101      	movs	r1, #1
 80019aa:	2008      	movs	r0, #8
 80019ac:	f002 f96f 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80019b0:	2008      	movs	r0, #8
 80019b2:	f002 f988 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2101      	movs	r1, #1
 80019ba:	2009      	movs	r0, #9
 80019bc:	f002 f967 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019c0:	2009      	movs	r0, #9
 80019c2:	f002 f980 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48000800 	.word	0x48000800
 80019dc:	48000400 	.word	0x48000400
 80019e0:	48000c00 	.word	0x48000c00

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x44>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x44>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x44>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a26:	2005      	movs	r0, #5
 8001a28:	f002 f926 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_I2C_MspInit+0x7c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d127      	bne.n	8001aaa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001a72:	23c0      	movs	r3, #192	; 0xc0
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a76:	2312      	movs	r3, #18
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a82:	2304      	movs	r3, #4
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <HAL_I2C_MspInit+0x84>)
 8001a8e:	f002 f9ab 	bl	8003de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_I2C_MspInit+0x80>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000400 	.word	0x48000400

08001ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_SPI_MspInit+0x7c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d128      	bne.n	8001b34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	6153      	str	r3, [r2, #20]
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001b12:	23e0      	movs	r3, #224	; 0xe0
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b22:	2305      	movs	r3, #5
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f002 f95a 	bl	8003de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d114      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2102      	movs	r1, #2
 8001b72:	201c      	movs	r0, #28
 8001b74:	f002 f88b 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b78:	201c      	movs	r0, #28
 8001b7a:	f002 f8a4 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b7e:	e018      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d113      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_TIM_Base_MspInit+0x78>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2037      	movs	r0, #55	; 0x37
 8001ba8:	f002 f871 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bac:	2037      	movs	r0, #55	; 0x37
 8001bae:	f002 f88a 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40001400 	.word	0x40001400

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_UART_MspInit+0x8c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d130      	bne.n	8001c48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c16:	230c      	movs	r3, #12
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c26:	2307      	movs	r3, #7
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f002 f8d8 	bl	8003de8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2026      	movs	r0, #38	; 0x26
 8001c3e:	f002 f826 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c42:	2026      	movs	r0, #38	; 0x26
 8001c44:	f002 f83f 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_PCD_MspInit+0x80>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d129      	bne.n	8001cce <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001c92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ca4:	230e      	movs	r3, #14
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f002 f899 	bl	8003de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_PCD_MspInit+0x84>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40005c00 	.word	0x40005c00
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2c:	f001 fe90 	bl	8003a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f002 fa19 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  keypadCallback(3);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f001 faaa 	bl	8003298 <keypadCallback>
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <EXTI0_IRQHandler+0x20>)
 8001d4a:	f002 f9f7 	bl	800413c <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	48001000 	.word	0x48001000

08001d58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f002 fa07 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  keypadCallback(2);
 8001d62:	2002      	movs	r0, #2
 8001d64:	f001 fa98 	bl	8003298 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d6e:	4802      	ldr	r0, [pc, #8]	; (8001d78 <EXTI1_IRQHandler+0x20>)
 8001d70:	f002 f9cc 	bl	800410c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	48001000 	.word	0x48001000

08001d7c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f002 f9f5 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  keypadCallback(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f001 fa86 	bl	8003298 <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <EXTI2_TSC_IRQHandler+0x20>)
 8001d94:	f002 f9ba 	bl	800410c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	48001000 	.word	0x48001000

08001da0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS_I2C_SPI_Pin);
 8001da4:	2008      	movs	r0, #8
 8001da6:	f002 f9e3 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <EXTI3_IRQHandler+0x20>)
 8001db2:	f002 f9ab 	bl	800410c <HAL_GPIO_WritePin>
  keypadCallback(0);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f001 fa6e 	bl	8003298 <keypadCallback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	48001000 	.word	0x48001000

08001dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8001dca:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dcc:	489d      	ldr	r0, [pc, #628]	; (8002044 <TIM2_IRQHandler+0x280>)
 8001dce:	f004 f851 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd6:	489c      	ldr	r0, [pc, #624]	; (8002048 <TIM2_IRQHandler+0x284>)
 8001dd8:	f002 f9b0 	bl	800413c <HAL_GPIO_TogglePin>
	unsigned char buff[512] = {' '};
 8001ddc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001de0:	2220      	movs	r2, #32
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	3304      	adds	r3, #4
 8001de6:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 fc99 	bl	8007724 <memset>
//  // Update State variables
//  print("test");
  if (menuState != 'g') { // this is game state
 8001df2:	4b96      	ldr	r3, [pc, #600]	; (800204c <TIM2_IRQHandler+0x288>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b67      	cmp	r3, #103	; 0x67
 8001df8:	d004      	beq.n	8001e04 <TIM2_IRQHandler+0x40>
	  initGameState();
 8001dfa:	f001 f97f 	bl	80030fc <initGameState>
	  menuState = 'g';
 8001dfe:	4b93      	ldr	r3, [pc, #588]	; (800204c <TIM2_IRQHandler+0x288>)
 8001e00:	2267      	movs	r2, #103	; 0x67
 8001e02:	701a      	strb	r2, [r3, #0]

  }

  // Upload on LCD
	unsigned char hello[64] = "\n\n\nTurn started \n";
 8001e04:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8001e08:	4b91      	ldr	r3, [pc, #580]	; (8002050 <TIM2_IRQHandler+0x28c>)
 8001e0a:	4634      	mov	r4, r6
 8001e0c:	461d      	mov	r5, r3
 8001e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	8023      	strh	r3, [r4, #0]
 8001e16:	f106 0312 	add.w	r3, r6, #18
 8001e1a:	222e      	movs	r2, #46	; 0x2e
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 fc80 	bl	8007724 <memset>
	HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
 8001e24:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	4889      	ldr	r0, [pc, #548]	; (8002054 <TIM2_IRQHandler+0x290>)
 8001e30:	f004 fc50 	bl	80066d4 <HAL_UART_Transmit>
  switch (menuState) {
 8001e34:	4b85      	ldr	r3, [pc, #532]	; (800204c <TIM2_IRQHandler+0x288>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b61      	subs	r3, #97	; 0x61
 8001e3a:	2b19      	cmp	r3, #25
 8001e3c:	f200 80f9 	bhi.w	8002032 <TIM2_IRQHandler+0x26e>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <TIM2_IRQHandler+0x84>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	0800201d 	.word	0x0800201d
 8001e4c:	08002033 	.word	0x08002033
 8001e50:	08002033 	.word	0x08002033
 8001e54:	08001ec5 	.word	0x08001ec5
 8001e58:	08002033 	.word	0x08002033
 8001e5c:	08002033 	.word	0x08002033
 8001e60:	08001f0f 	.word	0x08001f0f
 8001e64:	08002033 	.word	0x08002033
 8001e68:	08002033 	.word	0x08002033
 8001e6c:	08002033 	.word	0x08002033
 8001e70:	08002033 	.word	0x08002033
 8001e74:	08002033 	.word	0x08002033
 8001e78:	08001efb 	.word	0x08001efb
 8001e7c:	08002033 	.word	0x08002033
 8001e80:	08002033 	.word	0x08002033
 8001e84:	08002033 	.word	0x08002033
 8001e88:	08002033 	.word	0x08002033
 8001e8c:	08002033 	.word	0x08002033
 8001e90:	08002033 	.word	0x08002033
 8001e94:	08002033 	.word	0x08002033
 8001e98:	08002033 	.word	0x08002033
 8001e9c:	08002033 	.word	0x08002033
 8001ea0:	08002033 	.word	0x08002033
 8001ea4:	08002033 	.word	0x08002033
 8001ea8:	08002033 	.word	0x08002033
 8001eac:	08001eb1 	.word	0x08001eb1
  	  case 'z':
  		  clear();
 8001eb0:	f7ff f8d6 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff f8dc 	bl	8001074 <setCursor>
  		  print("Doodle Jump");
 8001ebc:	4866      	ldr	r0, [pc, #408]	; (8002058 <TIM2_IRQHandler+0x294>)
 8001ebe:	f7ff f921 	bl	8001104 <print>
  		  break;
 8001ec2:	e0b6      	b.n	8002032 <TIM2_IRQHandler+0x26e>
	  case 'd':
	  	clear();
 8001ec4:	f7ff f8cc 	bl	8001060 <clear>
		  setCursor(0, 0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff f8d2 	bl	8001074 <setCursor>
		  print("You Lost ");
 8001ed0:	4862      	ldr	r0, [pc, #392]	; (800205c <TIM2_IRQHandler+0x298>)
 8001ed2:	f7ff f917 	bl	8001104 <print>
		  setCursor(0, 1);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff f8cb 	bl	8001074 <setCursor>
		  sprintf(buff, " %d ", score);
 8001ede:	4b60      	ldr	r3, [pc, #384]	; (8002060 <TIM2_IRQHandler+0x29c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ee6:	495f      	ldr	r1, [pc, #380]	; (8002064 <TIM2_IRQHandler+0x2a0>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 fc91 	bl	8007810 <siprintf>
		  print(buff);
 8001eee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f906 	bl	8001104 <print>
	   	break;
 8001ef8:	e09b      	b.n	8002032 <TIM2_IRQHandler+0x26e>
  	  case 'm':
  		  clear();
 8001efa:	f7ff f8b1 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8001efe:	2100      	movs	r1, #0
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff f8b7 	bl	8001074 <setCursor>
  		  print("1 - Start   2 - About us");
 8001f06:	4858      	ldr	r0, [pc, #352]	; (8002068 <TIM2_IRQHandler+0x2a4>)
 8001f08:	f7ff f8fc 	bl	8001104 <print>
  		  break;
 8001f0c:	e091      	b.n	8002032 <TIM2_IRQHandler+0x26e>
  	  case 'g':

		sprintf(buff, "DEBUG: \n ph:%d, phscreen:%d sc:%d \n", playerHeight, playerHeightInScreen, score);
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <TIM2_IRQHandler+0x2a8>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <TIM2_IRQHandler+0x2ac>)
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	4b52      	ldr	r3, [pc, #328]	; (8002060 <TIM2_IRQHandler+0x29c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	4954      	ldr	r1, [pc, #336]	; (8002074 <TIM2_IRQHandler+0x2b0>)
 8001f24:	f005 fc74 	bl	8007810 <siprintf>
		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);
 8001f28:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001f2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	4847      	ldr	r0, [pc, #284]	; (8002054 <TIM2_IRQHandler+0x290>)
 8001f36:	f004 fbcd 	bl	80066d4 <HAL_UART_Transmit>
		sprintf(buff, "DEBUG: \n bl:%d, ls:%d, vd:%d, ms:%d, bs:%d \n",
 8001f3a:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <TIM2_IRQHandler+0x2b4>)
 8001f3c:	681c      	ldr	r4, [r3, #0]
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <TIM2_IRQHandler+0x2b8>)
 8001f40:	681d      	ldr	r5, [r3, #0]
 8001f42:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <TIM2_IRQHandler+0x2bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <TIM2_IRQHandler+0x2c0>)
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	494f      	ldr	r1, [pc, #316]	; (8002088 <TIM2_IRQHandler+0x2c4>)
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001f52:	9102      	str	r1, [sp, #8]
 8001f54:	9201      	str	r2, [sp, #4]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	462b      	mov	r3, r5
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	494b      	ldr	r1, [pc, #300]	; (800208c <TIM2_IRQHandler+0x2c8>)
 8001f5e:	f005 fc57 	bl	8007810 <siprintf>
			blockCount, looseCount, voidCount, monsterCount, boosterCount);
		HAL_UART_Transmit(&huart2, buff, sizeof(buff), 500);
 8001f62:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001f66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	4839      	ldr	r0, [pc, #228]	; (8002054 <TIM2_IRQHandler+0x290>)
 8001f70:	f004 fbb0 	bl	80066d4 <HAL_UART_Transmit>
		if (!pauseGame)
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <TIM2_IRQHandler+0x2cc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <TIM2_IRQHandler+0x1bc>
			processTurn();
 8001f7c:	f000 f9c0 	bl	8002300 <processTurn>
		printGame();
 8001f80:	f000 fde0 	bl	8002b44 <printGame>
//  		  DEBUG scores
//  		  char buff[20];
//  		  sprintf(buff, "%d %d %d", score, playerHeight, playerHeightInScreen);
//  		  sprintf(buff, "%d", getRandom(0, 9));
//  		  print(buff);
  		  int pc = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  		  int i, j;
  		  for (i = 0; i < boardColumns; i ++) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001f90:	e025      	b.n	8001fde <TIM2_IRQHandler+0x21a>
  			  for (j = 0;j < boardRows; j ++ ) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8001f98:	e018      	b.n	8001fcc <TIM2_IRQHandler+0x208>
  				  if (board[i][j] == 'p')
 8001f9a:	493e      	ldr	r1, [pc, #248]	; (8002094 <TIM2_IRQHandler+0x2d0>)
 8001f9c:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	1ad2      	subs	r2, r2, r3
 8001faa:	440a      	add	r2, r1
 8001fac:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b70      	cmp	r3, #112	; 0x70
 8001fb6:	d104      	bne.n	8001fc2 <TIM2_IRQHandler+0x1fe>
  					  pc ++;
 8001fb8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  			  for (j = 0;j < boardRows; j ++ ) {
 8001fc2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8001fcc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001fd0:	2b13      	cmp	r3, #19
 8001fd2:	dde2      	ble.n	8001f9a <TIM2_IRQHandler+0x1d6>
  		  for (i = 0; i < boardColumns; i ++) {
 8001fd4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001fde:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	ddd5      	ble.n	8001f92 <TIM2_IRQHandler+0x1ce>
  			  }
  		  }
  		  if (pc > 1) {
 8001fe6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	dd20      	ble.n	8002030 <TIM2_IRQHandler+0x26c>
				unsigned char hello[64] = "******* HOLY SHIT \n";
 8001fee:	1d3e      	adds	r6, r7, #4
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <TIM2_IRQHandler+0x2d4>)
 8001ff2:	4634      	mov	r4, r6
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	f106 0314 	add.w	r3, r6, #20
 8002002:	222c      	movs	r2, #44	; 0x2c
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f005 fb8c 	bl	8007724 <memset>
  			  HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
 800200c:	1d39      	adds	r1, r7, #4
 800200e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	480f      	ldr	r0, [pc, #60]	; (8002054 <TIM2_IRQHandler+0x290>)
 8002016:	f004 fb5d 	bl	80066d4 <HAL_UART_Transmit>
  		  }
  		  break;
 800201a:	e009      	b.n	8002030 <TIM2_IRQHandler+0x26c>
  	  case 'a':
  		  clear();
 800201c:	f7ff f820 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff f826 	bl	8001074 <setCursor>
  		  print(" Yosef and Borna");
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <TIM2_IRQHandler+0x2d8>)
 800202a:	f7ff f86b 	bl	8001104 <print>
  		  break;
 800202e:	e000      	b.n	8002032 <TIM2_IRQHandler+0x26e>
  		  break;
 8002030:	bf00      	nop
  }

  // Delay for better visual
  HAL_Delay(1);
 8002032:	2001      	movs	r0, #1
 8002034:	f001 fd2c 	bl	8003a90 <HAL_Delay>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	f507 7725 	add.w	r7, r7, #660	; 0x294
 800203e:	46bd      	mov	sp, r7
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	bf00      	nop
 8002044:	200001b4 	.word	0x200001b4
 8002048:	48001000 	.word	0x48001000
 800204c:	2000014c 	.word	0x2000014c
 8002050:	08008e34 	.word	0x08008e34
 8002054:	20000200 	.word	0x20000200
 8002058:	08008d90 	.word	0x08008d90
 800205c:	08008d9c 	.word	0x08008d9c
 8002060:	20000630 	.word	0x20000630
 8002064:	08008da8 	.word	0x08008da8
 8002068:	08008db0 	.word	0x08008db0
 800206c:	2000084c 	.word	0x2000084c
 8002070:	20000830 	.word	0x20000830
 8002074:	08008dcc 	.word	0x08008dcc
 8002078:	20000890 	.word	0x20000890
 800207c:	200007cc 	.word	0x200007cc
 8002080:	2000088c 	.word	0x2000088c
 8002084:	20000840 	.word	0x20000840
 8002088:	200007c8 	.word	0x200007c8
 800208c:	08008df0 	.word	0x08008df0
 8002090:	20000834 	.word	0x20000834
 8002094:	200005d8 	.word	0x200005d8
 8002098:	08008e74 	.word	0x08008e74
 800209c:	08008e20 	.word	0x08008e20

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART2_IRQHandler+0x10>)
 80020a6:	f004 fba9 	bl	80067fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000200 	.word	0x20000200

080020b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020b8:	485a      	ldr	r0, [pc, #360]	; (8002224 <TIM7_IRQHandler+0x170>)
 80020ba:	f003 fedb 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 80020be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c2:	4859      	ldr	r0, [pc, #356]	; (8002228 <TIM7_IRQHandler+0x174>)
 80020c4:	f002 f83a 	bl	800413c <HAL_GPIO_TogglePin>
//  turn = 2;
  setScoreSeven();
 80020c8:	f001 fb2e 	bl	8003728 <setScoreSeven>

  if (turn % 4 == 0) {
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <TIM7_IRQHandler+0x178>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11d      	bne.n	8002114 <TIM7_IRQHandler+0x60>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020de:	4854      	ldr	r0, [pc, #336]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80020e0:	f002 f814 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ea:	4851      	ldr	r0, [pc, #324]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80020ec:	f002 f80e 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f6:	484e      	ldr	r0, [pc, #312]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80020f8:	f002 f808 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002102:	484b      	ldr	r0, [pc, #300]	; (8002230 <TIM7_IRQHandler+0x17c>)
 8002104:	f002 f802 	bl	800410c <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D0);
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <TIM7_IRQHandler+0x180>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fa11 	bl	8003534 <set_seg_value>
 8002112:	e079      	b.n	8002208 <TIM7_IRQHandler+0x154>
  } else if (turn % 4 == 1) {
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <TIM7_IRQHandler+0x178>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	425a      	negs	r2, r3
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	bf58      	it	pl
 8002124:	4253      	negpl	r3, r2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d11d      	bne.n	8002166 <TIM7_IRQHandler+0xb2>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	483f      	ldr	r0, [pc, #252]	; (8002230 <TIM7_IRQHandler+0x17c>)
 8002132:	f001 ffeb 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800213c:	483c      	ldr	r0, [pc, #240]	; (8002230 <TIM7_IRQHandler+0x17c>)
 800213e:	f001 ffe5 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002148:	4839      	ldr	r0, [pc, #228]	; (8002230 <TIM7_IRQHandler+0x17c>)
 800214a:	f001 ffdf 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002154:	4836      	ldr	r0, [pc, #216]	; (8002230 <TIM7_IRQHandler+0x17c>)
 8002156:	f001 ffd9 	bl	800410c <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  set_seg_value(D1);
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <TIM7_IRQHandler+0x184>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f001 f9e8 	bl	8003534 <set_seg_value>
 8002164:	e050      	b.n	8002208 <TIM7_IRQHandler+0x154>
  } else if (turn % 4 == 2) {
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <TIM7_IRQHandler+0x178>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	425a      	negs	r2, r3
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	bf58      	it	pl
 8002176:	4253      	negpl	r3, r2
 8002178:	2b02      	cmp	r3, #2
 800217a:	d11d      	bne.n	80021b8 <TIM7_IRQHandler+0x104>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002182:	482b      	ldr	r0, [pc, #172]	; (8002230 <TIM7_IRQHandler+0x17c>)
 8002184:	f001 ffc2 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218e:	4828      	ldr	r0, [pc, #160]	; (8002230 <TIM7_IRQHandler+0x17c>)
 8002190:	f001 ffbc 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219a:	4825      	ldr	r0, [pc, #148]	; (8002230 <TIM7_IRQHandler+0x17c>)
 800219c:	f001 ffb6 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a6:	4822      	ldr	r0, [pc, #136]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80021a8:	f001 ffb0 	bl	800410c <HAL_GPIO_WritePin>
//	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D2);
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <TIM7_IRQHandler+0x188>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f9bf 	bl	8003534 <set_seg_value>
 80021b6:	e027      	b.n	8002208 <TIM7_IRQHandler+0x154>
  } else if (turn % 4 == 3) {
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <TIM7_IRQHandler+0x178>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	425a      	negs	r2, r3
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	bf58      	it	pl
 80021c8:	4253      	negpl	r3, r2
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d11c      	bne.n	8002208 <TIM7_IRQHandler+0x154>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80021d6:	f001 ff99 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e0:	4813      	ldr	r0, [pc, #76]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80021e2:	f001 ff93 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ec:	4810      	ldr	r0, [pc, #64]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80021ee:	f001 ff8d 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80021f2:	2201      	movs	r2, #1
 80021f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <TIM7_IRQHandler+0x17c>)
 80021fa:	f001 ff87 	bl	800410c <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  set_seg_value(D3);
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <TIM7_IRQHandler+0x18c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f996 	bl	8003534 <set_seg_value>
  }

  turn = (turn + 1) % 4;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <TIM7_IRQHandler+0x178>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	425a      	negs	r2, r3
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	bf58      	it	pl
 800221a:	4253      	negpl	r3, r2
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <TIM7_IRQHandler+0x178>)
 800221e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000570 	.word	0x20000570
 8002228:	48001000 	.word	0x48001000
 800222c:	200000c8 	.word	0x200000c8
 8002230:	48000400 	.word	0x48000400
 8002234:	200005cc 	.word	0x200005cc
 8002238:	20000850 	.word	0x20000850
 800223c:	200007d4 	.word	0x200007d4
 8002240:	200005bc 	.word	0x200005bc

08002244 <getRandom>:

/* USER CODE BEGIN 1 */

int getRandom(int lower, int upper)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

	int num = (rand() %
 800224e:	f005 fa9f 	bl	8007790 <rand>
 8002252:	4602      	mov	r2, r0
	   (upper - lower + 1)) + lower;
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	1acb      	subs	r3, r1, r3
 800225a:	3301      	adds	r3, #1
	int num = (rand() %
 800225c:	fb92 f1f3 	sdiv	r1, r2, r3
 8002260:	fb03 f301 	mul.w	r3, r3, r1
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    return num;
 800226c:	68fb      	ldr	r3, [r7, #12]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <fireBullet>:

void fireBullet() {
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	if (playerFalling || board[playerCol][playerRow + 1] != 'e' || bulletCol != -1)
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <fireBullet+0x70>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d12c      	bne.n	80022de <fireBullet+0x66>
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <fireBullet+0x74>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <fireBullet+0x78>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	4819      	ldr	r0, [pc, #100]	; (80022f4 <fireBullet+0x7c>)
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	1883      	adds	r3, r0, r2
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b65      	cmp	r3, #101	; 0x65
 80022a2:	d11c      	bne.n	80022de <fireBullet+0x66>
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <fireBullet+0x80>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d117      	bne.n	80022de <fireBullet+0x66>
		return;
	bulletCol = playerCol;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <fireBullet+0x74>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <fireBullet+0x80>)
 80022b4:	6013      	str	r3, [r2, #0]
	bulletRow = playerRow + 1;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <fireBullet+0x78>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <fireBullet+0x84>)
 80022be:	6013      	str	r3, [r2, #0]
	board[bulletCol][bulletRow] = '^';
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <fireBullet+0x80>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <fireBullet+0x84>)
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <fireBullet+0x7c>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	00da      	lsls	r2, r3, #3
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	1883      	adds	r3, r0, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	225e      	movs	r2, #94	; 0x5e
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <fireBullet+0x68>
		return;
 80022de:	bf00      	nop
}
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	200005c0 	.word	0x200005c0
 80022ec:	200005d0 	.word	0x200005d0
 80022f0:	20000848 	.word	0x20000848
 80022f4:	200005d8 	.word	0x200005d8
 80022f8:	200005d4 	.word	0x200005d4
 80022fc:	200005c8 	.word	0x200005c8

08002300 <processTurn>:

void processTurn()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	// Shift screen to down
	if (playerHeightInScreen > 12) {
 8002306:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <processTurn+0x1e4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	f340 8116 	ble.w	800253c <processTurn+0x23c>
	    // unsigned char hello[64] = "SHIFT DOWN \n";
		// HAL_UART_Transmit(&huart2, hello, sizeof(hello), 500);
		playerHeightInScreen --;
 8002310:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <processTurn+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3b01      	subs	r3, #1
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <processTurn+0x1e4>)
 8002318:	6013      	str	r3, [r2, #0]
		playerRow --;
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <processTurn+0x1e8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3b01      	subs	r3, #1
 8002320:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <processTurn+0x1e8>)
 8002322:	6013      	str	r3, [r2, #0]
		lastBlockHeightInScreen --;
 8002324:	4b71      	ldr	r3, [pc, #452]	; (80024ec <processTurn+0x1ec>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3b01      	subs	r3, #1
 800232a:	4a70      	ldr	r2, [pc, #448]	; (80024ec <processTurn+0x1ec>)
 800232c:	6013      	str	r3, [r2, #0]
		bulletRow --;
 800232e:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <processTurn+0x1f0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3b01      	subs	r3, #1
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <processTurn+0x1f0>)
 8002336:	6013      	str	r3, [r2, #0]

		// delete old monsters states
		// unsigned char hello3[64] = "SHIFTING MONSTERS \n";
		// HAL_UART_Transmit(&huart2, hello3, sizeof(hello3), 500);
		for (i = 0; i < boardColumns; i ++) {
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	e08b      	b.n	8002456 <processTurn+0x156>
			if (board[i][0] == 'm') {
 800233e:	496d      	ldr	r1, [pc, #436]	; (80024f4 <processTurn+0x1f4>)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	00da      	lsls	r2, r3, #3
 800234a:	1ad2      	subs	r2, r2, r3
 800234c:	188b      	adds	r3, r1, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b6d      	cmp	r3, #109	; 0x6d
 8002352:	d13a      	bne.n	80023ca <processTurn+0xca>
				// shift monster array to left
				// unsigned char hello5[64] = "SHIFTING MONSTERS \n";
				// HAL_UART_Transmit(&huart2, hello5, sizeof(hello5), 500);
				for (j = 0; j < monsterCount - 1; j ++ ) {
 8002354:	2300      	movs	r3, #0
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	e016      	b.n	8002388 <processTurn+0x88>
					monsterLoc[j][0] = monsterLoc[j + 1][0];
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	4a66      	ldr	r2, [pc, #408]	; (80024f8 <processTurn+0x1f8>)
 8002360:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002364:	4964      	ldr	r1, [pc, #400]	; (80024f8 <processTurn+0x1f8>)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					monsterLoc[j][1] = monsterLoc[j + 1][1];
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <processTurn+0x1f8>)
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	495f      	ldr	r1, [pc, #380]	; (80024f8 <processTurn+0x1f8>)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	605a      	str	r2, [r3, #4]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <processTurn+0x1fc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3b01      	subs	r3, #1
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbe2      	blt.n	800235a <processTurn+0x5a>
				}
				for (j = 0; j < monsterCount - 1; j ++ ) {
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	e00b      	b.n	80023b2 <processTurn+0xb2>
					monsterState[j] = monsterState[j + 1];
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a58      	ldr	r2, [pc, #352]	; (8002500 <processTurn+0x200>)
 80023a0:	5cd1      	ldrb	r1, [r2, r3]
 80023a2:	4a57      	ldr	r2, [pc, #348]	; (8002500 <processTurn+0x200>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	460a      	mov	r2, r1
 80023aa:	701a      	strb	r2, [r3, #0]
				for (j = 0; j < monsterCount - 1; j ++ ) {
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4b52      	ldr	r3, [pc, #328]	; (80024fc <processTurn+0x1fc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbed      	blt.n	800239a <processTurn+0x9a>
				}
				monsterCount --;
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <processTurn+0x1fc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <processTurn+0x1fc>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e042      	b.n	8002450 <processTurn+0x150>
			} else if (board[i][0] == 'v') {
 80023ca:	494a      	ldr	r1, [pc, #296]	; (80024f4 <processTurn+0x1f4>)
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	00da      	lsls	r2, r3, #3
 80023d6:	1ad2      	subs	r2, r2, r3
 80023d8:	188b      	adds	r3, r1, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b76      	cmp	r3, #118	; 0x76
 80023de:	d105      	bne.n	80023ec <processTurn+0xec>
				voidCount --;
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <processTurn+0x204>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4a47      	ldr	r2, [pc, #284]	; (8002504 <processTurn+0x204>)
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e031      	b.n	8002450 <processTurn+0x150>
			} else if (board[i][0] == 'b') {
 80023ec:	4941      	ldr	r1, [pc, #260]	; (80024f4 <processTurn+0x1f4>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	00da      	lsls	r2, r3, #3
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	188b      	adds	r3, r1, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b62      	cmp	r3, #98	; 0x62
 8002400:	d105      	bne.n	800240e <processTurn+0x10e>
				blockCount --;
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <processTurn+0x208>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a3f      	ldr	r2, [pc, #252]	; (8002508 <processTurn+0x208>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e020      	b.n	8002450 <processTurn+0x150>
			} else if (board[i][0] == 's') {
 800240e:	4939      	ldr	r1, [pc, #228]	; (80024f4 <processTurn+0x1f4>)
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	00da      	lsls	r2, r3, #3
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	188b      	adds	r3, r1, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b73      	cmp	r3, #115	; 0x73
 8002422:	d105      	bne.n	8002430 <processTurn+0x130>
				boosterCount --;
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <processTurn+0x20c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a38      	ldr	r2, [pc, #224]	; (800250c <processTurn+0x20c>)
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00f      	b.n	8002450 <processTurn+0x150>
			} else if (board[i][0] == 'l') {
 8002430:	4930      	ldr	r1, [pc, #192]	; (80024f4 <processTurn+0x1f4>)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	00da      	lsls	r2, r3, #3
 800243c:	1ad2      	subs	r2, r2, r3
 800243e:	188b      	adds	r3, r1, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b6c      	cmp	r3, #108	; 0x6c
 8002444:	d104      	bne.n	8002450 <processTurn+0x150>
				looseCount --;
 8002446:	4b32      	ldr	r3, [pc, #200]	; (8002510 <processTurn+0x210>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a30      	ldr	r2, [pc, #192]	; (8002510 <processTurn+0x210>)
 800244e:	6013      	str	r3, [r2, #0]
		for (i = 0; i < boardColumns; i ++) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b03      	cmp	r3, #3
 800245a:	f77f af70 	ble.w	800233e <processTurn+0x3e>
			}
		}
		for (i = 0; i < monsterCount; i ++ ) {
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	e00d      	b.n	8002480 <processTurn+0x180>
			monsterLoc[i][1] --;
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <processTurn+0x1f8>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	4921      	ldr	r1, [pc, #132]	; (80024f8 <processTurn+0x1f8>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	605a      	str	r2, [r3, #4]
		for (i = 0; i < monsterCount; i ++ ) {
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3301      	adds	r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <processTurn+0x1fc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	dbec      	blt.n	8002464 <processTurn+0x164>
		}
		// 		unsigned char hello4[64] = "SHIFTING BOARD DOWN \n";
		// HAL_UART_Transmit(&huart2, hello4, sizeof(hello4), 500);
		for (j = 0; j < boardRows - 1; j ++ ) {
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	e023      	b.n	80024d8 <processTurn+0x1d8>
			// replace row[j] with row[j + 1]
			for (i = 0; i < boardColumns; i ++ ) {
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	e01a      	b.n	80024cc <processTurn+0x1cc>
				board[i][j] = board[i][j + 1];
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	1c59      	adds	r1, r3, #1
 800249a:	4816      	ldr	r0, [pc, #88]	; (80024f4 <processTurn+0x1f4>)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	00da      	lsls	r2, r3, #3
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	1883      	adds	r3, r0, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	7818      	ldrb	r0, [r3, #0]
 80024ae:	4911      	ldr	r1, [pc, #68]	; (80024f4 <processTurn+0x1f4>)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	440a      	add	r2, r1
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	4602      	mov	r2, r0
 80024c4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < boardColumns; i ++ ) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3301      	adds	r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	dde1      	ble.n	8002496 <processTurn+0x196>
		for (j = 0; j < boardRows - 1; j ++ ) {
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b12      	cmp	r3, #18
 80024dc:	ddd8      	ble.n	8002490 <processTurn+0x190>
			}
		}
		for (i = 0; i < boardColumns; i ++ ) {
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	e025      	b.n	8002530 <processTurn+0x230>
 80024e4:	20000830 	.word	0x20000830
 80024e8:	20000848 	.word	0x20000848
 80024ec:	200007d0 	.word	0x200007d0
 80024f0:	200005c8 	.word	0x200005c8
 80024f4:	200005d8 	.word	0x200005d8
 80024f8:	20000634 	.word	0x20000634
 80024fc:	20000840 	.word	0x20000840
 8002500:	20000858 	.word	0x20000858
 8002504:	2000088c 	.word	0x2000088c
 8002508:	20000890 	.word	0x20000890
 800250c:	200007c8 	.word	0x200007c8
 8002510:	200007cc 	.word	0x200007cc
			board[i][boardRows - 1] = 'e';
 8002514:	4997      	ldr	r1, [pc, #604]	; (8002774 <processTurn+0x474>)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	00da      	lsls	r2, r3, #3
 8002520:	1ad2      	subs	r2, r2, r3
 8002522:	188b      	adds	r3, r1, r2
 8002524:	3313      	adds	r3, #19
 8002526:	2265      	movs	r2, #101	; 0x65
 8002528:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < boardColumns; i ++ ) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3301      	adds	r3, #1
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b03      	cmp	r3, #3
 8002534:	ddee      	ble.n	8002514 <processTurn+0x214>
		}
		// unsigned char hello2[64] = "Selecting new objects \n";
		// HAL_UART_Transmit(&huart2, hello2, sizeof(hello2), 500);
		setRowObjects(boardRows - 1);
 8002536:	2013      	movs	r0, #19
 8002538:	f000 fd54 	bl	8002fe4 <setRowObjects>
		// unsigned char hello1[64] = "Selected objects for new row \n";
		// HAL_UART_Transmit(&huart2, hello1, sizeof(hello1), 500);
	}

	// Void
	if (playerRow > 0 && playerOn == 'v') {
 800253c:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <processTurn+0x478>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	dd06      	ble.n	8002552 <processTurn+0x252>
 8002544:	4b8d      	ldr	r3, [pc, #564]	; (800277c <processTurn+0x47c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b76      	cmp	r3, #118	; 0x76
 800254a:	d102      	bne.n	8002552 <processTurn+0x252>
		playerFalling = 1;
 800254c:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <processTurn+0x480>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
	}
	// Loose Block
	if (playerRow > 0 && board[playerCol][playerRow - 1] == 'l' && jumpCount < 1) {
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <processTurn+0x478>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	dd22      	ble.n	80025a0 <processTurn+0x2a0>
 800255a:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <processTurn+0x484>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b86      	ldr	r3, [pc, #536]	; (8002778 <processTurn+0x478>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	4883      	ldr	r0, [pc, #524]	; (8002774 <processTurn+0x474>)
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	00da      	lsls	r2, r3, #3
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	1883      	adds	r3, r0, r2
 8002572:	440b      	add	r3, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b6c      	cmp	r3, #108	; 0x6c
 8002578:	d112      	bne.n	80025a0 <processTurn+0x2a0>
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <processTurn+0x488>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	dc0e      	bgt.n	80025a0 <processTurn+0x2a0>
		board[playerCol][playerRow - 1] = 'e';
 8002582:	4b80      	ldr	r3, [pc, #512]	; (8002784 <processTurn+0x484>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <processTurn+0x478>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1e59      	subs	r1, r3, #1
 800258c:	4879      	ldr	r0, [pc, #484]	; (8002774 <processTurn+0x474>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	1ad2      	subs	r2, r2, r3
 8002598:	1883      	adds	r3, r0, r2
 800259a:	440b      	add	r3, r1
 800259c:	2265      	movs	r2, #101	; 0x65
 800259e:	701a      	strb	r2, [r3, #0]
	}

	// Monster
	if (playerRow > 0 && playerOn == 'm') {
 80025a0:	4b75      	ldr	r3, [pc, #468]	; (8002778 <processTurn+0x478>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd06      	ble.n	80025b6 <processTurn+0x2b6>
 80025a8:	4b74      	ldr	r3, [pc, #464]	; (800277c <processTurn+0x47c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b6d      	cmp	r3, #109	; 0x6d
 80025ae:	d102      	bne.n	80025b6 <processTurn+0x2b6>
		playerFalling = 1;
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <processTurn+0x480>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
	}

	// Move bullet
	if (bulletCol != -1 && board[bulletCol][bulletRow + 1] == 'e') {
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <processTurn+0x48c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025be:	d031      	beq.n	8002624 <processTurn+0x324>
 80025c0:	4b72      	ldr	r3, [pc, #456]	; (800278c <processTurn+0x48c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b72      	ldr	r3, [pc, #456]	; (8002790 <processTurn+0x490>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1c59      	adds	r1, r3, #1
 80025ca:	486a      	ldr	r0, [pc, #424]	; (8002774 <processTurn+0x474>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	1883      	adds	r3, r0, r2
 80025d8:	440b      	add	r3, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b65      	cmp	r3, #101	; 0x65
 80025de:	d121      	bne.n	8002624 <processTurn+0x324>
		board[bulletCol][bulletRow] = 'e';
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <processTurn+0x48c>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <processTurn+0x490>)
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	4862      	ldr	r0, [pc, #392]	; (8002774 <processTurn+0x474>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00da      	lsls	r2, r3, #3
 80025f2:	1ad2      	subs	r2, r2, r3
 80025f4:	1883      	adds	r3, r0, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	2265      	movs	r2, #101	; 0x65
 80025fa:	701a      	strb	r2, [r3, #0]
		bulletRow ++;
 80025fc:	4b64      	ldr	r3, [pc, #400]	; (8002790 <processTurn+0x490>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a63      	ldr	r2, [pc, #396]	; (8002790 <processTurn+0x490>)
 8002604:	6013      	str	r3, [r2, #0]
		board[bulletCol][bulletRow] = '*';
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <processTurn+0x48c>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b61      	ldr	r3, [pc, #388]	; (8002790 <processTurn+0x490>)
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	4859      	ldr	r0, [pc, #356]	; (8002774 <processTurn+0x474>)
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	00da      	lsls	r2, r3, #3
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	1883      	adds	r3, r0, r2
 800261c:	440b      	add	r3, r1
 800261e:	222a      	movs	r2, #42	; 0x2a
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e0a3      	b.n	800276c <processTurn+0x46c>
	} else if (bulletCol != -1 && board[bulletCol][bulletRow + 1] != 'e') {
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <processTurn+0x48c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800262c:	f000 809e 	beq.w	800276c <processTurn+0x46c>
 8002630:	4b56      	ldr	r3, [pc, #344]	; (800278c <processTurn+0x48c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <processTurn+0x490>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c59      	adds	r1, r3, #1
 800263a:	484e      	ldr	r0, [pc, #312]	; (8002774 <processTurn+0x474>)
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	1883      	adds	r3, r0, r2
 8002648:	440b      	add	r3, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b65      	cmp	r3, #101	; 0x65
 800264e:	f000 808d 	beq.w	800276c <processTurn+0x46c>
		board[bulletCol][bulletRow] = 'e';
 8002652:	4b4e      	ldr	r3, [pc, #312]	; (800278c <processTurn+0x48c>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <processTurn+0x490>)
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	4846      	ldr	r0, [pc, #280]	; (8002774 <processTurn+0x474>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	00da      	lsls	r2, r3, #3
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	1883      	adds	r3, r0, r2
 8002668:	440b      	add	r3, r1
 800266a:	2265      	movs	r2, #101	; 0x65
 800266c:	701a      	strb	r2, [r3, #0]
		if (board[bulletCol][bulletRow + 1] == 'm') {
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <processTurn+0x48c>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <processTurn+0x490>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	483e      	ldr	r0, [pc, #248]	; (8002774 <processTurn+0x474>)
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	00da      	lsls	r2, r3, #3
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	1883      	adds	r3, r0, r2
 8002686:	440b      	add	r3, r1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b6d      	cmp	r3, #109	; 0x6d
 800268c:	d166      	bne.n	800275c <processTurn+0x45c>
			for (i = 0; i < monsterCount; i ++) {
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	e04f      	b.n	8002734 <processTurn+0x434>
				if (monsterLoc[i][0] == bulletCol && monsterLoc[i][1] == bulletRow + 1) {
 8002694:	4a3f      	ldr	r2, [pc, #252]	; (8002794 <processTurn+0x494>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <processTurn+0x48c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d144      	bne.n	800272e <processTurn+0x42e>
 80026a4:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <processTurn+0x494>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <processTurn+0x490>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d13a      	bne.n	800272e <processTurn+0x42e>
					for (j = i; j < monsterCount - 1; j ++ ) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	e016      	b.n	80026ec <processTurn+0x3ec>
						monsterLoc[j][0] = monsterLoc[j + 1][0];
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a34      	ldr	r2, [pc, #208]	; (8002794 <processTurn+0x494>)
 80026c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80026c8:	4932      	ldr	r1, [pc, #200]	; (8002794 <processTurn+0x494>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						monsterLoc[j][1] = monsterLoc[j + 1][1];
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <processTurn+0x494>)
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	492d      	ldr	r1, [pc, #180]	; (8002794 <processTurn+0x494>)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	605a      	str	r2, [r3, #4]
					for (j = i; j < monsterCount - 1; j ++ ) {
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <processTurn+0x498>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbe2      	blt.n	80026be <processTurn+0x3be>
					}
					for (j = i; j < monsterCount - 1; j ++ ) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	e00b      	b.n	8002716 <processTurn+0x416>
						monsterState[j] = monsterState[j + 1];
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <processTurn+0x49c>)
 8002704:	5cd1      	ldrb	r1, [r2, r3]
 8002706:	4a25      	ldr	r2, [pc, #148]	; (800279c <processTurn+0x49c>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	460a      	mov	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
					for (j = i; j < monsterCount - 1; j ++ ) {
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <processTurn+0x498>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	dbed      	blt.n	80026fe <processTurn+0x3fe>
					}
					monsterCount --;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <processTurn+0x498>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3b01      	subs	r3, #1
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <processTurn+0x498>)
 800272a:	6013      	str	r3, [r2, #0]
					break;
 800272c:	e007      	b.n	800273e <processTurn+0x43e>
			for (i = 0; i < monsterCount; i ++) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3301      	adds	r3, #1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <processTurn+0x498>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbaa      	blt.n	8002694 <processTurn+0x394>
				}
			}
			board[bulletCol][bulletRow + 1] = 'e';
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <processTurn+0x48c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <processTurn+0x490>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1c59      	adds	r1, r3, #1
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <processTurn+0x474>)
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	00da      	lsls	r2, r3, #3
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	1883      	adds	r3, r0, r2
 8002756:	440b      	add	r3, r1
 8002758:	2265      	movs	r2, #101	; 0x65
 800275a:	701a      	strb	r2, [r3, #0]
		}
		bulletCol = -1;
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <processTurn+0x48c>)
 800275e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002762:	601a      	str	r2, [r3, #0]
		bulletRow = -1;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <processTurn+0x490>)
 8002766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800276a:	601a      	str	r2, [r3, #0]
	}

	// Move monsters
	for (i = 0; i < monsterCount; i ++ ) {
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	e0c2      	b.n	80028f8 <processTurn+0x5f8>
 8002772:	bf00      	nop
 8002774:	200005d8 	.word	0x200005d8
 8002778:	20000848 	.word	0x20000848
 800277c:	20000854 	.word	0x20000854
 8002780:	200005c0 	.word	0x200005c0
 8002784:	200005d0 	.word	0x200005d0
 8002788:	2000082c 	.word	0x2000082c
 800278c:	200005d4 	.word	0x200005d4
 8002790:	200005c8 	.word	0x200005c8
 8002794:	20000634 	.word	0x20000634
 8002798:	20000840 	.word	0x20000840
 800279c:	20000858 	.word	0x20000858
		if (monsterState[i] == 'l') {
 80027a0:	4aa3      	ldr	r2, [pc, #652]	; (8002a30 <processTurn+0x730>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b6c      	cmp	r3, #108	; 0x6c
 80027aa:	d151      	bne.n	8002850 <processTurn+0x550>
			if (monsterLoc[i][0] > 0 && board[monsterLoc[i][0] - 1][monsterLoc[i][1]] == 'e') {
 80027ac:	4aa1      	ldr	r2, [pc, #644]	; (8002a34 <processTurn+0x734>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dd45      	ble.n	8002844 <processTurn+0x544>
 80027b8:	4a9e      	ldr	r2, [pc, #632]	; (8002a34 <processTurn+0x734>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	499c      	ldr	r1, [pc, #624]	; (8002a34 <processTurn+0x734>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	489a      	ldr	r0, [pc, #616]	; (8002a38 <processTurn+0x738>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	00da      	lsls	r2, r3, #3
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	1883      	adds	r3, r0, r2
 80027da:	440b      	add	r3, r1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b65      	cmp	r3, #101	; 0x65
 80027e0:	d130      	bne.n	8002844 <processTurn+0x544>
				board[monsterLoc[i][0] - 1][monsterLoc[i][1]] = 'm';
 80027e2:	4a94      	ldr	r2, [pc, #592]	; (8002a34 <processTurn+0x734>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027ea:	1e5a      	subs	r2, r3, #1
 80027ec:	4991      	ldr	r1, [pc, #580]	; (8002a34 <processTurn+0x734>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	4890      	ldr	r0, [pc, #576]	; (8002a38 <processTurn+0x738>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	00da      	lsls	r2, r3, #3
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	1883      	adds	r3, r0, r2
 8002804:	440b      	add	r3, r1
 8002806:	226d      	movs	r2, #109	; 0x6d
 8002808:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 800280a:	4a8a      	ldr	r2, [pc, #552]	; (8002a34 <processTurn+0x734>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002812:	4988      	ldr	r1, [pc, #544]	; (8002a34 <processTurn+0x734>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	4886      	ldr	r0, [pc, #536]	; (8002a38 <processTurn+0x738>)
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	00da      	lsls	r2, r3, #3
 8002826:	1ad2      	subs	r2, r2, r3
 8002828:	1883      	adds	r3, r0, r2
 800282a:	440b      	add	r3, r1
 800282c:	2265      	movs	r2, #101	; 0x65
 800282e:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] --;
 8002830:	4a80      	ldr	r2, [pc, #512]	; (8002a34 <processTurn+0x734>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	497e      	ldr	r1, [pc, #504]	; (8002a34 <processTurn+0x734>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002842:	e056      	b.n	80028f2 <processTurn+0x5f2>
			} else{
				monsterState[i] = 'r';
 8002844:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <processTurn+0x730>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	2272      	movs	r2, #114	; 0x72
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e050      	b.n	80028f2 <processTurn+0x5f2>
			}
		} else {
			if (monsterLoc[i][0] < boardColumns - 1 && board[monsterLoc[i][0] + 1][monsterLoc[i][1]] == 'e') {
 8002850:	4a78      	ldr	r2, [pc, #480]	; (8002a34 <processTurn+0x734>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002858:	2b02      	cmp	r3, #2
 800285a:	dc45      	bgt.n	80028e8 <processTurn+0x5e8>
 800285c:	4a75      	ldr	r2, [pc, #468]	; (8002a34 <processTurn+0x734>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	4973      	ldr	r1, [pc, #460]	; (8002a34 <processTurn+0x734>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	4871      	ldr	r0, [pc, #452]	; (8002a38 <processTurn+0x738>)
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	00da      	lsls	r2, r3, #3
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	1883      	adds	r3, r0, r2
 800287e:	440b      	add	r3, r1
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b65      	cmp	r3, #101	; 0x65
 8002884:	d130      	bne.n	80028e8 <processTurn+0x5e8>
				board[monsterLoc[i][0] + 1][monsterLoc[i][1]] = 'm';
 8002886:	4a6b      	ldr	r2, [pc, #428]	; (8002a34 <processTurn+0x734>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	4968      	ldr	r1, [pc, #416]	; (8002a34 <processTurn+0x734>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	4867      	ldr	r0, [pc, #412]	; (8002a38 <processTurn+0x738>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	00da      	lsls	r2, r3, #3
 80028a4:	1ad2      	subs	r2, r2, r3
 80028a6:	1883      	adds	r3, r0, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	226d      	movs	r2, #109	; 0x6d
 80028ac:	701a      	strb	r2, [r3, #0]
				board[monsterLoc[i][0]][monsterLoc[i][1]] = 'e';
 80028ae:	4a61      	ldr	r2, [pc, #388]	; (8002a34 <processTurn+0x734>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80028b6:	495f      	ldr	r1, [pc, #380]	; (8002a34 <processTurn+0x734>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	485d      	ldr	r0, [pc, #372]	; (8002a38 <processTurn+0x738>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00da      	lsls	r2, r3, #3
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	1883      	adds	r3, r0, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	2265      	movs	r2, #101	; 0x65
 80028d2:	701a      	strb	r2, [r3, #0]
				monsterLoc[i][0] ++;
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <processTurn+0x734>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	4955      	ldr	r1, [pc, #340]	; (8002a34 <processTurn+0x734>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80028e6:	e004      	b.n	80028f2 <processTurn+0x5f2>
			} else {
				monsterState[i] = 'l';
 80028e8:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <processTurn+0x730>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	226c      	movs	r2, #108	; 0x6c
 80028f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < monsterCount; i ++ ) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3301      	adds	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <processTurn+0x73c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	f6ff af4e 	blt.w	80027a0 <processTurn+0x4a0>

		}
	}

    //	Jump and Gravity
	if (playerRow == 0) {
 8002904:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <processTurn+0x740>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <processTurn+0x614>
		// Die
		menuState = 'd';
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <processTurn+0x744>)
 800290e:	2264      	movs	r2, #100	; 0x64
 8002910:	701a      	strb	r2, [r3, #0]
		movePlayerTo(playerCol, playerRow + 1);
		jumpCount --;
	}


}
 8002912:	e088      	b.n	8002a26 <processTurn+0x726>
	} else if (playerFalling) {
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <processTurn+0x748>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <processTurn+0x630>
		movePlayerTo(playerCol, playerRow - 1);
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <processTurn+0x74c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <processTurn+0x740>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f893 	bl	8002a54 <movePlayerTo>
}
 800292e:	e07a      	b.n	8002a26 <processTurn+0x726>
	} else if (jumpCount == 0 && playerRow > 0) { // Jump rule
 8002930:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <processTurn+0x750>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d163      	bne.n	8002a00 <processTurn+0x700>
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <processTurn+0x740>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dd5f      	ble.n	8002a00 <processTurn+0x700>
		if (board[playerCol][playerRow - 1] == 'e' ||
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <processTurn+0x74c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <processTurn+0x740>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	483b      	ldr	r0, [pc, #236]	; (8002a38 <processTurn+0x738>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	1883      	adds	r3, r0, r2
 8002958:	440b      	add	r3, r1
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b65      	cmp	r3, #101	; 0x65
 800295e:	d01f      	beq.n	80029a0 <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'm' ||
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <processTurn+0x74c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <processTurn+0x740>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	4833      	ldr	r0, [pc, #204]	; (8002a38 <processTurn+0x738>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	1883      	adds	r3, r0, r2
 8002978:	440b      	add	r3, r1
 800297a:	781b      	ldrb	r3, [r3, #0]
		if (board[playerCol][playerRow - 1] == 'e' ||
 800297c:	2b6d      	cmp	r3, #109	; 0x6d
 800297e:	d00f      	beq.n	80029a0 <processTurn+0x6a0>
			board[playerCol][playerRow - 1] == 'v') {
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <processTurn+0x74c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <processTurn+0x740>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1e59      	subs	r1, r3, #1
 800298a:	482b      	ldr	r0, [pc, #172]	; (8002a38 <processTurn+0x738>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00da      	lsls	r2, r3, #3
 8002994:	1ad2      	subs	r2, r2, r3
 8002996:	1883      	adds	r3, r0, r2
 8002998:	440b      	add	r3, r1
 800299a:	781b      	ldrb	r3, [r3, #0]
			board[playerCol][playerRow - 1] == 'm' ||
 800299c:	2b76      	cmp	r3, #118	; 0x76
 800299e:	d108      	bne.n	80029b2 <processTurn+0x6b2>
			movePlayerTo(playerCol, playerRow - 1);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <processTurn+0x74c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <processTurn+0x740>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f000 f851 	bl	8002a54 <movePlayerTo>
		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <processTurn+0x74c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <processTurn+0x740>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	481e      	ldr	r0, [pc, #120]	; (8002a38 <processTurn+0x738>)
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	00da      	lsls	r2, r3, #3
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	1883      	adds	r3, r0, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b62      	cmp	r3, #98	; 0x62
 80029d0:	d102      	bne.n	80029d8 <processTurn+0x6d8>
			jumpCount = jumpOnBlock;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <processTurn+0x750>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <processTurn+0x74c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <processTurn+0x740>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1e59      	subs	r1, r3, #1
 80029e2:	4815      	ldr	r0, [pc, #84]	; (8002a38 <processTurn+0x738>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	00da      	lsls	r2, r3, #3
 80029ec:	1ad2      	subs	r2, r2, r3
 80029ee:	1883      	adds	r3, r0, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b73      	cmp	r3, #115	; 0x73
 80029f6:	d116      	bne.n	8002a26 <processTurn+0x726>
			jumpCount = jumpOnCoil;
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <processTurn+0x750>)
 80029fa:	2214      	movs	r2, #20
 80029fc:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 's') { // Jump on coil block
 80029fe:	e012      	b.n	8002a26 <processTurn+0x726>
	} else if (jumpCount > 0) { // Go up rule
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <processTurn+0x750>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	dd0e      	ble.n	8002a26 <processTurn+0x726>
		movePlayerTo(playerCol, playerRow + 1);
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <processTurn+0x74c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <processTurn+0x740>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f000 f81d 	bl	8002a54 <movePlayerTo>
		jumpCount --;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <processTurn+0x750>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <processTurn+0x750>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	e7ff      	b.n	8002a26 <processTurn+0x726>
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000858 	.word	0x20000858
 8002a34:	20000634 	.word	0x20000634
 8002a38:	200005d8 	.word	0x200005d8
 8002a3c:	20000840 	.word	0x20000840
 8002a40:	20000848 	.word	0x20000848
 8002a44:	2000014c 	.word	0x2000014c
 8002a48:	200005c0 	.word	0x200005c0
 8002a4c:	200005d0 	.word	0x200005d0
 8002a50:	2000082c 	.word	0x2000082c

08002a54 <movePlayerTo>:

void movePlayerTo(int toCol, int toRow)
{
 8002a54:	b490      	push	{r4, r7}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
	if (playerRow < toRow) {
 8002a5e:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <movePlayerTo+0xd4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dd14      	ble.n	8002a92 <movePlayerTo+0x3e>
		playerHeight ++;
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <movePlayerTo+0xd8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <movePlayerTo+0xd8>)
 8002a70:	6013      	str	r3, [r2, #0]
		playerHeightInScreen ++;
 8002a72:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <movePlayerTo+0xdc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <movePlayerTo+0xdc>)
 8002a7a:	6013      	str	r3, [r2, #0]
		if (playerHeight > score)
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <movePlayerTo+0xd8>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <movePlayerTo+0xe0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dd13      	ble.n	8002ab0 <movePlayerTo+0x5c>
			score = playerHeight;
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <movePlayerTo+0xd8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <movePlayerTo+0xe0>)
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e00e      	b.n	8002ab0 <movePlayerTo+0x5c>
	} else if (playerRow > toRow) {
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <movePlayerTo+0xd4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	da09      	bge.n	8002ab0 <movePlayerTo+0x5c>
		playerHeight --;
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <movePlayerTo+0xd8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <movePlayerTo+0xd8>)
 8002aa4:	6013      	str	r3, [r2, #0]
		playerHeightInScreen --;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <movePlayerTo+0xdc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <movePlayerTo+0xdc>)
 8002aae:	6013      	str	r3, [r2, #0]
	}
	if (playerOn != 'm')
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <movePlayerTo+0xe4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b6d      	cmp	r3, #109	; 0x6d
 8002ab6:	d00f      	beq.n	8002ad8 <movePlayerTo+0x84>
		board[playerCol][playerRow] = playerOn;
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <movePlayerTo+0xe8>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <movePlayerTo+0xd4>)
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <movePlayerTo+0xe4>)
 8002ac2:	781c      	ldrb	r4, [r3, #0]
 8002ac4:	481e      	ldr	r0, [pc, #120]	; (8002b40 <movePlayerTo+0xec>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	00da      	lsls	r2, r3, #3
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	1883      	adds	r3, r0, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	701a      	strb	r2, [r3, #0]
	playerCol = toCol;
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <movePlayerTo+0xe8>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
	playerRow = toRow;
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <movePlayerTo+0xd4>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6013      	str	r3, [r2, #0]
	playerOn = board[playerCol][playerRow];
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <movePlayerTo+0xe8>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <movePlayerTo+0xd4>)
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	4814      	ldr	r0, [pc, #80]	; (8002b40 <movePlayerTo+0xec>)
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	00da      	lsls	r2, r3, #3
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	1883      	adds	r3, r0, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <movePlayerTo+0xe4>)
 8002b00:	701a      	strb	r2, [r3, #0]
	board[playerCol][playerRow] = 'p';
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <movePlayerTo+0xe8>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <movePlayerTo+0xd4>)
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <movePlayerTo+0xec>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	00da      	lsls	r2, r3, #3
 8002b14:	1ad2      	subs	r2, r2, r3
 8002b16:	1883      	adds	r3, r0, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	2270      	movs	r2, #112	; 0x70
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc90      	pop	{r4, r7}
 8002b26:	4770      	bx	lr
 8002b28:	20000848 	.word	0x20000848
 8002b2c:	2000084c 	.word	0x2000084c
 8002b30:	20000830 	.word	0x20000830
 8002b34:	20000630 	.word	0x20000630
 8002b38:	20000854 	.word	0x20000854
 8002b3c:	200005d0 	.word	0x200005d0
 8002b40:	200005d8 	.word	0x200005d8

08002b44 <printGame>:

void printGame()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
	setCursor(0,  0);
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fe fa91 	bl	8001074 <setCursor>
	char tmp[2];
	int c, i, j;
	for (c = 0; c < boardColumns; c ++ ) {
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e0bb      	b.n	8002cd0 <printGame+0x18c>

		i = c;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	60bb      	str	r3, [r7, #8]
		if (c == 1)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <printGame+0x24>
			i = 2;
 8002b62:	2302      	movs	r3, #2
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	e004      	b.n	8002b72 <printGame+0x2e>
		else if (c == 2)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d101      	bne.n	8002b72 <printGame+0x2e>
			i = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < boardRows; j ++ ) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	e0a4      	b.n	8002cc2 <printGame+0x17e>
			if (board[i][j] != boardTemp[i][j]) {
 8002b78:	495a      	ldr	r1, [pc, #360]	; (8002ce4 <printGame+0x1a0>)
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00da      	lsls	r2, r3, #3
 8002b84:	1ad2      	subs	r2, r2, r3
 8002b86:	440a      	add	r2, r1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	7819      	ldrb	r1, [r3, #0]
 8002b8e:	4856      	ldr	r0, [pc, #344]	; (8002ce8 <printGame+0x1a4>)
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	00da      	lsls	r2, r3, #3
 8002b9a:	1ad2      	subs	r2, r2, r3
 8002b9c:	4402      	add	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4299      	cmp	r1, r3
 8002ba6:	f000 8089 	beq.w	8002cbc <printGame+0x178>
				setCursor(j, i);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fa5d 	bl	8001074 <setCursor>
				tmp[0] = board[i][j];
 8002bba:	494a      	ldr	r1, [pc, #296]	; (8002ce4 <printGame+0x1a0>)
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00da      	lsls	r2, r3, #3
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	440a      	add	r2, r1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	703b      	strb	r3, [r7, #0]
				tmp[1] = '\0';
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	707b      	strb	r3, [r7, #1]
				  switch (board[i][j])
 8002bd6:	4943      	ldr	r1, [pc, #268]	; (8002ce4 <printGame+0x1a0>)
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	00da      	lsls	r2, r3, #3
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	440a      	add	r2, r1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	3b62      	subs	r3, #98	; 0x62
 8002bee:	2b14      	cmp	r3, #20
 8002bf0:	d848      	bhi.n	8002c84 <printGame+0x140>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <printGame+0xb4>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c5d 	.word	0x08002c5d
 8002bfc:	08002c85 	.word	0x08002c85
 8002c00:	08002c85 	.word	0x08002c85
 8002c04:	08002c55 	.word	0x08002c55
 8002c08:	08002c85 	.word	0x08002c85
 8002c0c:	08002c85 	.word	0x08002c85
 8002c10:	08002c85 	.word	0x08002c85
 8002c14:	08002c85 	.word	0x08002c85
 8002c18:	08002c85 	.word	0x08002c85
 8002c1c:	08002c85 	.word	0x08002c85
 8002c20:	08002c7d 	.word	0x08002c7d
 8002c24:	08002c65 	.word	0x08002c65
 8002c28:	08002c85 	.word	0x08002c85
 8002c2c:	08002c85 	.word	0x08002c85
 8002c30:	08002c4d 	.word	0x08002c4d
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c85 	.word	0x08002c85
 8002c3c:	08002c6d 	.word	0x08002c6d
 8002c40:	08002c85 	.word	0x08002c85
 8002c44:	08002c85 	.word	0x08002c85
 8002c48:	08002c75 	.word	0x08002c75
					{
					case 'p':
						write(0);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fe fabb 	bl	80011c8 <write>
						break;
 8002c52:	e01c      	b.n	8002c8e <printGame+0x14a>
					case 'e':
						print(" ");
 8002c54:	4825      	ldr	r0, [pc, #148]	; (8002cec <printGame+0x1a8>)
 8002c56:	f7fe fa55 	bl	8001104 <print>
				       	break;
 8002c5a:	e018      	b.n	8002c8e <printGame+0x14a>
					case 'b':
						write(1);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f7fe fab3 	bl	80011c8 <write>
						break;
 8002c62:	e014      	b.n	8002c8e <printGame+0x14a>
					case 'm':
						write(2);
 8002c64:	2002      	movs	r0, #2
 8002c66:	f7fe faaf 	bl	80011c8 <write>
						break;
 8002c6a:	e010      	b.n	8002c8e <printGame+0x14a>
					case 's':
						write(3);
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	f7fe faab 	bl	80011c8 <write>
						break;
 8002c72:	e00c      	b.n	8002c8e <printGame+0x14a>
					case 'v':
						write(4);
 8002c74:	2004      	movs	r0, #4
 8002c76:	f7fe faa7 	bl	80011c8 <write>
						break;
 8002c7a:	e008      	b.n	8002c8e <printGame+0x14a>
					case 'l':
						write(5);
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	f7fe faa3 	bl	80011c8 <write>
						break;
 8002c82:	e004      	b.n	8002c8e <printGame+0x14a>
				     default:
				    	 print(tmp);
 8002c84:	463b      	mov	r3, r7
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fa3c 	bl	8001104 <print>
				       break;
 8002c8c:	bf00      	nop
				     }
				boardTemp[i][j] = board[i][j];
 8002c8e:	4915      	ldr	r1, [pc, #84]	; (8002ce4 <printGame+0x1a0>)
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00da      	lsls	r2, r3, #3
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	440a      	add	r2, r1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	7818      	ldrb	r0, [r3, #0]
 8002ca4:	4910      	ldr	r1, [pc, #64]	; (8002ce8 <printGame+0x1a4>)
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	440a      	add	r2, r1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4602      	mov	r2, r0
 8002cba:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++ ) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b13      	cmp	r3, #19
 8002cc6:	f77f af57 	ble.w	8002b78 <printGame+0x34>
	for (c = 0; c < boardColumns; c ++ ) {
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	f77f af40 	ble.w	8002b58 <printGame+0x14>
			}
		}
	}
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200005d8 	.word	0x200005d8
 8002ce8:	200007d8 	.word	0x200007d8
 8002cec:	08008eb4 	.word	0x08008eb4

08002cf0 <chooseWhichObject>:

char chooseWhichObject(int j)
{
 8002cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */

	if (j - lastBlockHeightInScreen > 4) {
 8002cfa:	4bae      	ldr	r3, [pc, #696]	; (8002fb4 <chooseWhichObject+0x2c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	dd04      	ble.n	8002d10 <chooseWhichObject+0x20>
		lastBlockHeightInScreen = j;
 8002d06:	4aab      	ldr	r2, [pc, #684]	; (8002fb4 <chooseWhichObject+0x2c4>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6013      	str	r3, [r2, #0]
		return 'b';		
 8002d0c:	2362      	movs	r3, #98	; 0x62
 8002d0e:	e14c      	b.n	8002faa <chooseWhichObject+0x2ba>
	}

	if (blockCount + looseCount + voidCount + monsterCount + boosterCount > maxObjects)
 8002d10:	4ba9      	ldr	r3, [pc, #676]	; (8002fb8 <chooseWhichObject+0x2c8>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4ba9      	ldr	r3, [pc, #676]	; (8002fbc <chooseWhichObject+0x2cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	441a      	add	r2, r3
 8002d1a:	4ba9      	ldr	r3, [pc, #676]	; (8002fc0 <chooseWhichObject+0x2d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	441a      	add	r2, r3
 8002d20:	4ba8      	ldr	r3, [pc, #672]	; (8002fc4 <chooseWhichObject+0x2d4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	441a      	add	r2, r3
 8002d26:	4ba8      	ldr	r3, [pc, #672]	; (8002fc8 <chooseWhichObject+0x2d8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	dd01      	ble.n	8002d34 <chooseWhichObject+0x44>
		return 'e';
 8002d30:	2365      	movs	r3, #101	; 0x65
 8002d32:	e13a      	b.n	8002faa <chooseWhichObject+0x2ba>

	int BProb = BProbBase + BProbBase / (sqrt(score)); // as score goes high it will be so hard
 8002d34:	4ba5      	ldr	r3, [pc, #660]	; (8002fcc <chooseWhichObject+0x2dc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fbf3 	bl	8000524 <__aeabi_i2d>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	4ba2      	ldr	r3, [pc, #648]	; (8002fcc <chooseWhichObject+0x2dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbec 	bl	8000524 <__aeabi_i2d>
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	4689      	mov	r9, r1
 8002d50:	4b9f      	ldr	r3, [pc, #636]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbe5 	bl	8000524 <__aeabi_i2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	ec43 2b10 	vmov	d0, r2, r3
 8002d62:	f005 ff15 	bl	8008b90 <sqrt>
 8002d66:	ec53 2b10 	vmov	r2, r3, d0
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	f7fd fd6d 	bl	800084c <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fa87 	bl	800028c <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd fee7 	bl	8000b58 <__aeabi_d2iz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	617b      	str	r3, [r7, #20]
	if (getRandom(0, 100) < BProb) {
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff fa57 	bl	8002244 <getRandom>
 8002d96:	4602      	mov	r2, r0
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	dd04      	ble.n	8002da8 <chooseWhichObject+0xb8>
		lastBlockHeightInScreen = j;
 8002d9e:	4a85      	ldr	r2, [pc, #532]	; (8002fb4 <chooseWhichObject+0x2c4>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6013      	str	r3, [r2, #0]
		return 'b';
 8002da4:	2362      	movs	r3, #98	; 0x62
 8002da6:	e100      	b.n	8002faa <chooseWhichObject+0x2ba>
	}

//	return 'e';

	int SProb = SProbBase + SProbBase / (sqrt(score)); // as score goes high it will be so hard
 8002da8:	4b8a      	ldr	r3, [pc, #552]	; (8002fd4 <chooseWhichObject+0x2e4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fbb9 	bl	8000524 <__aeabi_i2d>
 8002db2:	4604      	mov	r4, r0
 8002db4:	460d      	mov	r5, r1
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <chooseWhichObject+0x2e4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbb2 	bl	8000524 <__aeabi_i2d>
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4689      	mov	r9, r1
 8002dc4:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbab 	bl	8000524 <__aeabi_i2d>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	ec43 2b10 	vmov	d0, r2, r3
 8002dd6:	f005 fedb 	bl	8008b90 <sqrt>
 8002dda:	ec53 2b10 	vmov	r2, r3, d0
 8002dde:	4640      	mov	r0, r8
 8002de0:	4649      	mov	r1, r9
 8002de2:	f7fd fd33 	bl	800084c <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fa4d 	bl	800028c <__adddf3>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fead 	bl	8000b58 <__aeabi_d2iz>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
	if (getRandom(0, 100) < SProb) {
 8002e02:	2164      	movs	r1, #100	; 0x64
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff fa1d 	bl	8002244 <getRandom>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	dd01      	ble.n	8002e16 <chooseWhichObject+0x126>
		return 's';
 8002e12:	2373      	movs	r3, #115	; 0x73
 8002e14:	e0c9      	b.n	8002faa <chooseWhichObject+0x2ba>
	}

	int LProb = LProbBase + LProbBase / (sqrt(score)); // as score goes high it will be so hard
 8002e16:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <chooseWhichObject+0x2e8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fb82 	bl	8000524 <__aeabi_i2d>
 8002e20:	4604      	mov	r4, r0
 8002e22:	460d      	mov	r5, r1
 8002e24:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <chooseWhichObject+0x2e8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb7b 	bl	8000524 <__aeabi_i2d>
 8002e2e:	4680      	mov	r8, r0
 8002e30:	4689      	mov	r9, r1
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb74 	bl	8000524 <__aeabi_i2d>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	ec43 2b10 	vmov	d0, r2, r3
 8002e44:	f005 fea4 	bl	8008b90 <sqrt>
 8002e48:	ec53 2b10 	vmov	r2, r3, d0
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	4649      	mov	r1, r9
 8002e50:	f7fd fcfc 	bl	800084c <__aeabi_ddiv>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4620      	mov	r0, r4
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7fd fa16 	bl	800028c <__adddf3>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fe76 	bl	8000b58 <__aeabi_d2iz>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60fb      	str	r3, [r7, #12]
	if (getRandom(0, 100) < LProb) {
 8002e70:	2164      	movs	r1, #100	; 0x64
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7ff f9e6 	bl	8002244 <getRandom>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	dd01      	ble.n	8002e84 <chooseWhichObject+0x194>
		return 'l';
 8002e80:	236c      	movs	r3, #108	; 0x6c
 8002e82:	e092      	b.n	8002faa <chooseWhichObject+0x2ba>
	}

	if (score > 20 && monsterCount < 4) {
 8002e84:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b14      	cmp	r3, #20
 8002e8a:	dd45      	ble.n	8002f18 <chooseWhichObject+0x228>
 8002e8c:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <chooseWhichObject+0x2d4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	dc41      	bgt.n	8002f18 <chooseWhichObject+0x228>
		int MProb = MProbBase + MProbBase * (sqrt(score)); // as score goes high it will be so hard
 8002e94:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <chooseWhichObject+0x2ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb43 	bl	8000524 <__aeabi_i2d>
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <chooseWhichObject+0x2ec>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb3c 	bl	8000524 <__aeabi_i2d>
 8002eac:	4680      	mov	r8, r0
 8002eae:	4689      	mov	r9, r1
 8002eb0:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb35 	bl	8000524 <__aeabi_i2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	ec43 2b10 	vmov	d0, r2, r3
 8002ec2:	f005 fe65 	bl	8008b90 <sqrt>
 8002ec6:	ec53 2b10 	vmov	r2, r3, d0
 8002eca:	4640      	mov	r0, r8
 8002ecc:	4649      	mov	r1, r9
 8002ece:	f7fd fb93 	bl	80005f8 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f7fd f9d7 	bl	800028c <__adddf3>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe37 	bl	8000b58 <__aeabi_d2iz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	61fb      	str	r3, [r7, #28]
		if (MProb > 2 * MProbBase)
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <chooseWhichObject+0x2ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	dd03      	ble.n	8002f02 <chooseWhichObject+0x212>
			MProb = 2 * MProbBase;
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <chooseWhichObject+0x2ec>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
		int t = getRandom(0, 100);
 8002f02:	2164      	movs	r1, #100	; 0x64
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7ff f99d 	bl	8002244 <getRandom>
 8002f0a:	60b8      	str	r0, [r7, #8]

		if (t < MProb) {
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	da01      	bge.n	8002f18 <chooseWhichObject+0x228>
//			  char buff[20];
//			  sprintf(buff, "%d", t);
//			  print(buff);
			return 'm';
 8002f14:	236d      	movs	r3, #109	; 0x6d
 8002f16:	e048      	b.n	8002faa <chooseWhichObject+0x2ba>
		}
	}


	if (score > 20 && voidCount < 4) {
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b14      	cmp	r3, #20
 8002f1e:	dd43      	ble.n	8002fa8 <chooseWhichObject+0x2b8>
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <chooseWhichObject+0x2d0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	dc3f      	bgt.n	8002fa8 <chooseWhichObject+0x2b8>
		int VProb = VProbBase + VProbBase * (sqrt(score)); // as score goes high it will be so hard
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <chooseWhichObject+0x2f0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd faf9 	bl	8000524 <__aeabi_i2d>
 8002f32:	4604      	mov	r4, r0
 8002f34:	460d      	mov	r5, r1
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <chooseWhichObject+0x2f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd faf2 	bl	8000524 <__aeabi_i2d>
 8002f40:	4680      	mov	r8, r0
 8002f42:	4689      	mov	r9, r1
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <chooseWhichObject+0x2e0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd faeb 	bl	8000524 <__aeabi_i2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	ec43 2b10 	vmov	d0, r2, r3
 8002f56:	f005 fe1b 	bl	8008b90 <sqrt>
 8002f5a:	ec53 2b10 	vmov	r2, r3, d0
 8002f5e:	4640      	mov	r0, r8
 8002f60:	4649      	mov	r1, r9
 8002f62:	f7fd fb49 	bl	80005f8 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd f98d 	bl	800028c <__adddf3>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fded 	bl	8000b58 <__aeabi_d2iz>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]
		if (VProb > 2 * VProbBase)
 8002f82:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <chooseWhichObject+0x2f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dd02      	ble.n	8002f94 <chooseWhichObject+0x2a4>
			VProb = 2 * VProb;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
		if (getRandom(0, 100) < VProb) {
 8002f94:	2164      	movs	r1, #100	; 0x64
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7ff f954 	bl	8002244 <getRandom>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	dd01      	ble.n	8002fa8 <chooseWhichObject+0x2b8>
			return 'v';
 8002fa4:	2376      	movs	r3, #118	; 0x76
 8002fa6:	e000      	b.n	8002faa <chooseWhichObject+0x2ba>
		}
	}

	return 'e';
 8002fa8:	2365      	movs	r3, #101	; 0x65
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb4:	200007d0 	.word	0x200007d0
 8002fb8:	20000890 	.word	0x20000890
 8002fbc:	200007cc 	.word	0x200007cc
 8002fc0:	2000088c 	.word	0x2000088c
 8002fc4:	20000840 	.word	0x20000840
 8002fc8:	200007c8 	.word	0x200007c8
 8002fcc:	2000062c 	.word	0x2000062c
 8002fd0:	20000630 	.word	0x20000630
 8002fd4:	200007c4 	.word	0x200007c4
 8002fd8:	2000083c 	.word	0x2000083c
 8002fdc:	200005c4 	.word	0x200005c4
 8002fe0:	20000838 	.word	0x20000838

08002fe4 <setRowObjects>:

void setRowObjects(int j)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	 * how to generage a row in this game?
	 * choose witch character should be choosed for this row
	 * choose witch col to place it
	 */
	int i;
	int maxObjectsOnRow = 2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < boardColumns; i ++ ) {
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e068      	b.n	80030c8 <setRowObjects+0xe4>
		char chosen = chooseWhichObject(j);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe7a 	bl	8002cf0 <chooseWhichObject>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
		if (chosen != 'e') {
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b65      	cmp	r3, #101	; 0x65
 8003004:	d05a      	beq.n	80030bc <setRowObjects+0xd8>
			if (chosen == 'm') {
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b6d      	cmp	r3, #109	; 0x6d
 800300a:	d125      	bne.n	8003058 <setRowObjects+0x74>
				monsterLoc[monsterCount][0] = i;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <setRowObjects+0xf8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4933      	ldr	r1, [pc, #204]	; (80030e0 <setRowObjects+0xfc>)
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				monsterLoc[monsterCount][1] = j;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <setRowObjects+0xf8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a30      	ldr	r2, [pc, #192]	; (80030e0 <setRowObjects+0xfc>)
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	605a      	str	r2, [r3, #4]
				int r = getRandom(0, 1);
 8003026:	2101      	movs	r1, #1
 8003028:	2000      	movs	r0, #0
 800302a:	f7ff f90b 	bl	8002244 <getRandom>
 800302e:	60b8      	str	r0, [r7, #8]
				if (r == 0)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <setRowObjects+0x5e>
					monsterState[monsterCount] = 'l'; // go to left
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <setRowObjects+0xf8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <setRowObjects+0x100>)
 800303c:	216c      	movs	r1, #108	; 0x6c
 800303e:	54d1      	strb	r1, [r2, r3]
 8003040:	e004      	b.n	800304c <setRowObjects+0x68>
				else
					monsterState[monsterCount] = 'r'; // go to right
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <setRowObjects+0xf8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <setRowObjects+0x100>)
 8003048:	2172      	movs	r1, #114	; 0x72
 800304a:	54d1      	strb	r1, [r2, r3]
				monsterCount ++;
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <setRowObjects+0xf8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	4a22      	ldr	r2, [pc, #136]	; (80030dc <setRowObjects+0xf8>)
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e022      	b.n	800309e <setRowObjects+0xba>
			} else if (chosen == 'v') {
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b76      	cmp	r3, #118	; 0x76
 800305c:	d105      	bne.n	800306a <setRowObjects+0x86>
				voidCount ++;
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <setRowObjects+0x104>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <setRowObjects+0x104>)
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e019      	b.n	800309e <setRowObjects+0xba>
			} else if (chosen == 'b') {
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b62      	cmp	r3, #98	; 0x62
 800306e:	d105      	bne.n	800307c <setRowObjects+0x98>
				blockCount ++;
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <setRowObjects+0x108>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <setRowObjects+0x108>)
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e010      	b.n	800309e <setRowObjects+0xba>
			} else if (chosen == 's') {
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b73      	cmp	r3, #115	; 0x73
 8003080:	d105      	bne.n	800308e <setRowObjects+0xaa>
				boosterCount ++;
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <setRowObjects+0x10c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <setRowObjects+0x10c>)
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e007      	b.n	800309e <setRowObjects+0xba>
			} else if (chosen == 'l') {
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b6c      	cmp	r3, #108	; 0x6c
 8003092:	d104      	bne.n	800309e <setRowObjects+0xba>
				looseCount ++;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <setRowObjects+0x110>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <setRowObjects+0x110>)
 800309c:	6013      	str	r3, [r2, #0]
			}
			maxObjectsOnRow --;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
			board[i][j] = chosen;
 80030a4:	4914      	ldr	r1, [pc, #80]	; (80030f8 <setRowObjects+0x114>)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	1ad2      	subs	r2, r2, r3
 80030b2:	440a      	add	r2, r1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	701a      	strb	r2, [r3, #0]
		}
		if (maxObjectsOnRow < 1) break;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	dd06      	ble.n	80030d0 <setRowObjects+0xec>
	for (i = 0; i < boardColumns; i ++ ) {
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	dd93      	ble.n	8002ff6 <setRowObjects+0x12>
	}
}
 80030ce:	e000      	b.n	80030d2 <setRowObjects+0xee>
		if (maxObjectsOnRow < 1) break;
 80030d0:	bf00      	nop
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000840 	.word	0x20000840
 80030e0:	20000634 	.word	0x20000634
 80030e4:	20000858 	.word	0x20000858
 80030e8:	2000088c 	.word	0x2000088c
 80030ec:	20000890 	.word	0x20000890
 80030f0:	200007c8 	.word	0x200007c8
 80030f4:	200007cc 	.word	0x200007cc
 80030f8:	200005d8 	.word	0x200005d8

080030fc <initGameState>:

void initGameState()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	int i, j;
	for (i = 0; i < boardColumns; i ++) {
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	e02e      	b.n	8003166 <initGameState+0x6a>
		for (j = 0; j < boardRows; j ++) {
 8003108:	2300      	movs	r3, #0
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	e01a      	b.n	8003144 <initGameState+0x48>
			board[i][j] = 'e';
 800310e:	494a      	ldr	r1, [pc, #296]	; (8003238 <initGameState+0x13c>)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00da      	lsls	r2, r3, #3
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	440a      	add	r2, r1
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	2265      	movs	r2, #101	; 0x65
 8003124:	701a      	strb	r2, [r3, #0]
			boardTemp[i][j] = '!'; // this means it is the first turn and no value is there
 8003126:	4945      	ldr	r1, [pc, #276]	; (800323c <initGameState+0x140>)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	00da      	lsls	r2, r3, #3
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	440a      	add	r2, r1
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4413      	add	r3, r2
 800313a:	2221      	movs	r2, #33	; 0x21
 800313c:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++) {
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b13      	cmp	r3, #19
 8003148:	dde1      	ble.n	800310e <initGameState+0x12>
		}
		board[i][boardRows] = '\0';
 800314a:	493b      	ldr	r1, [pc, #236]	; (8003238 <initGameState+0x13c>)
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	00da      	lsls	r2, r3, #3
 8003156:	1ad2      	subs	r2, r2, r3
 8003158:	188b      	adds	r3, r1, r2
 800315a:	3314      	adds	r3, #20
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < boardColumns; i ++) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b03      	cmp	r3, #3
 800316a:	ddcd      	ble.n	8003108 <initGameState+0xc>
	}
	board[1][0] = 'b';
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <initGameState+0x13c>)
 800316e:	2262      	movs	r2, #98	; 0x62
 8003170:	755a      	strb	r2, [r3, #21]
	lastBlockHeightInScreen = 0;
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <initGameState+0x144>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
	board[1][1] = 'p';
 8003178:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <initGameState+0x13c>)
 800317a:	2270      	movs	r2, #112	; 0x70
 800317c:	759a      	strb	r2, [r3, #22]
	playerRow = 1;
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <initGameState+0x148>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
	playerCol = 1;
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <initGameState+0x14c>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
	playerOn = 'e';
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <initGameState+0x150>)
 800318c:	2265      	movs	r2, #101	; 0x65
 800318e:	701a      	strb	r2, [r3, #0]
	jumpCount = 0;
 8003190:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <initGameState+0x154>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

	bulletRow = -1;
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <initGameState+0x158>)
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319c:	601a      	str	r2, [r3, #0]
	bulletCol = -1;
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <initGameState+0x15c>)
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a4:	601a      	str	r2, [r3, #0]

	pauseGame = 0;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <initGameState+0x160>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

	BProbBase = 10;
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <initGameState+0x164>)
 80031ae:	220a      	movs	r2, #10
 80031b0:	601a      	str	r2, [r3, #0]
	SProbBase = 1;
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <initGameState+0x168>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
	VProbBase = 1;
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <initGameState+0x16c>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
	LProbBase = 2;
 80031be:	4b2b      	ldr	r3, [pc, #172]	; (800326c <initGameState+0x170>)
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
	MProbBase = 1;
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <initGameState+0x174>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

	monsterCount = 0;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <initGameState+0x178>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
	voidCount = 0;
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <initGameState+0x17c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
	blockCount = 1;
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <initGameState+0x180>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
	boosterCount = 0;
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <initGameState+0x184>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
	looseCount = 0;
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <initGameState+0x188>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

	playerFalling = 0;
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <initGameState+0x18c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

	score = 1;
 80031ee:	4b27      	ldr	r3, [pc, #156]	; (800328c <initGameState+0x190>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
	playerHeight = score;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <initGameState+0x190>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <initGameState+0x194>)
 80031fa:	6013      	str	r3, [r2, #0]
	playerHeightInScreen = playerHeight;
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <initGameState+0x194>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a24      	ldr	r2, [pc, #144]	; (8003294 <initGameState+0x198>)
 8003202:	6013      	str	r3, [r2, #0]

	srand(time(0));
 8003204:	2000      	movs	r0, #0
 8003206:	f004 fb23 	bl	8007850 <time>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f004 fa8f 	bl	8007734 <srand>

	for (j = 2; j < boardRows; j ++ ) {
 8003216:	2302      	movs	r3, #2
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	e005      	b.n	8003228 <initGameState+0x12c>
		setRowObjects(j);
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f7ff fee1 	bl	8002fe4 <setRowObjects>
	for (j = 2; j < boardRows; j ++ ) {
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b13      	cmp	r3, #19
 800322c:	ddf6      	ble.n	800321c <initGameState+0x120>
	}
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	200005d8 	.word	0x200005d8
 800323c:	200007d8 	.word	0x200007d8
 8003240:	200007d0 	.word	0x200007d0
 8003244:	20000848 	.word	0x20000848
 8003248:	200005d0 	.word	0x200005d0
 800324c:	20000854 	.word	0x20000854
 8003250:	2000082c 	.word	0x2000082c
 8003254:	200005c8 	.word	0x200005c8
 8003258:	200005d4 	.word	0x200005d4
 800325c:	20000834 	.word	0x20000834
 8003260:	2000062c 	.word	0x2000062c
 8003264:	200007c4 	.word	0x200007c4
 8003268:	20000838 	.word	0x20000838
 800326c:	2000083c 	.word	0x2000083c
 8003270:	200005c4 	.word	0x200005c4
 8003274:	20000840 	.word	0x20000840
 8003278:	2000088c 	.word	0x2000088c
 800327c:	20000890 	.word	0x20000890
 8003280:	200007c8 	.word	0x200007c8
 8003284:	200007cc 	.word	0x200007cc
 8003288:	200005c0 	.word	0x200005c0
 800328c:	20000630 	.word	0x20000630
 8003290:	2000084c 	.word	0x2000084c
 8003294:	20000830 	.word	0x20000830

08003298 <keypadCallback>:

void keypadCallback(int8_t column_number)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  if (last_gpio_exti + 250 > HAL_GetTick()) // Simple button debouncing
 80032a2:	4b99      	ldr	r3, [pc, #612]	; (8003508 <keypadCallback+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 80032aa:	f000 fbe5 	bl	8003a78 <HAL_GetTick>
 80032ae:	4603      	mov	r3, r0
 80032b0:	429c      	cmp	r4, r3
 80032b2:	f200 8118 	bhi.w	80034e6 <keypadCallback+0x24e>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80032b6:	f000 fbdf 	bl	8003a78 <HAL_GetTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a92      	ldr	r2, [pc, #584]	; (8003508 <keypadCallback+0x270>)
 80032be:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80032c0:	23ff      	movs	r3, #255	; 0xff
 80032c2:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 0);
 80032c4:	4b91      	ldr	r3, [pc, #580]	; (800350c <keypadCallback+0x274>)
 80032c6:	2110      	movs	r1, #16
 80032c8:	2200      	movs	r2, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 ff1e 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 0);
 80032d0:	4b8e      	ldr	r3, [pc, #568]	; (800350c <keypadCallback+0x274>)
 80032d2:	2120      	movs	r1, #32
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 ff18 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 0);
 80032dc:	4b8b      	ldr	r3, [pc, #556]	; (800350c <keypadCallback+0x274>)
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	2200      	movs	r2, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff12 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 0);
 80032e8:	4b88      	ldr	r3, [pc, #544]	; (800350c <keypadCallback+0x274>)
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	2200      	movs	r2, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 ff0c 	bl	800410c <HAL_GPIO_WritePin>

  for (uint8_t row = 0; row < 4; row++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73bb      	strb	r3, [r7, #14]
 80032f8:	e02e      	b.n	8003358 <keypadCallback+0xc0>
  {
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 1);
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	4a84      	ldr	r2, [pc, #528]	; (8003510 <keypadCallback+0x278>)
 80032fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	4a83      	ldr	r2, [pc, #524]	; (8003514 <keypadCallback+0x27c>)
 8003306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	f000 fefd 	bl	800410c <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Column_ports[column_number], Column_pins[column_number]))
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	4a80      	ldr	r2, [pc, #512]	; (8003518 <keypadCallback+0x280>)
 8003318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	497e      	ldr	r1, [pc, #504]	; (800351c <keypadCallback+0x284>)
 8003322:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f000 fed7 	bl	80040dc <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <keypadCallback+0xa2>
    {
      row_number = row;
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e011      	b.n	800335e <keypadCallback+0xc6>
    }
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 0);
 800333a:	7bbb      	ldrb	r3, [r7, #14]
 800333c:	4a74      	ldr	r2, [pc, #464]	; (8003510 <keypadCallback+0x278>)
 800333e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	4a73      	ldr	r2, [pc, #460]	; (8003514 <keypadCallback+0x27c>)
 8003346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800334a:	2200      	movs	r2, #0
 800334c:	4619      	mov	r1, r3
 800334e:	f000 fedd 	bl	800410c <HAL_GPIO_WritePin>
  for (uint8_t row = 0; row < 4; row++)
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	3301      	adds	r3, #1
 8003356:	73bb      	strb	r3, [r7, #14]
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d9cd      	bls.n	80032fa <keypadCallback+0x62>
  }

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 1);
 800335e:	4b6b      	ldr	r3, [pc, #428]	; (800350c <keypadCallback+0x274>)
 8003360:	2110      	movs	r1, #16
 8003362:	2201      	movs	r2, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fed1 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 1);
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <keypadCallback+0x274>)
 800336c:	2120      	movs	r1, #32
 800336e:	2201      	movs	r2, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fecb 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 1);
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <keypadCallback+0x274>)
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	2201      	movs	r2, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fec5 	bl	800410c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 1);
 8003382:	4b62      	ldr	r3, [pc, #392]	; (800350c <keypadCallback+0x274>)
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	2201      	movs	r2, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 febf 	bl	800410c <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003396:	f000 80a8 	beq.w	80034ea <keypadCallback+0x252>
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a2:	f000 80a2 	beq.w	80034ea <keypadCallback+0x252>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	4413      	add	r3, r2
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	737b      	strb	r3, [r7, #13]

//  setCursor(curser_column, 0);
  switch (button_number)
 80033b6:	7b7b      	ldrb	r3, [r7, #13]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f200 8097 	bhi.w	80034ee <keypadCallback+0x256>
 80033c0:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <keypadCallback+0x130>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080034ef 	.word	0x080034ef
 80033cc:	080034ef 	.word	0x080034ef
 80033d0:	080034ef 	.word	0x080034ef
 80033d4:	080034ef 	.word	0x080034ef
 80033d8:	080034ef 	.word	0x080034ef
 80033dc:	080034ef 	.word	0x080034ef
 80033e0:	080034ef 	.word	0x080034ef
 80033e4:	080034ef 	.word	0x080034ef
 80033e8:	08003409 	.word	0x08003409
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003431 	.word	0x08003431
 80033f4:	080034ef 	.word	0x080034ef
 80033f8:	080034ef 	.word	0x080034ef
 80033fc:	08003437 	.word	0x08003437
 8003400:	08003479 	.word	0x08003479
 8003404:	080034c7 	.word	0x080034c7
       break;
     case 8:
//    	  print("8");
       break;
     case 9:
	 	if (pauseGame) 
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <keypadCallback+0x288>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <keypadCallback+0x180>
		 	pauseGame = 0;
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <keypadCallback+0x288>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
		else 
			pauseGame = 1;
//    	  print("9");
       break;
 8003416:	e073      	b.n	8003500 <keypadCallback+0x268>
			pauseGame = 1;
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <keypadCallback+0x288>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]
       break;
 800341e:	e06f      	b.n	8003500 <keypadCallback+0x268>
     case 10:
     	 if (menuState == 'z')
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <keypadCallback+0x28c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b7a      	cmp	r3, #122	; 0x7a
 8003426:	d164      	bne.n	80034f2 <keypadCallback+0x25a>
     		 menuState = 'm';
 8003428:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <keypadCallback+0x28c>)
 800342a:	226d      	movs	r2, #109	; 0x6d
 800342c:	701a      	strb	r2, [r3, #0]
       break;
 800342e:	e060      	b.n	80034f2 <keypadCallback+0x25a>
     case 11:
//    	  print("11");
		fireBullet();
 8003430:	f7fe ff22 	bl	8002278 <fireBullet>
       break;
 8003434:	e064      	b.n	8003500 <keypadCallback+0x268>
       break;
     case 13:
//    	 print("13");
       break;
     case 14:
    	 if (menuState == 'm')
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <keypadCallback+0x28c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b6d      	cmp	r3, #109	; 0x6d
 800343c:	d103      	bne.n	8003446 <keypadCallback+0x1ae>
    		 menuState = 'a';
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <keypadCallback+0x28c>)
 8003440:	2261      	movs	r2, #97	; 0x61
 8003442:	701a      	strb	r2, [r3, #0]
    	 else if (menuState == 'g' && !playerFalling) {
    		 //    		 Player move right
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
    	 }
       break;
 8003444:	e057      	b.n	80034f6 <keypadCallback+0x25e>
    	 else if (menuState == 'g' && !playerFalling) {
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <keypadCallback+0x28c>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b67      	cmp	r3, #103	; 0x67
 800344c:	d153      	bne.n	80034f6 <keypadCallback+0x25e>
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <keypadCallback+0x290>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d14f      	bne.n	80034f6 <keypadCallback+0x25e>
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <keypadCallback+0x294>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3301      	adds	r3, #1
 800345c:	425a      	negs	r2, r3
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	f002 0203 	and.w	r2, r2, #3
 8003466:	bf58      	it	pl
 8003468:	4253      	negpl	r3, r2
 800346a:	4a31      	ldr	r2, [pc, #196]	; (8003530 <keypadCallback+0x298>)
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff faef 	bl	8002a54 <movePlayerTo>
       break;
 8003476:	e03e      	b.n	80034f6 <keypadCallback+0x25e>
     case 15:
    	 if (menuState == 'm') {
 8003478:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <keypadCallback+0x28c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b6d      	cmp	r3, #109	; 0x6d
 800347e:	d105      	bne.n	800348c <keypadCallback+0x1f4>
    		 initGameState();
 8003480:	f7ff fe3c 	bl	80030fc <initGameState>
    		 menuState = 'g';
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <keypadCallback+0x28c>)
 8003486:	2267      	movs	r2, #103	; 0x67
 8003488:	701a      	strb	r2, [r3, #0]
				 movePlayerTo(boardColumns - 1, playerRow);
			 } else {
				 movePlayerTo(playerCol - 1, playerRow);
			 }
    	 }
       break;
 800348a:	e036      	b.n	80034fa <keypadCallback+0x262>
    	 } else if (menuState == 'g' && !playerFalling) {
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <keypadCallback+0x28c>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b67      	cmp	r3, #103	; 0x67
 8003492:	d132      	bne.n	80034fa <keypadCallback+0x262>
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <keypadCallback+0x290>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d12e      	bne.n	80034fa <keypadCallback+0x262>
			 if (playerCol == 0) {
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <keypadCallback+0x294>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <keypadCallback+0x21a>
				 movePlayerTo(boardColumns - 1, playerRow);
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <keypadCallback+0x298>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2003      	movs	r0, #3
 80034ac:	f7ff fad2 	bl	8002a54 <movePlayerTo>
       break;
 80034b0:	e023      	b.n	80034fa <keypadCallback+0x262>
				 movePlayerTo(playerCol - 1, playerRow);
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <keypadCallback+0x294>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <keypadCallback+0x298>)
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fac8 	bl	8002a54 <movePlayerTo>
       break;
 80034c4:	e019      	b.n	80034fa <keypadCallback+0x262>
     case 16:
    	  if (menuState == 'a')
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <keypadCallback+0x28c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b61      	cmp	r3, #97	; 0x61
 80034cc:	d103      	bne.n	80034d6 <keypadCallback+0x23e>
    		  menuState = 'm';
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <keypadCallback+0x28c>)
 80034d0:	226d      	movs	r2, #109	; 0x6d
 80034d2:	701a      	strb	r2, [r3, #0]
			else if (menuState == 'd')
				menuState = 'm';
       break;
 80034d4:	e013      	b.n	80034fe <keypadCallback+0x266>
			else if (menuState == 'd')
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <keypadCallback+0x28c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d10f      	bne.n	80034fe <keypadCallback+0x266>
				menuState = 'm';
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <keypadCallback+0x28c>)
 80034e0:	226d      	movs	r2, #109	; 0x6d
 80034e2:	701a      	strb	r2, [r3, #0]
       break;
 80034e4:	e00b      	b.n	80034fe <keypadCallback+0x266>
    return;
 80034e6:	bf00      	nop
 80034e8:	e00a      	b.n	8003500 <keypadCallback+0x268>
    return; // Reject invalid scan
 80034ea:	bf00      	nop
 80034ec:	e008      	b.n	8003500 <keypadCallback+0x268>

     default:
       break;
 80034ee:	bf00      	nop
 80034f0:	e006      	b.n	8003500 <keypadCallback+0x268>
       break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <keypadCallback+0x268>
       break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <keypadCallback+0x268>
       break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <keypadCallback+0x268>
       break;
 80034fe:	bf00      	nop
     }
}
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	20000844 	.word	0x20000844
 800350c:	48000c00 	.word	0x48000c00
 8003510:	08008eb8 	.word	0x08008eb8
 8003514:	08008ec8 	.word	0x08008ec8
 8003518:	08008ed0 	.word	0x08008ed0
 800351c:	08008ee0 	.word	0x08008ee0
 8003520:	20000834 	.word	0x20000834
 8003524:	2000014c 	.word	0x2000014c
 8003528:	200005c0 	.word	0x200005c0
 800352c:	200005d0 	.word	0x200005d0
 8003530:	20000848 	.word	0x20000848

08003534 <set_seg_value>:


void set_seg_value(int D) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	if (D == 0) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d114      	bne.n	800356c <set_seg_value+0x38>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2101      	movs	r1, #1
 8003546:	4877      	ldr	r0, [pc, #476]	; (8003724 <set_seg_value+0x1f0>)
 8003548:	f000 fde0 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2102      	movs	r1, #2
 8003550:	4874      	ldr	r0, [pc, #464]	; (8003724 <set_seg_value+0x1f0>)
 8003552:	f000 fddb 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2104      	movs	r1, #4
 800355a:	4872      	ldr	r0, [pc, #456]	; (8003724 <set_seg_value+0x1f0>)
 800355c:	f000 fdd6 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2108      	movs	r1, #8
 8003564:	486f      	ldr	r0, [pc, #444]	; (8003724 <set_seg_value+0x1f0>)
 8003566:	f000 fdd1 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
	}
}
 800356a:	e0d6      	b.n	800371a <set_seg_value+0x1e6>
	} else if (D == 1) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d114      	bne.n	800359c <set_seg_value+0x68>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003572:	2201      	movs	r2, #1
 8003574:	2101      	movs	r1, #1
 8003576:	486b      	ldr	r0, [pc, #428]	; (8003724 <set_seg_value+0x1f0>)
 8003578:	f000 fdc8 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	2102      	movs	r1, #2
 8003580:	4868      	ldr	r0, [pc, #416]	; (8003724 <set_seg_value+0x1f0>)
 8003582:	f000 fdc3 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2104      	movs	r1, #4
 800358a:	4866      	ldr	r0, [pc, #408]	; (8003724 <set_seg_value+0x1f0>)
 800358c:	f000 fdbe 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2108      	movs	r1, #8
 8003594:	4863      	ldr	r0, [pc, #396]	; (8003724 <set_seg_value+0x1f0>)
 8003596:	f000 fdb9 	bl	800410c <HAL_GPIO_WritePin>
}
 800359a:	e0be      	b.n	800371a <set_seg_value+0x1e6>
	} else if (D == 2) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d114      	bne.n	80035cc <set_seg_value+0x98>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2101      	movs	r1, #1
 80035a6:	485f      	ldr	r0, [pc, #380]	; (8003724 <set_seg_value+0x1f0>)
 80035a8:	f000 fdb0 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80035ac:	2201      	movs	r2, #1
 80035ae:	2102      	movs	r1, #2
 80035b0:	485c      	ldr	r0, [pc, #368]	; (8003724 <set_seg_value+0x1f0>)
 80035b2:	f000 fdab 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2104      	movs	r1, #4
 80035ba:	485a      	ldr	r0, [pc, #360]	; (8003724 <set_seg_value+0x1f0>)
 80035bc:	f000 fda6 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2108      	movs	r1, #8
 80035c4:	4857      	ldr	r0, [pc, #348]	; (8003724 <set_seg_value+0x1f0>)
 80035c6:	f000 fda1 	bl	800410c <HAL_GPIO_WritePin>
}
 80035ca:	e0a6      	b.n	800371a <set_seg_value+0x1e6>
	} else if (D == 3) {
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d114      	bne.n	80035fc <set_seg_value+0xc8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80035d2:	2201      	movs	r2, #1
 80035d4:	2101      	movs	r1, #1
 80035d6:	4853      	ldr	r0, [pc, #332]	; (8003724 <set_seg_value+0x1f0>)
 80035d8:	f000 fd98 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80035dc:	2201      	movs	r2, #1
 80035de:	2102      	movs	r1, #2
 80035e0:	4850      	ldr	r0, [pc, #320]	; (8003724 <set_seg_value+0x1f0>)
 80035e2:	f000 fd93 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	484e      	ldr	r0, [pc, #312]	; (8003724 <set_seg_value+0x1f0>)
 80035ec:	f000 fd8e 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2108      	movs	r1, #8
 80035f4:	484b      	ldr	r0, [pc, #300]	; (8003724 <set_seg_value+0x1f0>)
 80035f6:	f000 fd89 	bl	800410c <HAL_GPIO_WritePin>
}
 80035fa:	e08e      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 4) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d114      	bne.n	800362c <set_seg_value+0xf8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2101      	movs	r1, #1
 8003606:	4847      	ldr	r0, [pc, #284]	; (8003724 <set_seg_value+0x1f0>)
 8003608:	f000 fd80 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2102      	movs	r1, #2
 8003610:	4844      	ldr	r0, [pc, #272]	; (8003724 <set_seg_value+0x1f0>)
 8003612:	f000 fd7b 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003616:	2201      	movs	r2, #1
 8003618:	2104      	movs	r1, #4
 800361a:	4842      	ldr	r0, [pc, #264]	; (8003724 <set_seg_value+0x1f0>)
 800361c:	f000 fd76 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003620:	2200      	movs	r2, #0
 8003622:	2108      	movs	r1, #8
 8003624:	483f      	ldr	r0, [pc, #252]	; (8003724 <set_seg_value+0x1f0>)
 8003626:	f000 fd71 	bl	800410c <HAL_GPIO_WritePin>
}
 800362a:	e076      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 5) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d114      	bne.n	800365c <set_seg_value+0x128>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003632:	2201      	movs	r2, #1
 8003634:	2101      	movs	r1, #1
 8003636:	483b      	ldr	r0, [pc, #236]	; (8003724 <set_seg_value+0x1f0>)
 8003638:	f000 fd68 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	2102      	movs	r1, #2
 8003640:	4838      	ldr	r0, [pc, #224]	; (8003724 <set_seg_value+0x1f0>)
 8003642:	f000 fd63 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003646:	2201      	movs	r2, #1
 8003648:	2104      	movs	r1, #4
 800364a:	4836      	ldr	r0, [pc, #216]	; (8003724 <set_seg_value+0x1f0>)
 800364c:	f000 fd5e 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2108      	movs	r1, #8
 8003654:	4833      	ldr	r0, [pc, #204]	; (8003724 <set_seg_value+0x1f0>)
 8003656:	f000 fd59 	bl	800410c <HAL_GPIO_WritePin>
}
 800365a:	e05e      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 6) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d114      	bne.n	800368c <set_seg_value+0x158>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2101      	movs	r1, #1
 8003666:	482f      	ldr	r0, [pc, #188]	; (8003724 <set_seg_value+0x1f0>)
 8003668:	f000 fd50 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800366c:	2201      	movs	r2, #1
 800366e:	2102      	movs	r1, #2
 8003670:	482c      	ldr	r0, [pc, #176]	; (8003724 <set_seg_value+0x1f0>)
 8003672:	f000 fd4b 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003676:	2201      	movs	r2, #1
 8003678:	2104      	movs	r1, #4
 800367a:	482a      	ldr	r0, [pc, #168]	; (8003724 <set_seg_value+0x1f0>)
 800367c:	f000 fd46 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2108      	movs	r1, #8
 8003684:	4827      	ldr	r0, [pc, #156]	; (8003724 <set_seg_value+0x1f0>)
 8003686:	f000 fd41 	bl	800410c <HAL_GPIO_WritePin>
}
 800368a:	e046      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 7) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b07      	cmp	r3, #7
 8003690:	d114      	bne.n	80036bc <set_seg_value+0x188>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003692:	2201      	movs	r2, #1
 8003694:	2101      	movs	r1, #1
 8003696:	4823      	ldr	r0, [pc, #140]	; (8003724 <set_seg_value+0x1f0>)
 8003698:	f000 fd38 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800369c:	2201      	movs	r2, #1
 800369e:	2102      	movs	r1, #2
 80036a0:	4820      	ldr	r0, [pc, #128]	; (8003724 <set_seg_value+0x1f0>)
 80036a2:	f000 fd33 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2104      	movs	r1, #4
 80036aa:	481e      	ldr	r0, [pc, #120]	; (8003724 <set_seg_value+0x1f0>)
 80036ac:	f000 fd2e 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2108      	movs	r1, #8
 80036b4:	481b      	ldr	r0, [pc, #108]	; (8003724 <set_seg_value+0x1f0>)
 80036b6:	f000 fd29 	bl	800410c <HAL_GPIO_WritePin>
}
 80036ba:	e02e      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 8) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d114      	bne.n	80036ec <set_seg_value+0x1b8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2101      	movs	r1, #1
 80036c6:	4817      	ldr	r0, [pc, #92]	; (8003724 <set_seg_value+0x1f0>)
 80036c8:	f000 fd20 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2102      	movs	r1, #2
 80036d0:	4814      	ldr	r0, [pc, #80]	; (8003724 <set_seg_value+0x1f0>)
 80036d2:	f000 fd1b 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2104      	movs	r1, #4
 80036da:	4812      	ldr	r0, [pc, #72]	; (8003724 <set_seg_value+0x1f0>)
 80036dc:	f000 fd16 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80036e0:	2201      	movs	r2, #1
 80036e2:	2108      	movs	r1, #8
 80036e4:	480f      	ldr	r0, [pc, #60]	; (8003724 <set_seg_value+0x1f0>)
 80036e6:	f000 fd11 	bl	800410c <HAL_GPIO_WritePin>
}
 80036ea:	e016      	b.n	800371a <set_seg_value+0x1e6>
	} else if(D == 9) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	d113      	bne.n	800371a <set_seg_value+0x1e6>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80036f2:	2201      	movs	r2, #1
 80036f4:	2101      	movs	r1, #1
 80036f6:	480b      	ldr	r0, [pc, #44]	; (8003724 <set_seg_value+0x1f0>)
 80036f8:	f000 fd08 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2102      	movs	r1, #2
 8003700:	4808      	ldr	r0, [pc, #32]	; (8003724 <set_seg_value+0x1f0>)
 8003702:	f000 fd03 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	4806      	ldr	r0, [pc, #24]	; (8003724 <set_seg_value+0x1f0>)
 800370c:	f000 fcfe 	bl	800410c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003710:	2201      	movs	r2, #1
 8003712:	2108      	movs	r1, #8
 8003714:	4803      	ldr	r0, [pc, #12]	; (8003724 <set_seg_value+0x1f0>)
 8003716:	f000 fcf9 	bl	800410c <HAL_GPIO_WritePin>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	48000800 	.word	0x48000800

08003728 <setScoreSeven>:

void setScoreSeven() {
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	D3 = score % 10;
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <setScoreSeven+0x80>)
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <setScoreSeven+0x84>)
 8003732:	fb83 2301 	smull	r2, r3, r3, r1
 8003736:	109a      	asrs	r2, r3, #2
 8003738:	17cb      	asrs	r3, r1, #31
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	1aca      	subs	r2, r1, r3
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <setScoreSeven+0x88>)
 8003748:	601a      	str	r2, [r3, #0]
	D2 = (score / 10) % 10;
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <setScoreSeven+0x80>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a17      	ldr	r2, [pc, #92]	; (80037ac <setScoreSeven+0x84>)
 8003750:	fb82 1203 	smull	r1, r2, r2, r3
 8003754:	1092      	asrs	r2, r2, #2
 8003756:	17db      	asrs	r3, r3, #31
 8003758:	1ad1      	subs	r1, r2, r3
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <setScoreSeven+0x84>)
 800375c:	fb83 2301 	smull	r2, r3, r3, r1
 8003760:	109a      	asrs	r2, r3, #2
 8003762:	17cb      	asrs	r3, r1, #31
 8003764:	1ad2      	subs	r2, r2, r3
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	1aca      	subs	r2, r1, r3
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <setScoreSeven+0x8c>)
 8003772:	601a      	str	r2, [r3, #0]
	D1 = (score / 100) % 10;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <setScoreSeven+0x80>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0f      	ldr	r2, [pc, #60]	; (80037b8 <setScoreSeven+0x90>)
 800377a:	fb82 1203 	smull	r1, r2, r2, r3
 800377e:	1152      	asrs	r2, r2, #5
 8003780:	17db      	asrs	r3, r3, #31
 8003782:	1ad1      	subs	r1, r2, r3
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <setScoreSeven+0x84>)
 8003786:	fb83 2301 	smull	r2, r3, r3, r1
 800378a:	109a      	asrs	r2, r3, #2
 800378c:	17cb      	asrs	r3, r1, #31
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	1aca      	subs	r2, r1, r3
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <setScoreSeven+0x94>)
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000630 	.word	0x20000630
 80037ac:	66666667 	.word	0x66666667
 80037b0:	200005bc 	.word	0x200005bc
 80037b4:	200007d4 	.word	0x200007d4
 80037b8:	51eb851f 	.word	0x51eb851f
 80037bc:	20000850 	.word	0x20000850

080037c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
	return 1;
 80037c4:	2301      	movs	r3, #1
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_kill>:

int _kill(int pid, int sig)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037da:	f003 ff79 	bl	80076d0 <__errno>
 80037de:	4603      	mov	r3, r0
 80037e0:	2216      	movs	r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
	return -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_exit>:

void _exit (int status)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ffe7 	bl	80037d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003802:	e7fe      	b.n	8003802 <_exit+0x12>

08003804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e00a      	b.n	800382c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003816:	f3af 8000 	nop.w
 800381a:	4601      	mov	r1, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	60ba      	str	r2, [r7, #8]
 8003822:	b2ca      	uxtb	r2, r1
 8003824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	dbf0      	blt.n	8003816 <_read+0x12>
	}

return len;
 8003834:	687b      	ldr	r3, [r7, #4]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e009      	b.n	8003864 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	60ba      	str	r2, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	dbf1      	blt.n	8003850 <_write+0x12>
	}
	return len;
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_close>:

int _close(int file)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
	return -1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800389e:	605a      	str	r2, [r3, #4]
	return 0;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <_isatty>:

int _isatty(int file)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
	return 1;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	return 0;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <_sbrk+0x5c>)
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <_sbrk+0x60>)
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <_sbrk+0x64>)
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <_sbrk+0x68>)
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d207      	bcs.n	8003920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003910:	f003 fede 	bl	80076d0 <__errno>
 8003914:	4603      	mov	r3, r0
 8003916:	220c      	movs	r2, #12
 8003918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391e:	e009      	b.n	8003934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <_sbrk+0x64>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <_sbrk+0x64>)
 8003930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000a000 	.word	0x2000a000
 8003940:	00000400 	.word	0x00000400
 8003944:	200000cc 	.word	0x200000cc
 8003948:	200008a8 	.word	0x200008a8

0800394c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <SystemInit+0x20>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <SystemInit+0x20>)
 8003958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800395c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <LoopForever+0x6>)
  ldr r1, =_edata
 8003976:	490e      	ldr	r1, [pc, #56]	; (80039b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <LoopForever+0xe>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800397c:	e002      	b.n	8003984 <LoopCopyDataInit>

0800397e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003982:	3304      	adds	r3, #4

08003984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003988:	d3f9      	bcc.n	800397e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800398c:	4c0b      	ldr	r4, [pc, #44]	; (80039bc <LoopForever+0x16>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003990:	e001      	b.n	8003996 <LoopFillZerobss>

08003992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003994:	3204      	adds	r2, #4

08003996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003998:	d3fb      	bcc.n	8003992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800399a:	f7ff ffd7 	bl	800394c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399e:	f003 fe9d 	bl	80076dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039a2:	f7fd fce9 	bl	8001378 <main>

080039a6 <LoopForever>:

LoopForever:
    b LoopForever
 80039a6:	e7fe      	b.n	80039a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80039ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039b0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80039b4:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 80039b8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80039bc:	200008a8 	.word	0x200008a8

080039c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039c0:	e7fe      	b.n	80039c0 <ADC1_2_IRQHandler>
	...

080039c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_Init+0x28>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_Init+0x28>)
 80039ce:	f043 0310 	orr.w	r3, r3, #16
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d4:	2003      	movs	r0, #3
 80039d6:	f000 f94f 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039da:	2000      	movs	r0, #0
 80039dc:	f000 f808 	bl	80039f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e0:	f7fe f806 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40022000 	.word	0x40022000

080039f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_InitTick+0x54>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_InitTick+0x58>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f967 	bl	8003ce2 <HAL_SYSTICK_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00e      	b.n	8003a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d80a      	bhi.n	8003a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a24:	2200      	movs	r2, #0
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a2c:	f000 f92f 	bl	8003c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a30:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <HAL_InitTick+0x5c>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000034 	.word	0x20000034
 8003a48:	2000003c 	.word	0x2000003c
 8003a4c:	20000038 	.word	0x20000038

08003a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_IncTick+0x20>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x24>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_IncTick+0x24>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000003c 	.word	0x2000003c
 8003a74:	20000894 	.word	0x20000894

08003a78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_GetTick+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000894 	.word	0x20000894

08003a90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff ffee 	bl	8003a78 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d005      	beq.n	8003ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_Delay+0x44>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ab6:	bf00      	nop
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d8f7      	bhi.n	8003ab8 <HAL_Delay+0x28>
  {
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000003c 	.word	0x2000003c

08003ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	; (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	f7ff ff8e 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff29 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca0:	f7ff ff3e 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff ff8e 	bl	8003bcc <NVIC_EncodePriority>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff5d 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff31 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffa2 	bl	8003c34 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d008      	beq.n	8003d1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e020      	b.n	8003d60 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 020e 	bic.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d005      	beq.n	8003d8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2204      	movs	r2, #4
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e027      	b.n	8003dde <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 020e 	bic.w	r2, r2, #14
 8003d9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2101      	movs	r1, #1
 8003db8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
    } 
  }
  return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df6:	e154      	b.n	80040a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8146 	beq.w	800409c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d005      	beq.n	8003e28 <HAL_GPIO_Init+0x40>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d130      	bne.n	8003e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5e:	2201      	movs	r2, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 0201 	and.w	r2, r3, #1
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d017      	beq.n	8003ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d123      	bne.n	8003f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	6939      	ldr	r1, [r7, #16]
 8003f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80a0 	beq.w	800409c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6193      	str	r3, [r2, #24]
 8003f68:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_GPIO_Init+0x2d8>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f74:	4a53      	ldr	r2, [pc, #332]	; (80040c4 <HAL_GPIO_Init+0x2dc>)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f9e:	d019      	beq.n	8003fd4 <HAL_GPIO_Init+0x1ec>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a49      	ldr	r2, [pc, #292]	; (80040c8 <HAL_GPIO_Init+0x2e0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_GPIO_Init+0x1e8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a48      	ldr	r2, [pc, #288]	; (80040cc <HAL_GPIO_Init+0x2e4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00d      	beq.n	8003fcc <HAL_GPIO_Init+0x1e4>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a47      	ldr	r2, [pc, #284]	; (80040d0 <HAL_GPIO_Init+0x2e8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <HAL_GPIO_Init+0x1e0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a46      	ldr	r2, [pc, #280]	; (80040d4 <HAL_GPIO_Init+0x2ec>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_GPIO_Init+0x1dc>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	e008      	b.n	8003fd6 <HAL_GPIO_Init+0x1ee>
 8003fc4:	2305      	movs	r3, #5
 8003fc6:	e006      	b.n	8003fd6 <HAL_GPIO_Init+0x1ee>
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e004      	b.n	8003fd6 <HAL_GPIO_Init+0x1ee>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e002      	b.n	8003fd6 <HAL_GPIO_Init+0x1ee>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_GPIO_Init+0x1ee>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	f002 0203 	and.w	r2, r2, #3
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	4093      	lsls	r3, r2
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fe6:	4937      	ldr	r1, [pc, #220]	; (80040c4 <HAL_GPIO_Init+0x2dc>)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff4:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004072:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3301      	adds	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f aea3 	bne.w	8003df8 <HAL_GPIO_Init+0x10>
  }
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40010000 	.word	0x40010000
 80040c8:	48000400 	.word	0x48000400
 80040cc:	48000800 	.word	0x48000800
 80040d0:	48000c00 	.word	0x48000c00
 80040d4:	48001000 	.word	0x48001000
 80040d8:	40010400 	.word	0x40010400

080040dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	e001      	b.n	80040fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800411c:	787b      	ldrb	r3, [r7, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004128:	e002      	b.n	8004130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43d9      	mvns	r1, r3
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	400b      	ands	r3, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f806 	bl	80041a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40010400 	.word	0x40010400

080041a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e081      	b.n	80042cc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fd fc2b 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2224      	movs	r2, #36	; 0x24
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004206:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004216:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	e006      	b.n	800423e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800423c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d104      	bne.n	8004250 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800424e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004272:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69d9      	ldr	r1, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d138      	bne.n	800435c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e032      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d139      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800438a:	2302      	movs	r3, #2
 800438c:	e033      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	; 0x24
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004404:	b08b      	sub	sp, #44	; 0x2c
 8004406:	af06      	add	r7, sp, #24
 8004408:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0d0      	b.n	80045b6 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fd fc15 	bl	8001c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2203      	movs	r2, #3
 8004432:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f003 f90c 	bl	8007658 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e04c      	b.n	80044e0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	3301      	adds	r3, #1
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	b298      	uxth	r0, r3
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	3336      	adds	r3, #54	; 0x36
 8004484:	4602      	mov	r2, r0
 8004486:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	3303      	adds	r3, #3
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	3338      	adds	r3, #56	; 0x38
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	440b      	add	r3, r1
 80044c0:	333c      	adds	r3, #60	; 0x3c
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	440b      	add	r3, r1
 80044d4:	3340      	adds	r3, #64	; 0x40
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	3301      	adds	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3ad      	bcc.n	8004446 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e044      	b.n	800457a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	440b      	add	r3, r1
 8004514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800451c:	7bfa      	ldrb	r2, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	440b      	add	r3, r1
 8004556:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	3301      	adds	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	d3b5      	bcc.n	80044f0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	687e      	ldr	r6, [r7, #4]
 800458c:	466d      	mov	r5, sp
 800458e:	f106 0410 	add.w	r4, r6, #16
 8004592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	1d33      	adds	r3, r6, #4
 800459c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f003 f875 	bl	800768e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080045c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f000 bef4 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 816a 	beq.w	80048be <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045ea:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d00c      	beq.n	8004610 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045f6:	4bb0      	ldr	r3, [pc, #704]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d159      	bne.n	80046b6 <HAL_RCC_OscConfig+0xf6>
 8004602:	4bad      	ldr	r3, [pc, #692]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d152      	bne.n	80046b6 <HAL_RCC_OscConfig+0xf6>
 8004610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004614:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004624:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x82>
 800463c:	4b9e      	ldr	r3, [pc, #632]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0xae>
 8004642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004646:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800465a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800465e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800466a:	4b93      	ldr	r3, [pc, #588]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004672:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004676:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800467a:	fa92 f2a2 	rbit	r2, r2
 800467e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004682:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004686:	fab2 f282 	clz	r2, r2
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f042 0220 	orr.w	r2, r2, #32
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 810c 	beq.w	80048bc <HAL_RCC_OscConfig+0x2fc>
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 8106 	bne.w	80048bc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f000 be86 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x110>
 80046c2:	4b7d      	ldr	r3, [pc, #500]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a7c      	ldr	r2, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e030      	b.n	8004732 <HAL_RCC_OscConfig+0x172>
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x134>
 80046da:	4b77      	ldr	r3, [pc, #476]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a76      	ldr	r2, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a73      	ldr	r2, [pc, #460]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80046ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e01e      	b.n	8004732 <HAL_RCC_OscConfig+0x172>
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fe:	d10c      	bne.n	800471a <HAL_RCC_OscConfig+0x15a>
 8004700:	4b6d      	ldr	r3, [pc, #436]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6c      	ldr	r2, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a69      	ldr	r2, [pc, #420]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e00b      	b.n	8004732 <HAL_RCC_OscConfig+0x172>
 800471a:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a66      	ldr	r2, [pc, #408]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b64      	ldr	r3, [pc, #400]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a63      	ldr	r2, [pc, #396]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800472c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004732:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	f023 020f 	bic.w	r2, r3, #15
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	495d      	ldr	r1, [pc, #372]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004746:	1d3b      	adds	r3, r7, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d059      	beq.n	8004804 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7ff f992 	bl	8003a78 <HAL_GetTick>
 8004754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004758:	e00a      	b.n	8004770 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800475a:	f7ff f98d 	bl	8003a78 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d902      	bls.n	8004770 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	f000 be29 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004774:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004784:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_RCC_OscConfig+0x1e2>
 800479c:	4b46      	ldr	r3, [pc, #280]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x20e>
 80047a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80047b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80047d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80047da:	fa92 f2a2 	rbit	r2, r2
 80047de:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80047e2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80047e6:	fab2 f282 	clz	r2, r2
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	f042 0220 	orr.w	r2, r2, #32
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	f002 021f 	and.w	r2, r2, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f202 	lsl.w	r2, r1, r2
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ab      	beq.n	800475a <HAL_RCC_OscConfig+0x19a>
 8004802:	e05c      	b.n	80048be <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7ff f938 	bl	8003a78 <HAL_GetTick>
 8004808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800480e:	f7ff f933 	bl	8003a78 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d902      	bls.n	8004824 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	f000 bdcf 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004828:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004838:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d102      	bne.n	8004856 <HAL_RCC_OscConfig+0x296>
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x2c2>
 8004856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800485a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800486a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004872:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_RCC_OscConfig+0x2f8>)
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004886:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800488a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800488e:	fa92 f2a2 	rbit	r2, r2
 8004892:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004896:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800489a:	fab2 f282 	clz	r2, r2
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	f042 0220 	orr.w	r2, r2, #32
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	f002 021f 	and.w	r2, r2, #31
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f202 	lsl.w	r2, r1, r2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ab      	bne.n	800480e <HAL_RCC_OscConfig+0x24e>
 80048b6:	e002      	b.n	80048be <HAL_RCC_OscConfig+0x2fe>
 80048b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 816f 	beq.w	8004bac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048ce:	4bd0      	ldr	r3, [pc, #832]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048da:	4bcd      	ldr	r3, [pc, #820]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d16c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x400>
 80048e6:	4bca      	ldr	r3, [pc, #808]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d166      	bne.n	80049c0 <HAL_RCC_OscConfig+0x400>
 80048f2:	2302      	movs	r3, #2
 80048f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004904:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_RCC_OscConfig+0x362>
 800491c:	4bbc      	ldr	r3, [pc, #752]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	e013      	b.n	800494a <HAL_RCC_OscConfig+0x38a>
 8004922:	2302      	movs	r3, #2
 8004924:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004934:	2302      	movs	r3, #2
 8004936:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800493a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004946:	4bb2      	ldr	r3, [pc, #712]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2202      	movs	r2, #2
 800494c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004950:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004954:	fa92 f2a2 	rbit	r2, r2
 8004958:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800495c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004960:	fab2 f282 	clz	r2, r2
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	f042 0220 	orr.w	r2, r2, #32
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	f002 021f 	and.w	r2, r2, #31
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f202 	lsl.w	r2, r1, r2
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_RCC_OscConfig+0x3cc>
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d002      	beq.n	800498c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f000 bd1b 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4ba0      	ldr	r3, [pc, #640]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	21f8      	movs	r1, #248	; 0xf8
 800499c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80049a4:	fa91 f1a1 	rbit	r1, r1
 80049a8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80049ac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049b0:	fab1 f181 	clz	r1, r1
 80049b4:	b2c9      	uxtb	r1, r1
 80049b6:	408b      	lsls	r3, r1
 80049b8:	4995      	ldr	r1, [pc, #596]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049be:	e0f5      	b.n	8004bac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049c0:	1d3b      	adds	r3, r7, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8085 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x516>
 80049cc:	2301      	movs	r3, #1
 80049ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80049de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	461a      	mov	r2, r3
 80049f4:	2301      	movs	r3, #1
 80049f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7ff f83e 	bl	8003a78 <HAL_GetTick>
 80049fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a02:	f7ff f839 	bl	8003a78 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d902      	bls.n	8004a18 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	f000 bcd5 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004a2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d102      	bne.n	8004a48 <HAL_RCC_OscConfig+0x488>
 8004a42:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	e013      	b.n	8004a70 <HAL_RCC_OscConfig+0x4b0>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004a6c:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2202      	movs	r2, #2
 8004a72:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004a76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004a7a:	fa92 f2a2 	rbit	r2, r2
 8004a7e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004a82:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004a86:	fab2 f282 	clz	r2, r2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f042 0220 	orr.w	r2, r2, #32
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f002 021f 	and.w	r2, r2, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0af      	beq.n	8004a02 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	21f8      	movs	r1, #248	; 0xf8
 8004ab2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004aba:	fa91 f1a1 	rbit	r1, r1
 8004abe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ac2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ac6:	fab1 f181 	clz	r1, r1
 8004aca:	b2c9      	uxtb	r1, r1
 8004acc:	408b      	lsls	r3, r1
 8004ace:	4950      	ldr	r1, [pc, #320]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	e06a      	b.n	8004bac <HAL_RCC_OscConfig+0x5ec>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aec:	fab3 f383 	clz	r3, r3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fe ffb9 	bl	8003a78 <HAL_GetTick>
 8004b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fe ffb4 	bl	8003a78 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d902      	bls.n	8004b22 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	f000 bc50 	b.w	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004b22:	2302      	movs	r3, #2
 8004b24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_OscConfig+0x592>
 8004b4c:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e013      	b.n	8004b7a <HAL_RCC_OscConfig+0x5ba>
 8004b52:	2302      	movs	r3, #2
 8004b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b5c:	fa93 f3a3 	rbit	r3, r3
 8004b60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b64:	2302      	movs	r3, #2
 8004b66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <HAL_RCC_OscConfig+0x650>)
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004b80:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b84:	fa92 f2a2 	rbit	r2, r2
 8004b88:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004b8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004b90:	fab2 f282 	clz	r2, r2
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	f042 0220 	orr.w	r2, r2, #32
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	f002 021f 	and.w	r2, r2, #31
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1af      	bne.n	8004b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bac:	1d3b      	adds	r3, r7, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80da 	beq.w	8004d70 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d069      	beq.n	8004c9a <HAL_RCC_OscConfig+0x6da>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bdc:	fab3 f383 	clz	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x654>)
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	461a      	mov	r2, r3
 8004bec:	2301      	movs	r3, #1
 8004bee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fe ff42 	bl	8003a78 <HAL_GetTick>
 8004bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf8:	e00e      	b.n	8004c18 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bfa:	f7fe ff3d 	bl	8003a78 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d906      	bls.n	8004c18 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e3d9      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	10908120 	.word	0x10908120
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004c2e:	2202      	movs	r2, #2
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	fa93 f2a3 	rbit	r2, r3
 8004c3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004c46:	2202      	movs	r2, #2
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	fa93 f2a3 	rbit	r2, r3
 8004c54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004c58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5a:	4ba5      	ldr	r3, [pc, #660]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c62:	2102      	movs	r1, #2
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	fa93 f1a3 	rbit	r1, r3
 8004c70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c74:	6019      	str	r1, [r3, #0]
  return result;
 8004c76:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	fab3 f383 	clz	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0b0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x63a>
 8004c98:	e06a      	b.n	8004d70 <HAL_RCC_OscConfig+0x7b0>
 8004c9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	fa93 f2a3 	rbit	r2, r3
 8004cac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cb0:	601a      	str	r2, [r3, #0]
  return result;
 8004cb2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cb6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ef4 <HAL_RCC_OscConfig+0x934>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fe fed4 	bl	8003a78 <HAL_GetTick>
 8004cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	e009      	b.n	8004cea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fe fecf 	bl	8003a78 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e36b      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004cea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004cee:	2202      	movs	r2, #2
 8004cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	fa93 f2a3 	rbit	r2, r3
 8004cfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d06:	2202      	movs	r2, #2
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	fa93 f2a3 	rbit	r2, r3
 8004d14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d1e:	2202      	movs	r2, #2
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d32:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	fa93 f1a3 	rbit	r1, r3
 8004d48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004d4c:	6019      	str	r1, [r3, #0]
  return result;
 8004d4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1b2      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8158 	beq.w	8005030 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b5a      	ldr	r3, [pc, #360]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4a56      	ldr	r2, [pc, #344]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	61d3      	str	r3, [r2, #28]
 8004d9e:	4b54      	ldr	r3, [pc, #336]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <HAL_RCC_OscConfig+0x938>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11a      	bne.n	8004dfa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc4:	4b4c      	ldr	r3, [pc, #304]	; (8004ef8 <HAL_RCC_OscConfig+0x938>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a4b      	ldr	r2, [pc, #300]	; (8004ef8 <HAL_RCC_OscConfig+0x938>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd0:	f7fe fe52 	bl	8003a78 <HAL_GetTick>
 8004dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd8:	e009      	b.n	8004dee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dda:	f7fe fe4d 	bl	8003a78 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	; 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e2e9      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dee:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <HAL_RCC_OscConfig+0x938>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0ef      	beq.n	8004dda <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x852>
 8004e04:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4a39      	ldr	r2, [pc, #228]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6213      	str	r3, [r2, #32]
 8004e10:	e02f      	b.n	8004e72 <HAL_RCC_OscConfig+0x8b2>
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <HAL_RCC_OscConfig+0x876>
 8004e1c:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	6213      	str	r3, [r2, #32]
 8004e28:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e2e:	f023 0304 	bic.w	r3, r3, #4
 8004e32:	6213      	str	r3, [r2, #32]
 8004e34:	e01d      	b.n	8004e72 <HAL_RCC_OscConfig+0x8b2>
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d10c      	bne.n	8004e5a <HAL_RCC_OscConfig+0x89a>
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	6213      	str	r3, [r2, #32]
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	e00b      	b.n	8004e72 <HAL_RCC_OscConfig+0x8b2>
 8004e5a:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d06b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7c:	f7fe fdfc 	bl	8003a78 <HAL_GetTick>
 8004e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e84:	e00b      	b.n	8004e9e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fe fdf7 	bl	8003a78 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e291      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004e9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	fa93 f2a3 	rbit	r2, r3
 8004eb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004eba:	2202      	movs	r2, #2
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	fa93 f2a3 	rbit	r2, r3
 8004ec8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ecc:	601a      	str	r2, [r3, #0]
  return result;
 8004ece:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ed2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d109      	bne.n	8004efc <HAL_RCC_OscConfig+0x93c>
 8004ee8:	4b01      	ldr	r3, [pc, #4]	; (8004ef0 <HAL_RCC_OscConfig+0x930>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	e014      	b.n	8004f18 <HAL_RCC_OscConfig+0x958>
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	10908120 	.word	0x10908120
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f00:	2202      	movs	r2, #2
 8004f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	4bbb      	ldr	r3, [pc, #748]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	6011      	str	r1, [r2, #0]
 8004f20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	fa92 f1a2 	rbit	r1, r2
 8004f2a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004f2e:	6011      	str	r1, [r2, #0]
  return result;
 8004f30:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	fab2 f282 	clz	r2, r2
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	f002 021f 	and.w	r2, r2, #31
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d099      	beq.n	8004e86 <HAL_RCC_OscConfig+0x8c6>
 8004f52:	e063      	b.n	800501c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7fe fd90 	bl	8003a78 <HAL_GetTick>
 8004f58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5c:	e00b      	b.n	8004f76 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fe fd8b 	bl	8003a78 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e225      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 8004f76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f2a3 	rbit	r2, r3
 8004f88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f92:	2202      	movs	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	fa93 f2a3 	rbit	r2, r3
 8004fa0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004fa4:	601a      	str	r2, [r3, #0]
  return result;
 8004fa6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004faa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fac:	fab3 f383 	clz	r3, r3
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f043 0302 	orr.w	r3, r3, #2
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d102      	bne.n	8004fc6 <HAL_RCC_OscConfig+0xa06>
 8004fc0:	4b90      	ldr	r3, [pc, #576]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	e00d      	b.n	8004fe2 <HAL_RCC_OscConfig+0xa22>
 8004fc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fca:	2202      	movs	r2, #2
 8004fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	fa93 f2a3 	rbit	r2, r3
 8004fd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4b89      	ldr	r3, [pc, #548]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	fa92 f1a2 	rbit	r1, r2
 8004ff4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004ff8:	6011      	str	r1, [r2, #0]
  return result;
 8004ffa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	fab2 f282 	clz	r2, r2
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f002 021f 	and.w	r2, r2, #31
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f202 	lsl.w	r2, r1, r2
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1a0      	bne.n	8004f5e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800501c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005024:	4b77      	ldr	r3, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	4a76      	ldr	r2, [pc, #472]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 81c2 	beq.w	80053c0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503c:	4b71      	ldr	r3, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 030c 	and.w	r3, r3, #12
 8005044:	2b08      	cmp	r3, #8
 8005046:	f000 819c 	beq.w	8005382 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b02      	cmp	r3, #2
 8005052:	f040 8114 	bne.w	800527e <HAL_RCC_OscConfig+0xcbe>
 8005056:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800505a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800505e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	fa93 f2a3 	rbit	r2, r3
 800506a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800506e:	601a      	str	r2, [r3, #0]
  return result;
 8005070:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005074:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fe fcf4 	bl	8003a78 <HAL_GetTick>
 8005090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005094:	e009      	b.n	80050aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fe fcef 	bl	8003a78 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e18b      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 80050aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80050ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80050c2:	601a      	str	r2, [r3, #0]
  return result;
 80050c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80050c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <HAL_RCC_OscConfig+0xb24>
 80050de:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	e01b      	b.n	800511c <HAL_RCC_OscConfig+0xb5c>
 80050e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80050e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	fa93 f2a3 	rbit	r2, r3
 80050f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	fa93 f2a3 	rbit	r2, r3
 8005112:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	4b3a      	ldr	r3, [pc, #232]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005120:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005124:	6011      	str	r1, [r2, #0]
 8005126:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	fa92 f1a2 	rbit	r1, r2
 8005130:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005134:	6011      	str	r1, [r2, #0]
  return result;
 8005136:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	fab2 f282 	clz	r2, r2
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	f042 0220 	orr.w	r2, r2, #32
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	f002 021f 	and.w	r2, r2, #31
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f202 	lsl.w	r2, r1, r2
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d19e      	bne.n	8005096 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	430b      	orrs	r3, r1
 800516e:	4925      	ldr	r1, [pc, #148]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
 8005174:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800517c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fa93 f2a3 	rbit	r2, r3
 8005188:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800518c:	601a      	str	r2, [r3, #0]
  return result;
 800518e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005192:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800519e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	461a      	mov	r2, r3
 80051a6:	2301      	movs	r3, #1
 80051a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7fe fc65 	bl	8003a78 <HAL_GetTick>
 80051ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b2:	e009      	b.n	80051c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fc60 	bl	8003a78 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e0fc      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 80051c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fa93 f2a3 	rbit	r2, r3
 80051dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80051e0:	601a      	str	r2, [r3, #0]
  return result;
 80051e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80051e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d105      	bne.n	8005208 <HAL_RCC_OscConfig+0xc48>
 80051fc:	4b01      	ldr	r3, [pc, #4]	; (8005204 <HAL_RCC_OscConfig+0xc44>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	e01e      	b.n	8005240 <HAL_RCC_OscConfig+0xc80>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800520c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fa93 f2a3 	rbit	r2, r3
 800521c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	fa93 f2a3 	rbit	r2, r3
 8005236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	4b63      	ldr	r3, [pc, #396]	; (80053cc <HAL_RCC_OscConfig+0xe0c>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	fa92 f1a2 	rbit	r1, r2
 8005254:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005258:	6011      	str	r1, [r2, #0]
  return result;
 800525a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fab2 f282 	clz	r2, r2
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	f042 0220 	orr.w	r2, r2, #32
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	f002 021f 	and.w	r2, r2, #31
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f202 	lsl.w	r2, r1, r2
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d09b      	beq.n	80051b4 <HAL_RCC_OscConfig+0xbf4>
 800527c:	e0a0      	b.n	80053c0 <HAL_RCC_OscConfig+0xe00>
 800527e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005282:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	fa93 f2a3 	rbit	r2, r3
 8005292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005296:	601a      	str	r2, [r3, #0]
  return result;
 8005298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800529c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	fab3 f383 	clz	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	461a      	mov	r2, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fe fbe0 	bl	8003a78 <HAL_GetTick>
 80052b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052bc:	e009      	b.n	80052d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fe fbdb 	bl	8003a78 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e077      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	fa93 f2a3 	rbit	r2, r3
 80052e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ea:	601a      	str	r2, [r3, #0]
  return result;
 80052ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f2:	fab3 f383 	clz	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d102      	bne.n	800530c <HAL_RCC_OscConfig+0xd4c>
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <HAL_RCC_OscConfig+0xe0c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	e01b      	b.n	8005344 <HAL_RCC_OscConfig+0xd84>
 800530c:	f107 0320 	add.w	r3, r7, #32
 8005310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f107 0320 	add.w	r3, r7, #32
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	fa93 f2a3 	rbit	r2, r3
 8005320:	f107 031c 	add.w	r3, r7, #28
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	f107 0318 	add.w	r3, r7, #24
 800532a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f107 0318 	add.w	r3, r7, #24
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	fa93 f2a3 	rbit	r2, r3
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	4b22      	ldr	r3, [pc, #136]	; (80053cc <HAL_RCC_OscConfig+0xe0c>)
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f107 0210 	add.w	r2, r7, #16
 8005348:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	f107 0210 	add.w	r2, r7, #16
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	fa92 f1a2 	rbit	r1, r2
 8005358:	f107 020c 	add.w	r2, r7, #12
 800535c:	6011      	str	r1, [r2, #0]
  return result;
 800535e:	f107 020c 	add.w	r2, r7, #12
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	fab2 f282 	clz	r2, r2
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	f042 0220 	orr.w	r2, r2, #32
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	f002 021f 	and.w	r2, r2, #31
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f202 	lsl.w	r2, r1, r2
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d19e      	bne.n	80052be <HAL_RCC_OscConfig+0xcfe>
 8005380:	e01e      	b.n	80053c0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e018      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <HAL_RCC_OscConfig+0xe0c>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005398:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800539c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d108      	bne.n	80053bc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000

080053d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b09e      	sub	sp, #120	; 0x78
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e162      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053e8:	4b90      	ldr	r3, [pc, #576]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d910      	bls.n	8005418 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b8d      	ldr	r3, [pc, #564]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 0207 	bic.w	r2, r3, #7
 80053fe:	498b      	ldr	r1, [pc, #556]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b89      	ldr	r3, [pc, #548]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e14a      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005424:	4b82      	ldr	r3, [pc, #520]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	497f      	ldr	r1, [pc, #508]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80dc 	beq.w	80055fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d13c      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xf6>
 800544c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005450:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005454:	fa93 f3a3 	rbit	r3, r3
 8005458:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d102      	bne.n	8005476 <HAL_RCC_ClockConfig+0xa6>
 8005470:	4b6f      	ldr	r3, [pc, #444]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	e00f      	b.n	8005496 <HAL_RCC_ClockConfig+0xc6>
 8005476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800547a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	667b      	str	r3, [r7, #100]	; 0x64
 8005484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005488:	663b      	str	r3, [r7, #96]	; 0x60
 800548a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005492:	4b67      	ldr	r3, [pc, #412]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800549a:	65ba      	str	r2, [r7, #88]	; 0x58
 800549c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800549e:	fa92 f2a2 	rbit	r2, r2
 80054a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054a6:	fab2 f282 	clz	r2, r2
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	f042 0220 	orr.w	r2, r2, #32
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	f002 021f 	and.w	r2, r2, #31
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f202 	lsl.w	r2, r1, r2
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d17b      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0f3      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d13c      	bne.n	8005548 <HAL_RCC_ClockConfig+0x178>
 80054ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d6:	fa93 f3a3 	rbit	r3, r3
 80054da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d102      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x128>
 80054f2:	4b4f      	ldr	r3, [pc, #316]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	e00f      	b.n	8005518 <HAL_RCC_ClockConfig+0x148>
 80054f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	647b      	str	r3, [r7, #68]	; 0x44
 8005506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800551c:	63ba      	str	r2, [r7, #56]	; 0x38
 800551e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005520:	fa92 f2a2 	rbit	r2, r2
 8005524:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005528:	fab2 f282 	clz	r2, r2
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	f042 0220 	orr.w	r2, r2, #32
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	f002 021f 	and.w	r2, r2, #31
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f202 	lsl.w	r2, r1, r2
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d13a      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0b2      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
 8005548:	2302      	movs	r3, #2
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <HAL_RCC_ClockConfig+0x1a0>
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	e00d      	b.n	800558c <HAL_RCC_ClockConfig+0x1bc>
 8005570:	2302      	movs	r3, #2
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	2302      	movs	r3, #2
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	4b29      	ldr	r3, [pc, #164]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2202      	movs	r2, #2
 800558e:	61ba      	str	r2, [r7, #24]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	fa92 f2a2 	rbit	r2, r2
 8005596:	617a      	str	r2, [r7, #20]
  return result;
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	fab2 f282 	clz	r2, r2
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	f042 0220 	orr.w	r2, r2, #32
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	f002 021f 	and.w	r2, r2, #31
 80055aa:	2101      	movs	r1, #1
 80055ac:	fa01 f202 	lsl.w	r2, r1, r2
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e079      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ba:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f023 0203 	bic.w	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	491a      	ldr	r1, [pc, #104]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055cc:	f7fe fa54 	bl	8003a78 <HAL_GetTick>
 80055d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d4:	f7fe fa50 	bl	8003a78 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e061      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_RCC_ClockConfig+0x260>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f003 020c 	and.w	r2, r3, #12
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d1eb      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d214      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 0207 	bic.w	r2, r3, #7
 8005612:	4906      	ldr	r1, [pc, #24]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <HAL_RCC_ClockConfig+0x25c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e040      	b.n	80056ae <HAL_RCC_ClockConfig+0x2de>
 800562c:	40022000 	.word	0x40022000
 8005630:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCC_ClockConfig+0x2e8>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	491a      	ldr	r1, [pc, #104]	; (80056b8 <HAL_RCC_ClockConfig+0x2e8>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565e:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCC_ClockConfig+0x2e8>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4912      	ldr	r1, [pc, #72]	; (80056b8 <HAL_RCC_ClockConfig+0x2e8>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005672:	f000 f829 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005676:	4601      	mov	r1, r0
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <HAL_RCC_ClockConfig+0x2e8>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005680:	22f0      	movs	r2, #240	; 0xf0
 8005682:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	fa92 f2a2 	rbit	r2, r2
 800568a:	60fa      	str	r2, [r7, #12]
  return result;
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	fab2 f282 	clz	r2, r2
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	40d3      	lsrs	r3, r2
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <HAL_RCC_ClockConfig+0x2ec>)
 8005698:	5cd3      	ldrb	r3, [r2, r3]
 800569a:	fa21 f303 	lsr.w	r3, r1, r3
 800569e:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <HAL_RCC_ClockConfig+0x2f0>)
 80056a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <HAL_RCC_ClockConfig+0x2f4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe f9a2 	bl	80039f0 <HAL_InitTick>
  
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3778      	adds	r7, #120	; 0x78
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	08008ee8 	.word	0x08008ee8
 80056c0:	20000034 	.word	0x20000034
 80056c4:	20000038 	.word	0x20000038

080056c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b08b      	sub	sp, #44	; 0x2c
 80056cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d002      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x30>
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d003      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x36>
 80056f6:	e03c      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCC_GetSysClockFreq+0xc4>)
 80056fa:	623b      	str	r3, [r7, #32]
      break;
 80056fc:	e03c      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005704:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005708:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	fa92 f2a2 	rbit	r2, r2
 8005710:	607a      	str	r2, [r7, #4]
  return result;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	fab2 f282 	clz	r2, r2
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	40d3      	lsrs	r3, r2
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HAL_RCC_GetSysClockFreq+0xc8>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005722:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	220f      	movs	r2, #15
 800572c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	fa92 f2a2 	rbit	r2, r2
 8005734:	60fa      	str	r2, [r7, #12]
  return result;
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	fab2 f282 	clz	r2, r2
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	40d3      	lsrs	r3, r2
 8005740:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005742:	5cd3      	ldrb	r3, [r2, r3]
 8005744:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005750:	4a0e      	ldr	r2, [pc, #56]	; (800578c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	fbb2 f2f3 	udiv	r2, r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
 8005760:	e004      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	623b      	str	r3, [r7, #32]
      break;
 8005770:	e002      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005774:	623b      	str	r3, [r7, #32]
      break;
 8005776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005778:	6a3b      	ldr	r3, [r7, #32]
}
 800577a:	4618      	mov	r0, r3
 800577c:	372c      	adds	r7, #44	; 0x2c
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	007a1200 	.word	0x007a1200
 8005790:	08008f00 	.word	0x08008f00
 8005794:	08008f10 	.word	0x08008f10
 8005798:	003d0900 	.word	0x003d0900

0800579c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000034 	.word	0x20000034

080057b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057ba:	f7ff ffef 	bl	800579c <HAL_RCC_GetHCLKFreq>
 80057be:	4601      	mov	r1, r0
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	fa92 f2a2 	rbit	r2, r2
 80057d4:	603a      	str	r2, [r7, #0]
  return result;
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	fab2 f282 	clz	r2, r2
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	40d3      	lsrs	r3, r2
 80057e0:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80057e2:	5cd3      	ldrb	r3, [r2, r3]
 80057e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	08008ef8 	.word	0x08008ef8

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80057fe:	f7ff ffcd 	bl	800579c <HAL_RCC_GetHCLKFreq>
 8005802:	4601      	mov	r1, r0
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800580c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	fa92 f2a2 	rbit	r2, r2
 8005818:	603a      	str	r2, [r7, #0]
  return result;
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	fab2 f282 	clz	r2, r2
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	40d3      	lsrs	r3, r2
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005826:	5cd3      	ldrb	r3, [r2, r3]
 8005828:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	08008ef8 	.word	0x08008ef8

0800583c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b092      	sub	sp, #72	; 0x48
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80d4 	beq.w	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005860:	4b4e      	ldr	r3, [pc, #312]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10e      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586c:	4b4b      	ldr	r3, [pc, #300]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4a4a      	ldr	r2, [pc, #296]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	61d3      	str	r3, [r2, #28]
 8005878:	4b48      	ldr	r3, [pc, #288]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005884:	2301      	movs	r3, #1
 8005886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d118      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a41      	ldr	r2, [pc, #260]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fe f8e9 	bl	8003a78 <HAL_GetTick>
 80058a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fe f8e5 	bl	8003a78 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b64      	cmp	r3, #100	; 0x64
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e169      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8084 	beq.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d07c      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e8:	4b2c      	ldr	r3, [pc, #176]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	fa93 f3a3 	rbit	r3, r3
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	461a      	mov	r2, r3
 8005912:	2301      	movs	r3, #1
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	fa93 f3a3 	rbit	r3, r3
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	461a      	mov	r2, r3
 8005936:	2300      	movs	r3, #0
 8005938:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594a:	f7fe f895 	bl	8003a78 <HAL_GetTick>
 800594e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fe f891 	bl	8003a78 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e113      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005968:	2302      	movs	r3, #2
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	fa93 f3a3 	rbit	r3, r3
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	2302      	movs	r3, #2
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	61fb      	str	r3, [r7, #28]
  return result;
 8005980:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d108      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005996:	4b01      	ldr	r3, [pc, #4]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	e00d      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800599c:	40021000 	.word	0x40021000
 80059a0:	40007000 	.word	0x40007000
 80059a4:	10908100 	.word	0x10908100
 80059a8:	2302      	movs	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	4b78      	ldr	r3, [pc, #480]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2202      	movs	r2, #2
 80059ba:	613a      	str	r2, [r7, #16]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	fa92 f2a2 	rbit	r2, r2
 80059c2:	60fa      	str	r2, [r7, #12]
  return result;
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	fab2 f282 	clz	r2, r2
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	f002 021f 	and.w	r2, r2, #31
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f202 	lsl.w	r2, r1, r2
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0b7      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059e2:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	496a      	ldr	r1, [pc, #424]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fc:	4b66      	ldr	r3, [pc, #408]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4a65      	ldr	r2, [pc, #404]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a14:	4b60      	ldr	r3, [pc, #384]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	f023 0203 	bic.w	r2, r3, #3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	495d      	ldr	r1, [pc, #372]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a32:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4956      	ldr	r1, [pc, #344]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a50:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	494e      	ldr	r1, [pc, #312]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f023 0210 	bic.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4947      	ldr	r1, [pc, #284]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a8c:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	493f      	ldr	r1, [pc, #252]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f023 0220 	bic.w	r2, r3, #32
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	4938      	ldr	r1, [pc, #224]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ac8:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	4930      	ldr	r1, [pc, #192]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	4929      	ldr	r1, [pc, #164]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4921      	ldr	r1, [pc, #132]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	491a      	ldr	r1, [pc, #104]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	4912      	ldr	r1, [pc, #72]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	490b      	ldr	r1, [pc, #44]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3748      	adds	r7, #72	; 0x48
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40021000 	.word	0x40021000

08005b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e09d      	b.n	8005cea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bbe:	d009      	beq.n	8005bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	61da      	str	r2, [r3, #28]
 8005bc6:	e005      	b.n	8005bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb ff66 	bl	8001ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c14:	d902      	bls.n	8005c1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e002      	b.n	8005c22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Init+0xa0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	ea42 0103 	orr.w	r1, r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	f003 0204 	and.w	r2, r3, #4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cb8:	ea42 0103 	orr.w	r1, r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e049      	b.n	8005d98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fb ff13 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 fab9 	bl	80062a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e04a      	b.n	8005e4e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <HAL_TIM_Base_Start_IT+0xbc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1d      	ldr	r2, [pc, #116]	; (8005e60 <HAL_TIM_Base_Start_IT+0xc0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a19      	ldr	r2, [pc, #100]	; (8005e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d115      	bne.n	8005e38 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d015      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xaa>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d011      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e000      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	00010007 	.word	0x00010007

08005e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d122      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d11b      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9d8 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9ca 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9db 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d122      	bne.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d11b      	bne.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0204 	mvn.w	r2, #4
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9ae 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9a0 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9b1 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0208 	mvn.w	r2, #8
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f984 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f976 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f987 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0210 	mvn.w	r2, #16
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f95a 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f94c 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f95d 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0201 	mvn.w	r2, #1
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f926 	bl	8006244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 faf6 	bl	8006610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006032:	d10e      	bne.n	8006052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d107      	bne.n	8006052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fae9 	bl	8006624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d10e      	bne.n	800607e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f90b 	bl	8006294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b20      	cmp	r3, #32
 800608a:	d10e      	bne.n	80060aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b20      	cmp	r3, #32
 8006098:	d107      	bne.n	80060aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0220 	mvn.w	r2, #32
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 faa9 	bl	80065fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_ConfigClockSource+0x1c>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0b6      	b.n	800623c <HAL_TIM_ConfigClockSource+0x18a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	d03e      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xd8>
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	f200 8087 	bhi.w	8006222 <HAL_TIM_ConfigClockSource+0x170>
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	f000 8086 	beq.w	8006228 <HAL_TIM_ConfigClockSource+0x176>
 800611c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006120:	d87f      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 8006122:	2b70      	cmp	r3, #112	; 0x70
 8006124:	d01a      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xaa>
 8006126:	2b70      	cmp	r3, #112	; 0x70
 8006128:	d87b      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 800612a:	2b60      	cmp	r3, #96	; 0x60
 800612c:	d050      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x11e>
 800612e:	2b60      	cmp	r3, #96	; 0x60
 8006130:	d877      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 8006132:	2b50      	cmp	r3, #80	; 0x50
 8006134:	d03c      	beq.n	80061b0 <HAL_TIM_ConfigClockSource+0xfe>
 8006136:	2b50      	cmp	r3, #80	; 0x50
 8006138:	d873      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d058      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x13e>
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d86f      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 8006142:	2b30      	cmp	r3, #48	; 0x30
 8006144:	d064      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x15e>
 8006146:	2b30      	cmp	r3, #48	; 0x30
 8006148:	d86b      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 800614a:	2b20      	cmp	r3, #32
 800614c:	d060      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x15e>
 800614e:	2b20      	cmp	r3, #32
 8006150:	d867      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d05c      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x15e>
 8006156:	2b10      	cmp	r3, #16
 8006158:	d05a      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x15e>
 800615a:	e062      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f000 f9a6 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800617e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e04f      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6899      	ldr	r1, [r3, #8]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f000 f98f 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ac:	609a      	str	r2, [r3, #8]
      break;
 80061ae:	e03c      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	461a      	mov	r2, r3
 80061be:	f000 f903 	bl	80063c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2150      	movs	r1, #80	; 0x50
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f95c 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 80061ce:	e02c      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6859      	ldr	r1, [r3, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	461a      	mov	r2, r3
 80061de:	f000 f922 	bl	8006426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2160      	movs	r1, #96	; 0x60
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f94c 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 80061ee:	e01c      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f000 f8e3 	bl	80063c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2140      	movs	r1, #64	; 0x40
 8006208:	4618      	mov	r0, r3
 800620a:	f000 f93c 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 800620e:	e00c      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f000 f933 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8006220:	e003      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
      break;
 8006226:	e000      	b.n	800622a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006228:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3c      	ldr	r2, [pc, #240]	; (80063ac <TIM_Base_SetConfig+0x104>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00f      	beq.n	80062e0 <TIM_Base_SetConfig+0x38>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c6:	d00b      	beq.n	80062e0 <TIM_Base_SetConfig+0x38>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a39      	ldr	r2, [pc, #228]	; (80063b0 <TIM_Base_SetConfig+0x108>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d007      	beq.n	80062e0 <TIM_Base_SetConfig+0x38>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a38      	ldr	r2, [pc, #224]	; (80063b4 <TIM_Base_SetConfig+0x10c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0x38>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <TIM_Base_SetConfig+0x110>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <TIM_Base_SetConfig+0x104>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01b      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d017      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <TIM_Base_SetConfig+0x108>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a29      	ldr	r2, [pc, #164]	; (80063b4 <TIM_Base_SetConfig+0x10c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <TIM_Base_SetConfig+0x110>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a27      	ldr	r2, [pc, #156]	; (80063bc <TIM_Base_SetConfig+0x114>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <TIM_Base_SetConfig+0x118>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0x8a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <TIM_Base_SetConfig+0x11c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a10      	ldr	r2, [pc, #64]	; (80063ac <TIM_Base_SetConfig+0x104>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00f      	beq.n	8006390 <TIM_Base_SetConfig+0xe8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <TIM_Base_SetConfig+0x110>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00b      	beq.n	8006390 <TIM_Base_SetConfig+0xe8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a10      	ldr	r2, [pc, #64]	; (80063bc <TIM_Base_SetConfig+0x114>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <TIM_Base_SetConfig+0xe8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <TIM_Base_SetConfig+0x118>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_Base_SetConfig+0xe8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <TIM_Base_SetConfig+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d103      	bne.n	8006398 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	615a      	str	r2, [r3, #20]
}
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800

080063c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 030a 	bic.w	r3, r3, #10
 8006404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0210 	bic.w	r2, r3, #16
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	031b      	lsls	r3, r3, #12
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	431a      	orrs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e063      	b.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d108      	bne.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800654e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006586:	d013      	beq.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10c      	bne.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40014000 	.word	0x40014000

080065fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e040      	b.n	80066cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fb fab2 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2224      	movs	r2, #36	; 0x24
 8006664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fbbe 	bl	8006df8 <UART_SetConfig>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e022      	b.n	80066cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fd86 	bl	80071a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fe0d 	bl	80072e4 <UART_CheckIdleState>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	f040 8082 	bne.w	80067f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HAL_UART_Transmit+0x26>
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e07a      	b.n	80067f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_UART_Transmit+0x38>
 8006708:	2302      	movs	r3, #2
 800670a:	e073      	b.n	80067f4 <HAL_UART_Transmit+0x120>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2221      	movs	r2, #33	; 0x21
 8006720:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006722:	f7fd f9a9 	bl	8003a78 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006740:	d108      	bne.n	8006754 <HAL_UART_Transmit+0x80>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e003      	b.n	800675c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006764:	e02d      	b.n	80067c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fe00 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e039      	b.n	80067f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	881a      	ldrh	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006792:	b292      	uxth	r2, r2
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3302      	adds	r3, #2
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e008      	b.n	80067b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	b292      	uxth	r2, r2
 80067a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1cb      	bne.n	8006766 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2140      	movs	r1, #64	; 0x40
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fdcc 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e005      	b.n	80067f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b0ba      	sub	sp, #232	; 0xe8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006826:	f640 030f 	movw	r3, #2063	; 0x80f
 800682a:	4013      	ands	r3, r2
 800682c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d115      	bne.n	8006864 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 82a3 	beq.w	8006da0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
      }
      return;
 8006862:	e29d      	b.n	8006da0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8117 	beq.w	8006a9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800686e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800687a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800687e:	4b85      	ldr	r3, [pc, #532]	; (8006a94 <HAL_UART_IRQHandler+0x298>)
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 810a 	beq.w	8006a9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <HAL_UART_IRQHandler+0xbc>
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2201      	movs	r2, #1
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d011      	beq.n	80068e8 <HAL_UART_IRQHandler+0xec>
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2202      	movs	r2, #2
 80068d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068de:	f043 0204 	orr.w	r2, r3, #4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d011      	beq.n	8006918 <HAL_UART_IRQHandler+0x11c>
 80068f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2204      	movs	r2, #4
 8006906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690e:	f043 0202 	orr.w	r2, r3, #2
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d017      	beq.n	8006954 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006934:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2208      	movs	r2, #8
 8006942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694a:	f043 0208 	orr.w	r2, r3, #8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <HAL_UART_IRQHandler+0x18a>
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8209 	beq.w	8006da4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800699e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d04f      	beq.n	8006a7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fd8d 	bl	80074fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d141      	bne.n	8006a76 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d9      	bne.n	80069f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <HAL_UART_IRQHandler+0x29c>)
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd f98a 	bl	8003d6c <HAL_DMA_Abort_IT>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e00f      	b.n	8006a8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f9ac 	bl	8006dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	e00b      	b.n	8006a8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9a8 	bl	8006dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	e007      	b.n	8006a8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9a4 	bl	8006dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a8c:	e18a      	b.n	8006da4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8e:	bf00      	nop
    return;
 8006a90:	e188      	b.n	8006da4 <HAL_UART_IRQHandler+0x5a8>
 8006a92:	bf00      	nop
 8006a94:	04000120 	.word	0x04000120
 8006a98:	080075c5 	.word	0x080075c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	f040 8143 	bne.w	8006d2c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 813c 	beq.w	8006d2c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8135 	beq.w	8006d2c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	f040 80b1 	bne.w	8006c3c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 815c 	beq.w	8006da8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006afa:	429a      	cmp	r2, r3
 8006afc:	f080 8154 	bcs.w	8006da8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	f000 8085 	beq.w	8006c20 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1da      	bne.n	8006b16 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b72:	f023 0301 	bic.w	r3, r3, #1
 8006b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e1      	bne.n	8006b60 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e3      	bne.n	8006b9c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf0:	f023 0310 	bic.w	r3, r3, #16
 8006bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e4      	bne.n	8006be0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fd f86d 	bl	8003cfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8d3 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c3a:	e0b5      	b.n	8006da8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80a7 	beq.w	8006dac <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80a2 	beq.w	8006dac <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e4      	bne.n	8006c68 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	623b      	str	r3, [r7, #32]
   return(result);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	69b9      	ldr	r1, [r7, #24]
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	617b      	str	r3, [r7, #20]
   return(result);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e4      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f85b 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d2a:	e03f      	b.n	8006dac <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <HAL_UART_IRQHandler+0x55a>
 8006d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc78 	bl	8007644 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d54:	e02d      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01c      	beq.n	8006db0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
    }
    return;
 8006d7e:	e017      	b.n	8006db0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d012      	beq.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc29 	bl	80075f0 <UART_EndTransmit_IT>
    return;
 8006d9e:	e008      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006da0:	bf00      	nop
 8006da2:	e006      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006da4:	bf00      	nop
 8006da6:	e004      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006da8:	bf00      	nop
 8006daa:	e002      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006db0:	bf00      	nop
  }

}
 8006db2:	37e8      	adds	r7, #232	; 0xe8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e26:	f023 030c 	bic.w	r3, r3, #12
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4aae      	ldr	r2, [pc, #696]	; (800712c <UART_SetConfig+0x334>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d120      	bne.n	8006eba <UART_SetConfig+0xc2>
 8006e78:	4bad      	ldr	r3, [pc, #692]	; (8007130 <UART_SetConfig+0x338>)
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d817      	bhi.n	8006eb4 <UART_SetConfig+0xbc>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <UART_SetConfig+0x94>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ea9 	.word	0x08006ea9
 8006e94:	08006eaf 	.word	0x08006eaf
 8006e98:	08006ea3 	.word	0x08006ea3
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e0b5      	b.n	800700e <UART_SetConfig+0x216>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0b2      	b.n	800700e <UART_SetConfig+0x216>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e0af      	b.n	800700e <UART_SetConfig+0x216>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e0ac      	b.n	800700e <UART_SetConfig+0x216>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e0a9      	b.n	800700e <UART_SetConfig+0x216>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a9d      	ldr	r2, [pc, #628]	; (8007134 <UART_SetConfig+0x33c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d124      	bne.n	8006f0e <UART_SetConfig+0x116>
 8006ec4:	4b9a      	ldr	r3, [pc, #616]	; (8007130 <UART_SetConfig+0x338>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ecc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ed0:	d011      	beq.n	8006ef6 <UART_SetConfig+0xfe>
 8006ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ed6:	d817      	bhi.n	8006f08 <UART_SetConfig+0x110>
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006edc:	d011      	beq.n	8006f02 <UART_SetConfig+0x10a>
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee2:	d811      	bhi.n	8006f08 <UART_SetConfig+0x110>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <UART_SetConfig+0xf8>
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d006      	beq.n	8006efc <UART_SetConfig+0x104>
 8006eee:	e00b      	b.n	8006f08 <UART_SetConfig+0x110>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e08b      	b.n	800700e <UART_SetConfig+0x216>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e088      	b.n	800700e <UART_SetConfig+0x216>
 8006efc:	2304      	movs	r3, #4
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e085      	b.n	800700e <UART_SetConfig+0x216>
 8006f02:	2308      	movs	r3, #8
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e082      	b.n	800700e <UART_SetConfig+0x216>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e07f      	b.n	800700e <UART_SetConfig+0x216>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a89      	ldr	r2, [pc, #548]	; (8007138 <UART_SetConfig+0x340>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d124      	bne.n	8006f62 <UART_SetConfig+0x16a>
 8006f18:	4b85      	ldr	r3, [pc, #532]	; (8007130 <UART_SetConfig+0x338>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f24:	d011      	beq.n	8006f4a <UART_SetConfig+0x152>
 8006f26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f2a:	d817      	bhi.n	8006f5c <UART_SetConfig+0x164>
 8006f2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f30:	d011      	beq.n	8006f56 <UART_SetConfig+0x15e>
 8006f32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f36:	d811      	bhi.n	8006f5c <UART_SetConfig+0x164>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <UART_SetConfig+0x14c>
 8006f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f40:	d006      	beq.n	8006f50 <UART_SetConfig+0x158>
 8006f42:	e00b      	b.n	8006f5c <UART_SetConfig+0x164>
 8006f44:	2300      	movs	r3, #0
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e061      	b.n	800700e <UART_SetConfig+0x216>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e05e      	b.n	800700e <UART_SetConfig+0x216>
 8006f50:	2304      	movs	r3, #4
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e05b      	b.n	800700e <UART_SetConfig+0x216>
 8006f56:	2308      	movs	r3, #8
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e058      	b.n	800700e <UART_SetConfig+0x216>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e055      	b.n	800700e <UART_SetConfig+0x216>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a75      	ldr	r2, [pc, #468]	; (800713c <UART_SetConfig+0x344>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d124      	bne.n	8006fb6 <UART_SetConfig+0x1be>
 8006f6c:	4b70      	ldr	r3, [pc, #448]	; (8007130 <UART_SetConfig+0x338>)
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f78:	d011      	beq.n	8006f9e <UART_SetConfig+0x1a6>
 8006f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f7e:	d817      	bhi.n	8006fb0 <UART_SetConfig+0x1b8>
 8006f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f84:	d011      	beq.n	8006faa <UART_SetConfig+0x1b2>
 8006f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8a:	d811      	bhi.n	8006fb0 <UART_SetConfig+0x1b8>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <UART_SetConfig+0x1a0>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d006      	beq.n	8006fa4 <UART_SetConfig+0x1ac>
 8006f96:	e00b      	b.n	8006fb0 <UART_SetConfig+0x1b8>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e037      	b.n	800700e <UART_SetConfig+0x216>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e034      	b.n	800700e <UART_SetConfig+0x216>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e031      	b.n	800700e <UART_SetConfig+0x216>
 8006faa:	2308      	movs	r3, #8
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e02e      	b.n	800700e <UART_SetConfig+0x216>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e02b      	b.n	800700e <UART_SetConfig+0x216>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a61      	ldr	r2, [pc, #388]	; (8007140 <UART_SetConfig+0x348>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d124      	bne.n	800700a <UART_SetConfig+0x212>
 8006fc0:	4b5b      	ldr	r3, [pc, #364]	; (8007130 <UART_SetConfig+0x338>)
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fcc:	d011      	beq.n	8006ff2 <UART_SetConfig+0x1fa>
 8006fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fd2:	d817      	bhi.n	8007004 <UART_SetConfig+0x20c>
 8006fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fd8:	d011      	beq.n	8006ffe <UART_SetConfig+0x206>
 8006fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fde:	d811      	bhi.n	8007004 <UART_SetConfig+0x20c>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <UART_SetConfig+0x1f4>
 8006fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe8:	d006      	beq.n	8006ff8 <UART_SetConfig+0x200>
 8006fea:	e00b      	b.n	8007004 <UART_SetConfig+0x20c>
 8006fec:	2300      	movs	r3, #0
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	e00d      	b.n	800700e <UART_SetConfig+0x216>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e00a      	b.n	800700e <UART_SetConfig+0x216>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e007      	b.n	800700e <UART_SetConfig+0x216>
 8006ffe:	2308      	movs	r3, #8
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e004      	b.n	800700e <UART_SetConfig+0x216>
 8007004:	2310      	movs	r3, #16
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e001      	b.n	800700e <UART_SetConfig+0x216>
 800700a:	2310      	movs	r3, #16
 800700c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007016:	d15c      	bne.n	80070d2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007018:	7ffb      	ldrb	r3, [r7, #31]
 800701a:	2b08      	cmp	r3, #8
 800701c:	d827      	bhi.n	800706e <UART_SetConfig+0x276>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x22c>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	0800706f 	.word	0x0800706f
 8007034:	0800705f 	.word	0x0800705f
 8007038:	0800706f 	.word	0x0800706f
 800703c:	0800706f 	.word	0x0800706f
 8007040:	0800706f 	.word	0x0800706f
 8007044:	08007067 	.word	0x08007067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fe fbb4 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 800704c:	61b8      	str	r0, [r7, #24]
        break;
 800704e:	e013      	b.n	8007078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fe fbd2 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007054:	61b8      	str	r0, [r7, #24]
        break;
 8007056:	e00f      	b.n	8007078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007058:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <UART_SetConfig+0x34c>)
 800705a:	61bb      	str	r3, [r7, #24]
        break;
 800705c:	e00c      	b.n	8007078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705e:	f7fe fb33 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8007062:	61b8      	str	r0, [r7, #24]
        break;
 8007064:	e008      	b.n	8007078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706a:	61bb      	str	r3, [r7, #24]
        break;
 800706c:	e004      	b.n	8007078 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	77bb      	strb	r3, [r7, #30]
        break;
 8007076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8085 	beq.w	800718a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	005a      	lsls	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	d916      	bls.n	80070cc <UART_SetConfig+0x2d4>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a4:	d212      	bcs.n	80070cc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f023 030f 	bic.w	r3, r3, #15
 80070ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	89fb      	ldrh	r3, [r7, #14]
 80070be:	4313      	orrs	r3, r2
 80070c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	89fa      	ldrh	r2, [r7, #14]
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	e05e      	b.n	800718a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	77bb      	strb	r3, [r7, #30]
 80070d0:	e05b      	b.n	800718a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070d2:	7ffb      	ldrb	r3, [r7, #31]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d837      	bhi.n	8007148 <UART_SetConfig+0x350>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <UART_SetConfig+0x2e8>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007105 	.word	0x08007105
 80070e4:	0800710d 	.word	0x0800710d
 80070e8:	08007115 	.word	0x08007115
 80070ec:	08007149 	.word	0x08007149
 80070f0:	0800711b 	.word	0x0800711b
 80070f4:	08007149 	.word	0x08007149
 80070f8:	08007149 	.word	0x08007149
 80070fc:	08007149 	.word	0x08007149
 8007100:	08007123 	.word	0x08007123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007104:	f7fe fb56 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8007108:	61b8      	str	r0, [r7, #24]
        break;
 800710a:	e022      	b.n	8007152 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800710c:	f7fe fb74 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007110:	61b8      	str	r0, [r7, #24]
        break;
 8007112:	e01e      	b.n	8007152 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <UART_SetConfig+0x34c>)
 8007116:	61bb      	str	r3, [r7, #24]
        break;
 8007118:	e01b      	b.n	8007152 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800711a:	f7fe fad5 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 800711e:	61b8      	str	r0, [r7, #24]
        break;
 8007120:	e017      	b.n	8007152 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007126:	61bb      	str	r3, [r7, #24]
        break;
 8007128:	e013      	b.n	8007152 <UART_SetConfig+0x35a>
 800712a:	bf00      	nop
 800712c:	40013800 	.word	0x40013800
 8007130:	40021000 	.word	0x40021000
 8007134:	40004400 	.word	0x40004400
 8007138:	40004800 	.word	0x40004800
 800713c:	40004c00 	.word	0x40004c00
 8007140:	40005000 	.word	0x40005000
 8007144:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	77bb      	strb	r3, [r7, #30]
        break;
 8007150:	bf00      	nop
    }

    if (pclk != 0U)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d018      	beq.n	800718a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	085a      	lsrs	r2, r3, #1
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b0f      	cmp	r3, #15
 8007172:	d908      	bls.n	8007186 <UART_SetConfig+0x38e>
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717a:	d204      	bcs.n	8007186 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	60da      	str	r2, [r3, #12]
 8007184:	e001      	b.n	800718a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007196:	7fbb      	ldrb	r3, [r7, #30]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01a      	beq.n	80072b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800729e:	d10a      	bne.n	80072b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	605a      	str	r2, [r3, #4]
  }
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f4:	f7fc fbc0 	bl	8003a78 <HAL_GetTick>
 80072f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d10e      	bne.n	8007326 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f82d 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e023      	b.n	800736e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d10e      	bne.n	8007352 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f817 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e00d      	b.n	800736e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b09c      	sub	sp, #112	; 0x70
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007386:	e0a5      	b.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738e:	f000 80a1 	beq.w	80074d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fc fb71 	bl	8003a78 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80073a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d13e      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073bc:	667b      	str	r3, [r7, #100]	; 0x64
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	663b      	str	r3, [r7, #96]	; 0x60
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80073fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e067      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d04f      	beq.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007442:	d147      	bne.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800744c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
 800746e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	66bb      	str	r3, [r7, #104]	; 0x68
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e010      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69da      	ldr	r2, [r3, #28]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	f43f af4a 	beq.w	8007388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3770      	adds	r7, #112	; 0x70
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074fe:	b480      	push	{r7}
 8007500:	b095      	sub	sp, #84	; 0x54
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
 8007526:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800752a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	61fb      	str	r3, [r7, #28]
   return(result);
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e5      	bne.n	8007538 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007570:	2b01      	cmp	r3, #1
 8007572:	d118      	bne.n	80075a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	60bb      	str	r3, [r7, #8]
   return(result);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	647b      	str	r3, [r7, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	613b      	str	r3, [r7, #16]
   return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80075b8:	bf00      	nop
 80075ba:	3754      	adds	r7, #84	; 0x54
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fbf2 	bl	8006dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	60bb      	str	r3, [r7, #8]
   return(result);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6979      	ldr	r1, [r7, #20]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	613b      	str	r3, [r7, #16]
   return(result);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fbbe 	bl	8006db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007660:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007664:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	b29b      	uxth	r3, r3
 8007672:	43db      	mvns	r3, r3
 8007674:	b29b      	uxth	r3, r3
 8007676:	4013      	ands	r3, r2
 8007678:	b29a      	uxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800768e:	b084      	sub	sp, #16
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	f107 0014 	add.w	r0, r7, #20
 800769c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	b004      	add	sp, #16
 80076ce:	4770      	bx	lr

080076d0 <__errno>:
 80076d0:	4b01      	ldr	r3, [pc, #4]	; (80076d8 <__errno+0x8>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20000040 	.word	0x20000040

080076dc <__libc_init_array>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4d0d      	ldr	r5, [pc, #52]	; (8007714 <__libc_init_array+0x38>)
 80076e0:	4c0d      	ldr	r4, [pc, #52]	; (8007718 <__libc_init_array+0x3c>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	2600      	movs	r6, #0
 80076e8:	42a6      	cmp	r6, r4
 80076ea:	d109      	bne.n	8007700 <__libc_init_array+0x24>
 80076ec:	4d0b      	ldr	r5, [pc, #44]	; (800771c <__libc_init_array+0x40>)
 80076ee:	4c0c      	ldr	r4, [pc, #48]	; (8007720 <__libc_init_array+0x44>)
 80076f0:	f001 fb3e 	bl	8008d70 <_init>
 80076f4:	1b64      	subs	r4, r4, r5
 80076f6:	10a4      	asrs	r4, r4, #2
 80076f8:	2600      	movs	r6, #0
 80076fa:	42a6      	cmp	r6, r4
 80076fc:	d105      	bne.n	800770a <__libc_init_array+0x2e>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	f855 3b04 	ldr.w	r3, [r5], #4
 8007704:	4798      	blx	r3
 8007706:	3601      	adds	r6, #1
 8007708:	e7ee      	b.n	80076e8 <__libc_init_array+0xc>
 800770a:	f855 3b04 	ldr.w	r3, [r5], #4
 800770e:	4798      	blx	r3
 8007710:	3601      	adds	r6, #1
 8007712:	e7f2      	b.n	80076fa <__libc_init_array+0x1e>
 8007714:	0800906c 	.word	0x0800906c
 8007718:	0800906c 	.word	0x0800906c
 800771c:	0800906c 	.word	0x0800906c
 8007720:	08009070 	.word	0x08009070

08007724 <memset>:
 8007724:	4402      	add	r2, r0
 8007726:	4603      	mov	r3, r0
 8007728:	4293      	cmp	r3, r2
 800772a:	d100      	bne.n	800772e <memset+0xa>
 800772c:	4770      	bx	lr
 800772e:	f803 1b01 	strb.w	r1, [r3], #1
 8007732:	e7f9      	b.n	8007728 <memset+0x4>

08007734 <srand>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <srand+0x44>)
 8007738:	681d      	ldr	r5, [r3, #0]
 800773a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800773c:	4604      	mov	r4, r0
 800773e:	b9b3      	cbnz	r3, 800776e <srand+0x3a>
 8007740:	2018      	movs	r0, #24
 8007742:	f000 f8e1 	bl	8007908 <malloc>
 8007746:	4602      	mov	r2, r0
 8007748:	63a8      	str	r0, [r5, #56]	; 0x38
 800774a:	b920      	cbnz	r0, 8007756 <srand+0x22>
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <srand+0x48>)
 800774e:	480c      	ldr	r0, [pc, #48]	; (8007780 <srand+0x4c>)
 8007750:	2142      	movs	r1, #66	; 0x42
 8007752:	f000 f897 	bl	8007884 <__assert_func>
 8007756:	490b      	ldr	r1, [pc, #44]	; (8007784 <srand+0x50>)
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <srand+0x54>)
 800775a:	e9c0 1300 	strd	r1, r3, [r0]
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <srand+0x58>)
 8007760:	6083      	str	r3, [r0, #8]
 8007762:	230b      	movs	r3, #11
 8007764:	8183      	strh	r3, [r0, #12]
 8007766:	2100      	movs	r1, #0
 8007768:	2001      	movs	r0, #1
 800776a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800776e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007770:	2200      	movs	r2, #0
 8007772:	611c      	str	r4, [r3, #16]
 8007774:	615a      	str	r2, [r3, #20]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000040 	.word	0x20000040
 800777c:	08008f24 	.word	0x08008f24
 8007780:	08008f3b 	.word	0x08008f3b
 8007784:	abcd330e 	.word	0xabcd330e
 8007788:	e66d1234 	.word	0xe66d1234
 800778c:	0005deec 	.word	0x0005deec

08007790 <rand>:
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <rand+0x60>)
 8007792:	b510      	push	{r4, lr}
 8007794:	681c      	ldr	r4, [r3, #0]
 8007796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007798:	b9b3      	cbnz	r3, 80077c8 <rand+0x38>
 800779a:	2018      	movs	r0, #24
 800779c:	f000 f8b4 	bl	8007908 <malloc>
 80077a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80077a2:	b928      	cbnz	r0, 80077b0 <rand+0x20>
 80077a4:	4602      	mov	r2, r0
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <rand+0x64>)
 80077a8:	4813      	ldr	r0, [pc, #76]	; (80077f8 <rand+0x68>)
 80077aa:	214e      	movs	r1, #78	; 0x4e
 80077ac:	f000 f86a 	bl	8007884 <__assert_func>
 80077b0:	4a12      	ldr	r2, [pc, #72]	; (80077fc <rand+0x6c>)
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <rand+0x70>)
 80077b4:	e9c0 2300 	strd	r2, r3, [r0]
 80077b8:	4b12      	ldr	r3, [pc, #72]	; (8007804 <rand+0x74>)
 80077ba:	6083      	str	r3, [r0, #8]
 80077bc:	230b      	movs	r3, #11
 80077be:	8183      	strh	r3, [r0, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	2300      	movs	r3, #0
 80077c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80077c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077ca:	480f      	ldr	r0, [pc, #60]	; (8007808 <rand+0x78>)
 80077cc:	690a      	ldr	r2, [r1, #16]
 80077ce:	694b      	ldr	r3, [r1, #20]
 80077d0:	4c0e      	ldr	r4, [pc, #56]	; (800780c <rand+0x7c>)
 80077d2:	4350      	muls	r0, r2
 80077d4:	fb04 0003 	mla	r0, r4, r3, r0
 80077d8:	fba2 3404 	umull	r3, r4, r2, r4
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	4404      	add	r4, r0
 80077e0:	f144 0000 	adc.w	r0, r4, #0
 80077e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80077e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80077ec:	bd10      	pop	{r4, pc}
 80077ee:	bf00      	nop
 80077f0:	20000040 	.word	0x20000040
 80077f4:	08008f24 	.word	0x08008f24
 80077f8:	08008f3b 	.word	0x08008f3b
 80077fc:	abcd330e 	.word	0xabcd330e
 8007800:	e66d1234 	.word	0xe66d1234
 8007804:	0005deec 	.word	0x0005deec
 8007808:	5851f42d 	.word	0x5851f42d
 800780c:	4c957f2d 	.word	0x4c957f2d

08007810 <siprintf>:
 8007810:	b40e      	push	{r1, r2, r3}
 8007812:	b500      	push	{lr}
 8007814:	b09c      	sub	sp, #112	; 0x70
 8007816:	ab1d      	add	r3, sp, #116	; 0x74
 8007818:	9002      	str	r0, [sp, #8]
 800781a:	9006      	str	r0, [sp, #24]
 800781c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007820:	4809      	ldr	r0, [pc, #36]	; (8007848 <siprintf+0x38>)
 8007822:	9107      	str	r1, [sp, #28]
 8007824:	9104      	str	r1, [sp, #16]
 8007826:	4909      	ldr	r1, [pc, #36]	; (800784c <siprintf+0x3c>)
 8007828:	f853 2b04 	ldr.w	r2, [r3], #4
 800782c:	9105      	str	r1, [sp, #20]
 800782e:	6800      	ldr	r0, [r0, #0]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	a902      	add	r1, sp, #8
 8007834:	f000 f976 	bl	8007b24 <_svfiprintf_r>
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	b01c      	add	sp, #112	; 0x70
 8007840:	f85d eb04 	ldr.w	lr, [sp], #4
 8007844:	b003      	add	sp, #12
 8007846:	4770      	bx	lr
 8007848:	20000040 	.word	0x20000040
 800784c:	ffff0208 	.word	0xffff0208

08007850 <time>:
 8007850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <time+0x30>)
 8007854:	2200      	movs	r2, #0
 8007856:	4669      	mov	r1, sp
 8007858:	4604      	mov	r4, r0
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	f000 f842 	bl	80078e4 <_gettimeofday_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	bfbe      	ittt	lt
 8007864:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8007868:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800786c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007874:	b10c      	cbz	r4, 800787a <time+0x2a>
 8007876:	e9c4 0100 	strd	r0, r1, [r4]
 800787a:	b004      	add	sp, #16
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	20000040 	.word	0x20000040

08007884 <__assert_func>:
 8007884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007886:	4614      	mov	r4, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <__assert_func+0x2c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4605      	mov	r5, r0
 8007890:	68d8      	ldr	r0, [r3, #12]
 8007892:	b14c      	cbz	r4, 80078a8 <__assert_func+0x24>
 8007894:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <__assert_func+0x30>)
 8007896:	9100      	str	r1, [sp, #0]
 8007898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800789c:	4906      	ldr	r1, [pc, #24]	; (80078b8 <__assert_func+0x34>)
 800789e:	462b      	mov	r3, r5
 80078a0:	f000 f80e 	bl	80078c0 <fiprintf>
 80078a4:	f000 fdfc 	bl	80084a0 <abort>
 80078a8:	4b04      	ldr	r3, [pc, #16]	; (80078bc <__assert_func+0x38>)
 80078aa:	461c      	mov	r4, r3
 80078ac:	e7f3      	b.n	8007896 <__assert_func+0x12>
 80078ae:	bf00      	nop
 80078b0:	20000040 	.word	0x20000040
 80078b4:	08008f9a 	.word	0x08008f9a
 80078b8:	08008fa7 	.word	0x08008fa7
 80078bc:	08008fd5 	.word	0x08008fd5

080078c0 <fiprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	b503      	push	{r0, r1, lr}
 80078c4:	4601      	mov	r1, r0
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <fiprintf+0x20>)
 80078ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ce:	6800      	ldr	r0, [r0, #0]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f000 fa51 	bl	8007d78 <_vfiprintf_r>
 80078d6:	b002      	add	sp, #8
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b003      	add	sp, #12
 80078de:	4770      	bx	lr
 80078e0:	20000040 	.word	0x20000040

080078e4 <_gettimeofday_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	; (8007904 <_gettimeofday_r+0x20>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	f001 fa35 	bl	8008d60 <_gettimeofday>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d102      	bne.n	8007900 <_gettimeofday_r+0x1c>
 80078fa:	682b      	ldr	r3, [r5, #0]
 80078fc:	b103      	cbz	r3, 8007900 <_gettimeofday_r+0x1c>
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	bf00      	nop
 8007904:	20000898 	.word	0x20000898

08007908 <malloc>:
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <malloc+0xc>)
 800790a:	4601      	mov	r1, r0
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f000 b853 	b.w	80079b8 <_malloc_r>
 8007912:	bf00      	nop
 8007914:	20000040 	.word	0x20000040

08007918 <_free_r>:
 8007918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800791a:	2900      	cmp	r1, #0
 800791c:	d048      	beq.n	80079b0 <_free_r+0x98>
 800791e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007922:	9001      	str	r0, [sp, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f1a1 0404 	sub.w	r4, r1, #4
 800792a:	bfb8      	it	lt
 800792c:	18e4      	addlt	r4, r4, r3
 800792e:	f001 f805 	bl	800893c <__malloc_lock>
 8007932:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <_free_r+0x9c>)
 8007934:	9801      	ldr	r0, [sp, #4]
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	4615      	mov	r5, r2
 800793a:	b933      	cbnz	r3, 800794a <_free_r+0x32>
 800793c:	6063      	str	r3, [r4, #4]
 800793e:	6014      	str	r4, [r2, #0]
 8007940:	b003      	add	sp, #12
 8007942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007946:	f000 bfff 	b.w	8008948 <__malloc_unlock>
 800794a:	42a3      	cmp	r3, r4
 800794c:	d90b      	bls.n	8007966 <_free_r+0x4e>
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	1862      	adds	r2, r4, r1
 8007952:	4293      	cmp	r3, r2
 8007954:	bf04      	itt	eq
 8007956:	681a      	ldreq	r2, [r3, #0]
 8007958:	685b      	ldreq	r3, [r3, #4]
 800795a:	6063      	str	r3, [r4, #4]
 800795c:	bf04      	itt	eq
 800795e:	1852      	addeq	r2, r2, r1
 8007960:	6022      	streq	r2, [r4, #0]
 8007962:	602c      	str	r4, [r5, #0]
 8007964:	e7ec      	b.n	8007940 <_free_r+0x28>
 8007966:	461a      	mov	r2, r3
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	b10b      	cbz	r3, 8007970 <_free_r+0x58>
 800796c:	42a3      	cmp	r3, r4
 800796e:	d9fa      	bls.n	8007966 <_free_r+0x4e>
 8007970:	6811      	ldr	r1, [r2, #0]
 8007972:	1855      	adds	r5, r2, r1
 8007974:	42a5      	cmp	r5, r4
 8007976:	d10b      	bne.n	8007990 <_free_r+0x78>
 8007978:	6824      	ldr	r4, [r4, #0]
 800797a:	4421      	add	r1, r4
 800797c:	1854      	adds	r4, r2, r1
 800797e:	42a3      	cmp	r3, r4
 8007980:	6011      	str	r1, [r2, #0]
 8007982:	d1dd      	bne.n	8007940 <_free_r+0x28>
 8007984:	681c      	ldr	r4, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	6053      	str	r3, [r2, #4]
 800798a:	4421      	add	r1, r4
 800798c:	6011      	str	r1, [r2, #0]
 800798e:	e7d7      	b.n	8007940 <_free_r+0x28>
 8007990:	d902      	bls.n	8007998 <_free_r+0x80>
 8007992:	230c      	movs	r3, #12
 8007994:	6003      	str	r3, [r0, #0]
 8007996:	e7d3      	b.n	8007940 <_free_r+0x28>
 8007998:	6825      	ldr	r5, [r4, #0]
 800799a:	1961      	adds	r1, r4, r5
 800799c:	428b      	cmp	r3, r1
 800799e:	bf04      	itt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	6063      	str	r3, [r4, #4]
 80079a6:	bf04      	itt	eq
 80079a8:	1949      	addeq	r1, r1, r5
 80079aa:	6021      	streq	r1, [r4, #0]
 80079ac:	6054      	str	r4, [r2, #4]
 80079ae:	e7c7      	b.n	8007940 <_free_r+0x28>
 80079b0:	b003      	add	sp, #12
 80079b2:	bd30      	pop	{r4, r5, pc}
 80079b4:	200000d0 	.word	0x200000d0

080079b8 <_malloc_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	1ccd      	adds	r5, r1, #3
 80079bc:	f025 0503 	bic.w	r5, r5, #3
 80079c0:	3508      	adds	r5, #8
 80079c2:	2d0c      	cmp	r5, #12
 80079c4:	bf38      	it	cc
 80079c6:	250c      	movcc	r5, #12
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	4606      	mov	r6, r0
 80079cc:	db01      	blt.n	80079d2 <_malloc_r+0x1a>
 80079ce:	42a9      	cmp	r1, r5
 80079d0:	d903      	bls.n	80079da <_malloc_r+0x22>
 80079d2:	230c      	movs	r3, #12
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	2000      	movs	r0, #0
 80079d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079da:	f000 ffaf 	bl	800893c <__malloc_lock>
 80079de:	4921      	ldr	r1, [pc, #132]	; (8007a64 <_malloc_r+0xac>)
 80079e0:	680a      	ldr	r2, [r1, #0]
 80079e2:	4614      	mov	r4, r2
 80079e4:	b99c      	cbnz	r4, 8007a0e <_malloc_r+0x56>
 80079e6:	4f20      	ldr	r7, [pc, #128]	; (8007a68 <_malloc_r+0xb0>)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	b923      	cbnz	r3, 80079f6 <_malloc_r+0x3e>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 fc86 	bl	8008300 <_sbrk_r>
 80079f4:	6038      	str	r0, [r7, #0]
 80079f6:	4629      	mov	r1, r5
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 fc81 	bl	8008300 <_sbrk_r>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	d123      	bne.n	8007a4a <_malloc_r+0x92>
 8007a02:	230c      	movs	r3, #12
 8007a04:	6033      	str	r3, [r6, #0]
 8007a06:	4630      	mov	r0, r6
 8007a08:	f000 ff9e 	bl	8008948 <__malloc_unlock>
 8007a0c:	e7e3      	b.n	80079d6 <_malloc_r+0x1e>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	1b5b      	subs	r3, r3, r5
 8007a12:	d417      	bmi.n	8007a44 <_malloc_r+0x8c>
 8007a14:	2b0b      	cmp	r3, #11
 8007a16:	d903      	bls.n	8007a20 <_malloc_r+0x68>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	441c      	add	r4, r3
 8007a1c:	6025      	str	r5, [r4, #0]
 8007a1e:	e004      	b.n	8007a2a <_malloc_r+0x72>
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	42a2      	cmp	r2, r4
 8007a24:	bf0c      	ite	eq
 8007a26:	600b      	streq	r3, [r1, #0]
 8007a28:	6053      	strne	r3, [r2, #4]
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f000 ff8c 	bl	8008948 <__malloc_unlock>
 8007a30:	f104 000b 	add.w	r0, r4, #11
 8007a34:	1d23      	adds	r3, r4, #4
 8007a36:	f020 0007 	bic.w	r0, r0, #7
 8007a3a:	1ac2      	subs	r2, r0, r3
 8007a3c:	d0cc      	beq.n	80079d8 <_malloc_r+0x20>
 8007a3e:	1a1b      	subs	r3, r3, r0
 8007a40:	50a3      	str	r3, [r4, r2]
 8007a42:	e7c9      	b.n	80079d8 <_malloc_r+0x20>
 8007a44:	4622      	mov	r2, r4
 8007a46:	6864      	ldr	r4, [r4, #4]
 8007a48:	e7cc      	b.n	80079e4 <_malloc_r+0x2c>
 8007a4a:	1cc4      	adds	r4, r0, #3
 8007a4c:	f024 0403 	bic.w	r4, r4, #3
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d0e3      	beq.n	8007a1c <_malloc_r+0x64>
 8007a54:	1a21      	subs	r1, r4, r0
 8007a56:	4630      	mov	r0, r6
 8007a58:	f000 fc52 	bl	8008300 <_sbrk_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d1dd      	bne.n	8007a1c <_malloc_r+0x64>
 8007a60:	e7cf      	b.n	8007a02 <_malloc_r+0x4a>
 8007a62:	bf00      	nop
 8007a64:	200000d0 	.word	0x200000d0
 8007a68:	200000d4 	.word	0x200000d4

08007a6c <__ssputs_r>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	688e      	ldr	r6, [r1, #8]
 8007a72:	429e      	cmp	r6, r3
 8007a74:	4682      	mov	sl, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	4690      	mov	r8, r2
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	d838      	bhi.n	8007af0 <__ssputs_r+0x84>
 8007a7e:	898a      	ldrh	r2, [r1, #12]
 8007a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a84:	d032      	beq.n	8007aec <__ssputs_r+0x80>
 8007a86:	6825      	ldr	r5, [r4, #0]
 8007a88:	6909      	ldr	r1, [r1, #16]
 8007a8a:	eba5 0901 	sub.w	r9, r5, r1
 8007a8e:	6965      	ldr	r5, [r4, #20]
 8007a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a98:	3301      	adds	r3, #1
 8007a9a:	444b      	add	r3, r9
 8007a9c:	106d      	asrs	r5, r5, #1
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	bf38      	it	cc
 8007aa2:	461d      	movcc	r5, r3
 8007aa4:	0553      	lsls	r3, r2, #21
 8007aa6:	d531      	bpl.n	8007b0c <__ssputs_r+0xa0>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7ff ff85 	bl	80079b8 <_malloc_r>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	b950      	cbnz	r0, 8007ac8 <__ssputs_r+0x5c>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	f8ca 3000 	str.w	r3, [sl]
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	464a      	mov	r2, r9
 8007acc:	f000 ff0e 	bl	80088ec <memcpy>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	6126      	str	r6, [r4, #16]
 8007ade:	6165      	str	r5, [r4, #20]
 8007ae0:	444e      	add	r6, r9
 8007ae2:	eba5 0509 	sub.w	r5, r5, r9
 8007ae6:	6026      	str	r6, [r4, #0]
 8007ae8:	60a5      	str	r5, [r4, #8]
 8007aea:	463e      	mov	r6, r7
 8007aec:	42be      	cmp	r6, r7
 8007aee:	d900      	bls.n	8007af2 <__ssputs_r+0x86>
 8007af0:	463e      	mov	r6, r7
 8007af2:	4632      	mov	r2, r6
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	4641      	mov	r1, r8
 8007af8:	f000 ff06 	bl	8008908 <memmove>
 8007afc:	68a3      	ldr	r3, [r4, #8]
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	4432      	add	r2, r6
 8007b04:	60a3      	str	r3, [r4, #8]
 8007b06:	6022      	str	r2, [r4, #0]
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e7db      	b.n	8007ac4 <__ssputs_r+0x58>
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	f000 ff21 	bl	8008954 <_realloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1e1      	bne.n	8007adc <__ssputs_r+0x70>
 8007b18:	6921      	ldr	r1, [r4, #16]
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f7ff fefc 	bl	8007918 <_free_r>
 8007b20:	e7c7      	b.n	8007ab2 <__ssputs_r+0x46>
	...

08007b24 <_svfiprintf_r>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	4698      	mov	r8, r3
 8007b2a:	898b      	ldrh	r3, [r1, #12]
 8007b2c:	061b      	lsls	r3, r3, #24
 8007b2e:	b09d      	sub	sp, #116	; 0x74
 8007b30:	4607      	mov	r7, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	d50e      	bpl.n	8007b56 <_svfiprintf_r+0x32>
 8007b38:	690b      	ldr	r3, [r1, #16]
 8007b3a:	b963      	cbnz	r3, 8007b56 <_svfiprintf_r+0x32>
 8007b3c:	2140      	movs	r1, #64	; 0x40
 8007b3e:	f7ff ff3b 	bl	80079b8 <_malloc_r>
 8007b42:	6028      	str	r0, [r5, #0]
 8007b44:	6128      	str	r0, [r5, #16]
 8007b46:	b920      	cbnz	r0, 8007b52 <_svfiprintf_r+0x2e>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b50:	e0d1      	b.n	8007cf6 <_svfiprintf_r+0x1d2>
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	616b      	str	r3, [r5, #20]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b64:	2330      	movs	r3, #48	; 0x30
 8007b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d10 <_svfiprintf_r+0x1ec>
 8007b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b6e:	f04f 0901 	mov.w	r9, #1
 8007b72:	4623      	mov	r3, r4
 8007b74:	469a      	mov	sl, r3
 8007b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7a:	b10a      	cbz	r2, 8007b80 <_svfiprintf_r+0x5c>
 8007b7c:	2a25      	cmp	r2, #37	; 0x25
 8007b7e:	d1f9      	bne.n	8007b74 <_svfiprintf_r+0x50>
 8007b80:	ebba 0b04 	subs.w	fp, sl, r4
 8007b84:	d00b      	beq.n	8007b9e <_svfiprintf_r+0x7a>
 8007b86:	465b      	mov	r3, fp
 8007b88:	4622      	mov	r2, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff ff6d 	bl	8007a6c <__ssputs_r>
 8007b92:	3001      	adds	r0, #1
 8007b94:	f000 80aa 	beq.w	8007cec <_svfiprintf_r+0x1c8>
 8007b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9a:	445a      	add	r2, fp
 8007b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80a2 	beq.w	8007cec <_svfiprintf_r+0x1c8>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb2:	f10a 0a01 	add.w	sl, sl, #1
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	9307      	str	r3, [sp, #28]
 8007bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc0:	4654      	mov	r4, sl
 8007bc2:	2205      	movs	r2, #5
 8007bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc8:	4851      	ldr	r0, [pc, #324]	; (8007d10 <_svfiprintf_r+0x1ec>)
 8007bca:	f7f8 fb09 	bl	80001e0 <memchr>
 8007bce:	9a04      	ldr	r2, [sp, #16]
 8007bd0:	b9d8      	cbnz	r0, 8007c0a <_svfiprintf_r+0xe6>
 8007bd2:	06d0      	lsls	r0, r2, #27
 8007bd4:	bf44      	itt	mi
 8007bd6:	2320      	movmi	r3, #32
 8007bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bdc:	0711      	lsls	r1, r2, #28
 8007bde:	bf44      	itt	mi
 8007be0:	232b      	movmi	r3, #43	; 0x2b
 8007be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d015      	beq.n	8007c1a <_svfiprintf_r+0xf6>
 8007bee:	9a07      	ldr	r2, [sp, #28]
 8007bf0:	4654      	mov	r4, sl
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f04f 0c0a 	mov.w	ip, #10
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfe:	3b30      	subs	r3, #48	; 0x30
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d94e      	bls.n	8007ca2 <_svfiprintf_r+0x17e>
 8007c04:	b1b0      	cbz	r0, 8007c34 <_svfiprintf_r+0x110>
 8007c06:	9207      	str	r2, [sp, #28]
 8007c08:	e014      	b.n	8007c34 <_svfiprintf_r+0x110>
 8007c0a:	eba0 0308 	sub.w	r3, r0, r8
 8007c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	46a2      	mov	sl, r4
 8007c18:	e7d2      	b.n	8007bc0 <_svfiprintf_r+0x9c>
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	1d19      	adds	r1, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9103      	str	r1, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfbb      	ittet	lt
 8007c26:	425b      	neglt	r3, r3
 8007c28:	f042 0202 	orrlt.w	r2, r2, #2
 8007c2c:	9307      	strge	r3, [sp, #28]
 8007c2e:	9307      	strlt	r3, [sp, #28]
 8007c30:	bfb8      	it	lt
 8007c32:	9204      	strlt	r2, [sp, #16]
 8007c34:	7823      	ldrb	r3, [r4, #0]
 8007c36:	2b2e      	cmp	r3, #46	; 0x2e
 8007c38:	d10c      	bne.n	8007c54 <_svfiprintf_r+0x130>
 8007c3a:	7863      	ldrb	r3, [r4, #1]
 8007c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3e:	d135      	bne.n	8007cac <_svfiprintf_r+0x188>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	1d1a      	adds	r2, r3, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	9203      	str	r2, [sp, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bfb8      	it	lt
 8007c4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c50:	3402      	adds	r4, #2
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d20 <_svfiprintf_r+0x1fc>
 8007c58:	7821      	ldrb	r1, [r4, #0]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	f7f8 fabf 	bl	80001e0 <memchr>
 8007c62:	b140      	cbz	r0, 8007c76 <_svfiprintf_r+0x152>
 8007c64:	2340      	movs	r3, #64	; 0x40
 8007c66:	eba0 000a 	sub.w	r0, r0, sl
 8007c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	4303      	orrs	r3, r0
 8007c72:	3401      	adds	r4, #1
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7a:	4826      	ldr	r0, [pc, #152]	; (8007d14 <_svfiprintf_r+0x1f0>)
 8007c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c80:	2206      	movs	r2, #6
 8007c82:	f7f8 faad 	bl	80001e0 <memchr>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d038      	beq.n	8007cfc <_svfiprintf_r+0x1d8>
 8007c8a:	4b23      	ldr	r3, [pc, #140]	; (8007d18 <_svfiprintf_r+0x1f4>)
 8007c8c:	bb1b      	cbnz	r3, 8007cd6 <_svfiprintf_r+0x1b2>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	3307      	adds	r3, #7
 8007c92:	f023 0307 	bic.w	r3, r3, #7
 8007c96:	3308      	adds	r3, #8
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	4433      	add	r3, r6
 8007c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca0:	e767      	b.n	8007b72 <_svfiprintf_r+0x4e>
 8007ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	2001      	movs	r0, #1
 8007caa:	e7a5      	b.n	8007bf8 <_svfiprintf_r+0xd4>
 8007cac:	2300      	movs	r3, #0
 8007cae:	3401      	adds	r4, #1
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f04f 0c0a 	mov.w	ip, #10
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cbe:	3a30      	subs	r2, #48	; 0x30
 8007cc0:	2a09      	cmp	r2, #9
 8007cc2:	d903      	bls.n	8007ccc <_svfiprintf_r+0x1a8>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0c5      	beq.n	8007c54 <_svfiprintf_r+0x130>
 8007cc8:	9105      	str	r1, [sp, #20]
 8007cca:	e7c3      	b.n	8007c54 <_svfiprintf_r+0x130>
 8007ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7f0      	b.n	8007cb8 <_svfiprintf_r+0x194>
 8007cd6:	ab03      	add	r3, sp, #12
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <_svfiprintf_r+0x1f8>)
 8007cde:	a904      	add	r1, sp, #16
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f3af 8000 	nop.w
 8007ce6:	1c42      	adds	r2, r0, #1
 8007ce8:	4606      	mov	r6, r0
 8007cea:	d1d6      	bne.n	8007c9a <_svfiprintf_r+0x176>
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	065b      	lsls	r3, r3, #25
 8007cf0:	f53f af2c 	bmi.w	8007b4c <_svfiprintf_r+0x28>
 8007cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf6:	b01d      	add	sp, #116	; 0x74
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <_svfiprintf_r+0x1f8>)
 8007d04:	a904      	add	r1, sp, #16
 8007d06:	4638      	mov	r0, r7
 8007d08:	f000 f9d4 	bl	80080b4 <_printf_i>
 8007d0c:	e7eb      	b.n	8007ce6 <_svfiprintf_r+0x1c2>
 8007d0e:	bf00      	nop
 8007d10:	08008fd6 	.word	0x08008fd6
 8007d14:	08008fe0 	.word	0x08008fe0
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	08007a6d 	.word	0x08007a6d
 8007d20:	08008fdc 	.word	0x08008fdc

08007d24 <__sfputc_r>:
 8007d24:	6893      	ldr	r3, [r2, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	b410      	push	{r4}
 8007d2c:	6093      	str	r3, [r2, #8]
 8007d2e:	da08      	bge.n	8007d42 <__sfputc_r+0x1e>
 8007d30:	6994      	ldr	r4, [r2, #24]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	db01      	blt.n	8007d3a <__sfputc_r+0x16>
 8007d36:	290a      	cmp	r1, #10
 8007d38:	d103      	bne.n	8007d42 <__sfputc_r+0x1e>
 8007d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d3e:	f000 baef 	b.w	8008320 <__swbuf_r>
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	1c58      	adds	r0, r3, #1
 8007d46:	6010      	str	r0, [r2, #0]
 8007d48:	7019      	strb	r1, [r3, #0]
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <__sfputs_r>:
 8007d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	4614      	mov	r4, r2
 8007d5a:	18d5      	adds	r5, r2, r3
 8007d5c:	42ac      	cmp	r4, r5
 8007d5e:	d101      	bne.n	8007d64 <__sfputs_r+0x12>
 8007d60:	2000      	movs	r0, #0
 8007d62:	e007      	b.n	8007d74 <__sfputs_r+0x22>
 8007d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d68:	463a      	mov	r2, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ffda 	bl	8007d24 <__sfputc_r>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d1f3      	bne.n	8007d5c <__sfputs_r+0xa>
 8007d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d78 <_vfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	b09d      	sub	sp, #116	; 0x74
 8007d80:	4614      	mov	r4, r2
 8007d82:	4698      	mov	r8, r3
 8007d84:	4606      	mov	r6, r0
 8007d86:	b118      	cbz	r0, 8007d90 <_vfiprintf_r+0x18>
 8007d88:	6983      	ldr	r3, [r0, #24]
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x18>
 8007d8c:	f000 fcaa 	bl	80086e4 <__sinit>
 8007d90:	4b89      	ldr	r3, [pc, #548]	; (8007fb8 <_vfiprintf_r+0x240>)
 8007d92:	429d      	cmp	r5, r3
 8007d94:	d11b      	bne.n	8007dce <_vfiprintf_r+0x56>
 8007d96:	6875      	ldr	r5, [r6, #4]
 8007d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d9a:	07d9      	lsls	r1, r3, #31
 8007d9c:	d405      	bmi.n	8007daa <_vfiprintf_r+0x32>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d402      	bmi.n	8007daa <_vfiprintf_r+0x32>
 8007da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da6:	f000 fd3b 	bl	8008820 <__retarget_lock_acquire_recursive>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	071b      	lsls	r3, r3, #28
 8007dae:	d501      	bpl.n	8007db4 <_vfiprintf_r+0x3c>
 8007db0:	692b      	ldr	r3, [r5, #16]
 8007db2:	b9eb      	cbnz	r3, 8007df0 <_vfiprintf_r+0x78>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 fb04 	bl	80083c4 <__swsetup_r>
 8007dbc:	b1c0      	cbz	r0, 8007df0 <_vfiprintf_r+0x78>
 8007dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dc0:	07dc      	lsls	r4, r3, #31
 8007dc2:	d50e      	bpl.n	8007de2 <_vfiprintf_r+0x6a>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc8:	b01d      	add	sp, #116	; 0x74
 8007dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	4b7b      	ldr	r3, [pc, #492]	; (8007fbc <_vfiprintf_r+0x244>)
 8007dd0:	429d      	cmp	r5, r3
 8007dd2:	d101      	bne.n	8007dd8 <_vfiprintf_r+0x60>
 8007dd4:	68b5      	ldr	r5, [r6, #8]
 8007dd6:	e7df      	b.n	8007d98 <_vfiprintf_r+0x20>
 8007dd8:	4b79      	ldr	r3, [pc, #484]	; (8007fc0 <_vfiprintf_r+0x248>)
 8007dda:	429d      	cmp	r5, r3
 8007ddc:	bf08      	it	eq
 8007dde:	68f5      	ldreq	r5, [r6, #12]
 8007de0:	e7da      	b.n	8007d98 <_vfiprintf_r+0x20>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	0598      	lsls	r0, r3, #22
 8007de6:	d4ed      	bmi.n	8007dc4 <_vfiprintf_r+0x4c>
 8007de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dea:	f000 fd1a 	bl	8008822 <__retarget_lock_release_recursive>
 8007dee:	e7e9      	b.n	8007dc4 <_vfiprintf_r+0x4c>
 8007df0:	2300      	movs	r3, #0
 8007df2:	9309      	str	r3, [sp, #36]	; 0x24
 8007df4:	2320      	movs	r3, #32
 8007df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dfe:	2330      	movs	r3, #48	; 0x30
 8007e00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fc4 <_vfiprintf_r+0x24c>
 8007e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e08:	f04f 0901 	mov.w	r9, #1
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	469a      	mov	sl, r3
 8007e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e14:	b10a      	cbz	r2, 8007e1a <_vfiprintf_r+0xa2>
 8007e16:	2a25      	cmp	r2, #37	; 0x25
 8007e18:	d1f9      	bne.n	8007e0e <_vfiprintf_r+0x96>
 8007e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e1e:	d00b      	beq.n	8007e38 <_vfiprintf_r+0xc0>
 8007e20:	465b      	mov	r3, fp
 8007e22:	4622      	mov	r2, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ff93 	bl	8007d52 <__sfputs_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f000 80aa 	beq.w	8007f86 <_vfiprintf_r+0x20e>
 8007e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e34:	445a      	add	r2, fp
 8007e36:	9209      	str	r2, [sp, #36]	; 0x24
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80a2 	beq.w	8007f86 <_vfiprintf_r+0x20e>
 8007e42:	2300      	movs	r3, #0
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4c:	f10a 0a01 	add.w	sl, sl, #1
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e58:	931a      	str	r3, [sp, #104]	; 0x68
 8007e5a:	4654      	mov	r4, sl
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	4858      	ldr	r0, [pc, #352]	; (8007fc4 <_vfiprintf_r+0x24c>)
 8007e64:	f7f8 f9bc 	bl	80001e0 <memchr>
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	b9d8      	cbnz	r0, 8007ea4 <_vfiprintf_r+0x12c>
 8007e6c:	06d1      	lsls	r1, r2, #27
 8007e6e:	bf44      	itt	mi
 8007e70:	2320      	movmi	r3, #32
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e76:	0713      	lsls	r3, r2, #28
 8007e78:	bf44      	itt	mi
 8007e7a:	232b      	movmi	r3, #43	; 0x2b
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e80:	f89a 3000 	ldrb.w	r3, [sl]
 8007e84:	2b2a      	cmp	r3, #42	; 0x2a
 8007e86:	d015      	beq.n	8007eb4 <_vfiprintf_r+0x13c>
 8007e88:	9a07      	ldr	r2, [sp, #28]
 8007e8a:	4654      	mov	r4, sl
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f04f 0c0a 	mov.w	ip, #10
 8007e92:	4621      	mov	r1, r4
 8007e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e98:	3b30      	subs	r3, #48	; 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d94e      	bls.n	8007f3c <_vfiprintf_r+0x1c4>
 8007e9e:	b1b0      	cbz	r0, 8007ece <_vfiprintf_r+0x156>
 8007ea0:	9207      	str	r2, [sp, #28]
 8007ea2:	e014      	b.n	8007ece <_vfiprintf_r+0x156>
 8007ea4:	eba0 0308 	sub.w	r3, r0, r8
 8007ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	46a2      	mov	sl, r4
 8007eb2:	e7d2      	b.n	8007e5a <_vfiprintf_r+0xe2>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1d19      	adds	r1, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	9103      	str	r1, [sp, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bfbb      	ittet	lt
 8007ec0:	425b      	neglt	r3, r3
 8007ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec6:	9307      	strge	r3, [sp, #28]
 8007ec8:	9307      	strlt	r3, [sp, #28]
 8007eca:	bfb8      	it	lt
 8007ecc:	9204      	strlt	r2, [sp, #16]
 8007ece:	7823      	ldrb	r3, [r4, #0]
 8007ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed2:	d10c      	bne.n	8007eee <_vfiprintf_r+0x176>
 8007ed4:	7863      	ldrb	r3, [r4, #1]
 8007ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed8:	d135      	bne.n	8007f46 <_vfiprintf_r+0x1ce>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	1d1a      	adds	r2, r3, #4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	9203      	str	r2, [sp, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bfb8      	it	lt
 8007ee6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007eea:	3402      	adds	r4, #2
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fd4 <_vfiprintf_r+0x25c>
 8007ef2:	7821      	ldrb	r1, [r4, #0]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7f8 f972 	bl	80001e0 <memchr>
 8007efc:	b140      	cbz	r0, 8007f10 <_vfiprintf_r+0x198>
 8007efe:	2340      	movs	r3, #64	; 0x40
 8007f00:	eba0 000a 	sub.w	r0, r0, sl
 8007f04:	fa03 f000 	lsl.w	r0, r3, r0
 8007f08:	9b04      	ldr	r3, [sp, #16]
 8007f0a:	4303      	orrs	r3, r0
 8007f0c:	3401      	adds	r4, #1
 8007f0e:	9304      	str	r3, [sp, #16]
 8007f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f14:	482c      	ldr	r0, [pc, #176]	; (8007fc8 <_vfiprintf_r+0x250>)
 8007f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f1a:	2206      	movs	r2, #6
 8007f1c:	f7f8 f960 	bl	80001e0 <memchr>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d03f      	beq.n	8007fa4 <_vfiprintf_r+0x22c>
 8007f24:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <_vfiprintf_r+0x254>)
 8007f26:	bb1b      	cbnz	r3, 8007f70 <_vfiprintf_r+0x1f8>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	3307      	adds	r3, #7
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	3308      	adds	r3, #8
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f36:	443b      	add	r3, r7
 8007f38:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3a:	e767      	b.n	8007e0c <_vfiprintf_r+0x94>
 8007f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f40:	460c      	mov	r4, r1
 8007f42:	2001      	movs	r0, #1
 8007f44:	e7a5      	b.n	8007e92 <_vfiprintf_r+0x11a>
 8007f46:	2300      	movs	r3, #0
 8007f48:	3401      	adds	r4, #1
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f04f 0c0a 	mov.w	ip, #10
 8007f52:	4620      	mov	r0, r4
 8007f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f58:	3a30      	subs	r2, #48	; 0x30
 8007f5a:	2a09      	cmp	r2, #9
 8007f5c:	d903      	bls.n	8007f66 <_vfiprintf_r+0x1ee>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0c5      	beq.n	8007eee <_vfiprintf_r+0x176>
 8007f62:	9105      	str	r1, [sp, #20]
 8007f64:	e7c3      	b.n	8007eee <_vfiprintf_r+0x176>
 8007f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e7f0      	b.n	8007f52 <_vfiprintf_r+0x1da>
 8007f70:	ab03      	add	r3, sp, #12
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <_vfiprintf_r+0x258>)
 8007f78:	a904      	add	r1, sp, #16
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f3af 8000 	nop.w
 8007f80:	4607      	mov	r7, r0
 8007f82:	1c78      	adds	r0, r7, #1
 8007f84:	d1d6      	bne.n	8007f34 <_vfiprintf_r+0x1bc>
 8007f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f88:	07d9      	lsls	r1, r3, #31
 8007f8a:	d405      	bmi.n	8007f98 <_vfiprintf_r+0x220>
 8007f8c:	89ab      	ldrh	r3, [r5, #12]
 8007f8e:	059a      	lsls	r2, r3, #22
 8007f90:	d402      	bmi.n	8007f98 <_vfiprintf_r+0x220>
 8007f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f94:	f000 fc45 	bl	8008822 <__retarget_lock_release_recursive>
 8007f98:	89ab      	ldrh	r3, [r5, #12]
 8007f9a:	065b      	lsls	r3, r3, #25
 8007f9c:	f53f af12 	bmi.w	8007dc4 <_vfiprintf_r+0x4c>
 8007fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fa2:	e711      	b.n	8007dc8 <_vfiprintf_r+0x50>
 8007fa4:	ab03      	add	r3, sp, #12
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <_vfiprintf_r+0x258>)
 8007fac:	a904      	add	r1, sp, #16
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 f880 	bl	80080b4 <_printf_i>
 8007fb4:	e7e4      	b.n	8007f80 <_vfiprintf_r+0x208>
 8007fb6:	bf00      	nop
 8007fb8:	0800902c 	.word	0x0800902c
 8007fbc:	0800904c 	.word	0x0800904c
 8007fc0:	0800900c 	.word	0x0800900c
 8007fc4:	08008fd6 	.word	0x08008fd6
 8007fc8:	08008fe0 	.word	0x08008fe0
 8007fcc:	00000000 	.word	0x00000000
 8007fd0:	08007d53 	.word	0x08007d53
 8007fd4:	08008fdc 	.word	0x08008fdc

08007fd8 <_printf_common>:
 8007fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	4616      	mov	r6, r2
 8007fde:	4699      	mov	r9, r3
 8007fe0:	688a      	ldr	r2, [r1, #8]
 8007fe2:	690b      	ldr	r3, [r1, #16]
 8007fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	bfb8      	it	lt
 8007fec:	4613      	movlt	r3, r2
 8007fee:	6033      	str	r3, [r6, #0]
 8007ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	b10a      	cbz	r2, 8007ffe <_printf_common+0x26>
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	0699      	lsls	r1, r3, #26
 8008002:	bf42      	ittt	mi
 8008004:	6833      	ldrmi	r3, [r6, #0]
 8008006:	3302      	addmi	r3, #2
 8008008:	6033      	strmi	r3, [r6, #0]
 800800a:	6825      	ldr	r5, [r4, #0]
 800800c:	f015 0506 	ands.w	r5, r5, #6
 8008010:	d106      	bne.n	8008020 <_printf_common+0x48>
 8008012:	f104 0a19 	add.w	sl, r4, #25
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	6832      	ldr	r2, [r6, #0]
 800801a:	1a9b      	subs	r3, r3, r2
 800801c:	42ab      	cmp	r3, r5
 800801e:	dc26      	bgt.n	800806e <_printf_common+0x96>
 8008020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008024:	1e13      	subs	r3, r2, #0
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	bf18      	it	ne
 800802a:	2301      	movne	r3, #1
 800802c:	0692      	lsls	r2, r2, #26
 800802e:	d42b      	bmi.n	8008088 <_printf_common+0xb0>
 8008030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008034:	4649      	mov	r1, r9
 8008036:	4638      	mov	r0, r7
 8008038:	47c0      	blx	r8
 800803a:	3001      	adds	r0, #1
 800803c:	d01e      	beq.n	800807c <_printf_common+0xa4>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	68e5      	ldr	r5, [r4, #12]
 8008042:	6832      	ldr	r2, [r6, #0]
 8008044:	f003 0306 	and.w	r3, r3, #6
 8008048:	2b04      	cmp	r3, #4
 800804a:	bf08      	it	eq
 800804c:	1aad      	subeq	r5, r5, r2
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	bf0c      	ite	eq
 8008054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008058:	2500      	movne	r5, #0
 800805a:	4293      	cmp	r3, r2
 800805c:	bfc4      	itt	gt
 800805e:	1a9b      	subgt	r3, r3, r2
 8008060:	18ed      	addgt	r5, r5, r3
 8008062:	2600      	movs	r6, #0
 8008064:	341a      	adds	r4, #26
 8008066:	42b5      	cmp	r5, r6
 8008068:	d11a      	bne.n	80080a0 <_printf_common+0xc8>
 800806a:	2000      	movs	r0, #0
 800806c:	e008      	b.n	8008080 <_printf_common+0xa8>
 800806e:	2301      	movs	r3, #1
 8008070:	4652      	mov	r2, sl
 8008072:	4649      	mov	r1, r9
 8008074:	4638      	mov	r0, r7
 8008076:	47c0      	blx	r8
 8008078:	3001      	adds	r0, #1
 800807a:	d103      	bne.n	8008084 <_printf_common+0xac>
 800807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008084:	3501      	adds	r5, #1
 8008086:	e7c6      	b.n	8008016 <_printf_common+0x3e>
 8008088:	18e1      	adds	r1, r4, r3
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	2030      	movs	r0, #48	; 0x30
 800808e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008092:	4422      	add	r2, r4
 8008094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800809c:	3302      	adds	r3, #2
 800809e:	e7c7      	b.n	8008030 <_printf_common+0x58>
 80080a0:	2301      	movs	r3, #1
 80080a2:	4622      	mov	r2, r4
 80080a4:	4649      	mov	r1, r9
 80080a6:	4638      	mov	r0, r7
 80080a8:	47c0      	blx	r8
 80080aa:	3001      	adds	r0, #1
 80080ac:	d0e6      	beq.n	800807c <_printf_common+0xa4>
 80080ae:	3601      	adds	r6, #1
 80080b0:	e7d9      	b.n	8008066 <_printf_common+0x8e>
	...

080080b4 <_printf_i>:
 80080b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	4691      	mov	r9, r2
 80080bc:	7e27      	ldrb	r7, [r4, #24]
 80080be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080c0:	2f78      	cmp	r7, #120	; 0x78
 80080c2:	4680      	mov	r8, r0
 80080c4:	469a      	mov	sl, r3
 80080c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ca:	d807      	bhi.n	80080dc <_printf_i+0x28>
 80080cc:	2f62      	cmp	r7, #98	; 0x62
 80080ce:	d80a      	bhi.n	80080e6 <_printf_i+0x32>
 80080d0:	2f00      	cmp	r7, #0
 80080d2:	f000 80d8 	beq.w	8008286 <_printf_i+0x1d2>
 80080d6:	2f58      	cmp	r7, #88	; 0x58
 80080d8:	f000 80a3 	beq.w	8008222 <_printf_i+0x16e>
 80080dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080e4:	e03a      	b.n	800815c <_printf_i+0xa8>
 80080e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080ea:	2b15      	cmp	r3, #21
 80080ec:	d8f6      	bhi.n	80080dc <_printf_i+0x28>
 80080ee:	a001      	add	r0, pc, #4	; (adr r0, 80080f4 <_printf_i+0x40>)
 80080f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080f4:	0800814d 	.word	0x0800814d
 80080f8:	08008161 	.word	0x08008161
 80080fc:	080080dd 	.word	0x080080dd
 8008100:	080080dd 	.word	0x080080dd
 8008104:	080080dd 	.word	0x080080dd
 8008108:	080080dd 	.word	0x080080dd
 800810c:	08008161 	.word	0x08008161
 8008110:	080080dd 	.word	0x080080dd
 8008114:	080080dd 	.word	0x080080dd
 8008118:	080080dd 	.word	0x080080dd
 800811c:	080080dd 	.word	0x080080dd
 8008120:	0800826d 	.word	0x0800826d
 8008124:	08008191 	.word	0x08008191
 8008128:	0800824f 	.word	0x0800824f
 800812c:	080080dd 	.word	0x080080dd
 8008130:	080080dd 	.word	0x080080dd
 8008134:	0800828f 	.word	0x0800828f
 8008138:	080080dd 	.word	0x080080dd
 800813c:	08008191 	.word	0x08008191
 8008140:	080080dd 	.word	0x080080dd
 8008144:	080080dd 	.word	0x080080dd
 8008148:	08008257 	.word	0x08008257
 800814c:	680b      	ldr	r3, [r1, #0]
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	600a      	str	r2, [r1, #0]
 8008154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800815c:	2301      	movs	r3, #1
 800815e:	e0a3      	b.n	80082a8 <_printf_i+0x1f4>
 8008160:	6825      	ldr	r5, [r4, #0]
 8008162:	6808      	ldr	r0, [r1, #0]
 8008164:	062e      	lsls	r6, r5, #24
 8008166:	f100 0304 	add.w	r3, r0, #4
 800816a:	d50a      	bpl.n	8008182 <_printf_i+0xce>
 800816c:	6805      	ldr	r5, [r0, #0]
 800816e:	600b      	str	r3, [r1, #0]
 8008170:	2d00      	cmp	r5, #0
 8008172:	da03      	bge.n	800817c <_printf_i+0xc8>
 8008174:	232d      	movs	r3, #45	; 0x2d
 8008176:	426d      	negs	r5, r5
 8008178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817c:	485e      	ldr	r0, [pc, #376]	; (80082f8 <_printf_i+0x244>)
 800817e:	230a      	movs	r3, #10
 8008180:	e019      	b.n	80081b6 <_printf_i+0x102>
 8008182:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008186:	6805      	ldr	r5, [r0, #0]
 8008188:	600b      	str	r3, [r1, #0]
 800818a:	bf18      	it	ne
 800818c:	b22d      	sxthne	r5, r5
 800818e:	e7ef      	b.n	8008170 <_printf_i+0xbc>
 8008190:	680b      	ldr	r3, [r1, #0]
 8008192:	6825      	ldr	r5, [r4, #0]
 8008194:	1d18      	adds	r0, r3, #4
 8008196:	6008      	str	r0, [r1, #0]
 8008198:	0628      	lsls	r0, r5, #24
 800819a:	d501      	bpl.n	80081a0 <_printf_i+0xec>
 800819c:	681d      	ldr	r5, [r3, #0]
 800819e:	e002      	b.n	80081a6 <_printf_i+0xf2>
 80081a0:	0669      	lsls	r1, r5, #25
 80081a2:	d5fb      	bpl.n	800819c <_printf_i+0xe8>
 80081a4:	881d      	ldrh	r5, [r3, #0]
 80081a6:	4854      	ldr	r0, [pc, #336]	; (80082f8 <_printf_i+0x244>)
 80081a8:	2f6f      	cmp	r7, #111	; 0x6f
 80081aa:	bf0c      	ite	eq
 80081ac:	2308      	moveq	r3, #8
 80081ae:	230a      	movne	r3, #10
 80081b0:	2100      	movs	r1, #0
 80081b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081b6:	6866      	ldr	r6, [r4, #4]
 80081b8:	60a6      	str	r6, [r4, #8]
 80081ba:	2e00      	cmp	r6, #0
 80081bc:	bfa2      	ittt	ge
 80081be:	6821      	ldrge	r1, [r4, #0]
 80081c0:	f021 0104 	bicge.w	r1, r1, #4
 80081c4:	6021      	strge	r1, [r4, #0]
 80081c6:	b90d      	cbnz	r5, 80081cc <_printf_i+0x118>
 80081c8:	2e00      	cmp	r6, #0
 80081ca:	d04d      	beq.n	8008268 <_printf_i+0x1b4>
 80081cc:	4616      	mov	r6, r2
 80081ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80081d2:	fb03 5711 	mls	r7, r3, r1, r5
 80081d6:	5dc7      	ldrb	r7, [r0, r7]
 80081d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081dc:	462f      	mov	r7, r5
 80081de:	42bb      	cmp	r3, r7
 80081e0:	460d      	mov	r5, r1
 80081e2:	d9f4      	bls.n	80081ce <_printf_i+0x11a>
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d10b      	bne.n	8008200 <_printf_i+0x14c>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	07df      	lsls	r7, r3, #31
 80081ec:	d508      	bpl.n	8008200 <_printf_i+0x14c>
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	6861      	ldr	r1, [r4, #4]
 80081f2:	4299      	cmp	r1, r3
 80081f4:	bfde      	ittt	le
 80081f6:	2330      	movle	r3, #48	; 0x30
 80081f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008200:	1b92      	subs	r2, r2, r6
 8008202:	6122      	str	r2, [r4, #16]
 8008204:	f8cd a000 	str.w	sl, [sp]
 8008208:	464b      	mov	r3, r9
 800820a:	aa03      	add	r2, sp, #12
 800820c:	4621      	mov	r1, r4
 800820e:	4640      	mov	r0, r8
 8008210:	f7ff fee2 	bl	8007fd8 <_printf_common>
 8008214:	3001      	adds	r0, #1
 8008216:	d14c      	bne.n	80082b2 <_printf_i+0x1fe>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800821c:	b004      	add	sp, #16
 800821e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008222:	4835      	ldr	r0, [pc, #212]	; (80082f8 <_printf_i+0x244>)
 8008224:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	680e      	ldr	r6, [r1, #0]
 800822c:	061f      	lsls	r7, r3, #24
 800822e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008232:	600e      	str	r6, [r1, #0]
 8008234:	d514      	bpl.n	8008260 <_printf_i+0x1ac>
 8008236:	07d9      	lsls	r1, r3, #31
 8008238:	bf44      	itt	mi
 800823a:	f043 0320 	orrmi.w	r3, r3, #32
 800823e:	6023      	strmi	r3, [r4, #0]
 8008240:	b91d      	cbnz	r5, 800824a <_printf_i+0x196>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f023 0320 	bic.w	r3, r3, #32
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	2310      	movs	r3, #16
 800824c:	e7b0      	b.n	80081b0 <_printf_i+0xfc>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	f043 0320 	orr.w	r3, r3, #32
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	2378      	movs	r3, #120	; 0x78
 8008258:	4828      	ldr	r0, [pc, #160]	; (80082fc <_printf_i+0x248>)
 800825a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800825e:	e7e3      	b.n	8008228 <_printf_i+0x174>
 8008260:	065e      	lsls	r6, r3, #25
 8008262:	bf48      	it	mi
 8008264:	b2ad      	uxthmi	r5, r5
 8008266:	e7e6      	b.n	8008236 <_printf_i+0x182>
 8008268:	4616      	mov	r6, r2
 800826a:	e7bb      	b.n	80081e4 <_printf_i+0x130>
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	6826      	ldr	r6, [r4, #0]
 8008270:	6960      	ldr	r0, [r4, #20]
 8008272:	1d1d      	adds	r5, r3, #4
 8008274:	600d      	str	r5, [r1, #0]
 8008276:	0635      	lsls	r5, r6, #24
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	d501      	bpl.n	8008280 <_printf_i+0x1cc>
 800827c:	6018      	str	r0, [r3, #0]
 800827e:	e002      	b.n	8008286 <_printf_i+0x1d2>
 8008280:	0671      	lsls	r1, r6, #25
 8008282:	d5fb      	bpl.n	800827c <_printf_i+0x1c8>
 8008284:	8018      	strh	r0, [r3, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	4616      	mov	r6, r2
 800828c:	e7ba      	b.n	8008204 <_printf_i+0x150>
 800828e:	680b      	ldr	r3, [r1, #0]
 8008290:	1d1a      	adds	r2, r3, #4
 8008292:	600a      	str	r2, [r1, #0]
 8008294:	681e      	ldr	r6, [r3, #0]
 8008296:	6862      	ldr	r2, [r4, #4]
 8008298:	2100      	movs	r1, #0
 800829a:	4630      	mov	r0, r6
 800829c:	f7f7 ffa0 	bl	80001e0 <memchr>
 80082a0:	b108      	cbz	r0, 80082a6 <_printf_i+0x1f2>
 80082a2:	1b80      	subs	r0, r0, r6
 80082a4:	6060      	str	r0, [r4, #4]
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	2300      	movs	r3, #0
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b0:	e7a8      	b.n	8008204 <_printf_i+0x150>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	4632      	mov	r2, r6
 80082b6:	4649      	mov	r1, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	47d0      	blx	sl
 80082bc:	3001      	adds	r0, #1
 80082be:	d0ab      	beq.n	8008218 <_printf_i+0x164>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	079b      	lsls	r3, r3, #30
 80082c4:	d413      	bmi.n	80082ee <_printf_i+0x23a>
 80082c6:	68e0      	ldr	r0, [r4, #12]
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	4298      	cmp	r0, r3
 80082cc:	bfb8      	it	lt
 80082ce:	4618      	movlt	r0, r3
 80082d0:	e7a4      	b.n	800821c <_printf_i+0x168>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4632      	mov	r2, r6
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d09b      	beq.n	8008218 <_printf_i+0x164>
 80082e0:	3501      	adds	r5, #1
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	9903      	ldr	r1, [sp, #12]
 80082e6:	1a5b      	subs	r3, r3, r1
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dcf2      	bgt.n	80082d2 <_printf_i+0x21e>
 80082ec:	e7eb      	b.n	80082c6 <_printf_i+0x212>
 80082ee:	2500      	movs	r5, #0
 80082f0:	f104 0619 	add.w	r6, r4, #25
 80082f4:	e7f5      	b.n	80082e2 <_printf_i+0x22e>
 80082f6:	bf00      	nop
 80082f8:	08008fe7 	.word	0x08008fe7
 80082fc:	08008ff8 	.word	0x08008ff8

08008300 <_sbrk_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	; (800831c <_sbrk_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7fb fae8 	bl	80038e0 <_sbrk>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_sbrk_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_sbrk_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20000898 	.word	0x20000898

08008320 <__swbuf_r>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	460e      	mov	r6, r1
 8008324:	4614      	mov	r4, r2
 8008326:	4605      	mov	r5, r0
 8008328:	b118      	cbz	r0, 8008332 <__swbuf_r+0x12>
 800832a:	6983      	ldr	r3, [r0, #24]
 800832c:	b90b      	cbnz	r3, 8008332 <__swbuf_r+0x12>
 800832e:	f000 f9d9 	bl	80086e4 <__sinit>
 8008332:	4b21      	ldr	r3, [pc, #132]	; (80083b8 <__swbuf_r+0x98>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d12b      	bne.n	8008390 <__swbuf_r+0x70>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	69a3      	ldr	r3, [r4, #24]
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	071a      	lsls	r2, r3, #28
 8008342:	d52f      	bpl.n	80083a4 <__swbuf_r+0x84>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b36b      	cbz	r3, 80083a4 <__swbuf_r+0x84>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	6820      	ldr	r0, [r4, #0]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	6963      	ldr	r3, [r4, #20]
 8008350:	b2f6      	uxtb	r6, r6
 8008352:	4283      	cmp	r3, r0
 8008354:	4637      	mov	r7, r6
 8008356:	dc04      	bgt.n	8008362 <__swbuf_r+0x42>
 8008358:	4621      	mov	r1, r4
 800835a:	4628      	mov	r0, r5
 800835c:	f000 f92e 	bl	80085bc <_fflush_r>
 8008360:	bb30      	cbnz	r0, 80083b0 <__swbuf_r+0x90>
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	3b01      	subs	r3, #1
 8008366:	60a3      	str	r3, [r4, #8]
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	701e      	strb	r6, [r3, #0]
 8008370:	6963      	ldr	r3, [r4, #20]
 8008372:	3001      	adds	r0, #1
 8008374:	4283      	cmp	r3, r0
 8008376:	d004      	beq.n	8008382 <__swbuf_r+0x62>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	07db      	lsls	r3, r3, #31
 800837c:	d506      	bpl.n	800838c <__swbuf_r+0x6c>
 800837e:	2e0a      	cmp	r6, #10
 8008380:	d104      	bne.n	800838c <__swbuf_r+0x6c>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 f919 	bl	80085bc <_fflush_r>
 800838a:	b988      	cbnz	r0, 80083b0 <__swbuf_r+0x90>
 800838c:	4638      	mov	r0, r7
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <__swbuf_r+0x9c>)
 8008392:	429c      	cmp	r4, r3
 8008394:	d101      	bne.n	800839a <__swbuf_r+0x7a>
 8008396:	68ac      	ldr	r4, [r5, #8]
 8008398:	e7cf      	b.n	800833a <__swbuf_r+0x1a>
 800839a:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <__swbuf_r+0xa0>)
 800839c:	429c      	cmp	r4, r3
 800839e:	bf08      	it	eq
 80083a0:	68ec      	ldreq	r4, [r5, #12]
 80083a2:	e7ca      	b.n	800833a <__swbuf_r+0x1a>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 f80c 	bl	80083c4 <__swsetup_r>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d0cb      	beq.n	8008348 <__swbuf_r+0x28>
 80083b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083b4:	e7ea      	b.n	800838c <__swbuf_r+0x6c>
 80083b6:	bf00      	nop
 80083b8:	0800902c 	.word	0x0800902c
 80083bc:	0800904c 	.word	0x0800904c
 80083c0:	0800900c 	.word	0x0800900c

080083c4 <__swsetup_r>:
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <__swsetup_r+0xcc>)
 80083c6:	b570      	push	{r4, r5, r6, lr}
 80083c8:	681d      	ldr	r5, [r3, #0]
 80083ca:	4606      	mov	r6, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	b125      	cbz	r5, 80083da <__swsetup_r+0x16>
 80083d0:	69ab      	ldr	r3, [r5, #24]
 80083d2:	b913      	cbnz	r3, 80083da <__swsetup_r+0x16>
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 f985 	bl	80086e4 <__sinit>
 80083da:	4b2e      	ldr	r3, [pc, #184]	; (8008494 <__swsetup_r+0xd0>)
 80083dc:	429c      	cmp	r4, r3
 80083de:	d10f      	bne.n	8008400 <__swsetup_r+0x3c>
 80083e0:	686c      	ldr	r4, [r5, #4]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e8:	0719      	lsls	r1, r3, #28
 80083ea:	d42c      	bmi.n	8008446 <__swsetup_r+0x82>
 80083ec:	06dd      	lsls	r5, r3, #27
 80083ee:	d411      	bmi.n	8008414 <__swsetup_r+0x50>
 80083f0:	2309      	movs	r3, #9
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083fe:	e03e      	b.n	800847e <__swsetup_r+0xba>
 8008400:	4b25      	ldr	r3, [pc, #148]	; (8008498 <__swsetup_r+0xd4>)
 8008402:	429c      	cmp	r4, r3
 8008404:	d101      	bne.n	800840a <__swsetup_r+0x46>
 8008406:	68ac      	ldr	r4, [r5, #8]
 8008408:	e7eb      	b.n	80083e2 <__swsetup_r+0x1e>
 800840a:	4b24      	ldr	r3, [pc, #144]	; (800849c <__swsetup_r+0xd8>)
 800840c:	429c      	cmp	r4, r3
 800840e:	bf08      	it	eq
 8008410:	68ec      	ldreq	r4, [r5, #12]
 8008412:	e7e6      	b.n	80083e2 <__swsetup_r+0x1e>
 8008414:	0758      	lsls	r0, r3, #29
 8008416:	d512      	bpl.n	800843e <__swsetup_r+0x7a>
 8008418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841a:	b141      	cbz	r1, 800842e <__swsetup_r+0x6a>
 800841c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <__swsetup_r+0x66>
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff fa77 	bl	8007918 <_free_r>
 800842a:	2300      	movs	r3, #0
 800842c:	6363      	str	r3, [r4, #52]	; 0x34
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	2300      	movs	r3, #0
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f043 0308 	orr.w	r3, r3, #8
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	b94b      	cbnz	r3, 800845e <__swsetup_r+0x9a>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008454:	d003      	beq.n	800845e <__swsetup_r+0x9a>
 8008456:	4621      	mov	r1, r4
 8008458:	4630      	mov	r0, r6
 800845a:	f000 fa07 	bl	800886c <__smakebuf_r>
 800845e:	89a0      	ldrh	r0, [r4, #12]
 8008460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008464:	f010 0301 	ands.w	r3, r0, #1
 8008468:	d00a      	beq.n	8008480 <__swsetup_r+0xbc>
 800846a:	2300      	movs	r3, #0
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	6963      	ldr	r3, [r4, #20]
 8008470:	425b      	negs	r3, r3
 8008472:	61a3      	str	r3, [r4, #24]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	b943      	cbnz	r3, 800848a <__swsetup_r+0xc6>
 8008478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800847c:	d1ba      	bne.n	80083f4 <__swsetup_r+0x30>
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	0781      	lsls	r1, r0, #30
 8008482:	bf58      	it	pl
 8008484:	6963      	ldrpl	r3, [r4, #20]
 8008486:	60a3      	str	r3, [r4, #8]
 8008488:	e7f4      	b.n	8008474 <__swsetup_r+0xb0>
 800848a:	2000      	movs	r0, #0
 800848c:	e7f7      	b.n	800847e <__swsetup_r+0xba>
 800848e:	bf00      	nop
 8008490:	20000040 	.word	0x20000040
 8008494:	0800902c 	.word	0x0800902c
 8008498:	0800904c 	.word	0x0800904c
 800849c:	0800900c 	.word	0x0800900c

080084a0 <abort>:
 80084a0:	b508      	push	{r3, lr}
 80084a2:	2006      	movs	r0, #6
 80084a4:	f000 faa4 	bl	80089f0 <raise>
 80084a8:	2001      	movs	r0, #1
 80084aa:	f7fb f9a1 	bl	80037f0 <_exit>
	...

080084b0 <__sflush_r>:
 80084b0:	898a      	ldrh	r2, [r1, #12]
 80084b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b6:	4605      	mov	r5, r0
 80084b8:	0710      	lsls	r0, r2, #28
 80084ba:	460c      	mov	r4, r1
 80084bc:	d458      	bmi.n	8008570 <__sflush_r+0xc0>
 80084be:	684b      	ldr	r3, [r1, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc05      	bgt.n	80084d0 <__sflush_r+0x20>
 80084c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dc02      	bgt.n	80084d0 <__sflush_r+0x20>
 80084ca:	2000      	movs	r0, #0
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d2:	2e00      	cmp	r6, #0
 80084d4:	d0f9      	beq.n	80084ca <__sflush_r+0x1a>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084dc:	682f      	ldr	r7, [r5, #0]
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	d032      	beq.n	8008548 <__sflush_r+0x98>
 80084e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	075a      	lsls	r2, r3, #29
 80084e8:	d505      	bpl.n	80084f6 <__sflush_r+0x46>
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	1ac0      	subs	r0, r0, r3
 80084ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084f0:	b10b      	cbz	r3, 80084f6 <__sflush_r+0x46>
 80084f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084f4:	1ac0      	subs	r0, r0, r3
 80084f6:	2300      	movs	r3, #0
 80084f8:	4602      	mov	r2, r0
 80084fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084fc:	6a21      	ldr	r1, [r4, #32]
 80084fe:	4628      	mov	r0, r5
 8008500:	47b0      	blx	r6
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	d106      	bne.n	8008516 <__sflush_r+0x66>
 8008508:	6829      	ldr	r1, [r5, #0]
 800850a:	291d      	cmp	r1, #29
 800850c:	d82c      	bhi.n	8008568 <__sflush_r+0xb8>
 800850e:	4a2a      	ldr	r2, [pc, #168]	; (80085b8 <__sflush_r+0x108>)
 8008510:	40ca      	lsrs	r2, r1
 8008512:	07d6      	lsls	r6, r2, #31
 8008514:	d528      	bpl.n	8008568 <__sflush_r+0xb8>
 8008516:	2200      	movs	r2, #0
 8008518:	6062      	str	r2, [r4, #4]
 800851a:	04d9      	lsls	r1, r3, #19
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	6022      	str	r2, [r4, #0]
 8008520:	d504      	bpl.n	800852c <__sflush_r+0x7c>
 8008522:	1c42      	adds	r2, r0, #1
 8008524:	d101      	bne.n	800852a <__sflush_r+0x7a>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b903      	cbnz	r3, 800852c <__sflush_r+0x7c>
 800852a:	6560      	str	r0, [r4, #84]	; 0x54
 800852c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852e:	602f      	str	r7, [r5, #0]
 8008530:	2900      	cmp	r1, #0
 8008532:	d0ca      	beq.n	80084ca <__sflush_r+0x1a>
 8008534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008538:	4299      	cmp	r1, r3
 800853a:	d002      	beq.n	8008542 <__sflush_r+0x92>
 800853c:	4628      	mov	r0, r5
 800853e:	f7ff f9eb 	bl	8007918 <_free_r>
 8008542:	2000      	movs	r0, #0
 8008544:	6360      	str	r0, [r4, #52]	; 0x34
 8008546:	e7c1      	b.n	80084cc <__sflush_r+0x1c>
 8008548:	6a21      	ldr	r1, [r4, #32]
 800854a:	2301      	movs	r3, #1
 800854c:	4628      	mov	r0, r5
 800854e:	47b0      	blx	r6
 8008550:	1c41      	adds	r1, r0, #1
 8008552:	d1c7      	bne.n	80084e4 <__sflush_r+0x34>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0c4      	beq.n	80084e4 <__sflush_r+0x34>
 800855a:	2b1d      	cmp	r3, #29
 800855c:	d001      	beq.n	8008562 <__sflush_r+0xb2>
 800855e:	2b16      	cmp	r3, #22
 8008560:	d101      	bne.n	8008566 <__sflush_r+0xb6>
 8008562:	602f      	str	r7, [r5, #0]
 8008564:	e7b1      	b.n	80084ca <__sflush_r+0x1a>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	e7ad      	b.n	80084cc <__sflush_r+0x1c>
 8008570:	690f      	ldr	r7, [r1, #16]
 8008572:	2f00      	cmp	r7, #0
 8008574:	d0a9      	beq.n	80084ca <__sflush_r+0x1a>
 8008576:	0793      	lsls	r3, r2, #30
 8008578:	680e      	ldr	r6, [r1, #0]
 800857a:	bf08      	it	eq
 800857c:	694b      	ldreq	r3, [r1, #20]
 800857e:	600f      	str	r7, [r1, #0]
 8008580:	bf18      	it	ne
 8008582:	2300      	movne	r3, #0
 8008584:	eba6 0807 	sub.w	r8, r6, r7
 8008588:	608b      	str	r3, [r1, #8]
 800858a:	f1b8 0f00 	cmp.w	r8, #0
 800858e:	dd9c      	ble.n	80084ca <__sflush_r+0x1a>
 8008590:	6a21      	ldr	r1, [r4, #32]
 8008592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008594:	4643      	mov	r3, r8
 8008596:	463a      	mov	r2, r7
 8008598:	4628      	mov	r0, r5
 800859a:	47b0      	blx	r6
 800859c:	2800      	cmp	r0, #0
 800859e:	dc06      	bgt.n	80085ae <__sflush_r+0xfe>
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ac:	e78e      	b.n	80084cc <__sflush_r+0x1c>
 80085ae:	4407      	add	r7, r0
 80085b0:	eba8 0800 	sub.w	r8, r8, r0
 80085b4:	e7e9      	b.n	800858a <__sflush_r+0xda>
 80085b6:	bf00      	nop
 80085b8:	20400001 	.word	0x20400001

080085bc <_fflush_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	690b      	ldr	r3, [r1, #16]
 80085c0:	4605      	mov	r5, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b913      	cbnz	r3, 80085cc <_fflush_r+0x10>
 80085c6:	2500      	movs	r5, #0
 80085c8:	4628      	mov	r0, r5
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	b118      	cbz	r0, 80085d6 <_fflush_r+0x1a>
 80085ce:	6983      	ldr	r3, [r0, #24]
 80085d0:	b90b      	cbnz	r3, 80085d6 <_fflush_r+0x1a>
 80085d2:	f000 f887 	bl	80086e4 <__sinit>
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <_fflush_r+0x6c>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d11b      	bne.n	8008614 <_fflush_r+0x58>
 80085dc:	686c      	ldr	r4, [r5, #4]
 80085de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0ef      	beq.n	80085c6 <_fflush_r+0xa>
 80085e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d404      	bmi.n	80085f6 <_fflush_r+0x3a>
 80085ec:	0599      	lsls	r1, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_fflush_r+0x3a>
 80085f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085f2:	f000 f915 	bl	8008820 <__retarget_lock_acquire_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	4621      	mov	r1, r4
 80085fa:	f7ff ff59 	bl	80084b0 <__sflush_r>
 80085fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008600:	07da      	lsls	r2, r3, #31
 8008602:	4605      	mov	r5, r0
 8008604:	d4e0      	bmi.n	80085c8 <_fflush_r+0xc>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d4dd      	bmi.n	80085c8 <_fflush_r+0xc>
 800860c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860e:	f000 f908 	bl	8008822 <__retarget_lock_release_recursive>
 8008612:	e7d9      	b.n	80085c8 <_fflush_r+0xc>
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <_fflush_r+0x70>)
 8008616:	429c      	cmp	r4, r3
 8008618:	d101      	bne.n	800861e <_fflush_r+0x62>
 800861a:	68ac      	ldr	r4, [r5, #8]
 800861c:	e7df      	b.n	80085de <_fflush_r+0x22>
 800861e:	4b04      	ldr	r3, [pc, #16]	; (8008630 <_fflush_r+0x74>)
 8008620:	429c      	cmp	r4, r3
 8008622:	bf08      	it	eq
 8008624:	68ec      	ldreq	r4, [r5, #12]
 8008626:	e7da      	b.n	80085de <_fflush_r+0x22>
 8008628:	0800902c 	.word	0x0800902c
 800862c:	0800904c 	.word	0x0800904c
 8008630:	0800900c 	.word	0x0800900c

08008634 <std>:
 8008634:	2300      	movs	r3, #0
 8008636:	b510      	push	{r4, lr}
 8008638:	4604      	mov	r4, r0
 800863a:	e9c0 3300 	strd	r3, r3, [r0]
 800863e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008642:	6083      	str	r3, [r0, #8]
 8008644:	8181      	strh	r1, [r0, #12]
 8008646:	6643      	str	r3, [r0, #100]	; 0x64
 8008648:	81c2      	strh	r2, [r0, #14]
 800864a:	6183      	str	r3, [r0, #24]
 800864c:	4619      	mov	r1, r3
 800864e:	2208      	movs	r2, #8
 8008650:	305c      	adds	r0, #92	; 0x5c
 8008652:	f7ff f867 	bl	8007724 <memset>
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <std+0x38>)
 8008658:	6263      	str	r3, [r4, #36]	; 0x24
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <std+0x3c>)
 800865c:	62a3      	str	r3, [r4, #40]	; 0x28
 800865e:	4b05      	ldr	r3, [pc, #20]	; (8008674 <std+0x40>)
 8008660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <std+0x44>)
 8008664:	6224      	str	r4, [r4, #32]
 8008666:	6323      	str	r3, [r4, #48]	; 0x30
 8008668:	bd10      	pop	{r4, pc}
 800866a:	bf00      	nop
 800866c:	08008a29 	.word	0x08008a29
 8008670:	08008a4b 	.word	0x08008a4b
 8008674:	08008a83 	.word	0x08008a83
 8008678:	08008aa7 	.word	0x08008aa7

0800867c <_cleanup_r>:
 800867c:	4901      	ldr	r1, [pc, #4]	; (8008684 <_cleanup_r+0x8>)
 800867e:	f000 b8af 	b.w	80087e0 <_fwalk_reent>
 8008682:	bf00      	nop
 8008684:	080085bd 	.word	0x080085bd

08008688 <__sfmoreglue>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	1e4a      	subs	r2, r1, #1
 800868c:	2568      	movs	r5, #104	; 0x68
 800868e:	4355      	muls	r5, r2
 8008690:	460e      	mov	r6, r1
 8008692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008696:	f7ff f98f 	bl	80079b8 <_malloc_r>
 800869a:	4604      	mov	r4, r0
 800869c:	b140      	cbz	r0, 80086b0 <__sfmoreglue+0x28>
 800869e:	2100      	movs	r1, #0
 80086a0:	e9c0 1600 	strd	r1, r6, [r0]
 80086a4:	300c      	adds	r0, #12
 80086a6:	60a0      	str	r0, [r4, #8]
 80086a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086ac:	f7ff f83a 	bl	8007724 <memset>
 80086b0:	4620      	mov	r0, r4
 80086b2:	bd70      	pop	{r4, r5, r6, pc}

080086b4 <__sfp_lock_acquire>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__sfp_lock_acquire+0x8>)
 80086b6:	f000 b8b3 	b.w	8008820 <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	200008a4 	.word	0x200008a4

080086c0 <__sfp_lock_release>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__sfp_lock_release+0x8>)
 80086c2:	f000 b8ae 	b.w	8008822 <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	200008a4 	.word	0x200008a4

080086cc <__sinit_lock_acquire>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__sinit_lock_acquire+0x8>)
 80086ce:	f000 b8a7 	b.w	8008820 <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	2000089f 	.word	0x2000089f

080086d8 <__sinit_lock_release>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__sinit_lock_release+0x8>)
 80086da:	f000 b8a2 	b.w	8008822 <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	2000089f 	.word	0x2000089f

080086e4 <__sinit>:
 80086e4:	b510      	push	{r4, lr}
 80086e6:	4604      	mov	r4, r0
 80086e8:	f7ff fff0 	bl	80086cc <__sinit_lock_acquire>
 80086ec:	69a3      	ldr	r3, [r4, #24]
 80086ee:	b11b      	cbz	r3, 80086f8 <__sinit+0x14>
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	f7ff bff0 	b.w	80086d8 <__sinit_lock_release>
 80086f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086fc:	6523      	str	r3, [r4, #80]	; 0x50
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <__sinit+0x68>)
 8008700:	4a13      	ldr	r2, [pc, #76]	; (8008750 <__sinit+0x6c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	62a2      	str	r2, [r4, #40]	; 0x28
 8008706:	42a3      	cmp	r3, r4
 8008708:	bf04      	itt	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	61a3      	streq	r3, [r4, #24]
 800870e:	4620      	mov	r0, r4
 8008710:	f000 f820 	bl	8008754 <__sfp>
 8008714:	6060      	str	r0, [r4, #4]
 8008716:	4620      	mov	r0, r4
 8008718:	f000 f81c 	bl	8008754 <__sfp>
 800871c:	60a0      	str	r0, [r4, #8]
 800871e:	4620      	mov	r0, r4
 8008720:	f000 f818 	bl	8008754 <__sfp>
 8008724:	2200      	movs	r2, #0
 8008726:	60e0      	str	r0, [r4, #12]
 8008728:	2104      	movs	r1, #4
 800872a:	6860      	ldr	r0, [r4, #4]
 800872c:	f7ff ff82 	bl	8008634 <std>
 8008730:	68a0      	ldr	r0, [r4, #8]
 8008732:	2201      	movs	r2, #1
 8008734:	2109      	movs	r1, #9
 8008736:	f7ff ff7d 	bl	8008634 <std>
 800873a:	68e0      	ldr	r0, [r4, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	2112      	movs	r1, #18
 8008740:	f7ff ff78 	bl	8008634 <std>
 8008744:	2301      	movs	r3, #1
 8008746:	61a3      	str	r3, [r4, #24]
 8008748:	e7d2      	b.n	80086f0 <__sinit+0xc>
 800874a:	bf00      	nop
 800874c:	08008f20 	.word	0x08008f20
 8008750:	0800867d 	.word	0x0800867d

08008754 <__sfp>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	4607      	mov	r7, r0
 8008758:	f7ff ffac 	bl	80086b4 <__sfp_lock_acquire>
 800875c:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <__sfp+0x84>)
 800875e:	681e      	ldr	r6, [r3, #0]
 8008760:	69b3      	ldr	r3, [r6, #24]
 8008762:	b913      	cbnz	r3, 800876a <__sfp+0x16>
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff ffbd 	bl	80086e4 <__sinit>
 800876a:	3648      	adds	r6, #72	; 0x48
 800876c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008770:	3b01      	subs	r3, #1
 8008772:	d503      	bpl.n	800877c <__sfp+0x28>
 8008774:	6833      	ldr	r3, [r6, #0]
 8008776:	b30b      	cbz	r3, 80087bc <__sfp+0x68>
 8008778:	6836      	ldr	r6, [r6, #0]
 800877a:	e7f7      	b.n	800876c <__sfp+0x18>
 800877c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008780:	b9d5      	cbnz	r5, 80087b8 <__sfp+0x64>
 8008782:	4b16      	ldr	r3, [pc, #88]	; (80087dc <__sfp+0x88>)
 8008784:	60e3      	str	r3, [r4, #12]
 8008786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800878a:	6665      	str	r5, [r4, #100]	; 0x64
 800878c:	f000 f847 	bl	800881e <__retarget_lock_init_recursive>
 8008790:	f7ff ff96 	bl	80086c0 <__sfp_lock_release>
 8008794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800879c:	6025      	str	r5, [r4, #0]
 800879e:	61a5      	str	r5, [r4, #24]
 80087a0:	2208      	movs	r2, #8
 80087a2:	4629      	mov	r1, r5
 80087a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087a8:	f7fe ffbc 	bl	8007724 <memset>
 80087ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087b4:	4620      	mov	r0, r4
 80087b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b8:	3468      	adds	r4, #104	; 0x68
 80087ba:	e7d9      	b.n	8008770 <__sfp+0x1c>
 80087bc:	2104      	movs	r1, #4
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff ff62 	bl	8008688 <__sfmoreglue>
 80087c4:	4604      	mov	r4, r0
 80087c6:	6030      	str	r0, [r6, #0]
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d1d5      	bne.n	8008778 <__sfp+0x24>
 80087cc:	f7ff ff78 	bl	80086c0 <__sfp_lock_release>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	e7ee      	b.n	80087b4 <__sfp+0x60>
 80087d6:	bf00      	nop
 80087d8:	08008f20 	.word	0x08008f20
 80087dc:	ffff0001 	.word	0xffff0001

080087e0 <_fwalk_reent>:
 80087e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e4:	4606      	mov	r6, r0
 80087e6:	4688      	mov	r8, r1
 80087e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087ec:	2700      	movs	r7, #0
 80087ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087f2:	f1b9 0901 	subs.w	r9, r9, #1
 80087f6:	d505      	bpl.n	8008804 <_fwalk_reent+0x24>
 80087f8:	6824      	ldr	r4, [r4, #0]
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	d1f7      	bne.n	80087ee <_fwalk_reent+0xe>
 80087fe:	4638      	mov	r0, r7
 8008800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008804:	89ab      	ldrh	r3, [r5, #12]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d907      	bls.n	800881a <_fwalk_reent+0x3a>
 800880a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800880e:	3301      	adds	r3, #1
 8008810:	d003      	beq.n	800881a <_fwalk_reent+0x3a>
 8008812:	4629      	mov	r1, r5
 8008814:	4630      	mov	r0, r6
 8008816:	47c0      	blx	r8
 8008818:	4307      	orrs	r7, r0
 800881a:	3568      	adds	r5, #104	; 0x68
 800881c:	e7e9      	b.n	80087f2 <_fwalk_reent+0x12>

0800881e <__retarget_lock_init_recursive>:
 800881e:	4770      	bx	lr

08008820 <__retarget_lock_acquire_recursive>:
 8008820:	4770      	bx	lr

08008822 <__retarget_lock_release_recursive>:
 8008822:	4770      	bx	lr

08008824 <__swhatbuf_r>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	460e      	mov	r6, r1
 8008828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882c:	2900      	cmp	r1, #0
 800882e:	b096      	sub	sp, #88	; 0x58
 8008830:	4614      	mov	r4, r2
 8008832:	461d      	mov	r5, r3
 8008834:	da07      	bge.n	8008846 <__swhatbuf_r+0x22>
 8008836:	2300      	movs	r3, #0
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	89b3      	ldrh	r3, [r6, #12]
 800883c:	061a      	lsls	r2, r3, #24
 800883e:	d410      	bmi.n	8008862 <__swhatbuf_r+0x3e>
 8008840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008844:	e00e      	b.n	8008864 <__swhatbuf_r+0x40>
 8008846:	466a      	mov	r2, sp
 8008848:	f000 f954 	bl	8008af4 <_fstat_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	dbf2      	blt.n	8008836 <__swhatbuf_r+0x12>
 8008850:	9a01      	ldr	r2, [sp, #4]
 8008852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800885a:	425a      	negs	r2, r3
 800885c:	415a      	adcs	r2, r3
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	e7ee      	b.n	8008840 <__swhatbuf_r+0x1c>
 8008862:	2340      	movs	r3, #64	; 0x40
 8008864:	2000      	movs	r0, #0
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	b016      	add	sp, #88	; 0x58
 800886a:	bd70      	pop	{r4, r5, r6, pc}

0800886c <__smakebuf_r>:
 800886c:	898b      	ldrh	r3, [r1, #12]
 800886e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008870:	079d      	lsls	r5, r3, #30
 8008872:	4606      	mov	r6, r0
 8008874:	460c      	mov	r4, r1
 8008876:	d507      	bpl.n	8008888 <__smakebuf_r+0x1c>
 8008878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	2301      	movs	r3, #1
 8008882:	6163      	str	r3, [r4, #20]
 8008884:	b002      	add	sp, #8
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	ab01      	add	r3, sp, #4
 800888a:	466a      	mov	r2, sp
 800888c:	f7ff ffca 	bl	8008824 <__swhatbuf_r>
 8008890:	9900      	ldr	r1, [sp, #0]
 8008892:	4605      	mov	r5, r0
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff f88f 	bl	80079b8 <_malloc_r>
 800889a:	b948      	cbnz	r0, 80088b0 <__smakebuf_r+0x44>
 800889c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a0:	059a      	lsls	r2, r3, #22
 80088a2:	d4ef      	bmi.n	8008884 <__smakebuf_r+0x18>
 80088a4:	f023 0303 	bic.w	r3, r3, #3
 80088a8:	f043 0302 	orr.w	r3, r3, #2
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	e7e3      	b.n	8008878 <__smakebuf_r+0xc>
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <__smakebuf_r+0x7c>)
 80088b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	6020      	str	r0, [r4, #0]
 80088b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	6163      	str	r3, [r4, #20]
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	6120      	str	r0, [r4, #16]
 80088c6:	b15b      	cbz	r3, 80088e0 <__smakebuf_r+0x74>
 80088c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 f923 	bl	8008b18 <_isatty_r>
 80088d2:	b128      	cbz	r0, 80088e0 <__smakebuf_r+0x74>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	89a0      	ldrh	r0, [r4, #12]
 80088e2:	4305      	orrs	r5, r0
 80088e4:	81a5      	strh	r5, [r4, #12]
 80088e6:	e7cd      	b.n	8008884 <__smakebuf_r+0x18>
 80088e8:	0800867d 	.word	0x0800867d

080088ec <memcpy>:
 80088ec:	440a      	add	r2, r1
 80088ee:	4291      	cmp	r1, r2
 80088f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088f4:	d100      	bne.n	80088f8 <memcpy+0xc>
 80088f6:	4770      	bx	lr
 80088f8:	b510      	push	{r4, lr}
 80088fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008902:	4291      	cmp	r1, r2
 8008904:	d1f9      	bne.n	80088fa <memcpy+0xe>
 8008906:	bd10      	pop	{r4, pc}

08008908 <memmove>:
 8008908:	4288      	cmp	r0, r1
 800890a:	b510      	push	{r4, lr}
 800890c:	eb01 0402 	add.w	r4, r1, r2
 8008910:	d902      	bls.n	8008918 <memmove+0x10>
 8008912:	4284      	cmp	r4, r0
 8008914:	4623      	mov	r3, r4
 8008916:	d807      	bhi.n	8008928 <memmove+0x20>
 8008918:	1e43      	subs	r3, r0, #1
 800891a:	42a1      	cmp	r1, r4
 800891c:	d008      	beq.n	8008930 <memmove+0x28>
 800891e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008926:	e7f8      	b.n	800891a <memmove+0x12>
 8008928:	4402      	add	r2, r0
 800892a:	4601      	mov	r1, r0
 800892c:	428a      	cmp	r2, r1
 800892e:	d100      	bne.n	8008932 <memmove+0x2a>
 8008930:	bd10      	pop	{r4, pc}
 8008932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800893a:	e7f7      	b.n	800892c <memmove+0x24>

0800893c <__malloc_lock>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__malloc_lock+0x8>)
 800893e:	f7ff bf6f 	b.w	8008820 <__retarget_lock_acquire_recursive>
 8008942:	bf00      	nop
 8008944:	200008a0 	.word	0x200008a0

08008948 <__malloc_unlock>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__malloc_unlock+0x8>)
 800894a:	f7ff bf6a 	b.w	8008822 <__retarget_lock_release_recursive>
 800894e:	bf00      	nop
 8008950:	200008a0 	.word	0x200008a0

08008954 <_realloc_r>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	4607      	mov	r7, r0
 8008958:	4614      	mov	r4, r2
 800895a:	460e      	mov	r6, r1
 800895c:	b921      	cbnz	r1, 8008968 <_realloc_r+0x14>
 800895e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008962:	4611      	mov	r1, r2
 8008964:	f7ff b828 	b.w	80079b8 <_malloc_r>
 8008968:	b922      	cbnz	r2, 8008974 <_realloc_r+0x20>
 800896a:	f7fe ffd5 	bl	8007918 <_free_r>
 800896e:	4625      	mov	r5, r4
 8008970:	4628      	mov	r0, r5
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008974:	f000 f8f2 	bl	8008b5c <_malloc_usable_size_r>
 8008978:	42a0      	cmp	r0, r4
 800897a:	d20f      	bcs.n	800899c <_realloc_r+0x48>
 800897c:	4621      	mov	r1, r4
 800897e:	4638      	mov	r0, r7
 8008980:	f7ff f81a 	bl	80079b8 <_malloc_r>
 8008984:	4605      	mov	r5, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	d0f2      	beq.n	8008970 <_realloc_r+0x1c>
 800898a:	4631      	mov	r1, r6
 800898c:	4622      	mov	r2, r4
 800898e:	f7ff ffad 	bl	80088ec <memcpy>
 8008992:	4631      	mov	r1, r6
 8008994:	4638      	mov	r0, r7
 8008996:	f7fe ffbf 	bl	8007918 <_free_r>
 800899a:	e7e9      	b.n	8008970 <_realloc_r+0x1c>
 800899c:	4635      	mov	r5, r6
 800899e:	e7e7      	b.n	8008970 <_realloc_r+0x1c>

080089a0 <_raise_r>:
 80089a0:	291f      	cmp	r1, #31
 80089a2:	b538      	push	{r3, r4, r5, lr}
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	d904      	bls.n	80089b4 <_raise_r+0x14>
 80089aa:	2316      	movs	r3, #22
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089b6:	b112      	cbz	r2, 80089be <_raise_r+0x1e>
 80089b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089bc:	b94b      	cbnz	r3, 80089d2 <_raise_r+0x32>
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f830 	bl	8008a24 <_getpid_r>
 80089c4:	462a      	mov	r2, r5
 80089c6:	4601      	mov	r1, r0
 80089c8:	4620      	mov	r0, r4
 80089ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ce:	f000 b817 	b.w	8008a00 <_kill_r>
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d00a      	beq.n	80089ec <_raise_r+0x4c>
 80089d6:	1c59      	adds	r1, r3, #1
 80089d8:	d103      	bne.n	80089e2 <_raise_r+0x42>
 80089da:	2316      	movs	r3, #22
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	2001      	movs	r0, #1
 80089e0:	e7e7      	b.n	80089b2 <_raise_r+0x12>
 80089e2:	2400      	movs	r4, #0
 80089e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e8:	4628      	mov	r0, r5
 80089ea:	4798      	blx	r3
 80089ec:	2000      	movs	r0, #0
 80089ee:	e7e0      	b.n	80089b2 <_raise_r+0x12>

080089f0 <raise>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <raise+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f7ff bfd3 	b.w	80089a0 <_raise_r>
 80089fa:	bf00      	nop
 80089fc:	20000040 	.word	0x20000040

08008a00 <_kill_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	; (8008a20 <_kill_r+0x20>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	f7fa fedf 	bl	80037d0 <_kill>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d102      	bne.n	8008a1c <_kill_r+0x1c>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b103      	cbz	r3, 8008a1c <_kill_r+0x1c>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000898 	.word	0x20000898

08008a24 <_getpid_r>:
 8008a24:	f7fa becc 	b.w	80037c0 <_getpid>

08008a28 <__sread>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a30:	f000 f89c 	bl	8008b6c <_read_r>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	bfab      	itete	ge
 8008a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a3c:	181b      	addge	r3, r3, r0
 8008a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a42:	bfac      	ite	ge
 8008a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a46:	81a3      	strhlt	r3, [r4, #12]
 8008a48:	bd10      	pop	{r4, pc}

08008a4a <__swrite>:
 8008a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4e:	461f      	mov	r7, r3
 8008a50:	898b      	ldrh	r3, [r1, #12]
 8008a52:	05db      	lsls	r3, r3, #23
 8008a54:	4605      	mov	r5, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	4616      	mov	r6, r2
 8008a5a:	d505      	bpl.n	8008a68 <__swrite+0x1e>
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	2302      	movs	r3, #2
 8008a62:	2200      	movs	r2, #0
 8008a64:	f000 f868 	bl	8008b38 <_lseek_r>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	4632      	mov	r2, r6
 8008a76:	463b      	mov	r3, r7
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7e:	f000 b817 	b.w	8008ab0 <_write_r>

08008a82 <__sseek>:
 8008a82:	b510      	push	{r4, lr}
 8008a84:	460c      	mov	r4, r1
 8008a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8a:	f000 f855 	bl	8008b38 <_lseek_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	bf15      	itete	ne
 8008a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a9e:	81a3      	strheq	r3, [r4, #12]
 8008aa0:	bf18      	it	ne
 8008aa2:	81a3      	strhne	r3, [r4, #12]
 8008aa4:	bd10      	pop	{r4, pc}

08008aa6 <__sclose>:
 8008aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aaa:	f000 b813 	b.w	8008ad4 <_close_r>
	...

08008ab0 <_write_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	; (8008ad0 <_write_r+0x20>)
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7fa febd 	bl	800383e <_write>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_write_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_write_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	20000898 	.word	0x20000898

08008ad4 <_close_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	; (8008af0 <_close_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7fa fec9 	bl	8003876 <_close>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_close_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_close_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20000898 	.word	0x20000898

08008af4 <_fstat_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_fstat_r+0x20>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	4604      	mov	r4, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	f7fa fec4 	bl	800388e <_fstat>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d102      	bne.n	8008b10 <_fstat_r+0x1c>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b103      	cbz	r3, 8008b10 <_fstat_r+0x1c>
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	20000898 	.word	0x20000898

08008b18 <_isatty_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_isatty_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7fa fec3 	bl	80038ae <_isatty>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_isatty_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_isatty_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	20000898 	.word	0x20000898

08008b38 <_lseek_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	; (8008b58 <_lseek_r+0x20>)
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	4608      	mov	r0, r1
 8008b40:	4611      	mov	r1, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f7fa febc 	bl	80038c4 <_lseek>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_lseek_r+0x1e>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_lseek_r+0x1e>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20000898 	.word	0x20000898

08008b5c <_malloc_usable_size_r>:
 8008b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b60:	1f18      	subs	r0, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfbc      	itt	lt
 8008b66:	580b      	ldrlt	r3, [r1, r0]
 8008b68:	18c0      	addlt	r0, r0, r3
 8008b6a:	4770      	bx	lr

08008b6c <_read_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_read_r+0x20>)
 8008b70:	4604      	mov	r4, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f7fa fe42 	bl	8003804 <_read>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_read_r+0x1e>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_read_r+0x1e>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000898 	.word	0x20000898

08008b90 <sqrt>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	ed2d 8b02 	vpush	{d8}
 8008b96:	ec55 4b10 	vmov	r4, r5, d0
 8008b9a:	f000 f82d 	bl	8008bf8 <__ieee754_sqrt>
 8008b9e:	4b15      	ldr	r3, [pc, #84]	; (8008bf4 <sqrt+0x64>)
 8008ba0:	eeb0 8a40 	vmov.f32	s16, s0
 8008ba4:	eef0 8a60 	vmov.f32	s17, s1
 8008ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8008bac:	3301      	adds	r3, #1
 8008bae:	d019      	beq.n	8008be4 <sqrt+0x54>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	f7f7 ffb8 	bl	8000b2c <__aeabi_dcmpun>
 8008bbc:	b990      	cbnz	r0, 8008be4 <sqrt+0x54>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f7 ff89 	bl	8000adc <__aeabi_dcmplt>
 8008bca:	b158      	cbz	r0, 8008be4 <sqrt+0x54>
 8008bcc:	f7fe fd80 	bl	80076d0 <__errno>
 8008bd0:	2321      	movs	r3, #33	; 0x21
 8008bd2:	6003      	str	r3, [r0, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	f7f7 fe36 	bl	800084c <__aeabi_ddiv>
 8008be0:	ec41 0b18 	vmov	d8, r0, r1
 8008be4:	eeb0 0a48 	vmov.f32	s0, s16
 8008be8:	eef0 0a68 	vmov.f32	s1, s17
 8008bec:	ecbd 8b02 	vpop	{d8}
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200000a4 	.word	0x200000a4

08008bf8 <__ieee754_sqrt>:
 8008bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	ec55 4b10 	vmov	r4, r5, d0
 8008c00:	4e56      	ldr	r6, [pc, #344]	; (8008d5c <__ieee754_sqrt+0x164>)
 8008c02:	43ae      	bics	r6, r5
 8008c04:	ee10 0a10 	vmov	r0, s0
 8008c08:	ee10 3a10 	vmov	r3, s0
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	462a      	mov	r2, r5
 8008c10:	d110      	bne.n	8008c34 <__ieee754_sqrt+0x3c>
 8008c12:	ee10 2a10 	vmov	r2, s0
 8008c16:	462b      	mov	r3, r5
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4620      	mov	r0, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f7 fb32 	bl	800028c <__adddf3>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	ec45 4b10 	vmov	d0, r4, r5
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	2d00      	cmp	r5, #0
 8008c36:	dc10      	bgt.n	8008c5a <__ieee754_sqrt+0x62>
 8008c38:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c3c:	4330      	orrs	r0, r6
 8008c3e:	d0f5      	beq.n	8008c2c <__ieee754_sqrt+0x34>
 8008c40:	b15d      	cbz	r5, 8008c5a <__ieee754_sqrt+0x62>
 8008c42:	ee10 2a10 	vmov	r2, s0
 8008c46:	462b      	mov	r3, r5
 8008c48:	ee10 0a10 	vmov	r0, s0
 8008c4c:	f7f7 fb1c 	bl	8000288 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	f7f7 fdfa 	bl	800084c <__aeabi_ddiv>
 8008c58:	e7e6      	b.n	8008c28 <__ieee754_sqrt+0x30>
 8008c5a:	1509      	asrs	r1, r1, #20
 8008c5c:	d076      	beq.n	8008d4c <__ieee754_sqrt+0x154>
 8008c5e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c62:	07ce      	lsls	r6, r1, #31
 8008c64:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008c68:	bf5e      	ittt	pl
 8008c6a:	0fda      	lsrpl	r2, r3, #31
 8008c6c:	005b      	lslpl	r3, r3, #1
 8008c6e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008c72:	0fda      	lsrs	r2, r3, #31
 8008c74:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008c78:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	106d      	asrs	r5, r5, #1
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	f04f 0e16 	mov.w	lr, #22
 8008c86:	4684      	mov	ip, r0
 8008c88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c8c:	eb0c 0401 	add.w	r4, ip, r1
 8008c90:	4294      	cmp	r4, r2
 8008c92:	bfde      	ittt	le
 8008c94:	1b12      	suble	r2, r2, r4
 8008c96:	eb04 0c01 	addle.w	ip, r4, r1
 8008c9a:	1840      	addle	r0, r0, r1
 8008c9c:	0052      	lsls	r2, r2, #1
 8008c9e:	f1be 0e01 	subs.w	lr, lr, #1
 8008ca2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008ca6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008caa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cae:	d1ed      	bne.n	8008c8c <__ieee754_sqrt+0x94>
 8008cb0:	4671      	mov	r1, lr
 8008cb2:	2720      	movs	r7, #32
 8008cb4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008cb8:	4562      	cmp	r2, ip
 8008cba:	eb04 060e 	add.w	r6, r4, lr
 8008cbe:	dc02      	bgt.n	8008cc6 <__ieee754_sqrt+0xce>
 8008cc0:	d113      	bne.n	8008cea <__ieee754_sqrt+0xf2>
 8008cc2:	429e      	cmp	r6, r3
 8008cc4:	d811      	bhi.n	8008cea <__ieee754_sqrt+0xf2>
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	eb06 0e04 	add.w	lr, r6, r4
 8008ccc:	da43      	bge.n	8008d56 <__ieee754_sqrt+0x15e>
 8008cce:	f1be 0f00 	cmp.w	lr, #0
 8008cd2:	db40      	blt.n	8008d56 <__ieee754_sqrt+0x15e>
 8008cd4:	f10c 0801 	add.w	r8, ip, #1
 8008cd8:	eba2 020c 	sub.w	r2, r2, ip
 8008cdc:	429e      	cmp	r6, r3
 8008cde:	bf88      	it	hi
 8008ce0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008ce4:	1b9b      	subs	r3, r3, r6
 8008ce6:	4421      	add	r1, r4
 8008ce8:	46c4      	mov	ip, r8
 8008cea:	0052      	lsls	r2, r2, #1
 8008cec:	3f01      	subs	r7, #1
 8008cee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008cf2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008cf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cfa:	d1dd      	bne.n	8008cb8 <__ieee754_sqrt+0xc0>
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	d006      	beq.n	8008d0e <__ieee754_sqrt+0x116>
 8008d00:	1c4c      	adds	r4, r1, #1
 8008d02:	bf13      	iteet	ne
 8008d04:	3101      	addne	r1, #1
 8008d06:	3001      	addeq	r0, #1
 8008d08:	4639      	moveq	r1, r7
 8008d0a:	f021 0101 	bicne.w	r1, r1, #1
 8008d0e:	1043      	asrs	r3, r0, #1
 8008d10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d14:	0849      	lsrs	r1, r1, #1
 8008d16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d1a:	07c2      	lsls	r2, r0, #31
 8008d1c:	bf48      	it	mi
 8008d1e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008d22:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008d26:	460c      	mov	r4, r1
 8008d28:	463d      	mov	r5, r7
 8008d2a:	e77f      	b.n	8008c2c <__ieee754_sqrt+0x34>
 8008d2c:	0ada      	lsrs	r2, r3, #11
 8008d2e:	3815      	subs	r0, #21
 8008d30:	055b      	lsls	r3, r3, #21
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d0fa      	beq.n	8008d2c <__ieee754_sqrt+0x134>
 8008d36:	02d7      	lsls	r7, r2, #11
 8008d38:	d50a      	bpl.n	8008d50 <__ieee754_sqrt+0x158>
 8008d3a:	f1c1 0420 	rsb	r4, r1, #32
 8008d3e:	fa23 f404 	lsr.w	r4, r3, r4
 8008d42:	1e4d      	subs	r5, r1, #1
 8008d44:	408b      	lsls	r3, r1
 8008d46:	4322      	orrs	r2, r4
 8008d48:	1b41      	subs	r1, r0, r5
 8008d4a:	e788      	b.n	8008c5e <__ieee754_sqrt+0x66>
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	e7f0      	b.n	8008d32 <__ieee754_sqrt+0x13a>
 8008d50:	0052      	lsls	r2, r2, #1
 8008d52:	3101      	adds	r1, #1
 8008d54:	e7ef      	b.n	8008d36 <__ieee754_sqrt+0x13e>
 8008d56:	46e0      	mov	r8, ip
 8008d58:	e7be      	b.n	8008cd8 <__ieee754_sqrt+0xe0>
 8008d5a:	bf00      	nop
 8008d5c:	7ff00000 	.word	0x7ff00000

08008d60 <_gettimeofday>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <_gettimeofday+0xc>)
 8008d62:	2258      	movs	r2, #88	; 0x58
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d6a:	4770      	bx	lr
 8008d6c:	20000898 	.word	0x20000898

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
