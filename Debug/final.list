
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080068d4  080068d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068d4  080068d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080068dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000530  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001684b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d1c  00000000  00000000  000368f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe82  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aac  00000000  00000000  0005b8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb29c  00000000  00000000  0007134e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c5ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b30  00000000  00000000  0012c640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00132170  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00132194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066ac 	.word	0x080066ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080066ac 	.word	0x080066ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	817b      	strh	r3, [r7, #10]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	813b      	strh	r3, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <LiquidCrystal+0x90>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bca:	8939      	ldrh	r1, [r7, #8]
 8000bcc:	897a      	ldrh	r2, [r7, #10]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9308      	str	r3, [sp, #32]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9307      	str	r3, [sp, #28]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9306      	str	r3, [sp, #24]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9305      	str	r3, [sp, #20]
 8000bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be0:	9304      	str	r3, [sp, #16]
 8000be2:	8c3b      	ldrh	r3, [r7, #32]
 8000be4:	9303      	str	r3, [sp, #12]
 8000be6:	8bbb      	ldrh	r3, [r7, #28]
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	8b3b      	ldrh	r3, [r7, #24]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 f820 	bl	8000c3c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bfc:	e018      	b.n	8000c30 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bfe:	8939      	ldrh	r1, [r7, #8]
 8000c00:	897a      	ldrh	r2, [r7, #10]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9308      	str	r3, [sp, #32]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9307      	str	r3, [sp, #28]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	8c3b      	ldrh	r3, [r7, #32]
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	460b      	mov	r3, r1
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f806 	bl	8000c3c <init>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000

08000c3c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	4611      	mov	r1, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <init+0x84>)
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <init+0x88>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <init+0x8c>)
 8000c62:	8b3b      	ldrh	r3, [r7, #24]
 8000c64:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <init+0x90>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <init+0x94>)
 8000c6e:	8bbb      	ldrh	r3, [r7, #28]
 8000c70:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <init+0x94>)
 8000c74:	8c3b      	ldrh	r3, [r7, #32]
 8000c76:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <init+0x94>)
 8000c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c7c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <init+0x94>)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <init+0x94>)
 8000c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c88:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <init+0x94>)
 8000c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c8e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <init+0x94>)
 8000c92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c94:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <init+0x94>)
 8000c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e002      	b.n	8000cb0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <init+0x98>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f000 f810 	bl	8000cd8 <begin>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000c8 	.word	0x200000c8
 8000cc4:	200000a8 	.word	0x200000a8
 8000cc8:	200000c6 	.word	0x200000c6
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	200000b4 	.word	0x200000b4
 8000cd4:	200000c5 	.word	0x200000c5

08000cd8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d906      	bls.n	8000cfc <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <begin+0x1f4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <begin+0x1f4>)
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cfc:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <begin+0x1f8>)
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f988 	bl	8001020 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <begin+0x1fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <begin+0x54>
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <begin+0x1f4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <begin+0x1f4>)
 8000d2a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d2c:	f000 f8e4 	bl	8000ef8 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <begin+0x200>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <begin+0x204>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <begin+0x208>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <begin+0x20c>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <begin+0x210>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <begin+0x210>)
 8000d5e:	885b      	ldrh	r3, [r3, #2]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <begin+0x210>)
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <begin+0x210>)
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e02a      	b.n	8000dce <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <begin+0x204>)
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <begin+0x208>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b57      	ldr	r3, [pc, #348]	; (8000ee4 <begin+0x20c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <begin+0x210>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <begin+0x210>)
 8000d96:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <begin+0x210>)
 8000d9e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <begin+0x210>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <begin+0x210>)
 8000dae:	891b      	ldrh	r3, [r3, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <begin+0x210>)
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <begin+0x210>)
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <begin+0x210>)
 8000dc6:	89db      	ldrh	r3, [r3, #14]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dcc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <begin+0x214>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fed5 	bl	8002b88 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f001 fd9c 	bl	800291c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <begin+0x214>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <begin+0x204>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 f85c 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <begin+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <begin+0x20c>)
 8000dfa:	8811      	ldrh	r1, [r2, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f854 	bl	8002eac <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <begin+0x208>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d007      	beq.n	8000e1c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <begin+0x214>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <begin+0x208>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f848 	bl	8002eac <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <begin+0x1f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d115      	bne.n	8000e54 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa1b 	bl	8001264 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f001 fd74 	bl	800291c <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa15 	bl	8001264 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e3a:	2005      	movs	r0, #5
 8000e3c:	f001 fd6e 	bl	800291c <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fa0f 	bl	8001264 <write4bits>
    HAL_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f001 fd68 	bl	800291c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fa09 	bl	8001264 <write4bits>
 8000e52:	e01d      	b.n	8000e90 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <begin+0x1f4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f97b 	bl	800115a <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e64:	2005      	movs	r0, #5
 8000e66:	f001 fd59 	bl	800291c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <begin+0x1f4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f970 	bl	800115a <command>
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f001 fd4e 	bl	800291c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <begin+0x1f4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f965 	bl	800115a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <begin+0x1f4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f95d 	bl	800115a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <begin+0x218>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  display();
 8000ea6:	f000 f917 	bl	80010d8 <display>

  // clear it off
  clear();
 8000eaa:	f000 f8d9 	bl	8001060 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <begin+0x21c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <begin+0x21c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f94b 	bl	800115a <command>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000c5 	.word	0x200000c5
 8000ed0:	200000b1 	.word	0x200000b1
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	200000c8 	.word	0x200000c8
 8000ee0:	200000a8 	.word	0x200000a8
 8000ee4:	200000c6 	.word	0x200000c6
 8000ee8:	200000b4 	.word	0x200000b4
 8000eec:	200000ac 	.word	0x200000ac
 8000ef0:	200000b0 	.word	0x200000b0
 8000ef4:	200000c4 	.word	0x200000c4

08000ef8 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <enableClock+0x10c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f06:	d10c      	bne.n	8000f22 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <enableClock+0x110>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <enableClock+0x110>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f20:	e06a      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <enableClock+0x10c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <enableClock+0x114>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10c      	bne.n	8000f46 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <enableClock+0x110>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <enableClock+0x110>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
}
 8000f44:	e058      	b.n	8000ff8 <enableClock+0x100>
  else if(_port == GPIOB)
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <enableClock+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a30      	ldr	r2, [pc, #192]	; (800100c <enableClock+0x114>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10c      	bne.n	8000f6a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <enableClock+0x110>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <enableClock+0x110>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
}
 8000f68:	e046      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOC)
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <enableClock+0x10c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <enableClock+0x118>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10c      	bne.n	8000f8e <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <enableClock+0x110>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	6153      	str	r3, [r2, #20]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <enableClock+0x110>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	e034      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOD)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <enableClock+0x10c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <enableClock+0x11c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10c      	bne.n	8000fb2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <enableClock+0x110>)
 8000f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa2:	6153      	str	r3, [r2, #20]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <enableClock+0x110>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	e022      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOE)
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <enableClock+0x10c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <enableClock+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d10c      	bne.n	8000fd6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <enableClock+0x110>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	6153      	str	r3, [r2, #20]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <enableClock+0x110>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
}
 8000fd4:	e010      	b.n	8000ff8 <enableClock+0x100>
	else if(_port == GPIOF)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <enableClock+0x10c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <enableClock+0x124>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10b      	bne.n	8000ff8 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <enableClock+0x110>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6153      	str	r3, [r2, #20]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <enableClock+0x110>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	200000ac 	.word	0x200000ac
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48001000 	.word	0x48001000
 800101c:	48001400 	.word	0x48001400

08001020 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <setRowOffsets+0x3c>)
 8001034:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <setRowOffsets+0x3c>)
 800103c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <setRowOffsets+0x3c>)
 8001044:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <setRowOffsets+0x3c>)
 800104c:	70da      	strb	r2, [r3, #3]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000a4 	.word	0x200000a4

08001060 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f878 	bl	800115a <command>
  HAL_Delay(2);  // this command takes a long time!
 800106a:	2002      	movs	r0, #2
 800106c:	f001 fc56 	bl	800291c <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d803      	bhi.n	8001098 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setCursor+0x5c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	79ba      	ldrb	r2, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d303      	bcc.n	80010aa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <setCursor+0x5c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <setCursor+0x60>)
 80010ae:	5cd2      	ldrb	r2, [r2, r3]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f84a 	bl	800115a <command>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000b1 	.word	0x200000b1
 80010d4:	200000a4 	.word	0x200000a4

080010d8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <display+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <display+0x28>)
 80010e8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <display+0x28>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f830 	bl	800115a <command>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000b0 	.word	0x200000b0

08001104 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <print+0x12>
 8001112:	2300      	movs	r3, #0
 8001114:	e01d      	b.n	8001152 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strlen>
 8001120:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001126:	e00c      	b.n	8001142 <print+0x3e>
    if (write(*buffer++)) n++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f820 	bl	8001176 <write>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <print+0x4a>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	613a      	str	r2, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ed      	bne.n	8001128 <print+0x24>
 800114c:	e000      	b.n	8001150 <print+0x4c>
    else break;
 800114e:	bf00      	nop
  }
  return n;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f813 	bl	8001194 <send>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <write>:

inline size_t write(uint8_t value) {
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f805 	bl	8001194 <send>
  return 1; // assume sucess
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <send+0x6c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <send+0x70>)
 80011aa:	8811      	ldrh	r1, [r2, #0]
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fe7c 	bl	8002eac <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <send+0x74>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d007      	beq.n	80011cc <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <send+0x6c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <send+0x74>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fe70 	bl	8002eac <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <send+0x78>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <send+0x4e>
    write8bits(value);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f86c 	bl	80012b8 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80011e0:	e009      	b.n	80011f6 <send+0x62>
    write4bits(value>>4);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f83b 	bl	8001264 <write4bits>
    write4bits(value);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f837 	bl	8001264 <write4bits>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000ac 	.word	0x200000ac
 8001204:	200000c8 	.word	0x200000c8
 8001208:	200000a8 	.word	0x200000a8
 800120c:	200000c5 	.word	0x200000c5

08001210 <pulseEnable>:

void pulseEnable(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <pulseEnable+0x4c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <pulseEnable+0x50>)
 800121a:	8811      	ldrh	r1, [r2, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fe44 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f001 fb79 	bl	800291c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <pulseEnable+0x4c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <pulseEnable+0x50>)
 8001230:	8811      	ldrh	r1, [r2, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fe39 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800123a:	2001      	movs	r0, #1
 800123c:	f001 fb6e 	bl	800291c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <pulseEnable+0x4c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <pulseEnable+0x50>)
 8001246:	8811      	ldrh	r1, [r2, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fe2e 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001250:	2001      	movs	r0, #1
 8001252:	f001 fb63 	bl	800291c <HAL_Delay>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000ac 	.word	0x200000ac
 8001260:	200000c6 	.word	0x200000c6

08001264 <write4bits>:

void write4bits(uint8_t value) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e013      	b.n	800129c <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <write4bits+0x4c>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <write4bits+0x50>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	fa42 f303 	asr.w	r3, r2, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f001 fe0b 	bl	8002eac <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	dde8      	ble.n	8001274 <write4bits+0x10>
  }

  pulseEnable();
 80012a2:	f7ff ffb5 	bl	8001210 <pulseEnable>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000ac 	.word	0x200000ac
 80012b4:	200000b4 	.word	0x200000b4

080012b8 <write8bits>:

void write8bits(uint8_t value) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e013      	b.n	80012f0 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <write8bits+0x4c>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <write8bits+0x50>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f001 fde1 	bl	8002eac <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	dde8      	ble.n	80012c8 <write8bits+0x10>
  }

  pulseEnable();
 80012f6:	f7ff ff8b 	bl	8001210 <pulseEnable>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000ac 	.word	0x200000ac
 8001308:	200000b4 	.word	0x200000b4

0800130c <init_state_vars>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init_state_vars() {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
     * menusState:
     * 	'z' init page
     * 	'g' game page
     * 	'a' about us
     * */
	menuState = 'z';
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <init_state_vars+0x14>)
 8001312:	227a      	movs	r2, #122	; 0x7a
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000118 	.word	0x20000118

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f001 fa91 	bl	8002850 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_state_vars();
 800132e:	f7ff ffed 	bl	800130c <init_state_vars>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001332:	2201      	movs	r2, #1
 8001334:	2110      	movs	r1, #16
 8001336:	4821      	ldr	r0, [pc, #132]	; (80013bc <main+0x98>)
 8001338:	f001 fdb8 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	481e      	ldr	r0, [pc, #120]	; (80013bc <main+0x98>)
 8001342:	f001 fdb3 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	481c      	ldr	r0, [pc, #112]	; (80013bc <main+0x98>)
 800134c:	f001 fdae 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <main+0x98>)
 8001356:	f001 fda9 	bl	8002eac <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 800135a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135e:	9303      	str	r3, [sp, #12]
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <main+0x98>)
 8001380:	f7ff fc12 	bl	8000ba8 <LiquidCrystal>
  begin(20, 4);
 8001384:	2104      	movs	r1, #4
 8001386:	2014      	movs	r0, #20
 8001388:	f7ff fca6 	bl	8000cd8 <begin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f81c 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 f96a 	bl	8001668 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001394:	f000 f87a 	bl	800148c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001398:	f000 f8b8 	bl	800150c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800139c:	f000 f942 	bl	8001624 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80013a0:	f000 f8f2 	bl	8001588 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <main+0x9c>)
 80013a6:	f003 fb7b 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80013aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <main+0xa0>)
 80013b0:	f001 fd94 	bl	8002edc <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f001 fab1 	bl	800291c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80013ba:	e7f6      	b.n	80013aa <main+0x86>
 80013bc:	48000c00 	.word	0x48000c00
 80013c0:	20000180 	.word	0x20000180
 80013c4:	48001000 	.word	0x48001000

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09e      	sub	sp, #120	; 0x78
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013d2:	2228      	movs	r2, #40	; 0x28
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 f814 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	223c      	movs	r2, #60	; 0x3c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 f806 	bl	8005404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013f8:	2303      	movs	r3, #3
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001400:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001406:	2301      	movs	r3, #1
 8001408:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140a:	2310      	movs	r3, #16
 800140c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800141c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001422:	4618      	mov	r0, r3
 8001424:	f001 ff9c 	bl	8003360 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800142e:	f000 f9dd 	bl	80017ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fe8e 	bl	8004170 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800145a:	f000 f9c7 	bl	80017ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <SystemClock_Config+0xc0>)
 8001460:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001466:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f864 	bl	800453c <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800147a:	f000 f9b7 	bl	80017ec <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3778      	adds	r7, #120	; 0x78
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	00020020 	.word	0x00020020

0800148c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_I2C1_Init+0x74>)
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <MX_I2C1_Init+0x78>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_I2C1_Init+0x74>)
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <MX_I2C1_Init+0x7c>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_I2C1_Init+0x74>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_I2C1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_I2C1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_I2C1_Init+0x74>)
 80014c8:	f001 fd45 	bl	8002f56 <HAL_I2C_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f000 f98b 	bl	80017ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <MX_I2C1_Init+0x74>)
 80014da:	f001 fdcb 	bl	8003074 <HAL_I2CEx_ConfigAnalogFilter>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e4:	f000 f982 	bl	80017ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_I2C1_Init+0x74>)
 80014ec:	f001 fe0d 	bl	800310a <HAL_I2CEx_ConfigDigitalFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 f979 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000cc 	.word	0x200000cc
 8001504:	40005400 	.word	0x40005400
 8001508:	2000090e 	.word	0x2000090e

0800150c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_SPI1_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_SPI1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_SPI1_Init+0x74>)
 8001518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800151c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI1_Init+0x74>)
 8001526:	f44f 7240 	mov.w	r2, #768	; 0x300
 800152a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI1_Init+0x74>)
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI1_Init+0x74>)
 8001542:	2208      	movs	r2, #8
 8001544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_SPI1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI1_Init+0x74>)
 800155a:	2207      	movs	r2, #7
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI1_Init+0x74>)
 8001566:	2208      	movs	r2, #8
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_SPI1_Init+0x74>)
 800156c:	f003 f996 	bl	800489c <HAL_SPI_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f939 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000011c 	.word	0x2000011c
 8001584:	40013000 	.word	0x40013000

08001588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_TIM2_Init+0x98>)
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_TIM2_Init+0x98>)
 80015b0:	f640 125f 	movw	r2, #2399	; 0x95f
 80015b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_TIM2_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_TIM2_Init+0x98>)
 80015be:	f242 7210 	movw	r2, #10000	; 0x2710
 80015c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_TIM2_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM2_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM2_Init+0x98>)
 80015d2:	f003 fa0e 	bl	80049f2 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80015dc:	f000 f906 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4619      	mov	r1, r3
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_TIM2_Init+0x98>)
 80015ee:	f003 fbe0 	bl	8004db2 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80015f8:	f000 f8f8 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM2_Init+0x98>)
 800160a:	f003 fdf7 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 f8ea 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000180 	.word	0x20000180

08001624 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <MX_USB_PCD_Init+0x40>)
 800162c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 8001630:	2208      	movs	r2, #8
 8001632:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 8001636:	2202      	movs	r2, #2
 8001638:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 800163c:	2202      	movs	r2, #2
 800163e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_USB_PCD_Init+0x3c>)
 800164e:	f001 fda8 	bl	80031a2 <HAL_PCD_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001658:	f000 f8c8 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001cc 	.word	0x200001cc
 8001664:	40005c00 	.word	0x40005c00

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <MX_GPIO_Init+0x178>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a57      	ldr	r2, [pc, #348]	; (80017e0 <MX_GPIO_Init+0x178>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <MX_GPIO_Init+0x178>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <MX_GPIO_Init+0x178>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <MX_GPIO_Init+0x178>)
 800169c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ae:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <MX_GPIO_Init+0x178>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <MX_GPIO_Init+0x178>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800170e:	2200      	movs	r2, #0
 8001710:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001714:	4833      	ldr	r0, [pc, #204]	; (80017e4 <MX_GPIO_Init+0x17c>)
 8001716:	f001 fbc9 	bl	8002eac <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800171a:	2200      	movs	r2, #0
 800171c:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8001720:	4831      	ldr	r0, [pc, #196]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001722:	f001 fbc3 	bl	8002eac <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001726:	f64f 7308 	movw	r3, #65288	; 0xff08
 800172a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <MX_GPIO_Init+0x17c>)
 8001740:	f001 fa22 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001744:	2320      	movs	r3, #32
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001748:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4822      	ldr	r0, [pc, #136]	; (80017e4 <MX_GPIO_Init+0x17c>)
 800175a:	f001 fa15 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800175e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001762:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001778:	f001 fa06 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800177c:	230f      	movs	r3, #15
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001780:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001786:	2302      	movs	r3, #2
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001792:	f001 f9f9 	bl	8002b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2101      	movs	r1, #1
 800179a:	2006      	movs	r0, #6
 800179c:	f001 f9bd 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f001 f9d6 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	2007      	movs	r0, #7
 80017ac:	f001 f9b5 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017b0:	2007      	movs	r0, #7
 80017b2:	f001 f9ce 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	2008      	movs	r0, #8
 80017bc:	f001 f9ad 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80017c0:	2008      	movs	r0, #8
 80017c2:	f001 f9c6 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2101      	movs	r1, #1
 80017ca:	2009      	movs	r0, #9
 80017cc:	f001 f9a5 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017d0:	2009      	movs	r0, #9
 80017d2:	f001 f9be 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48000c00 	.word	0x48000c00

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <Error_Handler+0x8>
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x44>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x44>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x44>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x44>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x44>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x44>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800182e:	2005      	movs	r0, #5
 8001830:	f001 f968 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_I2C_MspInit+0x7c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d127      	bne.n	80018b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6153      	str	r3, [r2, #20]
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800187a:	23c0      	movs	r3, #192	; 0xc0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001882:	2301      	movs	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800188a:	2304      	movs	r3, #4
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <HAL_I2C_MspInit+0x84>)
 8001896:	f001 f977 	bl	8002b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 80018a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_I2C_MspInit+0x80>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40005400 	.word	0x40005400
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0x7c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d128      	bne.n	800193c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800191a:	23e0      	movs	r3, #224	; 0xe0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001938:	f001 f926 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40013000 	.word	0x40013000
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d113      	bne.n	8001986 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_TIM_Base_MspInit+0x44>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_TIM_Base_MspInit+0x44>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_TIM_Base_MspInit+0x44>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	201c      	movs	r0, #28
 800197c:	f001 f8cd 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001980:	201c      	movs	r0, #28
 8001982:	f001 f8e6 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_PCD_MspInit+0x80>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d129      	bne.n	8001a0a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	6153      	str	r3, [r2, #20]
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80019ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80019e0:	230e      	movs	r3, #14
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f001 f8cb 	bl	8002b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 80019f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_PCD_MspInit+0x84>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40005c00 	.word	0x40005c00
 8001a18:	40021000 	.word	0x40021000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 ff38 	bl	80028dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f001 fa4b 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  keypadCallback(3);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 fc86 	bl	800238c <keypadCallback>
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <EXTI0_IRQHandler+0x20>)
 8001a86:	f001 fa29 	bl	8002edc <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	48001000 	.word	0x48001000

08001a94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f001 fa39 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  keypadCallback(2);
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f000 fc74 	bl	800238c <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <EXTI1_IRQHandler+0x20>)
 8001aac:	f001 f9fe 	bl	8002eac <HAL_GPIO_WritePin>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	48001000 	.word	0x48001000

08001ab8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001abc:	2004      	movs	r0, #4
 8001abe:	f001 fa27 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  keypadCallback(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 fc62 	bl	800238c <keypadCallback>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ace:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <EXTI2_TSC_IRQHandler+0x20>)
 8001ad0:	f001 f9ec 	bl	8002eac <HAL_GPIO_WritePin>
  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	48001000 	.word	0x48001000

08001adc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS_I2C_SPI_Pin);
 8001ae0:	2008      	movs	r0, #8
 8001ae2:	f001 fa15 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <EXTI3_IRQHandler+0x20>)
 8001aee:	f001 f9dd 	bl	8002eac <HAL_GPIO_WritePin>
  keypadCallback(0);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 fc4a 	bl	800238c <keypadCallback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	48001000 	.word	0x48001000

08001b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b04:	483a      	ldr	r0, [pc, #232]	; (8001bf0 <TIM2_IRQHandler+0xf0>)
 8001b06:	f003 f835 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0e:	4839      	ldr	r0, [pc, #228]	; (8001bf4 <TIM2_IRQHandler+0xf4>)
 8001b10:	f001 f9e4 	bl	8002edc <HAL_GPIO_TogglePin>

//  // Update State variables
//  print("test");
  if (menuState != 'g') { // this is game state
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <TIM2_IRQHandler+0xf8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b67      	cmp	r3, #103	; 0x67
 8001b1a:	d004      	beq.n	8001b26 <TIM2_IRQHandler+0x26>
	  initGameState();
 8001b1c:	f000 fb9c 	bl	8002258 <initGameState>
	  menuState = 'g';
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <TIM2_IRQHandler+0xf8>)
 8001b22:	2267      	movs	r2, #103	; 0x67
 8001b24:	701a      	strb	r2, [r3, #0]

  }

  // Upload on LCD
  switch (menuState) {
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <TIM2_IRQHandler+0xf8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3b61      	subs	r3, #97	; 0x61
 8001b2c:	2b19      	cmp	r3, #25
 8001b2e:	d85a      	bhi.n	8001be6 <TIM2_IRQHandler+0xe6>
 8001b30:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <TIM2_IRQHandler+0x38>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001bd3 	.word	0x08001bd3
 8001b3c:	08001be7 	.word	0x08001be7
 8001b40:	08001be7 	.word	0x08001be7
 8001b44:	08001be7 	.word	0x08001be7
 8001b48:	08001be7 	.word	0x08001be7
 8001b4c:	08001be7 	.word	0x08001be7
 8001b50:	08001bc9 	.word	0x08001bc9
 8001b54:	08001be7 	.word	0x08001be7
 8001b58:	08001be7 	.word	0x08001be7
 8001b5c:	08001be7 	.word	0x08001be7
 8001b60:	08001be7 	.word	0x08001be7
 8001b64:	08001be7 	.word	0x08001be7
 8001b68:	08001bb5 	.word	0x08001bb5
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001be7 	.word	0x08001be7
 8001b74:	08001be7 	.word	0x08001be7
 8001b78:	08001be7 	.word	0x08001be7
 8001b7c:	08001be7 	.word	0x08001be7
 8001b80:	08001be7 	.word	0x08001be7
 8001b84:	08001be7 	.word	0x08001be7
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001be7 	.word	0x08001be7
 8001b90:	08001be7 	.word	0x08001be7
 8001b94:	08001be7 	.word	0x08001be7
 8001b98:	08001be7 	.word	0x08001be7
 8001b9c:	08001ba1 	.word	0x08001ba1
  	  case 'z':
  		  clear();
 8001ba0:	f7ff fa5e 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fa64 	bl	8001074 <setCursor>
  		  print("Doodle Jump");
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <TIM2_IRQHandler+0xfc>)
 8001bae:	f7ff faa9 	bl	8001104 <print>
  		  break;
 8001bb2:	e018      	b.n	8001be6 <TIM2_IRQHandler+0xe6>
  	  case 'm':
  		  clear();
 8001bb4:	f7ff fa54 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fa5a 	bl	8001074 <setCursor>
  		  print("1 - Start   2 - About us");
 8001bc0:	480f      	ldr	r0, [pc, #60]	; (8001c00 <TIM2_IRQHandler+0x100>)
 8001bc2:	f7ff fa9f 	bl	8001104 <print>
  		  break;
 8001bc6:	e00e      	b.n	8001be6 <TIM2_IRQHandler+0xe6>
  	  case 'g':
  		  processTurn();
 8001bc8:	f000 f838 	bl	8001c3c <processTurn>
  		  printGame();
 8001bcc:	f000 f956 	bl	8001e7c <printGame>
//  		  DEBUG scores
//  		  char buff[20];
//  		  sprintf(buff, "%d %d %d", score, playerHeight, playerHeightInScreen);
//  		  sprintf(buff, "%d", getRandom(0, 9));
//  		  print(buff);
  		  break;
 8001bd0:	e009      	b.n	8001be6 <TIM2_IRQHandler+0xe6>
  	  case 'a':
  		  clear();
 8001bd2:	f7ff fa45 	bl	8001060 <clear>
  		  setCursor(0, 0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fa4b 	bl	8001074 <setCursor>
  		  print(" Yosef and Borna");
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <TIM2_IRQHandler+0x104>)
 8001be0:	f7ff fa90 	bl	8001104 <print>
  		  break;
 8001be4:	bf00      	nop
  }

  // Delay for better visual
  HAL_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fe98 	bl	800291c <HAL_Delay>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000180 	.word	0x20000180
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	20000118 	.word	0x20000118
 8001bfc:	080066c4 	.word	0x080066c4
 8001c00:	080066d0 	.word	0x080066d0
 8001c04:	080066ec 	.word	0x080066ec

08001c08 <getRandom>:

/* USER CODE BEGIN 1 */

int getRandom(int lower, int upper)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]

	int num = (rand() %
 8001c12:	f003 fc2d 	bl	8005470 <rand>
 8001c16:	4602      	mov	r2, r0
	   (upper - lower + 1)) + lower;
 8001c18:	6839      	ldr	r1, [r7, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	3301      	adds	r3, #1
	int num = (rand() %
 8001c20:	fb92 f1f3 	sdiv	r1, r2, r3
 8001c24:	fb03 f301 	mul.w	r3, r3, r1
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    return num;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <processTurn>:

void processTurn()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
	int i, j;

	// Shift screen to down
	if (playerHeightInScreen > 12) {
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <processTurn+0x144>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	dd4a      	ble.n	8001ce0 <processTurn+0xa4>
		playerHeightInScreen --;
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <processTurn+0x144>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <processTurn+0x144>)
 8001c52:	6013      	str	r3, [r2, #0]
		playerRow --;
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <processTurn+0x148>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <processTurn+0x148>)
 8001c5c:	6013      	str	r3, [r2, #0]
		for (j = 0; j < boardRows - 1; j ++ ) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	e023      	b.n	8001cac <processTurn+0x70>
			// replace row[j] with row[j + 1]
			for (i = 0; i < boardColumns; i ++ ) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e01a      	b.n	8001ca0 <processTurn+0x64>
				board[i][j] = board[i][j + 1];
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	1c59      	adds	r1, r3, #1
 8001c6e:	4846      	ldr	r0, [pc, #280]	; (8001d88 <processTurn+0x14c>)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00da      	lsls	r2, r3, #3
 8001c7a:	1ad2      	subs	r2, r2, r3
 8001c7c:	1883      	adds	r3, r0, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	7818      	ldrb	r0, [r3, #0]
 8001c82:	4941      	ldr	r1, [pc, #260]	; (8001d88 <processTurn+0x14c>)
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00da      	lsls	r2, r3, #3
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	440a      	add	r2, r1
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	4602      	mov	r2, r0
 8001c98:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < boardColumns; i ++ ) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	dde1      	ble.n	8001c6a <processTurn+0x2e>
		for (j = 0; j < boardRows - 1; j ++ ) {
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	ddd8      	ble.n	8001c64 <processTurn+0x28>
			}
		}
		for (i = 0; i < boardColumns; i ++ ) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e00d      	b.n	8001cd4 <processTurn+0x98>
			board[i][boardRows - 1] = 'e';
 8001cb8:	4933      	ldr	r1, [pc, #204]	; (8001d88 <processTurn+0x14c>)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	1ad2      	subs	r2, r2, r3
 8001cc6:	188b      	adds	r3, r1, r2
 8001cc8:	3313      	adds	r3, #19
 8001cca:	2265      	movs	r2, #101	; 0x65
 8001ccc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < boardColumns; i ++ ) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	ddee      	ble.n	8001cb8 <processTurn+0x7c>
		}
		setRowObjects(boardRows - 1);
 8001cda:	2013      	movs	r0, #19
 8001cdc:	f000 fa8c 	bl	80021f8 <setRowObjects>
	}

	if (playerRow == 0) {
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <processTurn+0x148>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d047      	beq.n	8001d78 <processTurn+0x13c>

	} else if (jumpCount == 0 && playerRow > 0) { // Jump rule
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <processTurn+0x150>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d130      	bne.n	8001d52 <processTurn+0x116>
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <processTurn+0x148>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd2c      	ble.n	8001d52 <processTurn+0x116>
		// Gravity rule
		if (board[playerCol][playerRow - 1] == 'e') {
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <processTurn+0x154>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <processTurn+0x148>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1e59      	subs	r1, r3, #1
 8001d02:	4821      	ldr	r0, [pc, #132]	; (8001d88 <processTurn+0x14c>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00da      	lsls	r2, r3, #3
 8001d0c:	1ad2      	subs	r2, r2, r3
 8001d0e:	1883      	adds	r3, r0, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b65      	cmp	r3, #101	; 0x65
 8001d16:	d108      	bne.n	8001d2a <processTurn+0xee>
			movePlayerTo(playerCol, playerRow - 1);
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <processTurn+0x154>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <processTurn+0x148>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	4610      	mov	r0, r2
 8001d26:	f000 f835 	bl	8001d94 <movePlayerTo>
		}


		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <processTurn+0x154>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <processTurn+0x148>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1e59      	subs	r1, r3, #1
 8001d34:	4814      	ldr	r0, [pc, #80]	; (8001d88 <processTurn+0x14c>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00da      	lsls	r2, r3, #3
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	1883      	adds	r3, r0, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b62      	cmp	r3, #98	; 0x62
 8001d48:	d116      	bne.n	8001d78 <processTurn+0x13c>
			jumpCount = jumpOnBlock;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <processTurn+0x150>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
		if (board[playerCol][playerRow - 1] == 'b') { // Jump on simple block
 8001d50:	e012      	b.n	8001d78 <processTurn+0x13c>
		}

	} else if (jumpCount > 0) { // Go up rule
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <processTurn+0x150>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dd0e      	ble.n	8001d78 <processTurn+0x13c>
		movePlayerTo(playerCol, playerRow + 1);
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <processTurn+0x154>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <processTurn+0x148>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 f814 	bl	8001d94 <movePlayerTo>
		jumpCount --;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <processTurn+0x150>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <processTurn+0x150>)
 8001d74:	6013      	str	r3, [r2, #0]
	}


}
 8001d76:	e7ff      	b.n	8001d78 <processTurn+0x13c>
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000578 	.word	0x20000578
 8001d84:	20000588 	.word	0x20000588
 8001d88:	200004c0 	.word	0x200004c0
 8001d8c:	20000574 	.word	0x20000574
 8001d90:	200004bc 	.word	0x200004bc

08001d94 <movePlayerTo>:

void movePlayerTo(int toCol, int toRow)
{
 8001d94:	b490      	push	{r4, r7}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	if (playerRow < toRow) {
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <movePlayerTo+0xcc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dd14      	ble.n	8001dd2 <movePlayerTo+0x3e>
		playerHeight ++;
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <movePlayerTo+0xd0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <movePlayerTo+0xd0>)
 8001db0:	6013      	str	r3, [r2, #0]
		playerHeightInScreen ++;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <movePlayerTo+0xd4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <movePlayerTo+0xd4>)
 8001dba:	6013      	str	r3, [r2, #0]
		if (playerHeight > score)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <movePlayerTo+0xd0>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <movePlayerTo+0xd8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dd13      	ble.n	8001df0 <movePlayerTo+0x5c>
			score = playerHeight;
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <movePlayerTo+0xd0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <movePlayerTo+0xd8>)
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e00e      	b.n	8001df0 <movePlayerTo+0x5c>
	} else if (playerRow > toRow) {
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <movePlayerTo+0xcc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	da09      	bge.n	8001df0 <movePlayerTo+0x5c>
		playerHeight --;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <movePlayerTo+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <movePlayerTo+0xd0>)
 8001de4:	6013      	str	r3, [r2, #0]
		playerHeightInScreen --;
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <movePlayerTo+0xd4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <movePlayerTo+0xd4>)
 8001dee:	6013      	str	r3, [r2, #0]
	}
	board[playerCol][playerRow] = playerOn;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <movePlayerTo+0xdc>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <movePlayerTo+0xcc>)
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <movePlayerTo+0xe0>)
 8001dfa:	781c      	ldrb	r4, [r3, #0]
 8001dfc:	481e      	ldr	r0, [pc, #120]	; (8001e78 <movePlayerTo+0xe4>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	1883      	adds	r3, r0, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	4622      	mov	r2, r4
 8001e0e:	701a      	strb	r2, [r3, #0]
	playerCol = toCol;
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <movePlayerTo+0xdc>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
	playerRow = toRow;
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <movePlayerTo+0xcc>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6013      	str	r3, [r2, #0]
	playerOn = board[playerCol][playerRow];
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <movePlayerTo+0xdc>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <movePlayerTo+0xcc>)
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	4814      	ldr	r0, [pc, #80]	; (8001e78 <movePlayerTo+0xe4>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00da      	lsls	r2, r3, #3
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	1883      	adds	r3, r0, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <movePlayerTo+0xe0>)
 8001e38:	701a      	strb	r2, [r3, #0]
	board[playerCol][playerRow] = 'p';
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <movePlayerTo+0xdc>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <movePlayerTo+0xcc>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <movePlayerTo+0xe4>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	1883      	adds	r3, r0, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	2270      	movs	r2, #112	; 0x70
 8001e54:	701a      	strb	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc90      	pop	{r4, r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000588 	.word	0x20000588
 8001e64:	2000058c 	.word	0x2000058c
 8001e68:	20000578 	.word	0x20000578
 8001e6c:	20000518 	.word	0x20000518
 8001e70:	200004bc 	.word	0x200004bc
 8001e74:	20000590 	.word	0x20000590
 8001e78:	200004c0 	.word	0x200004c0

08001e7c <printGame>:

void printGame()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
	setCursor(0,  0);
 8001e82:	2100      	movs	r1, #0
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff f8f5 	bl	8001074 <setCursor>
	char tmp[2];
	int c, i, j;
	for (c = 0; c < boardColumns; c ++ ) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e073      	b.n	8001f78 <printGame+0xfc>

		i = c;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	60bb      	str	r3, [r7, #8]
		if (c == 1)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <printGame+0x24>
			i = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	e004      	b.n	8001eaa <printGame+0x2e>
		else if (c == 2)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d101      	bne.n	8001eaa <printGame+0x2e>
			i = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < boardRows; j ++ ) {
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e05d      	b.n	8001f6c <printGame+0xf0>
			if (board[i][j] != boardTemp[i][j]) {
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <printGame+0x10c>)
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00da      	lsls	r2, r3, #3
 8001ebc:	1ad2      	subs	r2, r2, r3
 8001ebe:	440a      	add	r2, r1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	7819      	ldrb	r1, [r3, #0]
 8001ec6:	4831      	ldr	r0, [pc, #196]	; (8001f8c <printGame+0x110>)
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00da      	lsls	r2, r3, #3
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	4402      	add	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4299      	cmp	r1, r3
 8001ede:	d042      	beq.n	8001f66 <printGame+0xea>
				setCursor(j, i);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8c2 	bl	8001074 <setCursor>
				tmp[0] = board[i][j];
 8001ef0:	4925      	ldr	r1, [pc, #148]	; (8001f88 <printGame+0x10c>)
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00da      	lsls	r2, r3, #3
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	440a      	add	r2, r1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	703b      	strb	r3, [r7, #0]
				tmp[1] = '\0';
 8001f08:	2300      	movs	r3, #0
 8001f0a:	707b      	strb	r3, [r7, #1]
				  switch (board[i][j])
 8001f0c:	491e      	ldr	r1, [pc, #120]	; (8001f88 <printGame+0x10c>)
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00da      	lsls	r2, r3, #3
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	440a      	add	r2, r1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b65      	cmp	r3, #101	; 0x65
 8001f24:	d103      	bne.n	8001f2e <printGame+0xb2>
				     {
				     case 'e':
				    	print(" ");
 8001f26:	481a      	ldr	r0, [pc, #104]	; (8001f90 <printGame+0x114>)
 8001f28:	f7ff f8ec 	bl	8001104 <print>
				       break;
 8001f2c:	e004      	b.n	8001f38 <printGame+0xbc>
				     default:
				    	 print(tmp);
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8e7 	bl	8001104 <print>
				       break;
 8001f36:	bf00      	nop
				     }
				boardTemp[i][j] = board[i][j];
 8001f38:	4913      	ldr	r1, [pc, #76]	; (8001f88 <printGame+0x10c>)
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	00da      	lsls	r2, r3, #3
 8001f44:	1ad2      	subs	r2, r2, r3
 8001f46:	440a      	add	r2, r1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	7818      	ldrb	r0, [r3, #0]
 8001f4e:	490f      	ldr	r1, [pc, #60]	; (8001f8c <printGame+0x110>)
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	00da      	lsls	r2, r3, #3
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	440a      	add	r2, r1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4602      	mov	r2, r0
 8001f64:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++ ) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b13      	cmp	r3, #19
 8001f70:	dd9e      	ble.n	8001eb0 <printGame+0x34>
	for (c = 0; c < boardColumns; c ++ ) {
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	dd88      	ble.n	8001e90 <printGame+0x14>
			}
		}
	}
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200004c0 	.word	0x200004c0
 8001f8c:	20000520 	.word	0x20000520
 8001f90:	08006700 	.word	0x08006700

08001f94 <chooseWhichObject>:

char chooseWhichObject()
{
 8001f94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */

	int BProb = BProbBase + BProbBase / (sqrt(score)); // as score goes high it will be so hard
 8001f9c:	4b90      	ldr	r3, [pc, #576]	; (80021e0 <chooseWhichObject+0x24c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fabf 	bl	8000524 <__aeabi_i2d>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <chooseWhichObject+0x24c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fab8 	bl	8000524 <__aeabi_i2d>
 8001fb4:	4680      	mov	r8, r0
 8001fb6:	4689      	mov	r9, r1
 8001fb8:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <chooseWhichObject+0x250>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fab1 	bl	8000524 <__aeabi_i2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ec43 2b10 	vmov	d0, r2, r3
 8001fca:	f004 fa7f 	bl	80064cc <sqrt>
 8001fce:	ec53 2b10 	vmov	r2, r3, d0
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe fc39 	bl	800084c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7fe f953 	bl	800028c <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdb3 	bl	8000b58 <__aeabi_d2iz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]
	if (getRandom(0, 100) < BProb) {
 8001ff6:	2164      	movs	r1, #100	; 0x64
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fe05 	bl	8001c08 <getRandom>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4293      	cmp	r3, r2
 8002004:	dd01      	ble.n	800200a <chooseWhichObject+0x76>
		return 'b';
 8002006:	2362      	movs	r3, #98	; 0x62
 8002008:	e0e4      	b.n	80021d4 <chooseWhichObject+0x240>
	}

	int SProb = SProbBase + SProbBase / (sqrt(score)); // as score goes high it will be so hard
 800200a:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <chooseWhichObject+0x254>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa88 	bl	8000524 <__aeabi_i2d>
 8002014:	4604      	mov	r4, r0
 8002016:	460d      	mov	r5, r1
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <chooseWhichObject+0x254>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa81 	bl	8000524 <__aeabi_i2d>
 8002022:	4680      	mov	r8, r0
 8002024:	4689      	mov	r9, r1
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <chooseWhichObject+0x250>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa7a 	bl	8000524 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	ec43 2b10 	vmov	d0, r2, r3
 8002038:	f004 fa48 	bl	80064cc <sqrt>
 800203c:	ec53 2b10 	vmov	r2, r3, d0
 8002040:	4640      	mov	r0, r8
 8002042:	4649      	mov	r1, r9
 8002044:	f7fe fc02 	bl	800084c <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe f91c 	bl	800028c <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fd7c 	bl	8000b58 <__aeabi_d2iz>
 8002060:	4603      	mov	r3, r0
 8002062:	613b      	str	r3, [r7, #16]
	if (getRandom(0, 100) < SProb) {
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fdce 	bl	8001c08 <getRandom>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4293      	cmp	r3, r2
 8002072:	dd01      	ble.n	8002078 <chooseWhichObject+0xe4>
		return 's';
 8002074:	2373      	movs	r3, #115	; 0x73
 8002076:	e0ad      	b.n	80021d4 <chooseWhichObject+0x240>
	}

	if (score > 20) {
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <chooseWhichObject+0x250>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b14      	cmp	r3, #20
 800207e:	dd36      	ble.n	80020ee <chooseWhichObject+0x15a>
		int MProb = MProbBase + MProbBase / (sqrt(score)); // as score goes high it will be so hard
 8002080:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <chooseWhichObject+0x258>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa4d 	bl	8000524 <__aeabi_i2d>
 800208a:	4604      	mov	r4, r0
 800208c:	460d      	mov	r5, r1
 800208e:	4b57      	ldr	r3, [pc, #348]	; (80021ec <chooseWhichObject+0x258>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa46 	bl	8000524 <__aeabi_i2d>
 8002098:	4680      	mov	r8, r0
 800209a:	4689      	mov	r9, r1
 800209c:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <chooseWhichObject+0x250>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa3f 	bl	8000524 <__aeabi_i2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	ec43 2b10 	vmov	d0, r2, r3
 80020ae:	f004 fa0d 	bl	80064cc <sqrt>
 80020b2:	ec53 2b10 	vmov	r2, r3, d0
 80020b6:	4640      	mov	r0, r8
 80020b8:	4649      	mov	r1, r9
 80020ba:	f7fe fbc7 	bl	800084c <__aeabi_ddiv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe f8e1 	bl	800028c <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fd41 	bl	8000b58 <__aeabi_d2iz>
 80020d6:	4603      	mov	r3, r0
 80020d8:	60fb      	str	r3, [r7, #12]
		if (getRandom(0, 100) < MProb) {
 80020da:	2164      	movs	r1, #100	; 0x64
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fd93 	bl	8001c08 <getRandom>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	dd01      	ble.n	80020ee <chooseWhichObject+0x15a>
			return 'm';
 80020ea:	236d      	movs	r3, #109	; 0x6d
 80020ec:	e072      	b.n	80021d4 <chooseWhichObject+0x240>
		}
	}

	int LProb = LProbBase + LProbBase / (sqrt(score)); // as score goes high it will be so hard
 80020ee:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <chooseWhichObject+0x25c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa16 	bl	8000524 <__aeabi_i2d>
 80020f8:	4604      	mov	r4, r0
 80020fa:	460d      	mov	r5, r1
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <chooseWhichObject+0x25c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fa0f 	bl	8000524 <__aeabi_i2d>
 8002106:	4680      	mov	r8, r0
 8002108:	4689      	mov	r9, r1
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <chooseWhichObject+0x250>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa08 	bl	8000524 <__aeabi_i2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	ec43 2b10 	vmov	d0, r2, r3
 800211c:	f004 f9d6 	bl	80064cc <sqrt>
 8002120:	ec53 2b10 	vmov	r2, r3, d0
 8002124:	4640      	mov	r0, r8
 8002126:	4649      	mov	r1, r9
 8002128:	f7fe fb90 	bl	800084c <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f8aa 	bl	800028c <__adddf3>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe fd0a 	bl	8000b58 <__aeabi_d2iz>
 8002144:	4603      	mov	r3, r0
 8002146:	60bb      	str	r3, [r7, #8]
	if (getRandom(0, 100) < LProb) {
 8002148:	2164      	movs	r1, #100	; 0x64
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff fd5c 	bl	8001c08 <getRandom>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4293      	cmp	r3, r2
 8002156:	dd01      	ble.n	800215c <chooseWhichObject+0x1c8>
		return 'l';
 8002158:	236c      	movs	r3, #108	; 0x6c
 800215a:	e03b      	b.n	80021d4 <chooseWhichObject+0x240>
	}

	if (score > 20) {
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <chooseWhichObject+0x250>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b14      	cmp	r3, #20
 8002162:	dd36      	ble.n	80021d2 <chooseWhichObject+0x23e>
		int VProb = VProbBase + VProbBase / (sqrt(score)); // as score goes high it will be so hard
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <chooseWhichObject+0x260>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9db 	bl	8000524 <__aeabi_i2d>
 800216e:	4604      	mov	r4, r0
 8002170:	460d      	mov	r5, r1
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <chooseWhichObject+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9d4 	bl	8000524 <__aeabi_i2d>
 800217c:	4680      	mov	r8, r0
 800217e:	4689      	mov	r9, r1
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <chooseWhichObject+0x250>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9cd 	bl	8000524 <__aeabi_i2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b10 	vmov	d0, r2, r3
 8002192:	f004 f99b 	bl	80064cc <sqrt>
 8002196:	ec53 2b10 	vmov	r2, r3, d0
 800219a:	4640      	mov	r0, r8
 800219c:	4649      	mov	r1, r9
 800219e:	f7fe fb55 	bl	800084c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe f86f 	bl	800028c <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fccf 	bl	8000b58 <__aeabi_d2iz>
 80021ba:	4603      	mov	r3, r0
 80021bc:	607b      	str	r3, [r7, #4]
		if (getRandom(0, 100) < VProb) {
 80021be:	2164      	movs	r1, #100	; 0x64
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fd21 	bl	8001c08 <getRandom>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	dd01      	ble.n	80021d2 <chooseWhichObject+0x23e>
			return 'v';
 80021ce:	2376      	movs	r3, #118	; 0x76
 80021d0:	e000      	b.n	80021d4 <chooseWhichObject+0x240>
		}
	}

	return 'e';
 80021d2:	2365      	movs	r3, #101	; 0x65
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021de:	bf00      	nop
 80021e0:	20000514 	.word	0x20000514
 80021e4:	20000518 	.word	0x20000518
 80021e8:	2000051c 	.word	0x2000051c
 80021ec:	200004b8 	.word	0x200004b8
 80021f0:	20000580 	.word	0x20000580
 80021f4:	2000057c 	.word	0x2000057c

080021f8 <setRowObjects>:

void setRowObjects(int j)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	 * how to generage a row in this game?
	 * choose witch character should be choosed for this row
	 * choose witch col to place it
	 */
	int i;
	int maxObjectsOnRow = 2;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
	for (i = 0; i < boardColumns; i ++ ) {
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e01b      	b.n	8002242 <setRowObjects+0x4a>
		char chosen = chooseWhichObject();
 800220a:	f7ff fec3 	bl	8001f94 <chooseWhichObject>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
		if (chosen != 'e') {
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b65      	cmp	r3, #101	; 0x65
 8002216:	d00e      	beq.n	8002236 <setRowObjects+0x3e>
			maxObjectsOnRow --;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	3b01      	subs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
			board[i][j] = chosen;
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <setRowObjects+0x5c>)
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00da      	lsls	r2, r3, #3
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	440a      	add	r2, r1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	701a      	strb	r2, [r3, #0]
		}
		if (maxObjectsOnRow < 1) break;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	dd06      	ble.n	800224a <setRowObjects+0x52>
	for (i = 0; i < boardColumns; i ++ ) {
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b03      	cmp	r3, #3
 8002246:	dde0      	ble.n	800220a <setRowObjects+0x12>
	}
}
 8002248:	e000      	b.n	800224c <setRowObjects+0x54>
		if (maxObjectsOnRow < 1) break;
 800224a:	bf00      	nop
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200004c0 	.word	0x200004c0

08002258 <initGameState>:

void initGameState()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	 *  'l': loose block
	 *  'm': monster
	 *  '!': null and not valid
	 */
	int i, j;
	for (i = 0; i < boardColumns; i ++) {
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	e02e      	b.n	80022c2 <initGameState+0x6a>
		for (j = 0; j < boardRows; j ++) {
 8002264:	2300      	movs	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	e00e      	b.n	8002288 <initGameState+0x30>
			board[i][j] = 'e';
 800226a:	493a      	ldr	r1, [pc, #232]	; (8002354 <initGameState+0xfc>)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00da      	lsls	r2, r3, #3
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	440a      	add	r2, r1
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4413      	add	r3, r2
 800227e:	2265      	movs	r2, #101	; 0x65
 8002280:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < boardRows; j ++) {
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b13      	cmp	r3, #19
 800228c:	dded      	ble.n	800226a <initGameState+0x12>
		}
		board[i][boardRows] = '\0';
 800228e:	4931      	ldr	r1, [pc, #196]	; (8002354 <initGameState+0xfc>)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00da      	lsls	r2, r3, #3
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	188b      	adds	r3, r1, r2
 800229e:	3314      	adds	r3, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
		boardTemp[i][j] = '!'; // this means it is the first turn and no value is there
 80022a4:	492c      	ldr	r1, [pc, #176]	; (8002358 <initGameState+0x100>)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00da      	lsls	r2, r3, #3
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	440a      	add	r2, r1
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	2221      	movs	r2, #33	; 0x21
 80022ba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < boardColumns; i ++) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	ddcd      	ble.n	8002264 <initGameState+0xc>
	}
	board[1][0] = 'b';
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <initGameState+0xfc>)
 80022ca:	2262      	movs	r2, #98	; 0x62
 80022cc:	755a      	strb	r2, [r3, #21]
	board[1][1] = 'p';
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <initGameState+0xfc>)
 80022d0:	2270      	movs	r2, #112	; 0x70
 80022d2:	759a      	strb	r2, [r3, #22]
	playerRow = 1;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <initGameState+0x104>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
	playerCol = 1;
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <initGameState+0x108>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
	playerOn = 'e';
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <initGameState+0x10c>)
 80022e2:	2265      	movs	r2, #101	; 0x65
 80022e4:	701a      	strb	r2, [r3, #0]
	jumpCount = 0;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <initGameState+0x110>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

	BProbBase = 10;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <initGameState+0x114>)
 80022ee:	220a      	movs	r2, #10
 80022f0:	601a      	str	r2, [r3, #0]
	SProbBase = 1;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <initGameState+0x118>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
	VProbBase = 1;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <initGameState+0x11c>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
	LProbBase = 2;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <initGameState+0x120>)
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
	MProbBase = 1;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <initGameState+0x124>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

	score = 1;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <initGameState+0x128>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
	playerHeight = score;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <initGameState+0x128>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <initGameState+0x12c>)
 8002316:	6013      	str	r3, [r2, #0]
	playerHeightInScreen = playerHeight;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <initGameState+0x12c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <initGameState+0x130>)
 800231e:	6013      	str	r3, [r2, #0]
	srand(time(0));
 8002320:	2000      	movs	r0, #0
 8002322:	f003 f8e5 	bl	80054f0 <time>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4613      	mov	r3, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f871 	bl	8005414 <srand>
	for (j = 2; j < boardRows; j ++ ) {
 8002332:	2302      	movs	r3, #2
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	e005      	b.n	8002344 <initGameState+0xec>
		setRowObjects(j);
 8002338:	6838      	ldr	r0, [r7, #0]
 800233a:	f7ff ff5d 	bl	80021f8 <setRowObjects>
	for (j = 2; j < boardRows; j ++ ) {
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b13      	cmp	r3, #19
 8002348:	ddf6      	ble.n	8002338 <initGameState+0xe0>
	}
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200004c0 	.word	0x200004c0
 8002358:	20000520 	.word	0x20000520
 800235c:	20000588 	.word	0x20000588
 8002360:	200004bc 	.word	0x200004bc
 8002364:	20000590 	.word	0x20000590
 8002368:	20000574 	.word	0x20000574
 800236c:	20000514 	.word	0x20000514
 8002370:	2000051c 	.word	0x2000051c
 8002374:	2000057c 	.word	0x2000057c
 8002378:	20000580 	.word	0x20000580
 800237c:	200004b8 	.word	0x200004b8
 8002380:	20000518 	.word	0x20000518
 8002384:	2000058c 	.word	0x2000058c
 8002388:	20000578 	.word	0x20000578

0800238c <keypadCallback>:

void keypadCallback(int8_t column_number)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if (last_gpio_exti + 250 > HAL_GetTick()) // Simple button debouncing
 8002396:	4b9b      	ldr	r3, [pc, #620]	; (8002604 <keypadCallback+0x278>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 800239e:	f000 fab1 	bl	8002904 <HAL_GetTick>
 80023a2:	4603      	mov	r3, r0
 80023a4:	429c      	cmp	r4, r3
 80023a6:	f200 811d 	bhi.w	80025e4 <keypadCallback+0x258>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80023aa:	f000 faab 	bl	8002904 <HAL_GetTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a94      	ldr	r2, [pc, #592]	; (8002604 <keypadCallback+0x278>)
 80023b2:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 0);
 80023b8:	4b93      	ldr	r3, [pc, #588]	; (8002608 <keypadCallback+0x27c>)
 80023ba:	2110      	movs	r1, #16
 80023bc:	2200      	movs	r2, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fd74 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 0);
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <keypadCallback+0x27c>)
 80023c6:	2120      	movs	r1, #32
 80023c8:	2200      	movs	r2, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fd6e 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 0);
 80023d0:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <keypadCallback+0x27c>)
 80023d2:	2140      	movs	r1, #64	; 0x40
 80023d4:	2200      	movs	r2, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fd68 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 0);
 80023dc:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <keypadCallback+0x27c>)
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	2200      	movs	r2, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fd62 	bl	8002eac <HAL_GPIO_WritePin>

  for (uint8_t row = 0; row < 4; row++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	73bb      	strb	r3, [r7, #14]
 80023ec:	e02e      	b.n	800244c <keypadCallback+0xc0>
  {
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 1);
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	4a86      	ldr	r2, [pc, #536]	; (800260c <keypadCallback+0x280>)
 80023f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023f6:	7bbb      	ldrb	r3, [r7, #14]
 80023f8:	4a85      	ldr	r2, [pc, #532]	; (8002610 <keypadCallback+0x284>)
 80023fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023fe:	2201      	movs	r2, #1
 8002400:	4619      	mov	r1, r3
 8002402:	f000 fd53 	bl	8002eac <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Column_ports[column_number], Column_pins[column_number]))
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	4a82      	ldr	r2, [pc, #520]	; (8002614 <keypadCallback+0x288>)
 800240c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4980      	ldr	r1, [pc, #512]	; (8002618 <keypadCallback+0x28c>)
 8002416:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 fd2d 	bl	8002e7c <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <keypadCallback+0xa2>
    {
      row_number = row;
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e011      	b.n	8002452 <keypadCallback+0xc6>
    }
    HAL_GPIO_WritePin(Row_ports[row], Row_pins[row], 0);
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	4a76      	ldr	r2, [pc, #472]	; (800260c <keypadCallback+0x280>)
 8002432:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002436:	7bbb      	ldrb	r3, [r7, #14]
 8002438:	4a75      	ldr	r2, [pc, #468]	; (8002610 <keypadCallback+0x284>)
 800243a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	f000 fd33 	bl	8002eac <HAL_GPIO_WritePin>
  for (uint8_t row = 0; row < 4; row++)
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	3301      	adds	r3, #1
 800244a:	73bb      	strb	r3, [r7, #14]
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d9cd      	bls.n	80023ee <keypadCallback+0x62>
  }

  HAL_GPIO_WritePin(Row_ports[0], Row_pins[0], 1);
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <keypadCallback+0x27c>)
 8002454:	2110      	movs	r1, #16
 8002456:	2201      	movs	r2, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fd27 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[1], Row_pins[1], 1);
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <keypadCallback+0x27c>)
 8002460:	2120      	movs	r1, #32
 8002462:	2201      	movs	r2, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fd21 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[2], Row_pins[2], 1);
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <keypadCallback+0x27c>)
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	2201      	movs	r2, #1
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fd1b 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Row_ports[3], Row_pins[3], 1);
 8002476:	4b64      	ldr	r3, [pc, #400]	; (8002608 <keypadCallback+0x27c>)
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	2201      	movs	r2, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fd15 	bl	8002eac <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248a:	f000 80ad 	beq.w	80025e8 <keypadCallback+0x25c>
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002496:	f000 80a7 	beq.w	80025e8 <keypadCallback+0x25c>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4413      	add	r3, r2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	737b      	strb	r3, [r7, #13]

//  setCursor(curser_column, 0);
  switch (button_number)
 80024aa:	7b7b      	ldrb	r3, [r7, #13]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f200 809c 	bhi.w	80025ec <keypadCallback+0x260>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <keypadCallback+0x130>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080025ed 	.word	0x080025ed
 80024c0:	080025ed 	.word	0x080025ed
 80024c4:	080025ed 	.word	0x080025ed
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	08002505 	.word	0x08002505
 80024d0:	0800250d 	.word	0x0800250d
 80024d4:	08002515 	.word	0x08002515
 80024d8:	0800251d 	.word	0x0800251d
 80024dc:	08002525 	.word	0x08002525
 80024e0:	0800252d 	.word	0x0800252d
 80024e4:	0800253d 	.word	0x0800253d
 80024e8:	08002545 	.word	0x08002545
 80024ec:	0800254d 	.word	0x0800254d
 80024f0:	08002555 	.word	0x08002555
 80024f4:	0800258f 	.word	0x0800258f
 80024f8:	080025d5 	.word	0x080025d5
       break;
     case 3:
//    	  print("3");
       break;
     case 4:
    	  print("4");
 80024fc:	4847      	ldr	r0, [pc, #284]	; (800261c <keypadCallback+0x290>)
 80024fe:	f7fe fe01 	bl	8001104 <print>
       break;
 8002502:	e07c      	b.n	80025fe <keypadCallback+0x272>
     case 5:
    	  print("5");
 8002504:	4846      	ldr	r0, [pc, #280]	; (8002620 <keypadCallback+0x294>)
 8002506:	f7fe fdfd 	bl	8001104 <print>
       break;
 800250a:	e078      	b.n	80025fe <keypadCallback+0x272>
     case 6:
    	  print("6");
 800250c:	4845      	ldr	r0, [pc, #276]	; (8002624 <keypadCallback+0x298>)
 800250e:	f7fe fdf9 	bl	8001104 <print>
       break;
 8002512:	e074      	b.n	80025fe <keypadCallback+0x272>
     case 7:
    	  print("7");
 8002514:	4844      	ldr	r0, [pc, #272]	; (8002628 <keypadCallback+0x29c>)
 8002516:	f7fe fdf5 	bl	8001104 <print>
       break;
 800251a:	e070      	b.n	80025fe <keypadCallback+0x272>
     case 8:
    	  print("8");
 800251c:	4843      	ldr	r0, [pc, #268]	; (800262c <keypadCallback+0x2a0>)
 800251e:	f7fe fdf1 	bl	8001104 <print>
       break;
 8002522:	e06c      	b.n	80025fe <keypadCallback+0x272>
     case 9:
    	  print("9");
 8002524:	4842      	ldr	r0, [pc, #264]	; (8002630 <keypadCallback+0x2a4>)
 8002526:	f7fe fded 	bl	8001104 <print>
       break;
 800252a:	e068      	b.n	80025fe <keypadCallback+0x272>
     case 10:
     	 if (menuState == 'z')
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <keypadCallback+0x2a8>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b7a      	cmp	r3, #122	; 0x7a
 8002532:	d15d      	bne.n	80025f0 <keypadCallback+0x264>
     		 menuState = 'm';
 8002534:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <keypadCallback+0x2a8>)
 8002536:	226d      	movs	r2, #109	; 0x6d
 8002538:	701a      	strb	r2, [r3, #0]
       break;
 800253a:	e059      	b.n	80025f0 <keypadCallback+0x264>
     case 11:
    	  print("11");
 800253c:	483e      	ldr	r0, [pc, #248]	; (8002638 <keypadCallback+0x2ac>)
 800253e:	f7fe fde1 	bl	8001104 <print>
       break;
 8002542:	e05c      	b.n	80025fe <keypadCallback+0x272>
     case 12:
    	  print("12");
 8002544:	483d      	ldr	r0, [pc, #244]	; (800263c <keypadCallback+0x2b0>)
 8002546:	f7fe fddd 	bl	8001104 <print>
       break;
 800254a:	e058      	b.n	80025fe <keypadCallback+0x272>
     case 13:
    	 print("13");
 800254c:	483c      	ldr	r0, [pc, #240]	; (8002640 <keypadCallback+0x2b4>)
 800254e:	f7fe fdd9 	bl	8001104 <print>
       break;
 8002552:	e054      	b.n	80025fe <keypadCallback+0x272>
     case 14:
    	 if (menuState == 'm')
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <keypadCallback+0x2a8>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b6d      	cmp	r3, #109	; 0x6d
 800255a:	d103      	bne.n	8002564 <keypadCallback+0x1d8>
    		 menuState = 'a';
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <keypadCallback+0x2a8>)
 800255e:	2261      	movs	r2, #97	; 0x61
 8002560:	701a      	strb	r2, [r3, #0]
    	 else if (menuState == 'g') {
    		 //    		 Player move right
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
    	 }
       break;
 8002562:	e047      	b.n	80025f4 <keypadCallback+0x268>
    	 else if (menuState == 'g') {
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <keypadCallback+0x2a8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b67      	cmp	r3, #103	; 0x67
 800256a:	d143      	bne.n	80025f4 <keypadCallback+0x268>
			 movePlayerTo((playerCol + 1) % boardColumns, playerRow);
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <keypadCallback+0x2b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	425a      	negs	r2, r3
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	bf58      	it	pl
 800257e:	4253      	negpl	r3, r2
 8002580:	4a31      	ldr	r2, [pc, #196]	; (8002648 <keypadCallback+0x2bc>)
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fc04 	bl	8001d94 <movePlayerTo>
       break;
 800258c:	e032      	b.n	80025f4 <keypadCallback+0x268>
     case 15:
    	 if (menuState == 'm') {
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <keypadCallback+0x2a8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b6d      	cmp	r3, #109	; 0x6d
 8002594:	d105      	bne.n	80025a2 <keypadCallback+0x216>
    		 initGameState();
 8002596:	f7ff fe5f 	bl	8002258 <initGameState>
    		 menuState = 'g';
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <keypadCallback+0x2a8>)
 800259c:	2267      	movs	r2, #103	; 0x67
 800259e:	701a      	strb	r2, [r3, #0]
				 movePlayerTo(boardColumns - 1, playerRow);
			 } else {
				 movePlayerTo(playerCol - 1, playerRow);
			 }
    	 }
       break;
 80025a0:	e02a      	b.n	80025f8 <keypadCallback+0x26c>
    	 } else if (menuState == 'g') {
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <keypadCallback+0x2a8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b67      	cmp	r3, #103	; 0x67
 80025a8:	d126      	bne.n	80025f8 <keypadCallback+0x26c>
			 if (playerCol == 0) {
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <keypadCallback+0x2b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <keypadCallback+0x234>
				 movePlayerTo(boardColumns - 1, playerRow);
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <keypadCallback+0x2bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	2003      	movs	r0, #3
 80025ba:	f7ff fbeb 	bl	8001d94 <movePlayerTo>
       break;
 80025be:	e01b      	b.n	80025f8 <keypadCallback+0x26c>
				 movePlayerTo(playerCol - 1, playerRow);
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <keypadCallback+0x2b8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	4a20      	ldr	r2, [pc, #128]	; (8002648 <keypadCallback+0x2bc>)
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fbe1 	bl	8001d94 <movePlayerTo>
       break;
 80025d2:	e011      	b.n	80025f8 <keypadCallback+0x26c>
     case 16:
    	  if (menuState == 'a')
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <keypadCallback+0x2a8>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b61      	cmp	r3, #97	; 0x61
 80025da:	d10f      	bne.n	80025fc <keypadCallback+0x270>
    		  menuState = 'm';
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <keypadCallback+0x2a8>)
 80025de:	226d      	movs	r2, #109	; 0x6d
 80025e0:	701a      	strb	r2, [r3, #0]
       break;
 80025e2:	e00b      	b.n	80025fc <keypadCallback+0x270>
    return;
 80025e4:	bf00      	nop
 80025e6:	e00a      	b.n	80025fe <keypadCallback+0x272>
    return; // Reject invalid scan
 80025e8:	bf00      	nop
 80025ea:	e008      	b.n	80025fe <keypadCallback+0x272>

     default:
       break;
 80025ec:	bf00      	nop
 80025ee:	e006      	b.n	80025fe <keypadCallback+0x272>
       break;
 80025f0:	bf00      	nop
 80025f2:	e004      	b.n	80025fe <keypadCallback+0x272>
       break;
 80025f4:	bf00      	nop
 80025f6:	e002      	b.n	80025fe <keypadCallback+0x272>
       break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <keypadCallback+0x272>
       break;
 80025fc:	bf00      	nop
     }
}
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	20000584 	.word	0x20000584
 8002608:	48000c00 	.word	0x48000c00
 800260c:	08006728 	.word	0x08006728
 8002610:	08006738 	.word	0x08006738
 8002614:	08006740 	.word	0x08006740
 8002618:	08006750 	.word	0x08006750
 800261c:	08006704 	.word	0x08006704
 8002620:	08006708 	.word	0x08006708
 8002624:	0800670c 	.word	0x0800670c
 8002628:	08006710 	.word	0x08006710
 800262c:	08006714 	.word	0x08006714
 8002630:	08006718 	.word	0x08006718
 8002634:	20000118 	.word	0x20000118
 8002638:	0800671c 	.word	0x0800671c
 800263c:	08006720 	.word	0x08006720
 8002640:	08006724 	.word	0x08006724
 8002644:	200004bc 	.word	0x200004bc
 8002648:	20000588 	.word	0x20000588

0800264c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
	return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_kill>:

int _kill(int pid, int sig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002666:	f002 fea3 	bl	80053b0 <__errno>
 800266a:	4603      	mov	r3, r0
 800266c:	2216      	movs	r2, #22
 800266e:	601a      	str	r2, [r3, #0]
	return -1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_exit>:

void _exit (int status)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffe7 	bl	800265c <_kill>
	while (1) {}		/* Make sure we hang here */
 800268e:	e7fe      	b.n	800268e <_exit+0x12>

08002690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e00a      	b.n	80026b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026a2:	f3af 8000 	nop.w
 80026a6:	4601      	mov	r1, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	60ba      	str	r2, [r7, #8]
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf0      	blt.n	80026a2 <_read+0x12>
	}

return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e009      	b.n	80026f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf1      	blt.n	80026dc <_write+0x12>
	}
	return len;
 80026f8:	687b      	ldr	r3, [r7, #4]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_close>:

int _close(int file)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	return -1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272a:	605a      	str	r2, [r3, #4]
	return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_isatty>:

int _isatty(int file)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
	return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f002 fe08 	bl	80053b0 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <_sbrk+0x64>)
 80027bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000a000 	.word	0x2000a000
 80027cc:	00000400 	.word	0x00000400
 80027d0:	20000098 	.word	0x20000098
 80027d4:	200005a8 	.word	0x200005a8

080027d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <SystemInit+0x20>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <SystemInit+0x20>)
 80027e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002826:	f7ff ffd7 	bl	80027d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282a:	f002 fdc7 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282e:	f7fe fd79 	bl	8001324 <main>

08002832 <LoopForever>:

LoopForever:
    b LoopForever
 8002832:	e7fe      	b.n	8002832 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002834:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002840:	080068dc 	.word	0x080068dc
  ldr r2, =_sbss
 8002844:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002848:	200005a8 	.word	0x200005a8

0800284c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_Init+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_Init+0x28>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002860:	2003      	movs	r0, #3
 8002862:	f000 f94f 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002866:	2000      	movs	r0, #0
 8002868:	f000 f808 	bl	800287c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800286c:	f7fe ffc4 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x54>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f967 	bl	8002b6e <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b8:	f000 f92f 	bl	8002b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_InitTick+0x5c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000004 	.word	0x20000004
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	20000008 	.word	0x20000008

080028dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x20>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x24>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_IncTick+0x24>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	20000594 	.word	0x20000594

08002904 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return uwTick;  
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000594 	.word	0x20000594

0800291c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff ffee 	bl	8002904 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002934:	d005      	beq.n	8002942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_Delay+0x44>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002942:	bf00      	nop
 8002944:	f7ff ffde 	bl	8002904 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d8f7      	bhi.n	8002944 <HAL_Delay+0x28>
  {
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000000c 	.word	0x2000000c

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <__NVIC_EnableIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	; (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae4:	f7ff ff8e 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff29 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff3e 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff8e 	bl	8002a58 <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff31 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa2 	bl	8002ac0 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b96:	e154      	b.n	8002e42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8146 	beq.w	8002e3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d005      	beq.n	8002bc8 <HAL_GPIO_Init+0x40>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d130      	bne.n	8002c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfe:	2201      	movs	r2, #1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 0201 	and.w	r2, r3, #1
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d017      	beq.n	8002c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d123      	bne.n	8002cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	08da      	lsrs	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3208      	adds	r2, #8
 8002c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	6939      	ldr	r1, [r7, #16]
 8002cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a0 	beq.w	8002e3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfc:	4b58      	ldr	r3, [pc, #352]	; (8002e60 <HAL_GPIO_Init+0x2d8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_GPIO_Init+0x2d8>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <HAL_GPIO_Init+0x2d8>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d14:	4a53      	ldr	r2, [pc, #332]	; (8002e64 <HAL_GPIO_Init+0x2dc>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d3e:	d019      	beq.n	8002d74 <HAL_GPIO_Init+0x1ec>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a49      	ldr	r2, [pc, #292]	; (8002e68 <HAL_GPIO_Init+0x2e0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_GPIO_Init+0x1e8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <HAL_GPIO_Init+0x2e4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00d      	beq.n	8002d6c <HAL_GPIO_Init+0x1e4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_GPIO_Init+0x2e8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <HAL_GPIO_Init+0x1e0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_GPIO_Init+0x2ec>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_GPIO_Init+0x1dc>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e008      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d64:	2305      	movs	r3, #5
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d86:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x2dc>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db8:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002de2:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e0c:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f aea3 	bne.w	8002b98 <HAL_GPIO_Init+0x10>
  }
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	40010400 	.word	0x40010400

08002e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e001      	b.n	8002e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43d9      	mvns	r1, r3
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	400b      	ands	r3, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f806 	bl	8002f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e081      	b.n	800306c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe fc5f 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e006      	b.n	8002fde <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fdc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d104      	bne.n	8002ff0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69d9      	ldr	r1, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d138      	bne.n	80030fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003094:	2302      	movs	r3, #2
 8003096:	e032      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	d139      	bne.n	8003194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800312a:	2302      	movs	r3, #2
 800312c:	e033      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2224      	movs	r2, #36	; 0x24
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800315c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a4:	b08b      	sub	sp, #44	; 0x2c
 80031a6:	af06      	add	r7, sp, #24
 80031a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0d0      	b.n	8003356 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fe fbe3 	bl	8001994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 f8ac 	bl	8005338 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e04c      	b.n	8003280 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	3301      	adds	r3, #1
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	b298      	uxth	r0, r3
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	3336      	adds	r3, #54	; 0x36
 8003224:	4602      	mov	r2, r0
 8003226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3303      	adds	r3, #3
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	3338      	adds	r3, #56	; 0x38
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	333c      	adds	r3, #60	; 0x3c
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3340      	adds	r3, #64	; 0x40
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3ad      	bcc.n	80031e6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e044      	b.n	800331a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3b5      	bcc.n	8003290 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	687e      	ldr	r6, [r7, #4]
 800332c:	466d      	mov	r5, sp
 800332e:	f106 0410 	add.w	r4, r6, #16
 8003332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	602b      	str	r3, [r5, #0]
 800333a:	1d33      	adds	r3, r6, #4
 800333c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	f002 f815 	bl	800536e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003366:	af00      	add	r7, sp, #0
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f000 bef4 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 816a 	beq.w	800365e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800338a:	4bb3      	ldr	r3, [pc, #716]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b04      	cmp	r3, #4
 8003394:	d00c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003396:	4bb0      	ldr	r3, [pc, #704]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d159      	bne.n	8003456 <HAL_RCC_OscConfig+0xf6>
 80033a2:	4bad      	ldr	r3, [pc, #692]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d152      	bne.n	8003456 <HAL_RCC_OscConfig+0xf6>
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_OscConfig+0x82>
 80033dc:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0xae>
 80033e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800340a:	4b93      	ldr	r3, [pc, #588]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003412:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003416:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800341a:	fa92 f2a2 	rbit	r2, r2
 800341e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003422:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 810c 	beq.w	800365c <HAL_RCC_OscConfig+0x2fc>
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8106 	bne.w	800365c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f000 be86 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0x110>
 8003462:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7c      	ldr	r2, [pc, #496]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e030      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x134>
 800347a:	4b77      	ldr	r3, [pc, #476]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b74      	ldr	r3, [pc, #464]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800348c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01e      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x15a>
 80034a0:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6c      	ldr	r2, [pc, #432]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a69      	ldr	r2, [pc, #420]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a66      	ldr	r2, [pc, #408]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	495d      	ldr	r1, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d059      	beq.n	80035a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff fa08 	bl	8002904 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fa:	f7ff fa03 	bl	8002904 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d902      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	f000 be29 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 8003510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003514:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003524:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x1e2>
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x20e>
 8003542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003546:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800355e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003572:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003576:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003582:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f002 021f 	and.w	r2, r2, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ab      	beq.n	80034fa <HAL_RCC_OscConfig+0x19a>
 80035a2:	e05c      	b.n	800365e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff f9ae 	bl	8002904 <HAL_GetTick>
 80035a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ae:	f7ff f9a9 	bl	8002904 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d902      	bls.n	80035c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	f000 bdcf 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80035c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80035d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d102      	bne.n	80035f6 <HAL_RCC_OscConfig+0x296>
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x2c2>
 80035f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800360a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800360e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003612:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003626:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800362a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003636:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ab      	bne.n	80035ae <HAL_RCC_OscConfig+0x24e>
 8003656:	e002      	b.n	800365e <HAL_RCC_OscConfig+0x2fe>
 8003658:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 816f 	beq.w	800394c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800366e:	4bd0      	ldr	r3, [pc, #832]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800367a:	4bcd      	ldr	r3, [pc, #820]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d16c      	bne.n	8003760 <HAL_RCC_OscConfig+0x400>
 8003686:	4bca      	ldr	r3, [pc, #808]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d166      	bne.n	8003760 <HAL_RCC_OscConfig+0x400>
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x362>
 80036bc:	4bbc      	ldr	r3, [pc, #752]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0x38a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036d4:	2302      	movs	r3, #2
 80036d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036e6:	4bb2      	ldr	r3, [pc, #712]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2202      	movs	r2, #2
 80036ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80036f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80036fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_RCC_OscConfig+0x3cc>
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 bd1b 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4ba0      	ldr	r3, [pc, #640]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	21f8      	movs	r1, #248	; 0xf8
 800373c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003744:	fa91 f1a1 	rbit	r1, r1
 8003748:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800374c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003750:	fab1 f181 	clz	r1, r1
 8003754:	b2c9      	uxtb	r1, r1
 8003756:	408b      	lsls	r3, r1
 8003758:	4995      	ldr	r1, [pc, #596]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e0f5      	b.n	800394c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8085 	beq.w	8003876 <HAL_RCC_OscConfig+0x516>
 800376c:	2301      	movs	r3, #1
 800376e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800377e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800378c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	461a      	mov	r2, r3
 8003794:	2301      	movs	r3, #1
 8003796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7ff f8b4 	bl	8002904 <HAL_GetTick>
 800379c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7ff f8af 	bl	8002904 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f000 bcd5 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_RCC_OscConfig+0x488>
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e013      	b.n	8003810 <HAL_RCC_OscConfig+0x4b0>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037fa:	2302      	movs	r3, #2
 80037fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003800:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003816:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800381a:	fa92 f2a2 	rbit	r2, r2
 800381e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003822:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f002 021f 	and.w	r2, r2, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0af      	beq.n	80037a2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	21f8      	movs	r1, #248	; 0xf8
 8003852:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800385a:	fa91 f1a1 	rbit	r1, r1
 800385e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003862:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003866:	fab1 f181 	clz	r1, r1
 800386a:	b2c9      	uxtb	r1, r1
 800386c:	408b      	lsls	r3, r1
 800386e:	4950      	ldr	r1, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e06a      	b.n	800394c <HAL_RCC_OscConfig+0x5ec>
 8003876:	2301      	movs	r3, #1
 8003878:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7ff f82f 	bl	8002904 <HAL_GetTick>
 80038a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ac:	f7ff f82a 	bl	8002904 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	f000 bc50 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0x592>
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e013      	b.n	800391a <HAL_RCC_OscConfig+0x5ba>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003904:	2302      	movs	r3, #2
 8003906:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800390a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2202      	movs	r2, #2
 800391c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003920:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800392c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1af      	bne.n	80038ac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80da 	beq.w	8003b10 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d069      	beq.n	8003a3a <HAL_RCC_OscConfig+0x6da>
 8003966:	2301      	movs	r3, #1
 8003968:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x654>)
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	461a      	mov	r2, r3
 800398c:	2301      	movs	r3, #1
 800398e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fe ffb8 	bl	8002904 <HAL_GetTick>
 8003994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e00e      	b.n	80039b8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe ffb3 	bl	8002904 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d906      	bls.n	80039b8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e3d9      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	10908120 	.word	0x10908120
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039ce:	2202      	movs	r2, #2
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039e6:	2202      	movs	r2, #2
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	fa93 f2a3 	rbit	r2, r3
 80039f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 80039fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a02:	2102      	movs	r1, #2
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f1a3 	rbit	r1, r3
 8003a10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a14:	6019      	str	r1, [r3, #0]
  return result;
 8003a16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0b0      	beq.n	800399a <HAL_RCC_OscConfig+0x63a>
 8003a38:	e06a      	b.n	8003b10 <HAL_RCC_OscConfig+0x7b0>
 8003a3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fa93 f2a3 	rbit	r2, r3
 8003a4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a50:	601a      	str	r2, [r3, #0]
  return result;
 8003a52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x934>)
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fe ff4a 	bl	8002904 <HAL_GetTick>
 8003a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e009      	b.n	8003a8a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fe ff45 	bl	8002904 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e36b      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003a8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a8e:	2202      	movs	r2, #2
 8003a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ad0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ada:	2102      	movs	r1, #2
 8003adc:	6019      	str	r1, [r3, #0]
 8003ade:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f1a3 	rbit	r1, r3
 8003ae8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003aec:	6019      	str	r1, [r3, #0]
  return result;
 8003aee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1b2      	bne.n	8003a76 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8158 	beq.w	8003dd0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d112      	bne.n	8003b58 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b54      	ldr	r3, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11a      	bne.n	8003b9a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7fe fec8 	bl	8002904 <HAL_GetTick>
 8003b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe fec3 	bl	8002904 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e2e9      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ef      	beq.n	8003b7a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x852>
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e02f      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x876>
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e01d      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x89a>
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6213      	str	r3, [r2, #32]
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d06b      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe fe72 	bl	8002904 <HAL_GetTick>
 8003c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fe fe6d 	bl	8002904 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e291      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003c3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c6c:	601a      	str	r2, [r3, #0]
  return result;
 8003c6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0302 	orr.w	r3, r3, #2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_OscConfig+0x93c>
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x958>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	10908120 	.word	0x10908120
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	4bbb      	ldr	r3, [pc, #748]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	6011      	str	r1, [r2, #0]
 8003cc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	fa92 f1a2 	rbit	r1, r2
 8003cca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cce:	6011      	str	r1, [r2, #0]
  return result;
 8003cd0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d099      	beq.n	8003c26 <HAL_RCC_OscConfig+0x8c6>
 8003cf2:	e063      	b.n	8003dbc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fe06 	bl	8002904 <HAL_GetTick>
 8003cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fe fe01 	bl	8002904 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e225      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d44:	601a      	str	r2, [r3, #0]
  return result;
 8003d46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_OscConfig+0xa06>
 8003d60:	4b90      	ldr	r3, [pc, #576]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	e00d      	b.n	8003d82 <HAL_RCC_OscConfig+0xa22>
 8003d66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d86:	2102      	movs	r1, #2
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	fa92 f1a2 	rbit	r1, r2
 8003d94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d98:	6011      	str	r1, [r2, #0]
  return result;
 8003d9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f002 021f 	and.w	r2, r2, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1a0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b77      	ldr	r3, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a76      	ldr	r2, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81c2 	beq.w	8004160 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ddc:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f000 819c 	beq.w	8004122 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f040 8114 	bne.w	800401e <HAL_RCC_OscConfig+0xcbe>
 8003df6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	fa93 f2a3 	rbit	r2, r3
 8003e0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e0e:	601a      	str	r2, [r3, #0]
  return result;
 8003e10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fd6a 	bl	8002904 <HAL_GetTick>
 8003e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e34:	e009      	b.n	8003e4a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe fd65 	bl	8002904 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e18b      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003e4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e62:	601a      	str	r2, [r3, #0]
  return result;
 8003e64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0xb24>
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e01b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb5c>
 8003e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ec0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	fa92 f1a2 	rbit	r1, r2
 8003ed0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ed4:	6011      	str	r1, [r2, #0]
  return result;
 8003ed6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	fab2 f282 	clz	r2, r2
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f042 0220 	orr.w	r2, r2, #32
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f002 021f 	and.w	r2, r2, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d19e      	bne.n	8003e36 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	4925      	ldr	r1, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f2c:	601a      	str	r2, [r3, #0]
  return result;
 8003f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f32:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fcdb 	bl	8002904 <HAL_GetTick>
 8003f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f52:	e009      	b.n	8003f68 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe fcd6 	bl	8002904 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0fc      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f80:	601a      	str	r2, [r3, #0]
  return result;
 8003f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xc48>
 8003f9c:	4b01      	ldr	r3, [pc, #4]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	e01e      	b.n	8003fe0 <HAL_RCC_OscConfig+0xc80>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	fa92 f1a2 	rbit	r1, r2
 8003ff4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ff8:	6011      	str	r1, [r2, #0]
  return result;
 8003ffa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	fab2 f282 	clz	r2, r2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	f002 021f 	and.w	r2, r2, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d09b      	beq.n	8003f54 <HAL_RCC_OscConfig+0xbf4>
 800401c:	e0a0      	b.n	8004160 <HAL_RCC_OscConfig+0xe00>
 800401e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004036:	601a      	str	r2, [r3, #0]
  return result;
 8004038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe fc56 	bl	8002904 <HAL_GetTick>
 8004058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	e009      	b.n	8004072 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fe fc51 	bl	8002904 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e077      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fa93 f2a3 	rbit	r2, r3
 8004086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408a:	601a      	str	r2, [r3, #0]
  return result;
 800408c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004090:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <HAL_RCC_OscConfig+0xd4c>
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0xd84>
 80040ac:	f107 0320 	add.w	r3, r7, #32
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f107 0320 	add.w	r3, r7, #32
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f107 031c 	add.w	r3, r7, #28
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f107 0318 	add.w	r3, r7, #24
 80040ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f107 0318 	add.w	r3, r7, #24
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f107 0210 	add.w	r2, r7, #16
 80040e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	f107 0210 	add.w	r2, r7, #16
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f107 020c 	add.w	r2, r7, #12
 80040fc:	6011      	str	r1, [r2, #0]
  return result;
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	fab2 f282 	clz	r2, r2
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f042 0220 	orr.w	r2, r2, #32
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f002 021f 	and.w	r2, r2, #31
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f202 	lsl.w	r2, r1, r2
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d19e      	bne.n	800405e <HAL_RCC_OscConfig+0xcfe>
 8004120:	e01e      	b.n	8004160 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004122:	1d3b      	adds	r3, r7, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e018      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004138:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800413c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	429a      	cmp	r2, r3
 8004148:	d108      	bne.n	800415c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800414a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800414e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b09e      	sub	sp, #120	; 0x78
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e162      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b90      	ldr	r3, [pc, #576]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d910      	bls.n	80041b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	498b      	ldr	r1, [pc, #556]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b89      	ldr	r3, [pc, #548]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e14a      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b82      	ldr	r3, [pc, #520]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	497f      	ldr	r1, [pc, #508]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80dc 	beq.w	800439c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d13c      	bne.n	8004266 <HAL_RCC_ClockConfig+0xf6>
 80041ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <HAL_RCC_ClockConfig+0xa6>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	e00f      	b.n	8004236 <HAL_RCC_ClockConfig+0xc6>
 8004216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	667b      	str	r3, [r7, #100]	; 0x64
 8004224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
 800422a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800423a:	65ba      	str	r2, [r7, #88]	; 0x58
 800423c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d17b      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0f3      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d13c      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x178>
 800426e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_RCC_ClockConfig+0x128>
 8004292:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	e00f      	b.n	80042b8 <HAL_RCC_ClockConfig+0x148>
 8004298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80042be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c0:	fa92 f2a2 	rbit	r2, r2
 80042c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d13a      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b2      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
 80042e8:	2302      	movs	r3, #2
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e00d      	b.n	800432c <HAL_RCC_ClockConfig+0x1bc>
 8004310:	2302      	movs	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2202      	movs	r2, #2
 800432e:	61ba      	str	r2, [r7, #24]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	617a      	str	r2, [r7, #20]
  return result;
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	fab2 f282 	clz	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	f042 0220 	orr.w	r2, r2, #32
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	f002 021f 	and.w	r2, r2, #31
 800434a:	2101      	movs	r1, #1
 800434c:	fa01 f202 	lsl.w	r2, r1, r2
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e079      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	491a      	ldr	r1, [pc, #104]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fe faca 	bl	8002904 <HAL_GetTick>
 8004370:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fe fac6 	bl	8002904 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e061      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d214      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4906      	ldr	r1, [pc, #24]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e040      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	491a      	ldr	r1, [pc, #104]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4912      	ldr	r1, [pc, #72]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004412:	f000 f829 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004416:	4601      	mov	r1, r0
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	22f0      	movs	r2, #240	; 0xf0
 8004422:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	fa92 f2a2 	rbit	r2, r2
 800442a:	60fa      	str	r2, [r7, #12]
  return result;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	fab2 f282 	clz	r2, r2
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	40d3      	lsrs	r3, r2
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x2ec>)
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	fa21 f303 	lsr.w	r3, r1, r3
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x2f0>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCC_ClockConfig+0x2f4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fa18 	bl	800287c <HAL_InitTick>
  
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3778      	adds	r7, #120	; 0x78
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	08006758 	.word	0x08006758
 8004460:	20000004 	.word	0x20000004
 8004464:	20000008 	.word	0x20000008

08004468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b04      	cmp	r3, #4
 8004490:	d002      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x30>
 8004492:	2b08      	cmp	r3, #8
 8004494:	d003      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x36>
 8004496:	e03c      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004498:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 800449a:	623b      	str	r3, [r7, #32]
      break;
 800449c:	e03c      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	fa92 f2a2 	rbit	r2, r2
 80044b0:	607a      	str	r2, [r7, #4]
  return result;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	40d3      	lsrs	r3, r2
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	220f      	movs	r2, #15
 80044cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	fa92 f2a2 	rbit	r2, r2
 80044d4:	60fa      	str	r2, [r7, #12]
  return result;
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	40d3      	lsrs	r3, r2
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	e004      	b.n	800450c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	623b      	str	r3, [r7, #32]
      break;
 8004510:	e002      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004514:	623b      	str	r3, [r7, #32]
      break;
 8004516:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004518:	6a3b      	ldr	r3, [r7, #32]
}
 800451a:	4618      	mov	r0, r3
 800451c:	372c      	adds	r7, #44	; 0x2c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	007a1200 	.word	0x007a1200
 8004530:	08006768 	.word	0x08006768
 8004534:	08006778 	.word	0x08006778
 8004538:	003d0900 	.word	0x003d0900

0800453c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b092      	sub	sp, #72	; 0x48
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80d4 	beq.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004560:	4b4e      	ldr	r3, [pc, #312]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10e      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4a4a      	ldr	r2, [pc, #296]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	61d3      	str	r3, [r2, #28]
 8004578:	4b48      	ldr	r3, [pc, #288]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d118      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a41      	ldr	r2, [pc, #260]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a2:	f7fe f9af 	bl	8002904 <HAL_GetTick>
 80045a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fe f9ab 	bl	8002904 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e169      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8084 	beq.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d07c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e8:	4b2c      	ldr	r3, [pc, #176]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	461a      	mov	r2, r3
 8004612:	2301      	movs	r3, #1
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	461a      	mov	r2, r3
 8004636:	2300      	movs	r3, #0
 8004638:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04b      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fe f95b 	bl	8002904 <HAL_GetTick>
 800464e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fe f957 	bl	8002904 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e113      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004668:	2302      	movs	r3, #2
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	2302      	movs	r3, #2
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	fa93 f3a3 	rbit	r3, r3
 800467e:	61fb      	str	r3, [r7, #28]
  return result;
 8004680:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f043 0302 	orr.w	r3, r3, #2
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d108      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004696:	4b01      	ldr	r3, [pc, #4]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	e00d      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
 80046a4:	10908100 	.word	0x10908100
 80046a8:	2302      	movs	r3, #2
 80046aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	4b78      	ldr	r3, [pc, #480]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2202      	movs	r2, #2
 80046ba:	613a      	str	r2, [r7, #16]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	fa92 f2a2 	rbit	r2, r2
 80046c2:	60fa      	str	r2, [r7, #12]
  return result;
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	fab2 f282 	clz	r2, r2
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	f002 021f 	and.w	r2, r2, #31
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f202 	lsl.w	r2, r1, r2
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0b7      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046e2:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	496a      	ldr	r1, [pc, #424]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b66      	ldr	r3, [pc, #408]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004714:	4b60      	ldr	r3, [pc, #384]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f023 0203 	bic.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	495d      	ldr	r1, [pc, #372]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004732:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4956      	ldr	r1, [pc, #344]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004740:	4313      	orrs	r3, r2
 8004742:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004750:	4b51      	ldr	r3, [pc, #324]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	494e      	ldr	r1, [pc, #312]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476e:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4947      	ldr	r1, [pc, #284]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800478c:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	493f      	ldr	r1, [pc, #252]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f023 0220 	bic.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4938      	ldr	r1, [pc, #224]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c8:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	4930      	ldr	r1, [pc, #192]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e6:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	4929      	ldr	r1, [pc, #164]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4921      	ldr	r1, [pc, #132]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	491a      	ldr	r1, [pc, #104]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	4912      	ldr	r1, [pc, #72]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	490b      	ldr	r1, [pc, #44]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	4903      	ldr	r1, [pc, #12]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3748      	adds	r7, #72	; 0x48
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000

0800489c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e09d      	b.n	80049ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048be:	d009      	beq.n	80048d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
 80048c6:	e005      	b.n	80048d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc ffea 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004914:	d902      	bls.n	800491c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e002      	b.n	8004922 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800491c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004920:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800492a:	d007      	beq.n	800493c <HAL_SPI_Init+0xa0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004934:	d002      	beq.n	800493c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	ea42 0103 	orr.w	r1, r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	f003 0204 	and.w	r2, r3, #4
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049b8:	ea42 0103 	orr.w	r1, r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e049      	b.n	8004a98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fc ff97 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f000 fab9 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e04a      	b.n	8004b4e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x6c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d013      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x6c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_TIM_Base_Start_IT+0xc0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x6c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x6c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x6c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d115      	bne.n	8004b38 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d015      	beq.n	8004b4a <HAL_TIM_Base_Start_IT+0xaa>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d011      	beq.n	8004b4a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e000      	b.n	8004b4c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40013400 	.word	0x40013400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9d8 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9ca 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9db 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9ae 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f9a0 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f9b1 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f984 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f976 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f987 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f95a 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f94c 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f95d 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f926 	bl	8004f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 faf6 	bl	8005310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fae9 	bl	8005324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f90b 	bl	8004f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0220 	mvn.w	r2, #32
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 faa9 	bl	80052fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_ConfigClockSource+0x1c>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0b6      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x18a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	d03e      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0xd8>
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	f200 8087 	bhi.w	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	f000 8086 	beq.w	8004f28 <HAL_TIM_ConfigClockSource+0x176>
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e20:	d87f      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e22:	2b70      	cmp	r3, #112	; 0x70
 8004e24:	d01a      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xaa>
 8004e26:	2b70      	cmp	r3, #112	; 0x70
 8004e28:	d87b      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e2a:	2b60      	cmp	r3, #96	; 0x60
 8004e2c:	d050      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x11e>
 8004e2e:	2b60      	cmp	r3, #96	; 0x60
 8004e30:	d877      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b50      	cmp	r3, #80	; 0x50
 8004e34:	d03c      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0xfe>
 8004e36:	2b50      	cmp	r3, #80	; 0x50
 8004e38:	d873      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d058      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x13e>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d86f      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d064      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d86b      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d060      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d867      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d05c      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d05a      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e5a:	e062      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f000 f9a6 	bl	80051bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
      break;
 8004e88:	e04f      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f000 f98f 	bl	80051bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eac:	609a      	str	r2, [r3, #8]
      break;
 8004eae:	e03c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f000 f903 	bl	80050c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2150      	movs	r1, #80	; 0x50
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f95c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004ece:	e02c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f000 f922 	bl	8005126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2160      	movs	r1, #96	; 0x60
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f94c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004eee:	e01c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f000 f8e3 	bl	80050c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2140      	movs	r1, #64	; 0x40
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f93c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e00c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 f933 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f20:	e003      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      break;
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <TIM_Base_SetConfig+0x104>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a39      	ldr	r2, [pc, #228]	; (80050b0 <TIM_Base_SetConfig+0x108>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0x38>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <TIM_Base_SetConfig+0x10c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <TIM_Base_SetConfig+0x110>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d108      	bne.n	8004ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <TIM_Base_SetConfig+0x104>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01b      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d017      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <TIM_Base_SetConfig+0x108>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <TIM_Base_SetConfig+0x10c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a28      	ldr	r2, [pc, #160]	; (80050b8 <TIM_Base_SetConfig+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <TIM_Base_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a26      	ldr	r2, [pc, #152]	; (80050c0 <TIM_Base_SetConfig+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <TIM_Base_SetConfig+0x11c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a10      	ldr	r2, [pc, #64]	; (80050ac <TIM_Base_SetConfig+0x104>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00f      	beq.n	8005090 <TIM_Base_SetConfig+0xe8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a11      	ldr	r2, [pc, #68]	; (80050b8 <TIM_Base_SetConfig+0x110>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_Base_SetConfig+0xe8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a10      	ldr	r2, [pc, #64]	; (80050bc <TIM_Base_SetConfig+0x114>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_Base_SetConfig+0xe8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <TIM_Base_SetConfig+0x118>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_Base_SetConfig+0xe8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <TIM_Base_SetConfig+0x11c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800

080050c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 030a 	bic.w	r3, r3, #10
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0210 	bic.w	r2, r3, #16
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f043 0307 	orr.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	431a      	orrs	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e063      	b.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d108      	bne.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800524e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d018      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d013      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00e      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a12      	ldr	r2, [pc, #72]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10c      	bne.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40014000 	.word	0x40014000

080052fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005340:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005344:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	b29b      	uxth	r3, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	b29b      	uxth	r3, r3
 8005356:	4013      	ands	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800536e:	b084      	sub	sp, #16
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	f107 0014 	add.w	r0, r7, #20
 800537c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	b004      	add	sp, #16
 80053ae:	4770      	bx	lr

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000010 	.word	0x20000010

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4d0d      	ldr	r5, [pc, #52]	; (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2600      	movs	r6, #0
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4d0b      	ldr	r5, [pc, #44]	; (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	; (8005400 <__libc_init_array+0x44>)
 80053d0:	f001 f96c 	bl	80066ac <_init>
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2600      	movs	r6, #0
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	080068d4 	.word	0x080068d4
 80053f8:	080068d4 	.word	0x080068d4
 80053fc:	080068d4 	.word	0x080068d4
 8005400:	080068d8 	.word	0x080068d8

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <srand>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <srand+0x44>)
 8005418:	681d      	ldr	r5, [r3, #0]
 800541a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800541c:	4604      	mov	r4, r0
 800541e:	b9b3      	cbnz	r3, 800544e <srand+0x3a>
 8005420:	2018      	movs	r0, #24
 8005422:	f000 f8c1 	bl	80055a8 <malloc>
 8005426:	4602      	mov	r2, r0
 8005428:	63a8      	str	r0, [r5, #56]	; 0x38
 800542a:	b920      	cbnz	r0, 8005436 <srand+0x22>
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <srand+0x48>)
 800542e:	480c      	ldr	r0, [pc, #48]	; (8005460 <srand+0x4c>)
 8005430:	2142      	movs	r1, #66	; 0x42
 8005432:	f000 f877 	bl	8005524 <__assert_func>
 8005436:	490b      	ldr	r1, [pc, #44]	; (8005464 <srand+0x50>)
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <srand+0x54>)
 800543a:	e9c0 1300 	strd	r1, r3, [r0]
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <srand+0x58>)
 8005440:	6083      	str	r3, [r0, #8]
 8005442:	230b      	movs	r3, #11
 8005444:	8183      	strh	r3, [r0, #12]
 8005446:	2100      	movs	r1, #0
 8005448:	2001      	movs	r0, #1
 800544a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800544e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005450:	2200      	movs	r2, #0
 8005452:	611c      	str	r4, [r3, #16]
 8005454:	615a      	str	r2, [r3, #20]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000010 	.word	0x20000010
 800545c:	0800678c 	.word	0x0800678c
 8005460:	080067a3 	.word	0x080067a3
 8005464:	abcd330e 	.word	0xabcd330e
 8005468:	e66d1234 	.word	0xe66d1234
 800546c:	0005deec 	.word	0x0005deec

08005470 <rand>:
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <rand+0x60>)
 8005472:	b510      	push	{r4, lr}
 8005474:	681c      	ldr	r4, [r3, #0]
 8005476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005478:	b9b3      	cbnz	r3, 80054a8 <rand+0x38>
 800547a:	2018      	movs	r0, #24
 800547c:	f000 f894 	bl	80055a8 <malloc>
 8005480:	63a0      	str	r0, [r4, #56]	; 0x38
 8005482:	b928      	cbnz	r0, 8005490 <rand+0x20>
 8005484:	4602      	mov	r2, r0
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <rand+0x64>)
 8005488:	4813      	ldr	r0, [pc, #76]	; (80054d8 <rand+0x68>)
 800548a:	214e      	movs	r1, #78	; 0x4e
 800548c:	f000 f84a 	bl	8005524 <__assert_func>
 8005490:	4a12      	ldr	r2, [pc, #72]	; (80054dc <rand+0x6c>)
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <rand+0x70>)
 8005494:	e9c0 2300 	strd	r2, r3, [r0]
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <rand+0x74>)
 800549a:	6083      	str	r3, [r0, #8]
 800549c:	230b      	movs	r3, #11
 800549e:	8183      	strh	r3, [r0, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	2300      	movs	r3, #0
 80054a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80054a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054aa:	480f      	ldr	r0, [pc, #60]	; (80054e8 <rand+0x78>)
 80054ac:	690a      	ldr	r2, [r1, #16]
 80054ae:	694b      	ldr	r3, [r1, #20]
 80054b0:	4c0e      	ldr	r4, [pc, #56]	; (80054ec <rand+0x7c>)
 80054b2:	4350      	muls	r0, r2
 80054b4:	fb04 0003 	mla	r0, r4, r3, r0
 80054b8:	fba2 3404 	umull	r3, r4, r2, r4
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	4404      	add	r4, r0
 80054c0:	f144 0000 	adc.w	r0, r4, #0
 80054c4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80054c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	20000010 	.word	0x20000010
 80054d4:	0800678c 	.word	0x0800678c
 80054d8:	080067a3 	.word	0x080067a3
 80054dc:	abcd330e 	.word	0xabcd330e
 80054e0:	e66d1234 	.word	0xe66d1234
 80054e4:	0005deec 	.word	0x0005deec
 80054e8:	5851f42d 	.word	0x5851f42d
 80054ec:	4c957f2d 	.word	0x4c957f2d

080054f0 <time>:
 80054f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <time+0x30>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	4669      	mov	r1, sp
 80054f8:	4604      	mov	r4, r0
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	f000 f842 	bl	8005584 <_gettimeofday_r>
 8005500:	2800      	cmp	r0, #0
 8005502:	bfbe      	ittt	lt
 8005504:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8005508:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800550c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005514:	b10c      	cbz	r4, 800551a <time+0x2a>
 8005516:	e9c4 0100 	strd	r0, r1, [r4]
 800551a:	b004      	add	sp, #16
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	20000010 	.word	0x20000010

08005524 <__assert_func>:
 8005524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005526:	4614      	mov	r4, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <__assert_func+0x2c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4605      	mov	r5, r0
 8005530:	68d8      	ldr	r0, [r3, #12]
 8005532:	b14c      	cbz	r4, 8005548 <__assert_func+0x24>
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <__assert_func+0x30>)
 8005536:	9100      	str	r1, [sp, #0]
 8005538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800553c:	4906      	ldr	r1, [pc, #24]	; (8005558 <__assert_func+0x34>)
 800553e:	462b      	mov	r3, r5
 8005540:	f000 f80e 	bl	8005560 <fiprintf>
 8005544:	f000 fca0 	bl	8005e88 <abort>
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <__assert_func+0x38>)
 800554a:	461c      	mov	r4, r3
 800554c:	e7f3      	b.n	8005536 <__assert_func+0x12>
 800554e:	bf00      	nop
 8005550:	20000010 	.word	0x20000010
 8005554:	08006802 	.word	0x08006802
 8005558:	0800680f 	.word	0x0800680f
 800555c:	0800683d 	.word	0x0800683d

08005560 <fiprintf>:
 8005560:	b40e      	push	{r1, r2, r3}
 8005562:	b503      	push	{r0, r1, lr}
 8005564:	4601      	mov	r1, r0
 8005566:	ab03      	add	r3, sp, #12
 8005568:	4805      	ldr	r0, [pc, #20]	; (8005580 <fiprintf+0x20>)
 800556a:	f853 2b04 	ldr.w	r2, [r3], #4
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	f000 f8f5 	bl	8005760 <_vfiprintf_r>
 8005576:	b002      	add	sp, #8
 8005578:	f85d eb04 	ldr.w	lr, [sp], #4
 800557c:	b003      	add	sp, #12
 800557e:	4770      	bx	lr
 8005580:	20000010 	.word	0x20000010

08005584 <_gettimeofday_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d07      	ldr	r5, [pc, #28]	; (80055a4 <_gettimeofday_r+0x20>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	602b      	str	r3, [r5, #0]
 8005592:	f001 f883 	bl	800669c <_gettimeofday>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d102      	bne.n	80055a0 <_gettimeofday_r+0x1c>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	b103      	cbz	r3, 80055a0 <_gettimeofday_r+0x1c>
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	bd38      	pop	{r3, r4, r5, pc}
 80055a2:	bf00      	nop
 80055a4:	20000598 	.word	0x20000598

080055a8 <malloc>:
 80055a8:	4b02      	ldr	r3, [pc, #8]	; (80055b4 <malloc+0xc>)
 80055aa:	4601      	mov	r1, r0
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f000 b853 	b.w	8005658 <_malloc_r>
 80055b2:	bf00      	nop
 80055b4:	20000010 	.word	0x20000010

080055b8 <_free_r>:
 80055b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ba:	2900      	cmp	r1, #0
 80055bc:	d048      	beq.n	8005650 <_free_r+0x98>
 80055be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c2:	9001      	str	r0, [sp, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f1a1 0404 	sub.w	r4, r1, #4
 80055ca:	bfb8      	it	lt
 80055cc:	18e4      	addlt	r4, r4, r3
 80055ce:	f000 fe81 	bl	80062d4 <__malloc_lock>
 80055d2:	4a20      	ldr	r2, [pc, #128]	; (8005654 <_free_r+0x9c>)
 80055d4:	9801      	ldr	r0, [sp, #4]
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	4615      	mov	r5, r2
 80055da:	b933      	cbnz	r3, 80055ea <_free_r+0x32>
 80055dc:	6063      	str	r3, [r4, #4]
 80055de:	6014      	str	r4, [r2, #0]
 80055e0:	b003      	add	sp, #12
 80055e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e6:	f000 be7b 	b.w	80062e0 <__malloc_unlock>
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	d90b      	bls.n	8005606 <_free_r+0x4e>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	1862      	adds	r2, r4, r1
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bf04      	itt	eq
 80055f6:	681a      	ldreq	r2, [r3, #0]
 80055f8:	685b      	ldreq	r3, [r3, #4]
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	bf04      	itt	eq
 80055fe:	1852      	addeq	r2, r2, r1
 8005600:	6022      	streq	r2, [r4, #0]
 8005602:	602c      	str	r4, [r5, #0]
 8005604:	e7ec      	b.n	80055e0 <_free_r+0x28>
 8005606:	461a      	mov	r2, r3
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b10b      	cbz	r3, 8005610 <_free_r+0x58>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d9fa      	bls.n	8005606 <_free_r+0x4e>
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	1855      	adds	r5, r2, r1
 8005614:	42a5      	cmp	r5, r4
 8005616:	d10b      	bne.n	8005630 <_free_r+0x78>
 8005618:	6824      	ldr	r4, [r4, #0]
 800561a:	4421      	add	r1, r4
 800561c:	1854      	adds	r4, r2, r1
 800561e:	42a3      	cmp	r3, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	d1dd      	bne.n	80055e0 <_free_r+0x28>
 8005624:	681c      	ldr	r4, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	6053      	str	r3, [r2, #4]
 800562a:	4421      	add	r1, r4
 800562c:	6011      	str	r1, [r2, #0]
 800562e:	e7d7      	b.n	80055e0 <_free_r+0x28>
 8005630:	d902      	bls.n	8005638 <_free_r+0x80>
 8005632:	230c      	movs	r3, #12
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	e7d3      	b.n	80055e0 <_free_r+0x28>
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	1961      	adds	r1, r4, r5
 800563c:	428b      	cmp	r3, r1
 800563e:	bf04      	itt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	bf04      	itt	eq
 8005648:	1949      	addeq	r1, r1, r5
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	6054      	str	r4, [r2, #4]
 800564e:	e7c7      	b.n	80055e0 <_free_r+0x28>
 8005650:	b003      	add	sp, #12
 8005652:	bd30      	pop	{r4, r5, pc}
 8005654:	2000009c 	.word	0x2000009c

08005658 <_malloc_r>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	1ccd      	adds	r5, r1, #3
 800565c:	f025 0503 	bic.w	r5, r5, #3
 8005660:	3508      	adds	r5, #8
 8005662:	2d0c      	cmp	r5, #12
 8005664:	bf38      	it	cc
 8005666:	250c      	movcc	r5, #12
 8005668:	2d00      	cmp	r5, #0
 800566a:	4606      	mov	r6, r0
 800566c:	db01      	blt.n	8005672 <_malloc_r+0x1a>
 800566e:	42a9      	cmp	r1, r5
 8005670:	d903      	bls.n	800567a <_malloc_r+0x22>
 8005672:	230c      	movs	r3, #12
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	2000      	movs	r0, #0
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800567a:	f000 fe2b 	bl	80062d4 <__malloc_lock>
 800567e:	4921      	ldr	r1, [pc, #132]	; (8005704 <_malloc_r+0xac>)
 8005680:	680a      	ldr	r2, [r1, #0]
 8005682:	4614      	mov	r4, r2
 8005684:	b99c      	cbnz	r4, 80056ae <_malloc_r+0x56>
 8005686:	4f20      	ldr	r7, [pc, #128]	; (8005708 <_malloc_r+0xb0>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	b923      	cbnz	r3, 8005696 <_malloc_r+0x3e>
 800568c:	4621      	mov	r1, r4
 800568e:	4630      	mov	r0, r6
 8005690:	f000 fb2a 	bl	8005ce8 <_sbrk_r>
 8005694:	6038      	str	r0, [r7, #0]
 8005696:	4629      	mov	r1, r5
 8005698:	4630      	mov	r0, r6
 800569a:	f000 fb25 	bl	8005ce8 <_sbrk_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d123      	bne.n	80056ea <_malloc_r+0x92>
 80056a2:	230c      	movs	r3, #12
 80056a4:	6033      	str	r3, [r6, #0]
 80056a6:	4630      	mov	r0, r6
 80056a8:	f000 fe1a 	bl	80062e0 <__malloc_unlock>
 80056ac:	e7e3      	b.n	8005676 <_malloc_r+0x1e>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	1b5b      	subs	r3, r3, r5
 80056b2:	d417      	bmi.n	80056e4 <_malloc_r+0x8c>
 80056b4:	2b0b      	cmp	r3, #11
 80056b6:	d903      	bls.n	80056c0 <_malloc_r+0x68>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	441c      	add	r4, r3
 80056bc:	6025      	str	r5, [r4, #0]
 80056be:	e004      	b.n	80056ca <_malloc_r+0x72>
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	42a2      	cmp	r2, r4
 80056c4:	bf0c      	ite	eq
 80056c6:	600b      	streq	r3, [r1, #0]
 80056c8:	6053      	strne	r3, [r2, #4]
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 fe08 	bl	80062e0 <__malloc_unlock>
 80056d0:	f104 000b 	add.w	r0, r4, #11
 80056d4:	1d23      	adds	r3, r4, #4
 80056d6:	f020 0007 	bic.w	r0, r0, #7
 80056da:	1ac2      	subs	r2, r0, r3
 80056dc:	d0cc      	beq.n	8005678 <_malloc_r+0x20>
 80056de:	1a1b      	subs	r3, r3, r0
 80056e0:	50a3      	str	r3, [r4, r2]
 80056e2:	e7c9      	b.n	8005678 <_malloc_r+0x20>
 80056e4:	4622      	mov	r2, r4
 80056e6:	6864      	ldr	r4, [r4, #4]
 80056e8:	e7cc      	b.n	8005684 <_malloc_r+0x2c>
 80056ea:	1cc4      	adds	r4, r0, #3
 80056ec:	f024 0403 	bic.w	r4, r4, #3
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d0e3      	beq.n	80056bc <_malloc_r+0x64>
 80056f4:	1a21      	subs	r1, r4, r0
 80056f6:	4630      	mov	r0, r6
 80056f8:	f000 faf6 	bl	8005ce8 <_sbrk_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1dd      	bne.n	80056bc <_malloc_r+0x64>
 8005700:	e7cf      	b.n	80056a2 <_malloc_r+0x4a>
 8005702:	bf00      	nop
 8005704:	2000009c 	.word	0x2000009c
 8005708:	200000a0 	.word	0x200000a0

0800570c <__sfputc_r>:
 800570c:	6893      	ldr	r3, [r2, #8]
 800570e:	3b01      	subs	r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	b410      	push	{r4}
 8005714:	6093      	str	r3, [r2, #8]
 8005716:	da08      	bge.n	800572a <__sfputc_r+0x1e>
 8005718:	6994      	ldr	r4, [r2, #24]
 800571a:	42a3      	cmp	r3, r4
 800571c:	db01      	blt.n	8005722 <__sfputc_r+0x16>
 800571e:	290a      	cmp	r1, #10
 8005720:	d103      	bne.n	800572a <__sfputc_r+0x1e>
 8005722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005726:	f000 baef 	b.w	8005d08 <__swbuf_r>
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	1c58      	adds	r0, r3, #1
 800572e:	6010      	str	r0, [r2, #0]
 8005730:	7019      	strb	r1, [r3, #0]
 8005732:	4608      	mov	r0, r1
 8005734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005738:	4770      	bx	lr

0800573a <__sfputs_r>:
 800573a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573c:	4606      	mov	r6, r0
 800573e:	460f      	mov	r7, r1
 8005740:	4614      	mov	r4, r2
 8005742:	18d5      	adds	r5, r2, r3
 8005744:	42ac      	cmp	r4, r5
 8005746:	d101      	bne.n	800574c <__sfputs_r+0x12>
 8005748:	2000      	movs	r0, #0
 800574a:	e007      	b.n	800575c <__sfputs_r+0x22>
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	463a      	mov	r2, r7
 8005752:	4630      	mov	r0, r6
 8005754:	f7ff ffda 	bl	800570c <__sfputc_r>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d1f3      	bne.n	8005744 <__sfputs_r+0xa>
 800575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005760 <_vfiprintf_r>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	460d      	mov	r5, r1
 8005766:	b09d      	sub	sp, #116	; 0x74
 8005768:	4614      	mov	r4, r2
 800576a:	4698      	mov	r8, r3
 800576c:	4606      	mov	r6, r0
 800576e:	b118      	cbz	r0, 8005778 <_vfiprintf_r+0x18>
 8005770:	6983      	ldr	r3, [r0, #24]
 8005772:	b90b      	cbnz	r3, 8005778 <_vfiprintf_r+0x18>
 8005774:	f000 fcaa 	bl	80060cc <__sinit>
 8005778:	4b89      	ldr	r3, [pc, #548]	; (80059a0 <_vfiprintf_r+0x240>)
 800577a:	429d      	cmp	r5, r3
 800577c:	d11b      	bne.n	80057b6 <_vfiprintf_r+0x56>
 800577e:	6875      	ldr	r5, [r6, #4]
 8005780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005782:	07d9      	lsls	r1, r3, #31
 8005784:	d405      	bmi.n	8005792 <_vfiprintf_r+0x32>
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	059a      	lsls	r2, r3, #22
 800578a:	d402      	bmi.n	8005792 <_vfiprintf_r+0x32>
 800578c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800578e:	f000 fd3b 	bl	8006208 <__retarget_lock_acquire_recursive>
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	071b      	lsls	r3, r3, #28
 8005796:	d501      	bpl.n	800579c <_vfiprintf_r+0x3c>
 8005798:	692b      	ldr	r3, [r5, #16]
 800579a:	b9eb      	cbnz	r3, 80057d8 <_vfiprintf_r+0x78>
 800579c:	4629      	mov	r1, r5
 800579e:	4630      	mov	r0, r6
 80057a0:	f000 fb04 	bl	8005dac <__swsetup_r>
 80057a4:	b1c0      	cbz	r0, 80057d8 <_vfiprintf_r+0x78>
 80057a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a8:	07dc      	lsls	r4, r3, #31
 80057aa:	d50e      	bpl.n	80057ca <_vfiprintf_r+0x6a>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b0:	b01d      	add	sp, #116	; 0x74
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b6:	4b7b      	ldr	r3, [pc, #492]	; (80059a4 <_vfiprintf_r+0x244>)
 80057b8:	429d      	cmp	r5, r3
 80057ba:	d101      	bne.n	80057c0 <_vfiprintf_r+0x60>
 80057bc:	68b5      	ldr	r5, [r6, #8]
 80057be:	e7df      	b.n	8005780 <_vfiprintf_r+0x20>
 80057c0:	4b79      	ldr	r3, [pc, #484]	; (80059a8 <_vfiprintf_r+0x248>)
 80057c2:	429d      	cmp	r5, r3
 80057c4:	bf08      	it	eq
 80057c6:	68f5      	ldreq	r5, [r6, #12]
 80057c8:	e7da      	b.n	8005780 <_vfiprintf_r+0x20>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	0598      	lsls	r0, r3, #22
 80057ce:	d4ed      	bmi.n	80057ac <_vfiprintf_r+0x4c>
 80057d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d2:	f000 fd1a 	bl	800620a <__retarget_lock_release_recursive>
 80057d6:	e7e9      	b.n	80057ac <_vfiprintf_r+0x4c>
 80057d8:	2300      	movs	r3, #0
 80057da:	9309      	str	r3, [sp, #36]	; 0x24
 80057dc:	2320      	movs	r3, #32
 80057de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e6:	2330      	movs	r3, #48	; 0x30
 80057e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059ac <_vfiprintf_r+0x24c>
 80057ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f0:	f04f 0901 	mov.w	r9, #1
 80057f4:	4623      	mov	r3, r4
 80057f6:	469a      	mov	sl, r3
 80057f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fc:	b10a      	cbz	r2, 8005802 <_vfiprintf_r+0xa2>
 80057fe:	2a25      	cmp	r2, #37	; 0x25
 8005800:	d1f9      	bne.n	80057f6 <_vfiprintf_r+0x96>
 8005802:	ebba 0b04 	subs.w	fp, sl, r4
 8005806:	d00b      	beq.n	8005820 <_vfiprintf_r+0xc0>
 8005808:	465b      	mov	r3, fp
 800580a:	4622      	mov	r2, r4
 800580c:	4629      	mov	r1, r5
 800580e:	4630      	mov	r0, r6
 8005810:	f7ff ff93 	bl	800573a <__sfputs_r>
 8005814:	3001      	adds	r0, #1
 8005816:	f000 80aa 	beq.w	800596e <_vfiprintf_r+0x20e>
 800581a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800581c:	445a      	add	r2, fp
 800581e:	9209      	str	r2, [sp, #36]	; 0x24
 8005820:	f89a 3000 	ldrb.w	r3, [sl]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a2 	beq.w	800596e <_vfiprintf_r+0x20e>
 800582a:	2300      	movs	r3, #0
 800582c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005834:	f10a 0a01 	add.w	sl, sl, #1
 8005838:	9304      	str	r3, [sp, #16]
 800583a:	9307      	str	r3, [sp, #28]
 800583c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005840:	931a      	str	r3, [sp, #104]	; 0x68
 8005842:	4654      	mov	r4, sl
 8005844:	2205      	movs	r2, #5
 8005846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584a:	4858      	ldr	r0, [pc, #352]	; (80059ac <_vfiprintf_r+0x24c>)
 800584c:	f7fa fcc8 	bl	80001e0 <memchr>
 8005850:	9a04      	ldr	r2, [sp, #16]
 8005852:	b9d8      	cbnz	r0, 800588c <_vfiprintf_r+0x12c>
 8005854:	06d1      	lsls	r1, r2, #27
 8005856:	bf44      	itt	mi
 8005858:	2320      	movmi	r3, #32
 800585a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585e:	0713      	lsls	r3, r2, #28
 8005860:	bf44      	itt	mi
 8005862:	232b      	movmi	r3, #43	; 0x2b
 8005864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005868:	f89a 3000 	ldrb.w	r3, [sl]
 800586c:	2b2a      	cmp	r3, #42	; 0x2a
 800586e:	d015      	beq.n	800589c <_vfiprintf_r+0x13c>
 8005870:	9a07      	ldr	r2, [sp, #28]
 8005872:	4654      	mov	r4, sl
 8005874:	2000      	movs	r0, #0
 8005876:	f04f 0c0a 	mov.w	ip, #10
 800587a:	4621      	mov	r1, r4
 800587c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005880:	3b30      	subs	r3, #48	; 0x30
 8005882:	2b09      	cmp	r3, #9
 8005884:	d94e      	bls.n	8005924 <_vfiprintf_r+0x1c4>
 8005886:	b1b0      	cbz	r0, 80058b6 <_vfiprintf_r+0x156>
 8005888:	9207      	str	r2, [sp, #28]
 800588a:	e014      	b.n	80058b6 <_vfiprintf_r+0x156>
 800588c:	eba0 0308 	sub.w	r3, r0, r8
 8005890:	fa09 f303 	lsl.w	r3, r9, r3
 8005894:	4313      	orrs	r3, r2
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	46a2      	mov	sl, r4
 800589a:	e7d2      	b.n	8005842 <_vfiprintf_r+0xe2>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	1d19      	adds	r1, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	9103      	str	r1, [sp, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfbb      	ittet	lt
 80058a8:	425b      	neglt	r3, r3
 80058aa:	f042 0202 	orrlt.w	r2, r2, #2
 80058ae:	9307      	strge	r3, [sp, #28]
 80058b0:	9307      	strlt	r3, [sp, #28]
 80058b2:	bfb8      	it	lt
 80058b4:	9204      	strlt	r2, [sp, #16]
 80058b6:	7823      	ldrb	r3, [r4, #0]
 80058b8:	2b2e      	cmp	r3, #46	; 0x2e
 80058ba:	d10c      	bne.n	80058d6 <_vfiprintf_r+0x176>
 80058bc:	7863      	ldrb	r3, [r4, #1]
 80058be:	2b2a      	cmp	r3, #42	; 0x2a
 80058c0:	d135      	bne.n	800592e <_vfiprintf_r+0x1ce>
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	9203      	str	r2, [sp, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfb8      	it	lt
 80058ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058d2:	3402      	adds	r4, #2
 80058d4:	9305      	str	r3, [sp, #20]
 80058d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059bc <_vfiprintf_r+0x25c>
 80058da:	7821      	ldrb	r1, [r4, #0]
 80058dc:	2203      	movs	r2, #3
 80058de:	4650      	mov	r0, sl
 80058e0:	f7fa fc7e 	bl	80001e0 <memchr>
 80058e4:	b140      	cbz	r0, 80058f8 <_vfiprintf_r+0x198>
 80058e6:	2340      	movs	r3, #64	; 0x40
 80058e8:	eba0 000a 	sub.w	r0, r0, sl
 80058ec:	fa03 f000 	lsl.w	r0, r3, r0
 80058f0:	9b04      	ldr	r3, [sp, #16]
 80058f2:	4303      	orrs	r3, r0
 80058f4:	3401      	adds	r4, #1
 80058f6:	9304      	str	r3, [sp, #16]
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	482c      	ldr	r0, [pc, #176]	; (80059b0 <_vfiprintf_r+0x250>)
 80058fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005902:	2206      	movs	r2, #6
 8005904:	f7fa fc6c 	bl	80001e0 <memchr>
 8005908:	2800      	cmp	r0, #0
 800590a:	d03f      	beq.n	800598c <_vfiprintf_r+0x22c>
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <_vfiprintf_r+0x254>)
 800590e:	bb1b      	cbnz	r3, 8005958 <_vfiprintf_r+0x1f8>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	3307      	adds	r3, #7
 8005914:	f023 0307 	bic.w	r3, r3, #7
 8005918:	3308      	adds	r3, #8
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	443b      	add	r3, r7
 8005920:	9309      	str	r3, [sp, #36]	; 0x24
 8005922:	e767      	b.n	80057f4 <_vfiprintf_r+0x94>
 8005924:	fb0c 3202 	mla	r2, ip, r2, r3
 8005928:	460c      	mov	r4, r1
 800592a:	2001      	movs	r0, #1
 800592c:	e7a5      	b.n	800587a <_vfiprintf_r+0x11a>
 800592e:	2300      	movs	r3, #0
 8005930:	3401      	adds	r4, #1
 8005932:	9305      	str	r3, [sp, #20]
 8005934:	4619      	mov	r1, r3
 8005936:	f04f 0c0a 	mov.w	ip, #10
 800593a:	4620      	mov	r0, r4
 800593c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005940:	3a30      	subs	r2, #48	; 0x30
 8005942:	2a09      	cmp	r2, #9
 8005944:	d903      	bls.n	800594e <_vfiprintf_r+0x1ee>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0c5      	beq.n	80058d6 <_vfiprintf_r+0x176>
 800594a:	9105      	str	r1, [sp, #20]
 800594c:	e7c3      	b.n	80058d6 <_vfiprintf_r+0x176>
 800594e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005952:	4604      	mov	r4, r0
 8005954:	2301      	movs	r3, #1
 8005956:	e7f0      	b.n	800593a <_vfiprintf_r+0x1da>
 8005958:	ab03      	add	r3, sp, #12
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	462a      	mov	r2, r5
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <_vfiprintf_r+0x258>)
 8005960:	a904      	add	r1, sp, #16
 8005962:	4630      	mov	r0, r6
 8005964:	f3af 8000 	nop.w
 8005968:	4607      	mov	r7, r0
 800596a:	1c78      	adds	r0, r7, #1
 800596c:	d1d6      	bne.n	800591c <_vfiprintf_r+0x1bc>
 800596e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005970:	07d9      	lsls	r1, r3, #31
 8005972:	d405      	bmi.n	8005980 <_vfiprintf_r+0x220>
 8005974:	89ab      	ldrh	r3, [r5, #12]
 8005976:	059a      	lsls	r2, r3, #22
 8005978:	d402      	bmi.n	8005980 <_vfiprintf_r+0x220>
 800597a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800597c:	f000 fc45 	bl	800620a <__retarget_lock_release_recursive>
 8005980:	89ab      	ldrh	r3, [r5, #12]
 8005982:	065b      	lsls	r3, r3, #25
 8005984:	f53f af12 	bmi.w	80057ac <_vfiprintf_r+0x4c>
 8005988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598a:	e711      	b.n	80057b0 <_vfiprintf_r+0x50>
 800598c:	ab03      	add	r3, sp, #12
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	462a      	mov	r2, r5
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <_vfiprintf_r+0x258>)
 8005994:	a904      	add	r1, sp, #16
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f880 	bl	8005a9c <_printf_i>
 800599c:	e7e4      	b.n	8005968 <_vfiprintf_r+0x208>
 800599e:	bf00      	nop
 80059a0:	08006894 	.word	0x08006894
 80059a4:	080068b4 	.word	0x080068b4
 80059a8:	08006874 	.word	0x08006874
 80059ac:	0800683e 	.word	0x0800683e
 80059b0:	08006848 	.word	0x08006848
 80059b4:	00000000 	.word	0x00000000
 80059b8:	0800573b 	.word	0x0800573b
 80059bc:	08006844 	.word	0x08006844

080059c0 <_printf_common>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	4616      	mov	r6, r2
 80059c6:	4699      	mov	r9, r3
 80059c8:	688a      	ldr	r2, [r1, #8]
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bfb8      	it	lt
 80059d4:	4613      	movlt	r3, r2
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059dc:	4607      	mov	r7, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	b10a      	cbz	r2, 80059e6 <_printf_common+0x26>
 80059e2:	3301      	adds	r3, #1
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	6833      	ldrmi	r3, [r6, #0]
 80059ee:	3302      	addmi	r3, #2
 80059f0:	6033      	strmi	r3, [r6, #0]
 80059f2:	6825      	ldr	r5, [r4, #0]
 80059f4:	f015 0506 	ands.w	r5, r5, #6
 80059f8:	d106      	bne.n	8005a08 <_printf_common+0x48>
 80059fa:	f104 0a19 	add.w	sl, r4, #25
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	6832      	ldr	r2, [r6, #0]
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	dc26      	bgt.n	8005a56 <_printf_common+0x96>
 8005a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a0c:	1e13      	subs	r3, r2, #0
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	bf18      	it	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	0692      	lsls	r2, r2, #26
 8005a16:	d42b      	bmi.n	8005a70 <_printf_common+0xb0>
 8005a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4638      	mov	r0, r7
 8005a20:	47c0      	blx	r8
 8005a22:	3001      	adds	r0, #1
 8005a24:	d01e      	beq.n	8005a64 <_printf_common+0xa4>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	68e5      	ldr	r5, [r4, #12]
 8005a2a:	6832      	ldr	r2, [r6, #0]
 8005a2c:	f003 0306 	and.w	r3, r3, #6
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	bf08      	it	eq
 8005a34:	1aad      	subeq	r5, r5, r2
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	6922      	ldr	r2, [r4, #16]
 8005a3a:	bf0c      	ite	eq
 8005a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a40:	2500      	movne	r5, #0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	bfc4      	itt	gt
 8005a46:	1a9b      	subgt	r3, r3, r2
 8005a48:	18ed      	addgt	r5, r5, r3
 8005a4a:	2600      	movs	r6, #0
 8005a4c:	341a      	adds	r4, #26
 8005a4e:	42b5      	cmp	r5, r6
 8005a50:	d11a      	bne.n	8005a88 <_printf_common+0xc8>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e008      	b.n	8005a68 <_printf_common+0xa8>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4652      	mov	r2, sl
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	47c0      	blx	r8
 8005a60:	3001      	adds	r0, #1
 8005a62:	d103      	bne.n	8005a6c <_printf_common+0xac>
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	e7c6      	b.n	80059fe <_printf_common+0x3e>
 8005a70:	18e1      	adds	r1, r4, r3
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	2030      	movs	r0, #48	; 0x30
 8005a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7a:	4422      	add	r2, r4
 8005a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a84:	3302      	adds	r3, #2
 8005a86:	e7c7      	b.n	8005a18 <_printf_common+0x58>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4638      	mov	r0, r7
 8005a90:	47c0      	blx	r8
 8005a92:	3001      	adds	r0, #1
 8005a94:	d0e6      	beq.n	8005a64 <_printf_common+0xa4>
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7d9      	b.n	8005a4e <_printf_common+0x8e>
	...

08005a9c <_printf_i>:
 8005a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	7e27      	ldrb	r7, [r4, #24]
 8005aa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4680      	mov	r8, r0
 8005aac:	469a      	mov	sl, r3
 8005aae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab2:	d807      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ab4:	2f62      	cmp	r7, #98	; 0x62
 8005ab6:	d80a      	bhi.n	8005ace <_printf_i+0x32>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	f000 80d8 	beq.w	8005c6e <_printf_i+0x1d2>
 8005abe:	2f58      	cmp	r7, #88	; 0x58
 8005ac0:	f000 80a3 	beq.w	8005c0a <_printf_i+0x16e>
 8005ac4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005acc:	e03a      	b.n	8005b44 <_printf_i+0xa8>
 8005ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad2:	2b15      	cmp	r3, #21
 8005ad4:	d8f6      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ad6:	a001      	add	r0, pc, #4	; (adr r0, 8005adc <_printf_i+0x40>)
 8005ad8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b49 	.word	0x08005b49
 8005ae4:	08005ac5 	.word	0x08005ac5
 8005ae8:	08005ac5 	.word	0x08005ac5
 8005aec:	08005ac5 	.word	0x08005ac5
 8005af0:	08005ac5 	.word	0x08005ac5
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005ac5 	.word	0x08005ac5
 8005afc:	08005ac5 	.word	0x08005ac5
 8005b00:	08005ac5 	.word	0x08005ac5
 8005b04:	08005ac5 	.word	0x08005ac5
 8005b08:	08005c55 	.word	0x08005c55
 8005b0c:	08005b79 	.word	0x08005b79
 8005b10:	08005c37 	.word	0x08005c37
 8005b14:	08005ac5 	.word	0x08005ac5
 8005b18:	08005ac5 	.word	0x08005ac5
 8005b1c:	08005c77 	.word	0x08005c77
 8005b20:	08005ac5 	.word	0x08005ac5
 8005b24:	08005b79 	.word	0x08005b79
 8005b28:	08005ac5 	.word	0x08005ac5
 8005b2c:	08005ac5 	.word	0x08005ac5
 8005b30:	08005c3f 	.word	0x08005c3f
 8005b34:	680b      	ldr	r3, [r1, #0]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	600a      	str	r2, [r1, #0]
 8005b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a3      	b.n	8005c90 <_printf_i+0x1f4>
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	6808      	ldr	r0, [r1, #0]
 8005b4c:	062e      	lsls	r6, r5, #24
 8005b4e:	f100 0304 	add.w	r3, r0, #4
 8005b52:	d50a      	bpl.n	8005b6a <_printf_i+0xce>
 8005b54:	6805      	ldr	r5, [r0, #0]
 8005b56:	600b      	str	r3, [r1, #0]
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	da03      	bge.n	8005b64 <_printf_i+0xc8>
 8005b5c:	232d      	movs	r3, #45	; 0x2d
 8005b5e:	426d      	negs	r5, r5
 8005b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b64:	485e      	ldr	r0, [pc, #376]	; (8005ce0 <_printf_i+0x244>)
 8005b66:	230a      	movs	r3, #10
 8005b68:	e019      	b.n	8005b9e <_printf_i+0x102>
 8005b6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b6e:	6805      	ldr	r5, [r0, #0]
 8005b70:	600b      	str	r3, [r1, #0]
 8005b72:	bf18      	it	ne
 8005b74:	b22d      	sxthne	r5, r5
 8005b76:	e7ef      	b.n	8005b58 <_printf_i+0xbc>
 8005b78:	680b      	ldr	r3, [r1, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	1d18      	adds	r0, r3, #4
 8005b7e:	6008      	str	r0, [r1, #0]
 8005b80:	0628      	lsls	r0, r5, #24
 8005b82:	d501      	bpl.n	8005b88 <_printf_i+0xec>
 8005b84:	681d      	ldr	r5, [r3, #0]
 8005b86:	e002      	b.n	8005b8e <_printf_i+0xf2>
 8005b88:	0669      	lsls	r1, r5, #25
 8005b8a:	d5fb      	bpl.n	8005b84 <_printf_i+0xe8>
 8005b8c:	881d      	ldrh	r5, [r3, #0]
 8005b8e:	4854      	ldr	r0, [pc, #336]	; (8005ce0 <_printf_i+0x244>)
 8005b90:	2f6f      	cmp	r7, #111	; 0x6f
 8005b92:	bf0c      	ite	eq
 8005b94:	2308      	moveq	r3, #8
 8005b96:	230a      	movne	r3, #10
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9e:	6866      	ldr	r6, [r4, #4]
 8005ba0:	60a6      	str	r6, [r4, #8]
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	bfa2      	ittt	ge
 8005ba6:	6821      	ldrge	r1, [r4, #0]
 8005ba8:	f021 0104 	bicge.w	r1, r1, #4
 8005bac:	6021      	strge	r1, [r4, #0]
 8005bae:	b90d      	cbnz	r5, 8005bb4 <_printf_i+0x118>
 8005bb0:	2e00      	cmp	r6, #0
 8005bb2:	d04d      	beq.n	8005c50 <_printf_i+0x1b4>
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bba:	fb03 5711 	mls	r7, r3, r1, r5
 8005bbe:	5dc7      	ldrb	r7, [r0, r7]
 8005bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bc4:	462f      	mov	r7, r5
 8005bc6:	42bb      	cmp	r3, r7
 8005bc8:	460d      	mov	r5, r1
 8005bca:	d9f4      	bls.n	8005bb6 <_printf_i+0x11a>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d10b      	bne.n	8005be8 <_printf_i+0x14c>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07df      	lsls	r7, r3, #31
 8005bd4:	d508      	bpl.n	8005be8 <_printf_i+0x14c>
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	6861      	ldr	r1, [r4, #4]
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	bfde      	ittt	le
 8005bde:	2330      	movle	r3, #48	; 0x30
 8005be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005be4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005be8:	1b92      	subs	r2, r2, r6
 8005bea:	6122      	str	r2, [r4, #16]
 8005bec:	f8cd a000 	str.w	sl, [sp]
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	aa03      	add	r2, sp, #12
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f7ff fee2 	bl	80059c0 <_printf_common>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d14c      	bne.n	8005c9a <_printf_i+0x1fe>
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c04:	b004      	add	sp, #16
 8005c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0a:	4835      	ldr	r0, [pc, #212]	; (8005ce0 <_printf_i+0x244>)
 8005c0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	680e      	ldr	r6, [r1, #0]
 8005c14:	061f      	lsls	r7, r3, #24
 8005c16:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c1a:	600e      	str	r6, [r1, #0]
 8005c1c:	d514      	bpl.n	8005c48 <_printf_i+0x1ac>
 8005c1e:	07d9      	lsls	r1, r3, #31
 8005c20:	bf44      	itt	mi
 8005c22:	f043 0320 	orrmi.w	r3, r3, #32
 8005c26:	6023      	strmi	r3, [r4, #0]
 8005c28:	b91d      	cbnz	r5, 8005c32 <_printf_i+0x196>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f023 0320 	bic.w	r3, r3, #32
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	2310      	movs	r3, #16
 8005c34:	e7b0      	b.n	8005b98 <_printf_i+0xfc>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f043 0320 	orr.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	2378      	movs	r3, #120	; 0x78
 8005c40:	4828      	ldr	r0, [pc, #160]	; (8005ce4 <_printf_i+0x248>)
 8005c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c46:	e7e3      	b.n	8005c10 <_printf_i+0x174>
 8005c48:	065e      	lsls	r6, r3, #25
 8005c4a:	bf48      	it	mi
 8005c4c:	b2ad      	uxthmi	r5, r5
 8005c4e:	e7e6      	b.n	8005c1e <_printf_i+0x182>
 8005c50:	4616      	mov	r6, r2
 8005c52:	e7bb      	b.n	8005bcc <_printf_i+0x130>
 8005c54:	680b      	ldr	r3, [r1, #0]
 8005c56:	6826      	ldr	r6, [r4, #0]
 8005c58:	6960      	ldr	r0, [r4, #20]
 8005c5a:	1d1d      	adds	r5, r3, #4
 8005c5c:	600d      	str	r5, [r1, #0]
 8005c5e:	0635      	lsls	r5, r6, #24
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	d501      	bpl.n	8005c68 <_printf_i+0x1cc>
 8005c64:	6018      	str	r0, [r3, #0]
 8005c66:	e002      	b.n	8005c6e <_printf_i+0x1d2>
 8005c68:	0671      	lsls	r1, r6, #25
 8005c6a:	d5fb      	bpl.n	8005c64 <_printf_i+0x1c8>
 8005c6c:	8018      	strh	r0, [r3, #0]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	4616      	mov	r6, r2
 8005c74:	e7ba      	b.n	8005bec <_printf_i+0x150>
 8005c76:	680b      	ldr	r3, [r1, #0]
 8005c78:	1d1a      	adds	r2, r3, #4
 8005c7a:	600a      	str	r2, [r1, #0]
 8005c7c:	681e      	ldr	r6, [r3, #0]
 8005c7e:	6862      	ldr	r2, [r4, #4]
 8005c80:	2100      	movs	r1, #0
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7fa faac 	bl	80001e0 <memchr>
 8005c88:	b108      	cbz	r0, 8005c8e <_printf_i+0x1f2>
 8005c8a:	1b80      	subs	r0, r0, r6
 8005c8c:	6060      	str	r0, [r4, #4]
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	2300      	movs	r3, #0
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	e7a8      	b.n	8005bec <_printf_i+0x150>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	47d0      	blx	sl
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d0ab      	beq.n	8005c00 <_printf_i+0x164>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	079b      	lsls	r3, r3, #30
 8005cac:	d413      	bmi.n	8005cd6 <_printf_i+0x23a>
 8005cae:	68e0      	ldr	r0, [r4, #12]
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	4298      	cmp	r0, r3
 8005cb4:	bfb8      	it	lt
 8005cb6:	4618      	movlt	r0, r3
 8005cb8:	e7a4      	b.n	8005c04 <_printf_i+0x168>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	47d0      	blx	sl
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d09b      	beq.n	8005c00 <_printf_i+0x164>
 8005cc8:	3501      	adds	r5, #1
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	9903      	ldr	r1, [sp, #12]
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dcf2      	bgt.n	8005cba <_printf_i+0x21e>
 8005cd4:	e7eb      	b.n	8005cae <_printf_i+0x212>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	f104 0619 	add.w	r6, r4, #25
 8005cdc:	e7f5      	b.n	8005cca <_printf_i+0x22e>
 8005cde:	bf00      	nop
 8005ce0:	0800684f 	.word	0x0800684f
 8005ce4:	08006860 	.word	0x08006860

08005ce8 <_sbrk_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	; (8005d04 <_sbrk_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fc fd3a 	bl	800276c <_sbrk>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_sbrk_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_sbrk_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000598 	.word	0x20000598

08005d08 <__swbuf_r>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b118      	cbz	r0, 8005d1a <__swbuf_r+0x12>
 8005d12:	6983      	ldr	r3, [r0, #24]
 8005d14:	b90b      	cbnz	r3, 8005d1a <__swbuf_r+0x12>
 8005d16:	f000 f9d9 	bl	80060cc <__sinit>
 8005d1a:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <__swbuf_r+0x98>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d12b      	bne.n	8005d78 <__swbuf_r+0x70>
 8005d20:	686c      	ldr	r4, [r5, #4]
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	071a      	lsls	r2, r3, #28
 8005d2a:	d52f      	bpl.n	8005d8c <__swbuf_r+0x84>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b36b      	cbz	r3, 8005d8c <__swbuf_r+0x84>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1ac0      	subs	r0, r0, r3
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	b2f6      	uxtb	r6, r6
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	4637      	mov	r7, r6
 8005d3e:	dc04      	bgt.n	8005d4a <__swbuf_r+0x42>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f92e 	bl	8005fa4 <_fflush_r>
 8005d48:	bb30      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	701e      	strb	r6, [r3, #0]
 8005d58:	6963      	ldr	r3, [r4, #20]
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	d004      	beq.n	8005d6a <__swbuf_r+0x62>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d506      	bpl.n	8005d74 <__swbuf_r+0x6c>
 8005d66:	2e0a      	cmp	r6, #10
 8005d68:	d104      	bne.n	8005d74 <__swbuf_r+0x6c>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f919 	bl	8005fa4 <_fflush_r>
 8005d72:	b988      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d74:	4638      	mov	r0, r7
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <__swbuf_r+0x9c>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d101      	bne.n	8005d82 <__swbuf_r+0x7a>
 8005d7e:	68ac      	ldr	r4, [r5, #8]
 8005d80:	e7cf      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <__swbuf_r+0xa0>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	bf08      	it	eq
 8005d88:	68ec      	ldreq	r4, [r5, #12]
 8005d8a:	e7ca      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f80c 	bl	8005dac <__swsetup_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0cb      	beq.n	8005d30 <__swbuf_r+0x28>
 8005d98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d9c:	e7ea      	b.n	8005d74 <__swbuf_r+0x6c>
 8005d9e:	bf00      	nop
 8005da0:	08006894 	.word	0x08006894
 8005da4:	080068b4 	.word	0x080068b4
 8005da8:	08006874 	.word	0x08006874

08005dac <__swsetup_r>:
 8005dac:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <__swsetup_r+0xcc>)
 8005dae:	b570      	push	{r4, r5, r6, lr}
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	b125      	cbz	r5, 8005dc2 <__swsetup_r+0x16>
 8005db8:	69ab      	ldr	r3, [r5, #24]
 8005dba:	b913      	cbnz	r3, 8005dc2 <__swsetup_r+0x16>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f985 	bl	80060cc <__sinit>
 8005dc2:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <__swsetup_r+0xd0>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d10f      	bne.n	8005de8 <__swsetup_r+0x3c>
 8005dc8:	686c      	ldr	r4, [r5, #4]
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd0:	0719      	lsls	r1, r3, #28
 8005dd2:	d42c      	bmi.n	8005e2e <__swsetup_r+0x82>
 8005dd4:	06dd      	lsls	r5, r3, #27
 8005dd6:	d411      	bmi.n	8005dfc <__swsetup_r+0x50>
 8005dd8:	2309      	movs	r3, #9
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de6:	e03e      	b.n	8005e66 <__swsetup_r+0xba>
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <__swsetup_r+0xd4>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <__swsetup_r+0x46>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7eb      	b.n	8005dca <__swsetup_r+0x1e>
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <__swsetup_r+0xd8>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bf08      	it	eq
 8005df8:	68ec      	ldreq	r4, [r5, #12]
 8005dfa:	e7e6      	b.n	8005dca <__swsetup_r+0x1e>
 8005dfc:	0758      	lsls	r0, r3, #29
 8005dfe:	d512      	bpl.n	8005e26 <__swsetup_r+0x7a>
 8005e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e02:	b141      	cbz	r1, 8005e16 <__swsetup_r+0x6a>
 8005e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d002      	beq.n	8005e12 <__swsetup_r+0x66>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff fbd3 	bl	80055b8 <_free_r>
 8005e12:	2300      	movs	r3, #0
 8005e14:	6363      	str	r3, [r4, #52]	; 0x34
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0308 	orr.w	r3, r3, #8
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	b94b      	cbnz	r3, 8005e46 <__swsetup_r+0x9a>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3c:	d003      	beq.n	8005e46 <__swsetup_r+0x9a>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fa07 	bl	8006254 <__smakebuf_r>
 8005e46:	89a0      	ldrh	r0, [r4, #12]
 8005e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4c:	f010 0301 	ands.w	r3, r0, #1
 8005e50:	d00a      	beq.n	8005e68 <__swsetup_r+0xbc>
 8005e52:	2300      	movs	r3, #0
 8005e54:	60a3      	str	r3, [r4, #8]
 8005e56:	6963      	ldr	r3, [r4, #20]
 8005e58:	425b      	negs	r3, r3
 8005e5a:	61a3      	str	r3, [r4, #24]
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	b943      	cbnz	r3, 8005e72 <__swsetup_r+0xc6>
 8005e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e64:	d1ba      	bne.n	8005ddc <__swsetup_r+0x30>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	0781      	lsls	r1, r0, #30
 8005e6a:	bf58      	it	pl
 8005e6c:	6963      	ldrpl	r3, [r4, #20]
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	e7f4      	b.n	8005e5c <__swsetup_r+0xb0>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e7f7      	b.n	8005e66 <__swsetup_r+0xba>
 8005e76:	bf00      	nop
 8005e78:	20000010 	.word	0x20000010
 8005e7c:	08006894 	.word	0x08006894
 8005e80:	080068b4 	.word	0x080068b4
 8005e84:	08006874 	.word	0x08006874

08005e88 <abort>:
 8005e88:	b508      	push	{r3, lr}
 8005e8a:	2006      	movs	r0, #6
 8005e8c:	f000 fa56 	bl	800633c <raise>
 8005e90:	2001      	movs	r0, #1
 8005e92:	f7fc fbf3 	bl	800267c <_exit>
	...

08005e98 <__sflush_r>:
 8005e98:	898a      	ldrh	r2, [r1, #12]
 8005e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	0710      	lsls	r0, r2, #28
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	d458      	bmi.n	8005f58 <__sflush_r+0xc0>
 8005ea6:	684b      	ldr	r3, [r1, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dc05      	bgt.n	8005eb8 <__sflush_r+0x20>
 8005eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc02      	bgt.n	8005eb8 <__sflush_r+0x20>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d0f9      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	d032      	beq.n	8005f30 <__sflush_r+0x98>
 8005eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	075a      	lsls	r2, r3, #29
 8005ed0:	d505      	bpl.n	8005ede <__sflush_r+0x46>
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	1ac0      	subs	r0, r0, r3
 8005ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ed8:	b10b      	cbz	r3, 8005ede <__sflush_r+0x46>
 8005eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	d106      	bne.n	8005efe <__sflush_r+0x66>
 8005ef0:	6829      	ldr	r1, [r5, #0]
 8005ef2:	291d      	cmp	r1, #29
 8005ef4:	d82c      	bhi.n	8005f50 <__sflush_r+0xb8>
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <__sflush_r+0x108>)
 8005ef8:	40ca      	lsrs	r2, r1
 8005efa:	07d6      	lsls	r6, r2, #31
 8005efc:	d528      	bpl.n	8005f50 <__sflush_r+0xb8>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	d504      	bpl.n	8005f14 <__sflush_r+0x7c>
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	d101      	bne.n	8005f12 <__sflush_r+0x7a>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b903      	cbnz	r3, 8005f14 <__sflush_r+0x7c>
 8005f12:	6560      	str	r0, [r4, #84]	; 0x54
 8005f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d0ca      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <__sflush_r+0x92>
 8005f24:	4628      	mov	r0, r5
 8005f26:	f7ff fb47 	bl	80055b8 <_free_r>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f2e:	e7c1      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f30:	6a21      	ldr	r1, [r4, #32]
 8005f32:	2301      	movs	r3, #1
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b0      	blx	r6
 8005f38:	1c41      	adds	r1, r0, #1
 8005f3a:	d1c7      	bne.n	8005ecc <__sflush_r+0x34>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0c4      	beq.n	8005ecc <__sflush_r+0x34>
 8005f42:	2b1d      	cmp	r3, #29
 8005f44:	d001      	beq.n	8005f4a <__sflush_r+0xb2>
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	d101      	bne.n	8005f4e <__sflush_r+0xb6>
 8005f4a:	602f      	str	r7, [r5, #0]
 8005f4c:	e7b1      	b.n	8005eb2 <__sflush_r+0x1a>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e7ad      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f58:	690f      	ldr	r7, [r1, #16]
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d0a9      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005f5e:	0793      	lsls	r3, r2, #30
 8005f60:	680e      	ldr	r6, [r1, #0]
 8005f62:	bf08      	it	eq
 8005f64:	694b      	ldreq	r3, [r1, #20]
 8005f66:	600f      	str	r7, [r1, #0]
 8005f68:	bf18      	it	ne
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	eba6 0807 	sub.w	r8, r6, r7
 8005f70:	608b      	str	r3, [r1, #8]
 8005f72:	f1b8 0f00 	cmp.w	r8, #0
 8005f76:	dd9c      	ble.n	8005eb2 <__sflush_r+0x1a>
 8005f78:	6a21      	ldr	r1, [r4, #32]
 8005f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b0      	blx	r6
 8005f84:	2800      	cmp	r0, #0
 8005f86:	dc06      	bgt.n	8005f96 <__sflush_r+0xfe>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f94:	e78e      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f96:	4407      	add	r7, r0
 8005f98:	eba8 0800 	sub.w	r8, r8, r0
 8005f9c:	e7e9      	b.n	8005f72 <__sflush_r+0xda>
 8005f9e:	bf00      	nop
 8005fa0:	20400001 	.word	0x20400001

08005fa4 <_fflush_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b913      	cbnz	r3, 8005fb4 <_fflush_r+0x10>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	b118      	cbz	r0, 8005fbe <_fflush_r+0x1a>
 8005fb6:	6983      	ldr	r3, [r0, #24]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <_fflush_r+0x1a>
 8005fba:	f000 f887 	bl	80060cc <__sinit>
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <_fflush_r+0x6c>)
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	d11b      	bne.n	8005ffc <_fflush_r+0x58>
 8005fc4:	686c      	ldr	r4, [r5, #4]
 8005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ef      	beq.n	8005fae <_fflush_r+0xa>
 8005fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fd0:	07d0      	lsls	r0, r2, #31
 8005fd2:	d404      	bmi.n	8005fde <_fflush_r+0x3a>
 8005fd4:	0599      	lsls	r1, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_fflush_r+0x3a>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fda:	f000 f915 	bl	8006208 <__retarget_lock_acquire_recursive>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7ff ff59 	bl	8005e98 <__sflush_r>
 8005fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe8:	07da      	lsls	r2, r3, #31
 8005fea:	4605      	mov	r5, r0
 8005fec:	d4e0      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d4dd      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f000 f908 	bl	800620a <__retarget_lock_release_recursive>
 8005ffa:	e7d9      	b.n	8005fb0 <_fflush_r+0xc>
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <_fflush_r+0x70>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d101      	bne.n	8006006 <_fflush_r+0x62>
 8006002:	68ac      	ldr	r4, [r5, #8]
 8006004:	e7df      	b.n	8005fc6 <_fflush_r+0x22>
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <_fflush_r+0x74>)
 8006008:	429c      	cmp	r4, r3
 800600a:	bf08      	it	eq
 800600c:	68ec      	ldreq	r4, [r5, #12]
 800600e:	e7da      	b.n	8005fc6 <_fflush_r+0x22>
 8006010:	08006894 	.word	0x08006894
 8006014:	080068b4 	.word	0x080068b4
 8006018:	08006874 	.word	0x08006874

0800601c <std>:
 800601c:	2300      	movs	r3, #0
 800601e:	b510      	push	{r4, lr}
 8006020:	4604      	mov	r4, r0
 8006022:	e9c0 3300 	strd	r3, r3, [r0]
 8006026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602a:	6083      	str	r3, [r0, #8]
 800602c:	8181      	strh	r1, [r0, #12]
 800602e:	6643      	str	r3, [r0, #100]	; 0x64
 8006030:	81c2      	strh	r2, [r0, #14]
 8006032:	6183      	str	r3, [r0, #24]
 8006034:	4619      	mov	r1, r3
 8006036:	2208      	movs	r2, #8
 8006038:	305c      	adds	r0, #92	; 0x5c
 800603a:	f7ff f9e3 	bl	8005404 <memset>
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <std+0x38>)
 8006040:	6263      	str	r3, [r4, #36]	; 0x24
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <std+0x3c>)
 8006044:	62a3      	str	r3, [r4, #40]	; 0x28
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x40>)
 8006048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x44>)
 800604c:	6224      	str	r4, [r4, #32]
 800604e:	6323      	str	r3, [r4, #48]	; 0x30
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	08006375 	.word	0x08006375
 8006058:	08006397 	.word	0x08006397
 800605c:	080063cf 	.word	0x080063cf
 8006060:	080063f3 	.word	0x080063f3

08006064 <_cleanup_r>:
 8006064:	4901      	ldr	r1, [pc, #4]	; (800606c <_cleanup_r+0x8>)
 8006066:	f000 b8af 	b.w	80061c8 <_fwalk_reent>
 800606a:	bf00      	nop
 800606c:	08005fa5 	.word	0x08005fa5

08006070 <__sfmoreglue>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	1e4a      	subs	r2, r1, #1
 8006074:	2568      	movs	r5, #104	; 0x68
 8006076:	4355      	muls	r5, r2
 8006078:	460e      	mov	r6, r1
 800607a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800607e:	f7ff faeb 	bl	8005658 <_malloc_r>
 8006082:	4604      	mov	r4, r0
 8006084:	b140      	cbz	r0, 8006098 <__sfmoreglue+0x28>
 8006086:	2100      	movs	r1, #0
 8006088:	e9c0 1600 	strd	r1, r6, [r0]
 800608c:	300c      	adds	r0, #12
 800608e:	60a0      	str	r0, [r4, #8]
 8006090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006094:	f7ff f9b6 	bl	8005404 <memset>
 8006098:	4620      	mov	r0, r4
 800609a:	bd70      	pop	{r4, r5, r6, pc}

0800609c <__sfp_lock_acquire>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__sfp_lock_acquire+0x8>)
 800609e:	f000 b8b3 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	200005a4 	.word	0x200005a4

080060a8 <__sfp_lock_release>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sfp_lock_release+0x8>)
 80060aa:	f000 b8ae 	b.w	800620a <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	200005a4 	.word	0x200005a4

080060b4 <__sinit_lock_acquire>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sinit_lock_acquire+0x8>)
 80060b6:	f000 b8a7 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	2000059f 	.word	0x2000059f

080060c0 <__sinit_lock_release>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__sinit_lock_release+0x8>)
 80060c2:	f000 b8a2 	b.w	800620a <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	2000059f 	.word	0x2000059f

080060cc <__sinit>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
 80060d0:	f7ff fff0 	bl	80060b4 <__sinit_lock_acquire>
 80060d4:	69a3      	ldr	r3, [r4, #24]
 80060d6:	b11b      	cbz	r3, 80060e0 <__sinit+0x14>
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	f7ff bff0 	b.w	80060c0 <__sinit_lock_release>
 80060e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060e4:	6523      	str	r3, [r4, #80]	; 0x50
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <__sinit+0x68>)
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <__sinit+0x6c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80060ee:	42a3      	cmp	r3, r4
 80060f0:	bf04      	itt	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	61a3      	streq	r3, [r4, #24]
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f820 	bl	800613c <__sfp>
 80060fc:	6060      	str	r0, [r4, #4]
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f81c 	bl	800613c <__sfp>
 8006104:	60a0      	str	r0, [r4, #8]
 8006106:	4620      	mov	r0, r4
 8006108:	f000 f818 	bl	800613c <__sfp>
 800610c:	2200      	movs	r2, #0
 800610e:	60e0      	str	r0, [r4, #12]
 8006110:	2104      	movs	r1, #4
 8006112:	6860      	ldr	r0, [r4, #4]
 8006114:	f7ff ff82 	bl	800601c <std>
 8006118:	68a0      	ldr	r0, [r4, #8]
 800611a:	2201      	movs	r2, #1
 800611c:	2109      	movs	r1, #9
 800611e:	f7ff ff7d 	bl	800601c <std>
 8006122:	68e0      	ldr	r0, [r4, #12]
 8006124:	2202      	movs	r2, #2
 8006126:	2112      	movs	r1, #18
 8006128:	f7ff ff78 	bl	800601c <std>
 800612c:	2301      	movs	r3, #1
 800612e:	61a3      	str	r3, [r4, #24]
 8006130:	e7d2      	b.n	80060d8 <__sinit+0xc>
 8006132:	bf00      	nop
 8006134:	08006788 	.word	0x08006788
 8006138:	08006065 	.word	0x08006065

0800613c <__sfp>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4607      	mov	r7, r0
 8006140:	f7ff ffac 	bl	800609c <__sfp_lock_acquire>
 8006144:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <__sfp+0x84>)
 8006146:	681e      	ldr	r6, [r3, #0]
 8006148:	69b3      	ldr	r3, [r6, #24]
 800614a:	b913      	cbnz	r3, 8006152 <__sfp+0x16>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ffbd 	bl	80060cc <__sinit>
 8006152:	3648      	adds	r6, #72	; 0x48
 8006154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006158:	3b01      	subs	r3, #1
 800615a:	d503      	bpl.n	8006164 <__sfp+0x28>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	b30b      	cbz	r3, 80061a4 <__sfp+0x68>
 8006160:	6836      	ldr	r6, [r6, #0]
 8006162:	e7f7      	b.n	8006154 <__sfp+0x18>
 8006164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006168:	b9d5      	cbnz	r5, 80061a0 <__sfp+0x64>
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <__sfp+0x88>)
 800616c:	60e3      	str	r3, [r4, #12]
 800616e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006172:	6665      	str	r5, [r4, #100]	; 0x64
 8006174:	f000 f847 	bl	8006206 <__retarget_lock_init_recursive>
 8006178:	f7ff ff96 	bl	80060a8 <__sfp_lock_release>
 800617c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006184:	6025      	str	r5, [r4, #0]
 8006186:	61a5      	str	r5, [r4, #24]
 8006188:	2208      	movs	r2, #8
 800618a:	4629      	mov	r1, r5
 800618c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006190:	f7ff f938 	bl	8005404 <memset>
 8006194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800619c:	4620      	mov	r0, r4
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	3468      	adds	r4, #104	; 0x68
 80061a2:	e7d9      	b.n	8006158 <__sfp+0x1c>
 80061a4:	2104      	movs	r1, #4
 80061a6:	4638      	mov	r0, r7
 80061a8:	f7ff ff62 	bl	8006070 <__sfmoreglue>
 80061ac:	4604      	mov	r4, r0
 80061ae:	6030      	str	r0, [r6, #0]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d1d5      	bne.n	8006160 <__sfp+0x24>
 80061b4:	f7ff ff78 	bl	80060a8 <__sfp_lock_release>
 80061b8:	230c      	movs	r3, #12
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	e7ee      	b.n	800619c <__sfp+0x60>
 80061be:	bf00      	nop
 80061c0:	08006788 	.word	0x08006788
 80061c4:	ffff0001 	.word	0xffff0001

080061c8 <_fwalk_reent>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4606      	mov	r6, r0
 80061ce:	4688      	mov	r8, r1
 80061d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061d4:	2700      	movs	r7, #0
 80061d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061da:	f1b9 0901 	subs.w	r9, r9, #1
 80061de:	d505      	bpl.n	80061ec <_fwalk_reent+0x24>
 80061e0:	6824      	ldr	r4, [r4, #0]
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d1f7      	bne.n	80061d6 <_fwalk_reent+0xe>
 80061e6:	4638      	mov	r0, r7
 80061e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ec:	89ab      	ldrh	r3, [r5, #12]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d907      	bls.n	8006202 <_fwalk_reent+0x3a>
 80061f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061f6:	3301      	adds	r3, #1
 80061f8:	d003      	beq.n	8006202 <_fwalk_reent+0x3a>
 80061fa:	4629      	mov	r1, r5
 80061fc:	4630      	mov	r0, r6
 80061fe:	47c0      	blx	r8
 8006200:	4307      	orrs	r7, r0
 8006202:	3568      	adds	r5, #104	; 0x68
 8006204:	e7e9      	b.n	80061da <_fwalk_reent+0x12>

08006206 <__retarget_lock_init_recursive>:
 8006206:	4770      	bx	lr

08006208 <__retarget_lock_acquire_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_release_recursive>:
 800620a:	4770      	bx	lr

0800620c <__swhatbuf_r>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	460e      	mov	r6, r1
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	2900      	cmp	r1, #0
 8006216:	b096      	sub	sp, #88	; 0x58
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	da07      	bge.n	800622e <__swhatbuf_r+0x22>
 800621e:	2300      	movs	r3, #0
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	89b3      	ldrh	r3, [r6, #12]
 8006224:	061a      	lsls	r2, r3, #24
 8006226:	d410      	bmi.n	800624a <__swhatbuf_r+0x3e>
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	e00e      	b.n	800624c <__swhatbuf_r+0x40>
 800622e:	466a      	mov	r2, sp
 8006230:	f000 f906 	bl	8006440 <_fstat_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	dbf2      	blt.n	800621e <__swhatbuf_r+0x12>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800623e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006242:	425a      	negs	r2, r3
 8006244:	415a      	adcs	r2, r3
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	e7ee      	b.n	8006228 <__swhatbuf_r+0x1c>
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	2000      	movs	r0, #0
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	b016      	add	sp, #88	; 0x58
 8006252:	bd70      	pop	{r4, r5, r6, pc}

08006254 <__smakebuf_r>:
 8006254:	898b      	ldrh	r3, [r1, #12]
 8006256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006258:	079d      	lsls	r5, r3, #30
 800625a:	4606      	mov	r6, r0
 800625c:	460c      	mov	r4, r1
 800625e:	d507      	bpl.n	8006270 <__smakebuf_r+0x1c>
 8006260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	2301      	movs	r3, #1
 800626a:	6163      	str	r3, [r4, #20]
 800626c:	b002      	add	sp, #8
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	ab01      	add	r3, sp, #4
 8006272:	466a      	mov	r2, sp
 8006274:	f7ff ffca 	bl	800620c <__swhatbuf_r>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	4605      	mov	r5, r0
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff f9eb 	bl	8005658 <_malloc_r>
 8006282:	b948      	cbnz	r0, 8006298 <__smakebuf_r+0x44>
 8006284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006288:	059a      	lsls	r2, r3, #22
 800628a:	d4ef      	bmi.n	800626c <__smakebuf_r+0x18>
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	e7e3      	b.n	8006260 <__smakebuf_r+0xc>
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <__smakebuf_r+0x7c>)
 800629a:	62b3      	str	r3, [r6, #40]	; 0x28
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	6020      	str	r0, [r4, #0]
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	6163      	str	r3, [r4, #20]
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	6120      	str	r0, [r4, #16]
 80062ae:	b15b      	cbz	r3, 80062c8 <__smakebuf_r+0x74>
 80062b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 f8d5 	bl	8006464 <_isatty_r>
 80062ba:	b128      	cbz	r0, 80062c8 <__smakebuf_r+0x74>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	89a0      	ldrh	r0, [r4, #12]
 80062ca:	4305      	orrs	r5, r0
 80062cc:	81a5      	strh	r5, [r4, #12]
 80062ce:	e7cd      	b.n	800626c <__smakebuf_r+0x18>
 80062d0:	08006065 	.word	0x08006065

080062d4 <__malloc_lock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_lock+0x8>)
 80062d6:	f7ff bf97 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	200005a0 	.word	0x200005a0

080062e0 <__malloc_unlock>:
 80062e0:	4801      	ldr	r0, [pc, #4]	; (80062e8 <__malloc_unlock+0x8>)
 80062e2:	f7ff bf92 	b.w	800620a <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	200005a0 	.word	0x200005a0

080062ec <_raise_r>:
 80062ec:	291f      	cmp	r1, #31
 80062ee:	b538      	push	{r3, r4, r5, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	460d      	mov	r5, r1
 80062f4:	d904      	bls.n	8006300 <_raise_r+0x14>
 80062f6:	2316      	movs	r3, #22
 80062f8:	6003      	str	r3, [r0, #0]
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006302:	b112      	cbz	r2, 800630a <_raise_r+0x1e>
 8006304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006308:	b94b      	cbnz	r3, 800631e <_raise_r+0x32>
 800630a:	4620      	mov	r0, r4
 800630c:	f000 f830 	bl	8006370 <_getpid_r>
 8006310:	462a      	mov	r2, r5
 8006312:	4601      	mov	r1, r0
 8006314:	4620      	mov	r0, r4
 8006316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631a:	f000 b817 	b.w	800634c <_kill_r>
 800631e:	2b01      	cmp	r3, #1
 8006320:	d00a      	beq.n	8006338 <_raise_r+0x4c>
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	d103      	bne.n	800632e <_raise_r+0x42>
 8006326:	2316      	movs	r3, #22
 8006328:	6003      	str	r3, [r0, #0]
 800632a:	2001      	movs	r0, #1
 800632c:	e7e7      	b.n	80062fe <_raise_r+0x12>
 800632e:	2400      	movs	r4, #0
 8006330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006334:	4628      	mov	r0, r5
 8006336:	4798      	blx	r3
 8006338:	2000      	movs	r0, #0
 800633a:	e7e0      	b.n	80062fe <_raise_r+0x12>

0800633c <raise>:
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <raise+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f7ff bfd3 	b.w	80062ec <_raise_r>
 8006346:	bf00      	nop
 8006348:	20000010 	.word	0x20000010

0800634c <_kill_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d07      	ldr	r5, [pc, #28]	; (800636c <_kill_r+0x20>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	4611      	mov	r1, r2
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	f7fc f97f 	bl	800265c <_kill>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d102      	bne.n	8006368 <_kill_r+0x1c>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	b103      	cbz	r3, 8006368 <_kill_r+0x1c>
 8006366:	6023      	str	r3, [r4, #0]
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	bf00      	nop
 800636c:	20000598 	.word	0x20000598

08006370 <_getpid_r>:
 8006370:	f7fc b96c 	b.w	800264c <_getpid>

08006374 <__sread>:
 8006374:	b510      	push	{r4, lr}
 8006376:	460c      	mov	r4, r1
 8006378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637c:	f000 f894 	bl	80064a8 <_read_r>
 8006380:	2800      	cmp	r0, #0
 8006382:	bfab      	itete	ge
 8006384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006386:	89a3      	ldrhlt	r3, [r4, #12]
 8006388:	181b      	addge	r3, r3, r0
 800638a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638e:	bfac      	ite	ge
 8006390:	6563      	strge	r3, [r4, #84]	; 0x54
 8006392:	81a3      	strhlt	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__swrite>:
 8006396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	461f      	mov	r7, r3
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	05db      	lsls	r3, r3, #23
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4616      	mov	r6, r2
 80063a6:	d505      	bpl.n	80063b4 <__swrite+0x1e>
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	f000 f868 	bl	8006484 <_lseek_r>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	f000 b817 	b.w	80063fc <_write_r>

080063ce <__sseek>:
 80063ce:	b510      	push	{r4, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d6:	f000 f855 	bl	8006484 <_lseek_r>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	bf15      	itete	ne
 80063e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ea:	81a3      	strheq	r3, [r4, #12]
 80063ec:	bf18      	it	ne
 80063ee:	81a3      	strhne	r3, [r4, #12]
 80063f0:	bd10      	pop	{r4, pc}

080063f2 <__sclose>:
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 b813 	b.w	8006420 <_close_r>
	...

080063fc <_write_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d07      	ldr	r5, [pc, #28]	; (800641c <_write_r+0x20>)
 8006400:	4604      	mov	r4, r0
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	2200      	movs	r2, #0
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fc f95d 	bl	80026ca <_write>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_write_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_write_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000598 	.word	0x20000598

08006420 <_close_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d06      	ldr	r5, [pc, #24]	; (800643c <_close_r+0x1c>)
 8006424:	2300      	movs	r3, #0
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	f7fc f969 	bl	8002702 <_close>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_close_r+0x1a>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_close_r+0x1a>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000598 	.word	0x20000598

08006440 <_fstat_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_fstat_r+0x20>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f7fc f964 	bl	800271a <_fstat>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d102      	bne.n	800645c <_fstat_r+0x1c>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	b103      	cbz	r3, 800645c <_fstat_r+0x1c>
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	20000598 	.word	0x20000598

08006464 <_isatty_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	; (8006480 <_isatty_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fc f963 	bl	800273a <_isatty>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_isatty_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_isatty_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20000598 	.word	0x20000598

08006484 <_lseek_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	; (80064a4 <_lseek_r+0x20>)
 8006488:	4604      	mov	r4, r0
 800648a:	4608      	mov	r0, r1
 800648c:	4611      	mov	r1, r2
 800648e:	2200      	movs	r2, #0
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f7fc f95c 	bl	8002750 <_lseek>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_lseek_r+0x1e>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_lseek_r+0x1e>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	20000598 	.word	0x20000598

080064a8 <_read_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	; (80064c8 <_read_r+0x20>)
 80064ac:	4604      	mov	r4, r0
 80064ae:	4608      	mov	r0, r1
 80064b0:	4611      	mov	r1, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	602a      	str	r2, [r5, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f7fc f8ea 	bl	8002690 <_read>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_read_r+0x1e>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_read_r+0x1e>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	20000598 	.word	0x20000598

080064cc <sqrt>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	ed2d 8b02 	vpush	{d8}
 80064d2:	ec55 4b10 	vmov	r4, r5, d0
 80064d6:	f000 f82d 	bl	8006534 <__ieee754_sqrt>
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <sqrt+0x64>)
 80064dc:	eeb0 8a40 	vmov.f32	s16, s0
 80064e0:	eef0 8a60 	vmov.f32	s17, s1
 80064e4:	f993 3000 	ldrsb.w	r3, [r3]
 80064e8:	3301      	adds	r3, #1
 80064ea:	d019      	beq.n	8006520 <sqrt+0x54>
 80064ec:	4622      	mov	r2, r4
 80064ee:	462b      	mov	r3, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7fa fb1a 	bl	8000b2c <__aeabi_dcmpun>
 80064f8:	b990      	cbnz	r0, 8006520 <sqrt+0x54>
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa faeb 	bl	8000adc <__aeabi_dcmplt>
 8006506:	b158      	cbz	r0, 8006520 <sqrt+0x54>
 8006508:	f7fe ff52 	bl	80053b0 <__errno>
 800650c:	2321      	movs	r3, #33	; 0x21
 800650e:	6003      	str	r3, [r0, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	2300      	movs	r3, #0
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	f7fa f998 	bl	800084c <__aeabi_ddiv>
 800651c:	ec41 0b18 	vmov	d8, r0, r1
 8006520:	eeb0 0a48 	vmov.f32	s0, s16
 8006524:	eef0 0a68 	vmov.f32	s1, s17
 8006528:	ecbd 8b02 	vpop	{d8}
 800652c:	bd38      	pop	{r3, r4, r5, pc}
 800652e:	bf00      	nop
 8006530:	20000074 	.word	0x20000074

08006534 <__ieee754_sqrt>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	ec55 4b10 	vmov	r4, r5, d0
 800653c:	4e56      	ldr	r6, [pc, #344]	; (8006698 <__ieee754_sqrt+0x164>)
 800653e:	43ae      	bics	r6, r5
 8006540:	ee10 0a10 	vmov	r0, s0
 8006544:	ee10 3a10 	vmov	r3, s0
 8006548:	4629      	mov	r1, r5
 800654a:	462a      	mov	r2, r5
 800654c:	d110      	bne.n	8006570 <__ieee754_sqrt+0x3c>
 800654e:	ee10 2a10 	vmov	r2, s0
 8006552:	462b      	mov	r3, r5
 8006554:	f7fa f850 	bl	80005f8 <__aeabi_dmul>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7f9 fe94 	bl	800028c <__adddf3>
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	ec45 4b10 	vmov	d0, r4, r5
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	2d00      	cmp	r5, #0
 8006572:	dc10      	bgt.n	8006596 <__ieee754_sqrt+0x62>
 8006574:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006578:	4330      	orrs	r0, r6
 800657a:	d0f5      	beq.n	8006568 <__ieee754_sqrt+0x34>
 800657c:	b15d      	cbz	r5, 8006596 <__ieee754_sqrt+0x62>
 800657e:	ee10 2a10 	vmov	r2, s0
 8006582:	462b      	mov	r3, r5
 8006584:	ee10 0a10 	vmov	r0, s0
 8006588:	f7f9 fe7e 	bl	8000288 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	f7fa f95c 	bl	800084c <__aeabi_ddiv>
 8006594:	e7e6      	b.n	8006564 <__ieee754_sqrt+0x30>
 8006596:	1509      	asrs	r1, r1, #20
 8006598:	d076      	beq.n	8006688 <__ieee754_sqrt+0x154>
 800659a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800659e:	07ce      	lsls	r6, r1, #31
 80065a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80065a4:	bf5e      	ittt	pl
 80065a6:	0fda      	lsrpl	r2, r3, #31
 80065a8:	005b      	lslpl	r3, r3, #1
 80065aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80065ae:	0fda      	lsrs	r2, r3, #31
 80065b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80065b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80065b8:	2000      	movs	r0, #0
 80065ba:	106d      	asrs	r5, r5, #1
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	f04f 0e16 	mov.w	lr, #22
 80065c2:	4684      	mov	ip, r0
 80065c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c8:	eb0c 0401 	add.w	r4, ip, r1
 80065cc:	4294      	cmp	r4, r2
 80065ce:	bfde      	ittt	le
 80065d0:	1b12      	suble	r2, r2, r4
 80065d2:	eb04 0c01 	addle.w	ip, r4, r1
 80065d6:	1840      	addle	r0, r0, r1
 80065d8:	0052      	lsls	r2, r2, #1
 80065da:	f1be 0e01 	subs.w	lr, lr, #1
 80065de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80065e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80065e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065ea:	d1ed      	bne.n	80065c8 <__ieee754_sqrt+0x94>
 80065ec:	4671      	mov	r1, lr
 80065ee:	2720      	movs	r7, #32
 80065f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80065f4:	4562      	cmp	r2, ip
 80065f6:	eb04 060e 	add.w	r6, r4, lr
 80065fa:	dc02      	bgt.n	8006602 <__ieee754_sqrt+0xce>
 80065fc:	d113      	bne.n	8006626 <__ieee754_sqrt+0xf2>
 80065fe:	429e      	cmp	r6, r3
 8006600:	d811      	bhi.n	8006626 <__ieee754_sqrt+0xf2>
 8006602:	2e00      	cmp	r6, #0
 8006604:	eb06 0e04 	add.w	lr, r6, r4
 8006608:	da43      	bge.n	8006692 <__ieee754_sqrt+0x15e>
 800660a:	f1be 0f00 	cmp.w	lr, #0
 800660e:	db40      	blt.n	8006692 <__ieee754_sqrt+0x15e>
 8006610:	f10c 0801 	add.w	r8, ip, #1
 8006614:	eba2 020c 	sub.w	r2, r2, ip
 8006618:	429e      	cmp	r6, r3
 800661a:	bf88      	it	hi
 800661c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006620:	1b9b      	subs	r3, r3, r6
 8006622:	4421      	add	r1, r4
 8006624:	46c4      	mov	ip, r8
 8006626:	0052      	lsls	r2, r2, #1
 8006628:	3f01      	subs	r7, #1
 800662a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800662e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006632:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006636:	d1dd      	bne.n	80065f4 <__ieee754_sqrt+0xc0>
 8006638:	4313      	orrs	r3, r2
 800663a:	d006      	beq.n	800664a <__ieee754_sqrt+0x116>
 800663c:	1c4c      	adds	r4, r1, #1
 800663e:	bf13      	iteet	ne
 8006640:	3101      	addne	r1, #1
 8006642:	3001      	addeq	r0, #1
 8006644:	4639      	moveq	r1, r7
 8006646:	f021 0101 	bicne.w	r1, r1, #1
 800664a:	1043      	asrs	r3, r0, #1
 800664c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006650:	0849      	lsrs	r1, r1, #1
 8006652:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006656:	07c2      	lsls	r2, r0, #31
 8006658:	bf48      	it	mi
 800665a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800665e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006662:	460c      	mov	r4, r1
 8006664:	463d      	mov	r5, r7
 8006666:	e77f      	b.n	8006568 <__ieee754_sqrt+0x34>
 8006668:	0ada      	lsrs	r2, r3, #11
 800666a:	3815      	subs	r0, #21
 800666c:	055b      	lsls	r3, r3, #21
 800666e:	2a00      	cmp	r2, #0
 8006670:	d0fa      	beq.n	8006668 <__ieee754_sqrt+0x134>
 8006672:	02d7      	lsls	r7, r2, #11
 8006674:	d50a      	bpl.n	800668c <__ieee754_sqrt+0x158>
 8006676:	f1c1 0420 	rsb	r4, r1, #32
 800667a:	fa23 f404 	lsr.w	r4, r3, r4
 800667e:	1e4d      	subs	r5, r1, #1
 8006680:	408b      	lsls	r3, r1
 8006682:	4322      	orrs	r2, r4
 8006684:	1b41      	subs	r1, r0, r5
 8006686:	e788      	b.n	800659a <__ieee754_sqrt+0x66>
 8006688:	4608      	mov	r0, r1
 800668a:	e7f0      	b.n	800666e <__ieee754_sqrt+0x13a>
 800668c:	0052      	lsls	r2, r2, #1
 800668e:	3101      	adds	r1, #1
 8006690:	e7ef      	b.n	8006672 <__ieee754_sqrt+0x13e>
 8006692:	46e0      	mov	r8, ip
 8006694:	e7be      	b.n	8006614 <__ieee754_sqrt+0xe0>
 8006696:	bf00      	nop
 8006698:	7ff00000 	.word	0x7ff00000

0800669c <_gettimeofday>:
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <_gettimeofday+0xc>)
 800669e:	2258      	movs	r2, #88	; 0x58
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a6:	4770      	bx	lr
 80066a8:	20000598 	.word	0x20000598

080066ac <_init>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr

080066b8 <_fini>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr
